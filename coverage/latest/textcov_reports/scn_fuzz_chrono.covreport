_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1555|  62.4k|    {
 1556|  62.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  62.4k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  62.4k|{
 1503|  62.4k|    auto it = pctx.begin();
 1504|  62.4k|    auto end = pctx.end();
 1505|  62.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 1.78k, False: 60.6k]
  |  Branch (1505:22): [True: 0, False: 60.6k]
  ------------------
 1506|  1.78k|        pctx.on_error(
 1507|  1.78k|            "Format string without specifiers is not valid for this type");
 1508|  1.78k|        return it;
 1509|  1.78k|    }
 1510|       |
 1511|  60.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  60.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  60.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 60.6k, False: 0]
  ------------------
 1514|  60.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  60.6k|    }
 1516|  60.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  60.6k|    return end;
 1521|  60.6k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  751|   747k|        : localized(0),
  752|   747k|          subsec_set(0),
  753|   747k|          sec_set(0),
  754|   747k|          min_set(0),
  755|   747k|          hour24_set(0),
  756|   747k|          hour12_set(0),
  757|   747k|          mday_set(0),
  758|   747k|          mon_set(0),
  759|   747k|          full_year_set(0),
  760|   747k|          century_set(0),
  761|   747k|          short_year_set(0),
  762|   747k|          wday_set(0),
  763|   747k|          yday_set(0),
  764|   747k|          tzoff_set(0),
  765|   747k|          tzname_set(0),
  766|   747k|          am_pm_set(0),
  767|   747k|          epoch_ticks_set(0),
  768|   747k|          duration_ticks_set(0),
  769|   747k|          duration_suffix_set(0),
  770|   747k|          is_pm(0)
  771|   747k|    {
  772|   747k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  385|  60.6k|{
  386|  60.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 60.6k]
  |  Branch (386:25): [True: 0, False: 60.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  60.6k|    auto p = begin;
  392|  60.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  60.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 60.6k]
  |  Branch (401:21): [True: 0, False: 60.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   160k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 160k, False: 0]
  ------------------
  408|   160k|        auto ch = *p;
  409|   160k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 60.6k, False: 99.9k]
  ------------------
  410|  60.6k|            break;
  411|  60.6k|        }
  412|  99.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 17.8k, False: 82.0k]
  ------------------
  413|  17.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.8k]
  |  Branch (413:32): [True: 17.8k, False: 0]
  |  Branch (413:46): [True: 0, False: 17.8k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  17.8k|            const auto cp_len =
  421|  17.8k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  17.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 17.8k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  17.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 17.8k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  17.8k|            ++p;
  448|  17.8k|            continue;
  449|  17.8k|        }
  450|  82.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 17.8k, False: 64.2k]
  ------------------
  451|  17.8k|            handler.on_text(begin, p);
  452|  17.8k|        }
  453|  82.0k|        ++p;  // Consume '%'
  454|  82.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 82.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  82.0k|        ch = *p;
  460|  82.0k|        ++p;
  461|       |
  462|  82.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 82.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 82.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 82.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.57k, False: 78.4k]
  ------------------
  472|  3.57k|                handler.on_full_year();
  473|  3.57k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 82.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 82.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 82.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 82.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  9.37k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 9.37k, False: 72.6k]
  ------------------
  488|  9.37k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 82.0k]
  ------------------
  489|  9.37k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 82.0k]
  ------------------
  490|  9.37k|                handler.on_month_name();
  491|  9.37k|                break;
  492|  3.57k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 3.57k, False: 78.4k]
  ------------------
  493|  3.57k|                handler.on_dec_month();
  494|  3.57k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 82.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 82.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 82.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 82.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  3.57k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 3.57k, False: 78.4k]
  ------------------
  511|  3.57k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 82.0k]
  ------------------
  512|  3.57k|                handler.on_day_of_month();
  513|  3.57k|                break;
  514|       |            // Day of week
  515|  7.16k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.16k, False: 74.9k]
  ------------------
  516|  7.16k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 82.0k]
  ------------------
  517|  7.16k|                handler.on_weekday_name();
  518|  7.16k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 82.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 82.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  3.57k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 3.57k, False: 78.4k]
  ------------------
  527|  3.57k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 82.0k]
  ------------------
  528|  3.57k|                handler.on_24_hour();
  529|  3.57k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 82.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 82.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  3.57k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 3.57k, False: 78.4k]
  ------------------
  536|  3.57k|                handler.on_minute();
  537|  3.57k|                break;
  538|       |            // Second
  539|  3.57k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 3.57k, False: 78.4k]
  ------------------
  540|  3.57k|                handler.on_second();
  541|  3.57k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 82.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  3.57k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 3.57k, False: 78.4k]
  ------------------
  572|  3.57k|                handler.on_tz_offset();
  573|  3.57k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 82.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 82.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 82.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 82.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  8.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 8.17k, False: 73.8k]
  ------------------
  588|  8.17k|                handler.on_us_date();
  589|  8.17k|                break;
  590|  4.26k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 4.26k, False: 77.8k]
  ------------------
  591|  4.26k|                handler.on_iso_date();
  592|  4.26k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 82.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  21.5k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 21.5k, False: 60.5k]
  ------------------
  597|  21.5k|                handler.on_24_hour_time();
  598|  21.5k|                break;
  599|  6.53k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 6.53k, False: 75.5k]
  ------------------
  600|  6.53k|                handler.on_iso_time();
  601|  6.53k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 82.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 82.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 82.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 82.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 82.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 82.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 82.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 82.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  82.0k|        }
  713|  82.0k|        begin = p;
  714|       |
  715|  82.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 82.0k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|  82.0k|    }
  719|  60.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 60.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  60.6k|    handler.verify();
  723|  60.6k|    return p;
  724|  60.6k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1185|  17.8k|    {
 1186|  17.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1197|  22.1k|    {
 1198|  22.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1198:13): [Folded - Ignored]
  ------------------
 1199|      0|            on_error("Years not supported with this type");
 1200|      0|        }
 1201|  22.1k|        st.set_full_year(*this);
 1202|  22.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  22.1k|    {                                                                \
  778|  22.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  22.1k|        field##_set = 1;                                             \
  783|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1204|  15.3k|    {
 1205|  15.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1205:13): [Folded - Ignored]
  ------------------
 1206|      0|            on_error("Years not supported with this type");
 1207|      0|        }
 1208|  15.3k|        st.set_short_year(*this);
 1209|  15.3k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  15.3k|    {                                                                \
  778|  15.3k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  15.3k|        field##_set = 1;                                             \
  783|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1240|  18.0k|    {
 1241|  18.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1241:13): [Folded - Ignored]
  ------------------
 1242|      0|            on_error("Months not supported with this type");
 1243|      0|        }
 1244|  18.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1246|  37.4k|    {
 1247|  37.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1247:13): [Folded - Ignored]
  ------------------
 1248|      0|            on_error("Months not supported with this type");
 1249|      0|        }
 1250|  37.4k|        st.set_mon(*this);
 1251|  37.4k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1274|  37.4k|    {
 1275|  37.4k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1275:13): [Folded - Ignored]
  ------------------
 1276|      0|            on_error("Day-of-month not supported with this type");
 1277|      0|        }
 1278|  37.4k|        st.set_mday(*this);
 1279|  37.4k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1282|  14.2k|    {
 1283|  14.2k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1283:13): [Folded - Ignored]
  ------------------
 1284|      0|            on_error("Day-of-week not supported with this type");
 1285|      0|        }
 1286|  14.2k|        st.set_wday(*this);
 1287|  14.2k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  14.2k|    {                                                                \
  778|  14.2k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  14.2k|        field##_set = 1;                                             \
  783|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1304|  66.1k|    {
 1305|  66.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1305:13): [Folded - Ignored]
  ------------------
 1306|      0|            on_error("Hours not supported with this type");
 1307|      0|        }
 1308|  66.1k|        st.set_hour24(*this);
 1309|  66.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1318|  66.1k|    {
 1319|  66.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1319:13): [Folded - Ignored]
  ------------------
 1320|      0|            on_error("Minutes not supported with this type");
 1321|      0|        }
 1322|  66.1k|        st.set_min(*this);
 1323|  66.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1325|  24.9k|    {
 1326|  24.9k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1326:13): [Folded - Ignored]
  ------------------
 1327|      0|            on_error("Seconds not supported with this type");
 1328|      0|        }
 1329|  24.9k|        st.set_sec(*this);
 1330|  24.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  24.9k|    {                                                                \
  778|  24.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  24.9k|        field##_set = 1;                                             \
  783|  24.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1344|  10.7k|    {
 1345|  10.7k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1345:13): [Folded - Ignored]
  ------------------
 1346|      0|            on_error("Timezone offsets not supported with this type");
 1347|      0|        }
 1348|  10.7k|        st.set_tzoff(*this);
 1349|  10.7k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1377|  15.3k|    {
 1378|  15.3k|        on_dec_month();
 1379|  15.3k|        on_day_of_month();
 1380|  15.3k|        on_short_year();
 1381|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1383|  11.4k|    {
 1384|  11.4k|        on_full_year();
 1385|  11.4k|        on_dec_month();
 1386|  11.4k|        on_day_of_month();
 1387|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1395|  41.2k|    {
 1396|  41.2k|        on_24_hour();
 1397|  41.2k|        on_minute();
 1398|  41.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1400|  14.2k|    {
 1401|  14.2k|        on_24_hour();
 1402|  14.2k|        on_minute();
 1403|  14.2k|        on_second();
 1404|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1427|   125k|    {
 1428|   125k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1428:13): [Folded - Ignored]
  ------------------
 1429|   125k|            !st.subsec_set) {
  ------------------
  |  Branch (1429:13): [True: 0, False: 0]
  ------------------
 1430|      0|            on_error("Sub-seconds not set by the format string");
 1431|      0|        }
 1432|   125k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1432:13): [Folded - Ignored]
  |  Branch (1432:65): [True: 0, False: 0]
  ------------------
 1433|      0|            on_error("Seconds not set by the format string");
 1434|      0|        }
 1435|   125k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1435:13): [Folded - Ignored]
  |  Branch (1435:65): [True: 0, False: 0]
  ------------------
 1436|      0|            on_error("Minutes not set by the format string");
 1437|      0|        }
 1438|   125k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1438:13): [Folded - Ignored]
  ------------------
 1439|   125k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1439:13): [True: 0, False: 0]
  |  Branch (1439:31): [True: 0, False: 0]
  ------------------
 1440|      0|            on_error("Hours not set by the format string");
 1441|      0|        }
 1442|   125k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1442:13): [Folded - Ignored]
  |  Branch (1442:66): [True: 0, False: 0]
  ------------------
 1443|      0|            on_error("Day not set by the format string");
 1444|      0|        }
 1445|   125k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1445:13): [Folded - Ignored]
  |  Branch (1445:65): [True: 0, False: 0]
  ------------------
 1446|      0|            on_error("Month not set by the format string");
 1447|      0|        }
 1448|   125k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1448:13): [Folded - Ignored]
  ------------------
 1449|   125k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1449:13): [True: 0, False: 0]
  |  Branch (1449:34): [True: 0, False: 0]
  |  Branch (1449:53): [True: 0, False: 0]
  ------------------
 1450|      0|            on_error("Year not set by the format string");
 1451|      0|        }
 1452|   125k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1452:13): [Folded - Ignored]
  |  Branch (1452:66): [True: 0, False: 0]
  ------------------
 1453|      0|            on_error("Day-of-week not set by the format string");
 1454|      0|        }
 1455|   125k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1455:13): [Folded - Ignored]
  |  Branch (1455:66): [True: 0, False: 0]
  ------------------
 1456|      0|            on_error("Day-of-year not set by the format string");
 1457|      0|        }
 1458|   125k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1458:13): [Folded - Ignored]
  ------------------
 1459|   125k|            !st.tzoff_set) {
  ------------------
  |  Branch (1459:13): [True: 0, False: 0]
  ------------------
 1460|      0|            on_error("Timezone offset not set by the format string");
 1461|      0|        }
 1462|   125k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1462:13): [Folded - Ignored]
  ------------------
 1463|   125k|            !st.tzname_set) {
  ------------------
  |  Branch (1463:13): [True: 0, False: 0]
  ------------------
 1464|      0|            on_error("Timezone name not set by the format string");
 1465|      0|        }
 1466|   125k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1466:13): [Folded - Ignored]
  ------------------
 1467|   125k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1467:13): [True: 0, False: 0]
  ------------------
 1468|      0|            on_error("Duration tick count not set by the format string");
 1469|      0|        }
 1470|       |
 1471|   125k|        st.verify(*this);
 1472|   125k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  808|   125k|    {
  809|   125k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 66.1k, False: 59.1k]
  |  Branch (809:27): [True: 0, False: 66.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|   125k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 125k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|   125k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22.1k, False: 103k]
  |  Branch (827:31): [True: 0, False: 22.1k]
  |  Branch (827:46): [True: 0, False: 22.1k]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|   125k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 10.7k, False: 114k]
  |  Branch (833:26): [True: 0, False: 10.7k]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|   125k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 14.2k, False: 111k]
  |  Branch (838:26): [True: 37.4k, False: 73.5k]
  |  Branch (838:38): [True: 0, False: 73.5k]
  ------------------
  839|   125k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 51.7k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|   125k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1475|   314k|    {
 1476|   314k|        return err;
 1477|   314k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  60.6k|    {
 1563|  60.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  60.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1555|  62.4k|    {
 1556|  62.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  62.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  62.4k|{
 1503|  62.4k|    auto it = pctx.begin();
 1504|  62.4k|    auto end = pctx.end();
 1505|  62.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 1.78k, False: 60.6k]
  |  Branch (1505:22): [True: 0, False: 60.6k]
  ------------------
 1506|  1.78k|        pctx.on_error(
 1507|  1.78k|            "Format string without specifiers is not valid for this type");
 1508|  1.78k|        return it;
 1509|  1.78k|    }
 1510|       |
 1511|  60.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  60.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  60.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 60.6k, False: 0]
  ------------------
 1514|  60.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  60.6k|    }
 1516|  60.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  60.6k|    return end;
 1521|  60.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  385|  60.6k|{
  386|  60.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 60.6k]
  |  Branch (386:25): [True: 0, False: 60.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  60.6k|    auto p = begin;
  392|  60.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  60.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 60.6k]
  |  Branch (401:21): [True: 0, False: 60.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   160k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 160k, False: 0]
  ------------------
  408|   160k|        auto ch = *p;
  409|   160k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 60.6k, False: 99.9k]
  ------------------
  410|  60.6k|            break;
  411|  60.6k|        }
  412|  99.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 17.8k, False: 82.0k]
  ------------------
  413|  17.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.8k]
  |  Branch (413:32): [True: 17.8k, False: 0]
  |  Branch (413:46): [True: 0, False: 17.8k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  17.8k|            const auto cp_len =
  421|  17.8k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  17.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 17.8k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  17.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 17.8k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  17.8k|            ++p;
  448|  17.8k|            continue;
  449|  17.8k|        }
  450|  82.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 17.8k, False: 64.2k]
  ------------------
  451|  17.8k|            handler.on_text(begin, p);
  452|  17.8k|        }
  453|  82.0k|        ++p;  // Consume '%'
  454|  82.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 82.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  82.0k|        ch = *p;
  460|  82.0k|        ++p;
  461|       |
  462|  82.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 82.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 82.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 82.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.57k, False: 78.4k]
  ------------------
  472|  3.57k|                handler.on_full_year();
  473|  3.57k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 82.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 82.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 82.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 82.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  9.37k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 9.37k, False: 72.6k]
  ------------------
  488|  9.37k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 82.0k]
  ------------------
  489|  9.37k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 82.0k]
  ------------------
  490|  9.37k|                handler.on_month_name();
  491|  9.37k|                break;
  492|  3.57k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 3.57k, False: 78.4k]
  ------------------
  493|  3.57k|                handler.on_dec_month();
  494|  3.57k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 82.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 82.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 82.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 82.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  3.57k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 3.57k, False: 78.4k]
  ------------------
  511|  3.57k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 82.0k]
  ------------------
  512|  3.57k|                handler.on_day_of_month();
  513|  3.57k|                break;
  514|       |            // Day of week
  515|  7.16k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.16k, False: 74.9k]
  ------------------
  516|  7.16k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 82.0k]
  ------------------
  517|  7.16k|                handler.on_weekday_name();
  518|  7.16k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 82.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 82.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  3.57k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 3.57k, False: 78.4k]
  ------------------
  527|  3.57k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 82.0k]
  ------------------
  528|  3.57k|                handler.on_24_hour();
  529|  3.57k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 82.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 82.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  3.57k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 3.57k, False: 78.4k]
  ------------------
  536|  3.57k|                handler.on_minute();
  537|  3.57k|                break;
  538|       |            // Second
  539|  3.57k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 3.57k, False: 78.4k]
  ------------------
  540|  3.57k|                handler.on_second();
  541|  3.57k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 82.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  3.57k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 3.57k, False: 78.4k]
  ------------------
  572|  3.57k|                handler.on_tz_offset();
  573|  3.57k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 82.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 82.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 82.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 82.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  8.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 8.17k, False: 73.8k]
  ------------------
  588|  8.17k|                handler.on_us_date();
  589|  8.17k|                break;
  590|  4.26k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 4.26k, False: 77.8k]
  ------------------
  591|  4.26k|                handler.on_iso_date();
  592|  4.26k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 82.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  21.5k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 21.5k, False: 60.5k]
  ------------------
  597|  21.5k|                handler.on_24_hour_time();
  598|  21.5k|                break;
  599|  6.53k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 6.53k, False: 75.5k]
  ------------------
  600|  6.53k|                handler.on_iso_time();
  601|  6.53k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 82.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 82.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 82.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 82.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 82.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 82.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 82.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 82.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  82.0k|        }
  713|  82.0k|        begin = p;
  714|       |
  715|  82.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 82.0k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|  82.0k|    }
  719|  60.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 60.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  60.6k|    handler.verify();
  723|  60.6k|    return p;
  724|  60.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1185|  17.8k|    {
 1186|  17.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1197|  22.1k|    {
 1198|  22.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1198:13): [Folded - Ignored]
  ------------------
 1199|      0|            on_error("Years not supported with this type");
 1200|      0|        }
 1201|  22.1k|        st.set_full_year(*this);
 1202|  22.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  22.1k|    {                                                                \
  778|  22.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  22.1k|        field##_set = 1;                                             \
  783|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1204|  15.3k|    {
 1205|  15.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1205:13): [Folded - Ignored]
  ------------------
 1206|      0|            on_error("Years not supported with this type");
 1207|      0|        }
 1208|  15.3k|        st.set_short_year(*this);
 1209|  15.3k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  15.3k|    {                                                                \
  778|  15.3k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  15.3k|        field##_set = 1;                                             \
  783|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1240|  18.0k|    {
 1241|  18.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1241:13): [Folded - Ignored]
  ------------------
 1242|      0|            on_error("Months not supported with this type");
 1243|      0|        }
 1244|  18.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1246|  37.4k|    {
 1247|  37.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1247:13): [Folded - Ignored]
  ------------------
 1248|      0|            on_error("Months not supported with this type");
 1249|      0|        }
 1250|  37.4k|        st.set_mon(*this);
 1251|  37.4k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1274|  37.4k|    {
 1275|  37.4k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1275:13): [Folded - Ignored]
  ------------------
 1276|      0|            on_error("Day-of-month not supported with this type");
 1277|      0|        }
 1278|  37.4k|        st.set_mday(*this);
 1279|  37.4k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1282|  14.2k|    {
 1283|  14.2k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1283:13): [Folded - Ignored]
  ------------------
 1284|      0|            on_error("Day-of-week not supported with this type");
 1285|      0|        }
 1286|  14.2k|        st.set_wday(*this);
 1287|  14.2k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  14.2k|    {                                                                \
  778|  14.2k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  14.2k|        field##_set = 1;                                             \
  783|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1304|  66.1k|    {
 1305|  66.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1305:13): [Folded - Ignored]
  ------------------
 1306|      0|            on_error("Hours not supported with this type");
 1307|      0|        }
 1308|  66.1k|        st.set_hour24(*this);
 1309|  66.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1318|  66.1k|    {
 1319|  66.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1319:13): [Folded - Ignored]
  ------------------
 1320|      0|            on_error("Minutes not supported with this type");
 1321|      0|        }
 1322|  66.1k|        st.set_min(*this);
 1323|  66.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1325|  24.9k|    {
 1326|  24.9k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1326:13): [Folded - Ignored]
  ------------------
 1327|      0|            on_error("Seconds not supported with this type");
 1328|      0|        }
 1329|  24.9k|        st.set_sec(*this);
 1330|  24.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  24.9k|    {                                                                \
  778|  24.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  24.9k|        field##_set = 1;                                             \
  783|  24.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1344|  10.7k|    {
 1345|  10.7k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1345:13): [Folded - Ignored]
  ------------------
 1346|      0|            on_error("Timezone offsets not supported with this type");
 1347|      0|        }
 1348|  10.7k|        st.set_tzoff(*this);
 1349|  10.7k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1377|  15.3k|    {
 1378|  15.3k|        on_dec_month();
 1379|  15.3k|        on_day_of_month();
 1380|  15.3k|        on_short_year();
 1381|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1383|  11.4k|    {
 1384|  11.4k|        on_full_year();
 1385|  11.4k|        on_dec_month();
 1386|  11.4k|        on_day_of_month();
 1387|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1395|  41.2k|    {
 1396|  41.2k|        on_24_hour();
 1397|  41.2k|        on_minute();
 1398|  41.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1400|  14.2k|    {
 1401|  14.2k|        on_24_hour();
 1402|  14.2k|        on_minute();
 1403|  14.2k|        on_second();
 1404|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1427|   125k|    {
 1428|   125k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1428:13): [Folded - Ignored]
  ------------------
 1429|   125k|            !st.subsec_set) {
  ------------------
  |  Branch (1429:13): [True: 0, False: 0]
  ------------------
 1430|      0|            on_error("Sub-seconds not set by the format string");
 1431|      0|        }
 1432|   125k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1432:13): [Folded - Ignored]
  |  Branch (1432:65): [True: 0, False: 0]
  ------------------
 1433|      0|            on_error("Seconds not set by the format string");
 1434|      0|        }
 1435|   125k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1435:13): [Folded - Ignored]
  |  Branch (1435:65): [True: 0, False: 0]
  ------------------
 1436|      0|            on_error("Minutes not set by the format string");
 1437|      0|        }
 1438|   125k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1438:13): [Folded - Ignored]
  ------------------
 1439|   125k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1439:13): [True: 0, False: 0]
  |  Branch (1439:31): [True: 0, False: 0]
  ------------------
 1440|      0|            on_error("Hours not set by the format string");
 1441|      0|        }
 1442|   125k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1442:13): [Folded - Ignored]
  |  Branch (1442:66): [True: 0, False: 0]
  ------------------
 1443|      0|            on_error("Day not set by the format string");
 1444|      0|        }
 1445|   125k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1445:13): [Folded - Ignored]
  |  Branch (1445:65): [True: 0, False: 0]
  ------------------
 1446|      0|            on_error("Month not set by the format string");
 1447|      0|        }
 1448|   125k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1448:13): [Folded - Ignored]
  ------------------
 1449|   125k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1449:13): [True: 0, False: 0]
  |  Branch (1449:34): [True: 0, False: 0]
  |  Branch (1449:53): [True: 0, False: 0]
  ------------------
 1450|      0|            on_error("Year not set by the format string");
 1451|      0|        }
 1452|   125k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1452:13): [Folded - Ignored]
  |  Branch (1452:66): [True: 0, False: 0]
  ------------------
 1453|      0|            on_error("Day-of-week not set by the format string");
 1454|      0|        }
 1455|   125k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1455:13): [Folded - Ignored]
  |  Branch (1455:66): [True: 0, False: 0]
  ------------------
 1456|      0|            on_error("Day-of-year not set by the format string");
 1457|      0|        }
 1458|   125k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1458:13): [Folded - Ignored]
  ------------------
 1459|   125k|            !st.tzoff_set) {
  ------------------
  |  Branch (1459:13): [True: 0, False: 0]
  ------------------
 1460|      0|            on_error("Timezone offset not set by the format string");
 1461|      0|        }
 1462|   125k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1462:13): [Folded - Ignored]
  ------------------
 1463|   125k|            !st.tzname_set) {
  ------------------
  |  Branch (1463:13): [True: 0, False: 0]
  ------------------
 1464|      0|            on_error("Timezone name not set by the format string");
 1465|      0|        }
 1466|   125k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1466:13): [Folded - Ignored]
  ------------------
 1467|   125k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1467:13): [True: 0, False: 0]
  ------------------
 1468|      0|            on_error("Duration tick count not set by the format string");
 1469|      0|        }
 1470|       |
 1471|   125k|        st.verify(*this);
 1472|   125k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  808|   125k|    {
  809|   125k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 66.1k, False: 59.1k]
  |  Branch (809:27): [True: 0, False: 66.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|   125k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 125k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|   125k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22.1k, False: 103k]
  |  Branch (827:31): [True: 0, False: 22.1k]
  |  Branch (827:46): [True: 0, False: 22.1k]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|   125k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 10.7k, False: 114k]
  |  Branch (833:26): [True: 0, False: 10.7k]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|   125k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 14.2k, False: 111k]
  |  Branch (838:26): [True: 37.4k, False: 73.5k]
  |  Branch (838:38): [True: 0, False: 73.5k]
  ------------------
  839|   125k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 51.7k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|   125k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1475|   314k|    {
 1476|   314k|        return err;
 1477|   314k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  60.6k|    {
 1563|  60.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  60.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1555|  62.4k|    {
 1556|  62.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  62.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  62.4k|{
 1503|  62.4k|    auto it = pctx.begin();
 1504|  62.4k|    auto end = pctx.end();
 1505|  62.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 1.78k, False: 60.6k]
  |  Branch (1505:22): [True: 0, False: 60.6k]
  ------------------
 1506|  1.78k|        pctx.on_error(
 1507|  1.78k|            "Format string without specifiers is not valid for this type");
 1508|  1.78k|        return it;
 1509|  1.78k|    }
 1510|       |
 1511|  60.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  60.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  60.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 60.6k, False: 0]
  ------------------
 1514|  60.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  60.6k|    }
 1516|  60.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  60.6k|    return end;
 1521|  60.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  385|  60.6k|{
  386|  60.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 60.6k]
  |  Branch (386:25): [True: 0, False: 60.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  60.6k|    auto p = begin;
  392|  60.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 60.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  60.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 60.6k]
  |  Branch (401:21): [True: 0, False: 60.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   160k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 160k, False: 0]
  ------------------
  408|   160k|        auto ch = *p;
  409|   160k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 60.6k, False: 99.9k]
  ------------------
  410|  60.6k|            break;
  411|  60.6k|        }
  412|  99.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 17.8k, False: 82.0k]
  ------------------
  413|  17.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.8k]
  |  Branch (413:32): [True: 17.8k, False: 0]
  |  Branch (413:46): [True: 0, False: 17.8k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  17.8k|            const auto cp_len =
  421|  17.8k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  17.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 17.8k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  17.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 17.8k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  17.8k|            ++p;
  448|  17.8k|            continue;
  449|  17.8k|        }
  450|  82.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 17.8k, False: 64.2k]
  ------------------
  451|  17.8k|            handler.on_text(begin, p);
  452|  17.8k|        }
  453|  82.0k|        ++p;  // Consume '%'
  454|  82.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 82.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  82.0k|        ch = *p;
  460|  82.0k|        ++p;
  461|       |
  462|  82.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 82.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 82.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 82.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.57k, False: 78.4k]
  ------------------
  472|  3.57k|                handler.on_full_year();
  473|  3.57k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 82.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 82.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 82.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 82.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  9.37k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 9.37k, False: 72.6k]
  ------------------
  488|  9.37k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 82.0k]
  ------------------
  489|  9.37k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 82.0k]
  ------------------
  490|  9.37k|                handler.on_month_name();
  491|  9.37k|                break;
  492|  3.57k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 3.57k, False: 78.4k]
  ------------------
  493|  3.57k|                handler.on_dec_month();
  494|  3.57k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 82.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 82.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 82.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 82.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  3.57k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 3.57k, False: 78.4k]
  ------------------
  511|  3.57k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 82.0k]
  ------------------
  512|  3.57k|                handler.on_day_of_month();
  513|  3.57k|                break;
  514|       |            // Day of week
  515|  7.16k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.16k, False: 74.9k]
  ------------------
  516|  7.16k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 82.0k]
  ------------------
  517|  7.16k|                handler.on_weekday_name();
  518|  7.16k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 82.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 82.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  3.57k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 3.57k, False: 78.4k]
  ------------------
  527|  3.57k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 82.0k]
  ------------------
  528|  3.57k|                handler.on_24_hour();
  529|  3.57k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 82.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 82.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  3.57k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 3.57k, False: 78.4k]
  ------------------
  536|  3.57k|                handler.on_minute();
  537|  3.57k|                break;
  538|       |            // Second
  539|  3.57k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 3.57k, False: 78.4k]
  ------------------
  540|  3.57k|                handler.on_second();
  541|  3.57k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 82.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  3.57k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 3.57k, False: 78.4k]
  ------------------
  572|  3.57k|                handler.on_tz_offset();
  573|  3.57k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 82.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 82.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 82.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 82.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  8.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 8.17k, False: 73.8k]
  ------------------
  588|  8.17k|                handler.on_us_date();
  589|  8.17k|                break;
  590|  4.26k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 4.26k, False: 77.8k]
  ------------------
  591|  4.26k|                handler.on_iso_date();
  592|  4.26k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 82.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  21.5k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 21.5k, False: 60.5k]
  ------------------
  597|  21.5k|                handler.on_24_hour_time();
  598|  21.5k|                break;
  599|  6.53k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 6.53k, False: 75.5k]
  ------------------
  600|  6.53k|                handler.on_iso_time();
  601|  6.53k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 82.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 82.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 82.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 82.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 82.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 82.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 82.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 82.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  82.0k|        }
  713|  82.0k|        begin = p;
  714|       |
  715|  82.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 82.0k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|  82.0k|    }
  719|  60.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 60.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  60.6k|    handler.verify();
  723|  60.6k|    return p;
  724|  60.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1185|  17.8k|    {
 1186|  17.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1197|  22.1k|    {
 1198|  22.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1198:13): [Folded - Ignored]
  ------------------
 1199|      0|            on_error("Years not supported with this type");
 1200|      0|        }
 1201|  22.1k|        st.set_full_year(*this);
 1202|  22.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  22.1k|    {                                                                \
  778|  22.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  22.1k|        field##_set = 1;                                             \
  783|  22.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1204|  15.3k|    {
 1205|  15.3k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1205:13): [Folded - Ignored]
  ------------------
 1206|      0|            on_error("Years not supported with this type");
 1207|      0|        }
 1208|  15.3k|        st.set_short_year(*this);
 1209|  15.3k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  15.3k|    {                                                                \
  778|  15.3k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  15.3k|        field##_set = 1;                                             \
  783|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1240|  18.0k|    {
 1241|  18.0k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1241:13): [Folded - Ignored]
  ------------------
 1242|      0|            on_error("Months not supported with this type");
 1243|      0|        }
 1244|  18.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1246|  37.4k|    {
 1247|  37.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1247:13): [Folded - Ignored]
  ------------------
 1248|      0|            on_error("Months not supported with this type");
 1249|      0|        }
 1250|  37.4k|        st.set_mon(*this);
 1251|  37.4k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1274|  37.4k|    {
 1275|  37.4k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1275:13): [Folded - Ignored]
  ------------------
 1276|      0|            on_error("Day-of-month not supported with this type");
 1277|      0|        }
 1278|  37.4k|        st.set_mday(*this);
 1279|  37.4k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  37.4k|    {                                                                \
  778|  37.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  37.4k|        field##_set = 1;                                             \
  783|  37.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1282|  14.2k|    {
 1283|  14.2k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1283:13): [Folded - Ignored]
  ------------------
 1284|      0|            on_error("Day-of-week not supported with this type");
 1285|      0|        }
 1286|  14.2k|        st.set_wday(*this);
 1287|  14.2k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  14.2k|    {                                                                \
  778|  14.2k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  14.2k|        field##_set = 1;                                             \
  783|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1304|  66.1k|    {
 1305|  66.1k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1305:13): [Folded - Ignored]
  ------------------
 1306|      0|            on_error("Hours not supported with this type");
 1307|      0|        }
 1308|  66.1k|        st.set_hour24(*this);
 1309|  66.1k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1318|  66.1k|    {
 1319|  66.1k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1319:13): [Folded - Ignored]
  ------------------
 1320|      0|            on_error("Minutes not supported with this type");
 1321|      0|        }
 1322|  66.1k|        st.set_min(*this);
 1323|  66.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  66.1k|    {                                                                \
  778|  66.1k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  66.1k|        field##_set = 1;                                             \
  783|  66.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1325|  24.9k|    {
 1326|  24.9k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1326:13): [Folded - Ignored]
  ------------------
 1327|      0|            on_error("Seconds not supported with this type");
 1328|      0|        }
 1329|  24.9k|        st.set_sec(*this);
 1330|  24.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  24.9k|    {                                                                \
  778|  24.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  24.9k|        field##_set = 1;                                             \
  783|  24.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1344|  10.7k|    {
 1345|  10.7k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1345:13): [Folded - Ignored]
  ------------------
 1346|      0|            on_error("Timezone offsets not supported with this type");
 1347|      0|        }
 1348|  10.7k|        st.set_tzoff(*this);
 1349|  10.7k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1377|  15.3k|    {
 1378|  15.3k|        on_dec_month();
 1379|  15.3k|        on_day_of_month();
 1380|  15.3k|        on_short_year();
 1381|  15.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1383|  11.4k|    {
 1384|  11.4k|        on_full_year();
 1385|  11.4k|        on_dec_month();
 1386|  11.4k|        on_day_of_month();
 1387|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1395|  41.2k|    {
 1396|  41.2k|        on_24_hour();
 1397|  41.2k|        on_minute();
 1398|  41.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1400|  14.2k|    {
 1401|  14.2k|        on_24_hour();
 1402|  14.2k|        on_minute();
 1403|  14.2k|        on_second();
 1404|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1427|   125k|    {
 1428|   125k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1428:13): [Folded - Ignored]
  ------------------
 1429|   125k|            !st.subsec_set) {
  ------------------
  |  Branch (1429:13): [True: 0, False: 0]
  ------------------
 1430|      0|            on_error("Sub-seconds not set by the format string");
 1431|      0|        }
 1432|   125k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1432:13): [Folded - Ignored]
  |  Branch (1432:65): [True: 0, False: 0]
  ------------------
 1433|      0|            on_error("Seconds not set by the format string");
 1434|      0|        }
 1435|   125k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1435:13): [Folded - Ignored]
  |  Branch (1435:65): [True: 0, False: 0]
  ------------------
 1436|      0|            on_error("Minutes not set by the format string");
 1437|      0|        }
 1438|   125k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1438:13): [Folded - Ignored]
  ------------------
 1439|   125k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1439:13): [True: 0, False: 0]
  |  Branch (1439:31): [True: 0, False: 0]
  ------------------
 1440|      0|            on_error("Hours not set by the format string");
 1441|      0|        }
 1442|   125k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1442:13): [Folded - Ignored]
  |  Branch (1442:66): [True: 0, False: 0]
  ------------------
 1443|      0|            on_error("Day not set by the format string");
 1444|      0|        }
 1445|   125k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1445:13): [Folded - Ignored]
  |  Branch (1445:65): [True: 0, False: 0]
  ------------------
 1446|      0|            on_error("Month not set by the format string");
 1447|      0|        }
 1448|   125k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1448:13): [Folded - Ignored]
  ------------------
 1449|   125k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1449:13): [True: 0, False: 0]
  |  Branch (1449:34): [True: 0, False: 0]
  |  Branch (1449:53): [True: 0, False: 0]
  ------------------
 1450|      0|            on_error("Year not set by the format string");
 1451|      0|        }
 1452|   125k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1452:13): [Folded - Ignored]
  |  Branch (1452:66): [True: 0, False: 0]
  ------------------
 1453|      0|            on_error("Day-of-week not set by the format string");
 1454|      0|        }
 1455|   125k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1455:13): [Folded - Ignored]
  |  Branch (1455:66): [True: 0, False: 0]
  ------------------
 1456|      0|            on_error("Day-of-year not set by the format string");
 1457|      0|        }
 1458|   125k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1458:13): [Folded - Ignored]
  ------------------
 1459|   125k|            !st.tzoff_set) {
  ------------------
  |  Branch (1459:13): [True: 0, False: 0]
  ------------------
 1460|      0|            on_error("Timezone offset not set by the format string");
 1461|      0|        }
 1462|   125k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1462:13): [Folded - Ignored]
  ------------------
 1463|   125k|            !st.tzname_set) {
  ------------------
  |  Branch (1463:13): [True: 0, False: 0]
  ------------------
 1464|      0|            on_error("Timezone name not set by the format string");
 1465|      0|        }
 1466|   125k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1466:13): [Folded - Ignored]
  ------------------
 1467|   125k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1467:13): [True: 0, False: 0]
  ------------------
 1468|      0|            on_error("Duration tick count not set by the format string");
 1469|      0|        }
 1470|       |
 1471|   125k|        st.verify(*this);
 1472|   125k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  808|   125k|    {
  809|   125k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 66.1k, False: 59.1k]
  |  Branch (809:27): [True: 0, False: 66.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|   125k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 125k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|   125k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22.1k, False: 103k]
  |  Branch (827:31): [True: 0, False: 22.1k]
  |  Branch (827:46): [True: 0, False: 22.1k]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|   125k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 10.7k, False: 114k]
  |  Branch (833:26): [True: 0, False: 10.7k]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|   125k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 14.2k, False: 111k]
  |  Branch (838:26): [True: 37.4k, False: 73.5k]
  |  Branch (838:38): [True: 0, False: 73.5k]
  ------------------
  839|   125k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 51.7k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|   125k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1475|   314k|    {
 1476|   314k|        return err;
 1477|   314k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  60.6k|    {
 1563|  60.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  60.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1555|  68.2k|    {
 1556|  68.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  68.2k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  68.2k|{
 1503|  68.2k|    auto it = pctx.begin();
 1504|  68.2k|    auto end = pctx.end();
 1505|  68.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 3.56k, False: 64.6k]
  |  Branch (1505:22): [True: 0, False: 64.6k]
  ------------------
 1506|  3.56k|        pctx.on_error(
 1507|  3.56k|            "Format string without specifiers is not valid for this type");
 1508|  3.56k|        return it;
 1509|  3.56k|    }
 1510|       |
 1511|  64.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  64.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  64.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 64.6k, False: 0]
  ------------------
 1514|  64.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  64.6k|    }
 1516|  64.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  64.6k|    return end;
 1521|  64.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  385|  64.6k|{
  386|  64.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 64.6k]
  |  Branch (386:25): [True: 0, False: 64.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  64.6k|    auto p = begin;
  392|  64.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 64.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  64.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 64.6k]
  |  Branch (401:21): [True: 0, False: 64.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   207k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 207k, False: 0]
  ------------------
  408|   207k|        auto ch = *p;
  409|   207k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 64.6k, False: 143k]
  ------------------
  410|  64.6k|            break;
  411|  64.6k|        }
  412|   143k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 35.6k, False: 107k]
  ------------------
  413|  35.6k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 35.6k]
  |  Branch (413:32): [True: 35.6k, False: 0]
  |  Branch (413:46): [True: 0, False: 35.6k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  35.6k|            const auto cp_len =
  421|  35.6k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  35.6k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 35.6k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  35.6k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 35.6k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  35.6k|            ++p;
  448|  35.6k|            continue;
  449|  35.6k|        }
  450|   107k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 35.6k, False: 71.7k]
  ------------------
  451|  35.6k|            handler.on_text(begin, p);
  452|  35.6k|        }
  453|   107k|        ++p;  // Consume '%'
  454|   107k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 107k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|   107k|        ch = *p;
  460|   107k|        ++p;
  461|       |
  462|   107k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 107k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 107k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 107k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  7.12k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 7.12k, False: 100k]
  ------------------
  472|  7.12k|                handler.on_full_year();
  473|  7.12k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 107k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 107k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 107k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 107k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  8.69k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 8.69k, False: 98.7k]
  ------------------
  488|  8.69k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 107k]
  ------------------
  489|  8.69k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 107k]
  ------------------
  490|  8.69k|                handler.on_month_name();
  491|  8.69k|                break;
  492|  7.12k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 7.12k, False: 100k]
  ------------------
  493|  7.12k|                handler.on_dec_month();
  494|  7.12k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 107k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 107k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 107k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 107k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  7.12k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 7.12k, False: 100k]
  ------------------
  511|  7.12k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 107k]
  ------------------
  512|  7.12k|                handler.on_day_of_month();
  513|  7.12k|                break;
  514|       |            // Day of week
  515|  7.12k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.12k, False: 100k]
  ------------------
  516|  7.12k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 107k]
  ------------------
  517|  7.12k|                handler.on_weekday_name();
  518|  7.12k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 107k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 107k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  7.12k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 7.12k, False: 100k]
  ------------------
  527|  7.12k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 107k]
  ------------------
  528|  7.12k|                handler.on_24_hour();
  529|  7.12k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 107k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 107k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  7.12k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 7.12k, False: 100k]
  ------------------
  536|  7.12k|                handler.on_minute();
  537|  7.12k|                break;
  538|       |            // Second
  539|  7.12k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 7.12k, False: 100k]
  ------------------
  540|  7.12k|                handler.on_second();
  541|  7.12k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 107k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  7.12k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 7.12k, False: 100k]
  ------------------
  572|  7.12k|                handler.on_tz_offset();
  573|  7.12k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 107k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 107k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 107k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 107k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  7.15k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 7.15k, False: 100k]
  ------------------
  588|  7.15k|                handler.on_us_date();
  589|  7.15k|                break;
  590|  7.17k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 7.17k, False: 100k]
  ------------------
  591|  7.17k|                handler.on_iso_date();
  592|  7.17k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 107k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  19.7k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 19.7k, False: 87.7k]
  ------------------
  597|  19.7k|                handler.on_24_hour_time();
  598|  19.7k|                break;
  599|  7.66k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 7.66k, False: 99.7k]
  ------------------
  600|  7.66k|                handler.on_iso_time();
  601|  7.66k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 107k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 107k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 107k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 107k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 107k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 107k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 107k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 107k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|   107k|        }
  713|   107k|        begin = p;
  714|       |
  715|   107k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 107k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|   107k|    }
  719|  64.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 64.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  64.6k|    handler.verify();
  723|  64.6k|    return p;
  724|  64.6k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1185|  35.6k|    {
 1186|  35.6k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  64.6k|    {
 1563|  64.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  64.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1555|  68.2k|    {
 1556|  68.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  68.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  68.2k|{
 1503|  68.2k|    auto it = pctx.begin();
 1504|  68.2k|    auto end = pctx.end();
 1505|  68.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 3.56k, False: 64.6k]
  |  Branch (1505:22): [True: 0, False: 64.6k]
  ------------------
 1506|  3.56k|        pctx.on_error(
 1507|  3.56k|            "Format string without specifiers is not valid for this type");
 1508|  3.56k|        return it;
 1509|  3.56k|    }
 1510|       |
 1511|  64.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  64.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  64.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 64.6k, False: 0]
  ------------------
 1514|  64.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  64.6k|    }
 1516|  64.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  64.6k|    return end;
 1521|  64.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  385|  64.6k|{
  386|  64.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 64.6k]
  |  Branch (386:25): [True: 0, False: 64.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  64.6k|    auto p = begin;
  392|  64.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 64.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  64.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 64.6k]
  |  Branch (401:21): [True: 0, False: 64.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   207k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 207k, False: 0]
  ------------------
  408|   207k|        auto ch = *p;
  409|   207k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 64.6k, False: 143k]
  ------------------
  410|  64.6k|            break;
  411|  64.6k|        }
  412|   143k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 35.6k, False: 107k]
  ------------------
  413|  35.6k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 35.6k]
  |  Branch (413:32): [True: 35.6k, False: 0]
  |  Branch (413:46): [True: 0, False: 35.6k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  35.6k|            const auto cp_len =
  421|  35.6k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  35.6k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 35.6k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  35.6k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 35.6k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  35.6k|            ++p;
  448|  35.6k|            continue;
  449|  35.6k|        }
  450|   107k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 35.6k, False: 71.7k]
  ------------------
  451|  35.6k|            handler.on_text(begin, p);
  452|  35.6k|        }
  453|   107k|        ++p;  // Consume '%'
  454|   107k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 107k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|   107k|        ch = *p;
  460|   107k|        ++p;
  461|       |
  462|   107k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 107k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 107k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 107k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  7.12k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 7.12k, False: 100k]
  ------------------
  472|  7.12k|                handler.on_full_year();
  473|  7.12k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 107k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 107k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 107k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 107k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  8.69k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 8.69k, False: 98.7k]
  ------------------
  488|  8.69k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 107k]
  ------------------
  489|  8.69k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 107k]
  ------------------
  490|  8.69k|                handler.on_month_name();
  491|  8.69k|                break;
  492|  7.12k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 7.12k, False: 100k]
  ------------------
  493|  7.12k|                handler.on_dec_month();
  494|  7.12k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 107k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 107k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 107k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 107k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  7.12k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 7.12k, False: 100k]
  ------------------
  511|  7.12k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 107k]
  ------------------
  512|  7.12k|                handler.on_day_of_month();
  513|  7.12k|                break;
  514|       |            // Day of week
  515|  7.12k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.12k, False: 100k]
  ------------------
  516|  7.12k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 107k]
  ------------------
  517|  7.12k|                handler.on_weekday_name();
  518|  7.12k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 107k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 107k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  7.12k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 7.12k, False: 100k]
  ------------------
  527|  7.12k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 107k]
  ------------------
  528|  7.12k|                handler.on_24_hour();
  529|  7.12k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 107k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 107k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  7.12k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 7.12k, False: 100k]
  ------------------
  536|  7.12k|                handler.on_minute();
  537|  7.12k|                break;
  538|       |            // Second
  539|  7.12k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 7.12k, False: 100k]
  ------------------
  540|  7.12k|                handler.on_second();
  541|  7.12k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 107k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  7.12k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 7.12k, False: 100k]
  ------------------
  572|  7.12k|                handler.on_tz_offset();
  573|  7.12k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 107k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 107k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 107k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 107k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  7.15k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 7.15k, False: 100k]
  ------------------
  588|  7.15k|                handler.on_us_date();
  589|  7.15k|                break;
  590|  7.17k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 7.17k, False: 100k]
  ------------------
  591|  7.17k|                handler.on_iso_date();
  592|  7.17k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 107k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  19.7k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 19.7k, False: 87.7k]
  ------------------
  597|  19.7k|                handler.on_24_hour_time();
  598|  19.7k|                break;
  599|  7.66k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 7.66k, False: 99.7k]
  ------------------
  600|  7.66k|                handler.on_iso_time();
  601|  7.66k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 107k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 107k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 107k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 107k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 107k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 107k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 107k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 107k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|   107k|        }
  713|   107k|        begin = p;
  714|       |
  715|   107k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 107k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|   107k|    }
  719|  64.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 64.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  64.6k|    handler.verify();
  723|  64.6k|    return p;
  724|  64.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1185|  35.6k|    {
 1186|  35.6k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  64.6k|    {
 1563|  64.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  64.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1555|  68.2k|    {
 1556|  68.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1557|  68.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1502|  68.2k|{
 1503|  68.2k|    auto it = pctx.begin();
 1504|  68.2k|    auto end = pctx.end();
 1505|  68.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1505:9): [True: 3.56k, False: 64.6k]
  |  Branch (1505:22): [True: 0, False: 64.6k]
  ------------------
 1506|  3.56k|        pctx.on_error(
 1507|  3.56k|            "Format string without specifiers is not valid for this type");
 1508|  3.56k|        return it;
 1509|  3.56k|    }
 1510|       |
 1511|  64.6k|    auto checker = detail::tm_format_checker<T>{};
 1512|  64.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1513|  64.6k|    if (end != it) {
  ------------------
  |  Branch (1513:9): [True: 64.6k, False: 0]
  ------------------
 1514|  64.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1515|  64.6k|    }
 1516|  64.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
 1517|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1518|      0|        pctx.on_error(e.error().msg());
 1519|      0|    }
 1520|  64.6k|    return end;
 1521|  64.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  385|  64.6k|{
  386|  64.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 64.6k]
  |  Branch (386:25): [True: 0, False: 64.6k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  64.6k|    auto p = begin;
  392|  64.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 64.6k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  64.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 64.6k]
  |  Branch (401:21): [True: 0, False: 64.6k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|   207k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 207k, False: 0]
  ------------------
  408|   207k|        auto ch = *p;
  409|   207k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 64.6k, False: 143k]
  ------------------
  410|  64.6k|            break;
  411|  64.6k|        }
  412|   143k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 35.6k, False: 107k]
  ------------------
  413|  35.6k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 35.6k]
  |  Branch (413:32): [True: 35.6k, False: 0]
  |  Branch (413:46): [True: 0, False: 35.6k]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|  35.6k|            const auto cp_len =
  421|  35.6k|                detail::code_point_length_by_starting_code_unit(ch);
  422|  35.6k|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 35.6k]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|  35.6k|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 35.6k]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|  35.6k|            ++p;
  448|  35.6k|            continue;
  449|  35.6k|        }
  450|   107k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 35.6k, False: 71.7k]
  ------------------
  451|  35.6k|            handler.on_text(begin, p);
  452|  35.6k|        }
  453|   107k|        ++p;  // Consume '%'
  454|   107k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 107k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|   107k|        ch = *p;
  460|   107k|        ++p;
  461|       |
  462|   107k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 107k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 107k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 107k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  7.12k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 7.12k, False: 100k]
  ------------------
  472|  7.12k|                handler.on_full_year();
  473|  7.12k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 107k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 107k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 107k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 107k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  8.69k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 8.69k, False: 98.7k]
  ------------------
  488|  8.69k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 107k]
  ------------------
  489|  8.69k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 107k]
  ------------------
  490|  8.69k|                handler.on_month_name();
  491|  8.69k|                break;
  492|  7.12k|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 7.12k, False: 100k]
  ------------------
  493|  7.12k|                handler.on_dec_month();
  494|  7.12k|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 107k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 107k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 107k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 107k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|  7.12k|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 7.12k, False: 100k]
  ------------------
  511|  7.12k|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 107k]
  ------------------
  512|  7.12k|                handler.on_day_of_month();
  513|  7.12k|                break;
  514|       |            // Day of week
  515|  7.12k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 7.12k, False: 100k]
  ------------------
  516|  7.12k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 107k]
  ------------------
  517|  7.12k|                handler.on_weekday_name();
  518|  7.12k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 107k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 107k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|  7.12k|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 7.12k, False: 100k]
  ------------------
  527|  7.12k|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 107k]
  ------------------
  528|  7.12k|                handler.on_24_hour();
  529|  7.12k|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 107k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 107k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|  7.12k|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 7.12k, False: 100k]
  ------------------
  536|  7.12k|                handler.on_minute();
  537|  7.12k|                break;
  538|       |            // Second
  539|  7.12k|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 7.12k, False: 100k]
  ------------------
  540|  7.12k|                handler.on_second();
  541|  7.12k|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 107k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|  7.12k|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 7.12k, False: 100k]
  ------------------
  572|  7.12k|                handler.on_tz_offset();
  573|  7.12k|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 107k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 107k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 107k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 107k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  7.15k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 7.15k, False: 100k]
  ------------------
  588|  7.15k|                handler.on_us_date();
  589|  7.15k|                break;
  590|  7.17k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 7.17k, False: 100k]
  ------------------
  591|  7.17k|                handler.on_iso_date();
  592|  7.17k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 107k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  19.7k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 19.7k, False: 87.7k]
  ------------------
  597|  19.7k|                handler.on_24_hour_time();
  598|  19.7k|                break;
  599|  7.66k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 7.66k, False: 99.7k]
  ------------------
  600|  7.66k|                handler.on_iso_time();
  601|  7.66k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 107k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 107k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 107k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 107k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 107k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 107k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 107k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 107k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|   107k|        }
  713|   107k|        begin = p;
  714|       |
  715|   107k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 0, False: 107k]
  ------------------
  716|      0|            return p;
  717|      0|        }
  718|   107k|    }
  719|  64.6k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 64.6k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  64.6k|    handler.verify();
  723|  64.6k|    return p;
  724|  64.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1185|  35.6k|    {
 1186|  35.6k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1562|  64.6k|    {
 1563|  64.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1564|  64.6k|    }
_ZN3scn2v47weekdayC2Ej:
   74|  3.60k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (74:46): [True: 3.60k, False: 0]
  ------------------
   75|  3.60k|    {
   76|  3.60k|    }
_ZN3scn2v45monthC2Ej:
  122|  14.8k|        : m_value(static_cast<unsigned char>(d))
  123|  14.8k|    {
  124|  14.8k|    }
_ZN3scn2v46detail13assign_gmtoffI2tmEEvRT_NSt3__16chrono8durationIxNS6_5ratioILl1ELl1EEEEE:
  262|     72|{
  263|     72|    static_assert(std::is_same_v<T, std::tm>);
  264|     72|    if constexpr (mp_valid<has_tm_gmtoff_predicate, T>::value) {
  265|     72|        tm.tm_gmtoff = val.count();
  266|       |    }
  267|       |    else {
  268|       |        SCN_UNUSED(tm);
  269|       |        SCN_UNUSED(val);
  270|       |        SCN_EXPECT(false);
  271|       |        SCN_UNREACHABLE;
  272|       |    }
  273|     72|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  385|  32.3k|{
  386|  32.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 32.3k]
  |  Branch (386:25): [True: 0, False: 32.3k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  32.3k|    auto p = begin;
  392|  32.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.3k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  32.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 32.3k]
  |  Branch (401:21): [True: 0, False: 32.3k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  53.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 33.0k, False: 20.3k]
  ------------------
  408|  33.0k|        auto ch = *p;
  409|  33.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 33.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  33.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 350, False: 32.7k]
  ------------------
  413|    350|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 350]
  |  Branch (413:32): [True: 350, False: 0]
  |  Branch (413:46): [True: 0, False: 350]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    350|            const auto cp_len =
  421|    350|                detail::code_point_length_by_starting_code_unit(ch);
  422|    350|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 350]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    350|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 350]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    350|            ++p;
  448|    350|            continue;
  449|    350|        }
  450|  32.7k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 350, False: 32.3k]
  ------------------
  451|    350|            handler.on_text(begin, p);
  452|    350|        }
  453|  32.7k|        ++p;  // Consume '%'
  454|  32.7k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.7k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.7k|        ch = *p;
  460|  32.7k|        ++p;
  461|       |
  462|  32.7k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.7k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.7k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.7k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.73k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.73k, False: 30.9k]
  ------------------
  472|  1.73k|                handler.on_full_year();
  473|  1.73k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.7k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.7k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.7k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.7k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.61k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.61k, False: 28.1k]
  ------------------
  488|  4.61k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.7k]
  ------------------
  489|  4.61k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.7k]
  ------------------
  490|  4.61k|                handler.on_month_name();
  491|  4.61k|                break;
  492|    112|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 112, False: 32.6k]
  ------------------
  493|    112|                handler.on_dec_month();
  494|    112|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.7k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.7k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.7k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.7k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 32.6k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.7k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.53k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.53k, False: 29.1k]
  ------------------
  516|  3.53k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.7k]
  ------------------
  517|  3.53k|                handler.on_weekday_name();
  518|  3.53k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.7k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.7k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 32.6k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.7k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.7k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.7k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 32.6k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 32.6k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.7k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 32.6k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.7k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.7k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.7k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.7k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  6.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 6.17k, False: 26.5k]
  ------------------
  588|  6.17k|                handler.on_us_date();
  589|  6.17k|                break;
  590|  2.07k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.07k, False: 30.6k]
  ------------------
  591|  2.07k|                handler.on_iso_date();
  592|  2.07k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.7k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.9k, False: 21.7k]
  ------------------
  597|  10.9k|                handler.on_24_hour_time();
  598|  10.9k|                break;
  599|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.21k, False: 29.5k]
  ------------------
  600|  3.21k|                handler.on_iso_time();
  601|  3.21k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.7k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.7k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.7k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.7k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.7k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.7k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.7k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.7k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.7k|        }
  713|  32.7k|        begin = p;
  714|       |
  715|  32.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 11.9k, False: 20.7k]
  ------------------
  716|  11.9k|            return p;
  717|  11.9k|        }
  718|  32.7k|    }
  719|  20.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 20.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  20.3k|    handler.verify();
  723|  20.3k|    return p;
  724|  32.3k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  3.81k|    {                                                                \
  778|  3.81k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.81k|        field##_set = 1;                                             \
  783|  3.81k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  4.48k|    {                                                                \
  778|  4.48k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.48k|        field##_set = 1;                                             \
  783|  4.48k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  8.38k|    {                                                                \
  778|  8.38k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  8.38k|        field##_set = 1;                                             \
  783|  8.38k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  4.96k|    {                                                                \
  778|  4.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.96k|        field##_set = 1;                                             \
  783|  4.96k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.80k|    {                                                                \
  778|  1.80k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.80k|        field##_set = 1;                                             \
  783|  1.80k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.8k|    {                                                                \
  778|  11.8k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.8k|        field##_set = 1;                                             \
  783|  11.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.4k|    {                                                                \
  778|  11.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.4k|        field##_set = 1;                                             \
  783|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.54k|    {                                                                \
  778|  1.54k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.54k|        field##_set = 1;                                             \
  783|  1.54k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  808|  20.3k|    {
  809|  20.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.8k, False: 9.53k]
  |  Branch (809:27): [True: 0, False: 10.8k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  20.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 20.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  20.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 19.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  20.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 20.3k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  20.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.80k, False: 18.5k]
  |  Branch (838:26): [True: 4.82k, False: 13.7k]
  |  Branch (838:38): [True: 0, False: 13.7k]
  ------------------
  839|  20.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 6.63k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  20.3k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  875|  13.9k|    {
  876|  13.9k|        assert(!full_year_set);
  877|  13.9k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (877:13): [True: 13.9k, False: 0]
  |  Branch (877:31): [True: 0, False: 13.9k]
  ------------------
  878|      0|            year = century_value * 100 + short_year_value - offset;
  879|      0|        }
  880|  13.9k|        else if (short_year_set) {
  ------------------
  |  Branch (880:18): [True: 13.9k, False: 0]
  ------------------
  881|  13.9k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (881:17): [True: 180, False: 13.7k]
  ------------------
  882|    180|                year = 1900 + short_year_value - offset;
  883|    180|            }
  884|  13.7k|            else {
  885|  13.7k|                year = 2000 + short_year_value - offset;
  886|  13.7k|            }
  887|  13.9k|        }
  888|      0|        else if (century_set) {
  ------------------
  |  Branch (888:18): [True: 0, False: 0]
  ------------------
  889|      0|            year = 100 * century_value - offset;
  890|      0|        }
  891|  13.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  385|  27.5k|{
  386|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 27.5k]
  |  Branch (386:25): [True: 0, False: 27.5k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  27.5k|    auto p = begin;
  392|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 27.5k]
  |  Branch (401:21): [True: 0, False: 27.5k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  43.6k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 28.2k, False: 15.3k]
  ------------------
  408|  28.2k|        auto ch = *p;
  409|  28.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 28.2k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  28.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 346, False: 27.9k]
  ------------------
  413|    346|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 346]
  |  Branch (413:32): [True: 346, False: 0]
  |  Branch (413:46): [True: 0, False: 346]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    346|            const auto cp_len =
  421|    346|                detail::code_point_length_by_starting_code_unit(ch);
  422|    346|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 346]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    346|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 346]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    346|            ++p;
  448|    346|            continue;
  449|    346|        }
  450|  27.9k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 346, False: 27.5k]
  ------------------
  451|    346|            handler.on_text(begin, p);
  452|    346|        }
  453|  27.9k|        ++p;  // Consume '%'
  454|  27.9k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 27.9k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  27.9k|        ch = *p;
  460|  27.9k|        ++p;
  461|       |
  462|  27.9k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 27.9k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 27.9k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 27.9k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.76k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.76k, False: 26.1k]
  ------------------
  472|  1.76k|                handler.on_full_year();
  473|  1.76k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.9k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 27.9k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.9k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 27.9k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.64k, False: 23.2k]
  ------------------
  488|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 27.9k]
  ------------------
  489|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 27.9k]
  ------------------
  490|  4.64k|                handler.on_month_name();
  491|  4.64k|                break;
  492|    108|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 108, False: 27.8k]
  ------------------
  493|    108|                handler.on_dec_month();
  494|    108|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 27.9k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 27.9k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.9k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 27.9k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 27.8k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 27.9k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.54k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.54k, False: 24.3k]
  ------------------
  516|  3.54k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 27.9k]
  ------------------
  517|  3.54k|                handler.on_weekday_name();
  518|  3.54k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 27.9k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.9k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 27.8k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 27.9k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.9k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 27.9k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 27.8k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 27.9k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 27.9k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 27.9k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 27.9k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 27.9k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 27.9k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.9k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  1.89k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 1.89k, False: 26.0k]
  ------------------
  588|  1.89k|                handler.on_us_date();
  589|  1.89k|                break;
  590|  2.10k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.10k, False: 25.8k]
  ------------------
  591|  2.10k|                handler.on_iso_date();
  592|  2.10k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.9k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.3k, False: 17.5k]
  ------------------
  597|  10.3k|                handler.on_24_hour_time();
  598|  10.3k|                break;
  599|  3.23k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.23k, False: 24.6k]
  ------------------
  600|  3.23k|                handler.on_iso_time();
  601|  3.23k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 27.9k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.9k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 27.9k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 27.9k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 27.9k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 27.9k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 27.9k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 27.9k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  27.9k|        }
  713|  27.9k|        begin = p;
  714|       |
  715|  27.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 12.2k, False: 15.7k]
  ------------------
  716|  12.2k|            return p;
  717|  12.2k|        }
  718|  27.9k|    }
  719|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 15.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  15.3k|    handler.verify();
  723|  15.3k|    return p;
  724|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  3.86k|    {                                                                \
  778|  3.86k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.86k|        field##_set = 1;                                             \
  783|  3.86k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|    160|    {                                                                \
  778|    160|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    160|        field##_set = 1;                                             \
  783|    160|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  4.02k|    {                                                                \
  778|  4.02k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.02k|        field##_set = 1;                                             \
  783|  4.02k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|    626|    {                                                                \
  778|    626|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    626|        field##_set = 1;                                             \
  783|    626|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.79k|    {                                                                \
  778|  1.79k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.79k|        field##_set = 1;                                             \
  783|  1.79k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.9k|    {                                                                \
  778|  10.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.9k|        field##_set = 1;                                             \
  783|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.53k|    {                                                                \
  778|  1.53k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.53k|        field##_set = 1;                                             \
  783|  1.53k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  808|  15.3k|    {
  809|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.1k, False: 5.19k]
  |  Branch (809:27): [True: 0, False: 10.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 15.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 14.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 15.3k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.79k, False: 13.5k]
  |  Branch (838:26): [True: 504, False: 13.0k]
  |  Branch (838:38): [True: 0, False: 13.0k]
  ------------------
  839|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 2.29k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  385|  32.3k|{
  386|  32.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 32.3k]
  |  Branch (386:25): [True: 0, False: 32.3k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  32.3k|    auto p = begin;
  392|  32.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.3k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  32.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 32.3k]
  |  Branch (401:21): [True: 0, False: 32.3k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  53.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 33.0k, False: 20.3k]
  ------------------
  408|  33.0k|        auto ch = *p;
  409|  33.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 33.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  33.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 350, False: 32.7k]
  ------------------
  413|    350|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 350]
  |  Branch (413:32): [True: 350, False: 0]
  |  Branch (413:46): [True: 0, False: 350]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    350|            const auto cp_len =
  421|    350|                detail::code_point_length_by_starting_code_unit(ch);
  422|    350|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 350]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    350|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 350]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    350|            ++p;
  448|    350|            continue;
  449|    350|        }
  450|  32.7k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 350, False: 32.3k]
  ------------------
  451|    350|            handler.on_text(begin, p);
  452|    350|        }
  453|  32.7k|        ++p;  // Consume '%'
  454|  32.7k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.7k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.7k|        ch = *p;
  460|  32.7k|        ++p;
  461|       |
  462|  32.7k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.7k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.7k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.7k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.73k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.73k, False: 30.9k]
  ------------------
  472|  1.73k|                handler.on_full_year();
  473|  1.73k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.7k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.7k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.7k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.7k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.61k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.61k, False: 28.1k]
  ------------------
  488|  4.61k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.7k]
  ------------------
  489|  4.61k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.7k]
  ------------------
  490|  4.61k|                handler.on_month_name();
  491|  4.61k|                break;
  492|    112|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 112, False: 32.6k]
  ------------------
  493|    112|                handler.on_dec_month();
  494|    112|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.7k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.7k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.7k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.7k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 32.6k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.7k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.53k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.53k, False: 29.1k]
  ------------------
  516|  3.53k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.7k]
  ------------------
  517|  3.53k|                handler.on_weekday_name();
  518|  3.53k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.7k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.7k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 32.6k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.7k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.7k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.7k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 32.6k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 32.6k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.7k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 32.6k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.7k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.7k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.7k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.7k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  6.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 6.17k, False: 26.5k]
  ------------------
  588|  6.17k|                handler.on_us_date();
  589|  6.17k|                break;
  590|  2.07k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.07k, False: 30.6k]
  ------------------
  591|  2.07k|                handler.on_iso_date();
  592|  2.07k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.7k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.9k, False: 21.7k]
  ------------------
  597|  10.9k|                handler.on_24_hour_time();
  598|  10.9k|                break;
  599|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.21k, False: 29.5k]
  ------------------
  600|  3.21k|                handler.on_iso_time();
  601|  3.21k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.7k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.7k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.7k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.7k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.7k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.7k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.7k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.7k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.7k|        }
  713|  32.7k|        begin = p;
  714|       |
  715|  32.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 11.9k, False: 20.7k]
  ------------------
  716|  11.9k|            return p;
  717|  11.9k|        }
  718|  32.7k|    }
  719|  20.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 20.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  20.3k|    handler.verify();
  723|  20.3k|    return p;
  724|  32.3k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  3.81k|    {                                                                \
  778|  3.81k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.81k|        field##_set = 1;                                             \
  783|  3.81k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  4.48k|    {                                                                \
  778|  4.48k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.48k|        field##_set = 1;                                             \
  783|  4.48k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  8.38k|    {                                                                \
  778|  8.38k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  8.38k|        field##_set = 1;                                             \
  783|  8.38k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  4.96k|    {                                                                \
  778|  4.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.96k|        field##_set = 1;                                             \
  783|  4.96k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.80k|    {                                                                \
  778|  1.80k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.80k|        field##_set = 1;                                             \
  783|  1.80k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.8k|    {                                                                \
  778|  11.8k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.8k|        field##_set = 1;                                             \
  783|  11.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.4k|    {                                                                \
  778|  11.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.4k|        field##_set = 1;                                             \
  783|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.54k|    {                                                                \
  778|  1.54k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.54k|        field##_set = 1;                                             \
  783|  1.54k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  808|  20.3k|    {
  809|  20.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.8k, False: 9.53k]
  |  Branch (809:27): [True: 0, False: 10.8k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  20.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 20.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  20.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 19.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  20.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 20.3k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  20.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.80k, False: 18.5k]
  |  Branch (838:26): [True: 4.82k, False: 13.7k]
  |  Branch (838:38): [True: 0, False: 13.7k]
  ------------------
  839|  20.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 6.63k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  20.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  385|  27.5k|{
  386|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 27.5k]
  |  Branch (386:25): [True: 0, False: 27.5k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  27.5k|    auto p = begin;
  392|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 27.5k]
  |  Branch (401:21): [True: 0, False: 27.5k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  43.6k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 28.2k, False: 15.3k]
  ------------------
  408|  28.2k|        auto ch = *p;
  409|  28.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 28.2k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  28.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 346, False: 27.9k]
  ------------------
  413|    346|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 346]
  |  Branch (413:32): [True: 346, False: 0]
  |  Branch (413:46): [True: 0, False: 346]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    346|            const auto cp_len =
  421|    346|                detail::code_point_length_by_starting_code_unit(ch);
  422|    346|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 346]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    346|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 346]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    346|            ++p;
  448|    346|            continue;
  449|    346|        }
  450|  27.9k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 346, False: 27.5k]
  ------------------
  451|    346|            handler.on_text(begin, p);
  452|    346|        }
  453|  27.9k|        ++p;  // Consume '%'
  454|  27.9k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 27.9k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  27.9k|        ch = *p;
  460|  27.9k|        ++p;
  461|       |
  462|  27.9k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 27.9k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 27.9k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 27.9k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.76k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.76k, False: 26.1k]
  ------------------
  472|  1.76k|                handler.on_full_year();
  473|  1.76k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.9k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 27.9k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.9k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 27.9k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.64k, False: 23.2k]
  ------------------
  488|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 27.9k]
  ------------------
  489|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 27.9k]
  ------------------
  490|  4.64k|                handler.on_month_name();
  491|  4.64k|                break;
  492|    108|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 108, False: 27.8k]
  ------------------
  493|    108|                handler.on_dec_month();
  494|    108|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 27.9k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 27.9k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.9k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 27.9k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 27.8k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 27.9k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.54k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.54k, False: 24.3k]
  ------------------
  516|  3.54k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 27.9k]
  ------------------
  517|  3.54k|                handler.on_weekday_name();
  518|  3.54k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 27.9k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.9k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 27.8k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 27.9k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.9k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 27.9k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 27.8k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 27.9k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 27.9k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 27.9k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 27.9k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 27.9k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 27.9k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.9k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  1.89k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 1.89k, False: 26.0k]
  ------------------
  588|  1.89k|                handler.on_us_date();
  589|  1.89k|                break;
  590|  2.10k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.10k, False: 25.8k]
  ------------------
  591|  2.10k|                handler.on_iso_date();
  592|  2.10k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.9k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.3k, False: 17.5k]
  ------------------
  597|  10.3k|                handler.on_24_hour_time();
  598|  10.3k|                break;
  599|  3.23k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.23k, False: 24.6k]
  ------------------
  600|  3.23k|                handler.on_iso_time();
  601|  3.23k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 27.9k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.9k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 27.9k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 27.9k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 27.9k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 27.9k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 27.9k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 27.9k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  27.9k|        }
  713|  27.9k|        begin = p;
  714|       |
  715|  27.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 12.2k, False: 15.7k]
  ------------------
  716|  12.2k|            return p;
  717|  12.2k|        }
  718|  27.9k|    }
  719|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 15.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  15.3k|    handler.verify();
  723|  15.3k|    return p;
  724|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  3.86k|    {                                                                \
  778|  3.86k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.86k|        field##_set = 1;                                             \
  783|  3.86k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|    160|    {                                                                \
  778|    160|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    160|        field##_set = 1;                                             \
  783|    160|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  4.02k|    {                                                                \
  778|  4.02k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.02k|        field##_set = 1;                                             \
  783|  4.02k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|    626|    {                                                                \
  778|    626|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    626|        field##_set = 1;                                             \
  783|    626|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.79k|    {                                                                \
  778|  1.79k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.79k|        field##_set = 1;                                             \
  783|  1.79k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.9k|    {                                                                \
  778|  10.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.9k|        field##_set = 1;                                             \
  783|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.53k|    {                                                                \
  778|  1.53k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.53k|        field##_set = 1;                                             \
  783|  1.53k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  808|  15.3k|    {
  809|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.1k, False: 5.19k]
  |  Branch (809:27): [True: 0, False: 10.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 15.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 14.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 15.3k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.79k, False: 13.5k]
  |  Branch (838:26): [True: 504, False: 13.0k]
  |  Branch (838:38): [True: 0, False: 13.0k]
  ------------------
  839|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 2.29k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  385|  32.3k|{
  386|  32.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 32.3k]
  |  Branch (386:25): [True: 0, False: 32.3k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  32.3k|    auto p = begin;
  392|  32.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 32.3k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  32.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 32.3k]
  |  Branch (401:21): [True: 0, False: 32.3k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  53.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 33.0k, False: 20.3k]
  ------------------
  408|  33.0k|        auto ch = *p;
  409|  33.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 33.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  33.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 350, False: 32.7k]
  ------------------
  413|    350|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 350]
  |  Branch (413:32): [True: 350, False: 0]
  |  Branch (413:46): [True: 0, False: 350]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    350|            const auto cp_len =
  421|    350|                detail::code_point_length_by_starting_code_unit(ch);
  422|    350|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 350]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    350|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 350]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    350|            ++p;
  448|    350|            continue;
  449|    350|        }
  450|  32.7k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 350, False: 32.3k]
  ------------------
  451|    350|            handler.on_text(begin, p);
  452|    350|        }
  453|  32.7k|        ++p;  // Consume '%'
  454|  32.7k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.7k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.7k|        ch = *p;
  460|  32.7k|        ++p;
  461|       |
  462|  32.7k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.7k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.7k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.7k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.73k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.73k, False: 30.9k]
  ------------------
  472|  1.73k|                handler.on_full_year();
  473|  1.73k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.7k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.7k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.7k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.7k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.61k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.61k, False: 28.1k]
  ------------------
  488|  4.61k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.7k]
  ------------------
  489|  4.61k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.7k]
  ------------------
  490|  4.61k|                handler.on_month_name();
  491|  4.61k|                break;
  492|    112|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 112, False: 32.6k]
  ------------------
  493|    112|                handler.on_dec_month();
  494|    112|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.7k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.7k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.7k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.7k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 32.6k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.7k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.53k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.53k, False: 29.1k]
  ------------------
  516|  3.53k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.7k]
  ------------------
  517|  3.53k|                handler.on_weekday_name();
  518|  3.53k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.7k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.7k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 32.6k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.7k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.7k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.7k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 32.6k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 32.6k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.7k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 32.6k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.7k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.7k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.7k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.7k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  6.17k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 6.17k, False: 26.5k]
  ------------------
  588|  6.17k|                handler.on_us_date();
  589|  6.17k|                break;
  590|  2.07k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.07k, False: 30.6k]
  ------------------
  591|  2.07k|                handler.on_iso_date();
  592|  2.07k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.7k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.9k, False: 21.7k]
  ------------------
  597|  10.9k|                handler.on_24_hour_time();
  598|  10.9k|                break;
  599|  3.21k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.21k, False: 29.5k]
  ------------------
  600|  3.21k|                handler.on_iso_time();
  601|  3.21k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.7k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.7k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.7k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.7k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.7k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.7k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.7k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.7k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.7k|        }
  713|  32.7k|        begin = p;
  714|       |
  715|  32.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 11.9k, False: 20.7k]
  ------------------
  716|  11.9k|            return p;
  717|  11.9k|        }
  718|  32.7k|    }
  719|  20.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 20.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  20.3k|    handler.verify();
  723|  20.3k|    return p;
  724|  32.3k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  3.81k|    {                                                                \
  778|  3.81k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.81k|        field##_set = 1;                                             \
  783|  3.81k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  6.17k|    {                                                                \
  778|  6.17k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.17k|        field##_set = 1;                                             \
  783|  6.17k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  8.38k|    {                                                                \
  778|  8.38k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  8.38k|        field##_set = 1;                                             \
  783|  8.38k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  4.96k|    {                                                                \
  778|  4.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.96k|        field##_set = 1;                                             \
  783|  4.96k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.80k|    {                                                                \
  778|  1.80k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.80k|        field##_set = 1;                                             \
  783|  1.80k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.8k|    {                                                                \
  778|  11.8k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.8k|        field##_set = 1;                                             \
  783|  11.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  11.4k|    {                                                                \
  778|  11.4k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  11.4k|        field##_set = 1;                                             \
  783|  11.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|  1.54k|    {                                                                \
  778|  1.54k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.54k|        field##_set = 1;                                             \
  783|  1.54k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  777|     18|    {                                                                \
  778|     18|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     18|        field##_set = 1;                                             \
  783|     18|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  808|  20.3k|    {
  809|  20.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.8k, False: 9.53k]
  |  Branch (809:27): [True: 0, False: 10.8k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  20.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 20.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  20.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 19.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  20.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 4, False: 20.3k]
  |  Branch (833:26): [True: 0, False: 4]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  20.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.80k, False: 18.5k]
  |  Branch (838:26): [True: 4.82k, False: 13.7k]
  |  Branch (838:38): [True: 0, False: 13.7k]
  ------------------
  839|  20.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 6.63k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  20.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  385|  27.5k|{
  386|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 27.5k]
  |  Branch (386:25): [True: 0, False: 27.5k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  27.5k|    auto p = begin;
  392|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 27.5k]
  |  Branch (401:21): [True: 0, False: 27.5k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  43.6k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 28.2k, False: 15.3k]
  ------------------
  408|  28.2k|        auto ch = *p;
  409|  28.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 28.2k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  28.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 346, False: 27.9k]
  ------------------
  413|    346|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 346]
  |  Branch (413:32): [True: 346, False: 0]
  |  Branch (413:46): [True: 0, False: 346]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|    346|            const auto cp_len =
  421|    346|                detail::code_point_length_by_starting_code_unit(ch);
  422|    346|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 346]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|    346|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 346]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|    346|            ++p;
  448|    346|            continue;
  449|    346|        }
  450|  27.9k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 346, False: 27.5k]
  ------------------
  451|    346|            handler.on_text(begin, p);
  452|    346|        }
  453|  27.9k|        ++p;  // Consume '%'
  454|  27.9k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 27.9k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  27.9k|        ch = *p;
  460|  27.9k|        ++p;
  461|       |
  462|  27.9k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 27.9k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 27.9k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 27.9k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  1.76k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 1.76k, False: 26.1k]
  ------------------
  472|  1.76k|                handler.on_full_year();
  473|  1.76k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.9k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 27.9k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.9k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 27.9k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.64k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.64k, False: 23.2k]
  ------------------
  488|  4.64k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 27.9k]
  ------------------
  489|  4.64k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 27.9k]
  ------------------
  490|  4.64k|                handler.on_month_name();
  491|  4.64k|                break;
  492|    108|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 108, False: 27.8k]
  ------------------
  493|    108|                handler.on_dec_month();
  494|    108|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 27.9k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 27.9k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.9k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 27.9k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     94|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 94, False: 27.8k]
  ------------------
  511|     94|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 27.9k]
  ------------------
  512|     94|                handler.on_day_of_month();
  513|     94|                break;
  514|       |            // Day of week
  515|  3.54k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.54k, False: 24.3k]
  ------------------
  516|  3.54k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 27.9k]
  ------------------
  517|  3.54k|                handler.on_weekday_name();
  518|  3.54k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 27.9k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.9k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     86|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 86, False: 27.8k]
  ------------------
  527|     86|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 27.9k]
  ------------------
  528|     86|                handler.on_24_hour();
  529|     86|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.9k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 27.9k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|     32|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 32, False: 27.8k]
  ------------------
  536|     32|                handler.on_minute();
  537|     32|                break;
  538|       |            // Second
  539|     26|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 26, False: 27.9k]
  ------------------
  540|     26|                handler.on_second();
  541|     26|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 27.9k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|     22|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 22, False: 27.9k]
  ------------------
  572|     22|                handler.on_tz_offset();
  573|     22|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 27.9k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 27.9k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 27.9k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.9k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  1.89k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 1.89k, False: 26.0k]
  ------------------
  588|  1.89k|                handler.on_us_date();
  589|  1.89k|                break;
  590|  2.10k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 2.10k, False: 25.8k]
  ------------------
  591|  2.10k|                handler.on_iso_date();
  592|  2.10k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.9k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  10.3k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 10.3k, False: 17.5k]
  ------------------
  597|  10.3k|                handler.on_24_hour_time();
  598|  10.3k|                break;
  599|  3.23k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.23k, False: 24.6k]
  ------------------
  600|  3.23k|                handler.on_iso_time();
  601|  3.23k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 27.9k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.9k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 27.9k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 27.9k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 27.9k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 27.9k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 27.9k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 27.9k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  27.9k|        }
  713|  27.9k|        begin = p;
  714|       |
  715|  27.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 12.2k, False: 15.7k]
  ------------------
  716|  12.2k|            return p;
  717|  12.2k|        }
  718|  27.9k|    }
  719|  15.3k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 15.3k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  15.3k|    handler.verify();
  723|  15.3k|    return p;
  724|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  3.86k|    {                                                                \
  778|  3.86k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.86k|        field##_set = 1;                                             \
  783|  3.86k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.89k|    {                                                                \
  778|  1.89k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.89k|        field##_set = 1;                                             \
  783|  1.89k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  4.02k|    {                                                                \
  778|  4.02k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  4.02k|        field##_set = 1;                                             \
  783|  4.02k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|    626|    {                                                                \
  778|    626|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    626|        field##_set = 1;                                             \
  783|    626|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.79k|    {                                                                \
  778|  1.79k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.79k|        field##_set = 1;                                             \
  783|  1.79k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.9k|    {                                                                \
  778|  10.9k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.9k|        field##_set = 1;                                             \
  783|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  10.7k|    {                                                                \
  778|  10.7k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  10.7k|        field##_set = 1;                                             \
  783|  10.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|  1.53k|    {                                                                \
  778|  1.53k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.53k|        field##_set = 1;                                             \
  783|  1.53k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  777|     18|    {                                                                \
  778|     18|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     18|        field##_set = 1;                                             \
  783|     18|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  808|  15.3k|    {
  809|  15.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 10.1k, False: 5.19k]
  |  Branch (809:27): [True: 0, False: 10.1k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  15.3k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 15.3k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  15.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 356, False: 14.9k]
  |  Branch (827:31): [True: 0, False: 356]
  |  Branch (827:46): [True: 0, False: 356]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  15.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 4, False: 15.3k]
  |  Branch (833:26): [True: 0, False: 4]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  15.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 1.79k, False: 13.5k]
  |  Branch (838:26): [True: 504, False: 13.0k]
  |  Branch (838:38): [True: 0, False: 13.0k]
  ------------------
  839|  15.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 2.29k]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  15.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|     22|    {                                                                \
  778|     22|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     22|        field##_set = 1;                                             \
  783|     22|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|     22|    {                                                                \
  778|     22|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     22|        field##_set = 1;                                             \
  783|     22|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|     22|    {                                                                \
  778|     22|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     22|        field##_set = 1;                                             \
  783|     22|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|     22|    {                                                                \
  778|     22|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|     22|        field##_set = 1;                                             \
  783|     22|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  3.52k|    {                                                                \
  778|  3.52k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.52k|        field##_set = 1;                                             \
  783|  3.52k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  385|  31.9k|{
  386|  31.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (386:9): [True: 0, False: 31.9k]
  |  Branch (386:25): [True: 0, False: 31.9k]
  ------------------
  387|      0|        handler.on_error("chrono format specs can't be empty");
  388|      0|        return begin;
  389|      0|    }
  390|       |
  391|  31.9k|    auto p = begin;
  392|  31.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.9k]
  ------------------
  393|      0|        handler.on_localized();
  394|      0|        begin = ++p;
  395|      0|        if (p == end) {
  ------------------
  |  Branch (395:13): [True: 0, False: 0]
  ------------------
  396|      0|            handler.on_error("chrono format specs can't be empty");
  397|      0|            return p;
  398|      0|        }
  399|      0|    }
  400|       |
  401|  31.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (401:9): [True: 0, False: 31.9k]
  |  Branch (401:21): [True: 0, False: 31.9k]
  ------------------
  402|      0|        handler.on_error(
  403|      0|            "chrono format spec must start with a conversion specifier (%...)");
  404|      0|        return p;
  405|      0|    }
  406|       |
  407|  39.4k|    while (p != end) {
  ------------------
  |  Branch (407:12): [True: 32.0k, False: 7.38k]
  ------------------
  408|  32.0k|        auto ch = *p;
  409|  32.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (409:13): [True: 0, False: 32.0k]
  ------------------
  410|      0|            break;
  411|      0|        }
  412|  32.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (412:13): [True: 86, False: 32.0k]
  ------------------
  413|     86|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (413:17): [True: 0, False: 86]
  |  Branch (413:32): [True: 86, False: 0]
  |  Branch (413:46): [True: 0, False: 86]
  ------------------
  414|       |                // Simple ASCII space
  415|      0|                handler.on_text(begin, p);
  416|      0|                handler.on_whitespace();
  417|      0|                begin = p += 1;
  418|      0|                continue;
  419|      0|            }
  420|     86|            const auto cp_len =
  421|     86|                detail::code_point_length_by_starting_code_unit(ch);
  422|     86|            if (cp_len == 0) {
  ------------------
  |  Branch (422:17): [True: 0, False: 86]
  ------------------
  423|      0|                handler.on_error("Invalid literal character");
  424|      0|                return p;
  425|      0|            }
  426|     86|            if (cp_len > 1) {
  ------------------
  |  Branch (426:17): [True: 0, False: 86]
  ------------------
  427|       |                // Multi code unit code point,
  428|       |                // possible space
  429|      0|                auto cp_start_p = p;
  430|      0|                CharT buffer[4] = {};
  431|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (431:41): [True: 0, False: 0]
  ------------------
  432|      0|                    if (p == end) {
  ------------------
  |  Branch (432:25): [True: 0, False: 0]
  ------------------
  433|      0|                        handler.on_error("Invalid literal character");
  434|      0|                        return p;
  435|      0|                    }
  436|      0|                    buffer[i] = *p;
  437|      0|                    ++p;
  438|      0|                }
  439|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (439:21): [True: 0, False: 0]
  ------------------
  440|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  441|      0|                    handler.on_text(begin, cp_start_p);
  442|      0|                    handler.on_whitespace();
  443|      0|                    begin = p;
  444|      0|                    continue;
  445|      0|                }
  446|      0|            }
  447|     86|            ++p;
  448|     86|            continue;
  449|     86|        }
  450|  32.0k|        if (begin != p) {
  ------------------
  |  Branch (450:13): [True: 86, False: 31.9k]
  ------------------
  451|     86|            handler.on_text(begin, p);
  452|     86|        }
  453|  32.0k|        ++p;  // Consume '%'
  454|  32.0k|        if (p == end) {
  ------------------
  |  Branch (454:13): [True: 0, False: 32.0k]
  ------------------
  455|      0|            handler.on_error("Unexpected end of chrono format string");
  456|      0|            return p;
  457|      0|        }
  458|       |
  459|  32.0k|        ch = *p;
  460|  32.0k|        ++p;
  461|       |
  462|  32.0k|        switch (ch) {
  463|      0|            case CharT{'%'}:
  ------------------
  |  Branch (463:13): [True: 0, False: 32.0k]
  ------------------
  464|      0|                handler.on_text(&ch, &ch + 1);
  465|      0|                break;
  466|      0|            case CharT{'n'}:
  ------------------
  |  Branch (466:13): [True: 0, False: 32.0k]
  ------------------
  467|      0|            case CharT{'t'}:
  ------------------
  |  Branch (467:13): [True: 0, False: 32.0k]
  ------------------
  468|      0|                handler.on_whitespace();
  469|      0|                break;
  470|       |            // Year
  471|  3.51k|            case CharT{'Y'}:
  ------------------
  |  Branch (471:13): [True: 3.51k, False: 28.4k]
  ------------------
  472|  3.51k|                handler.on_full_year();
  473|  3.51k|                break;
  474|      0|            case CharT{'y'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 32.0k]
  ------------------
  475|      0|                handler.on_short_year();
  476|      0|                break;
  477|      0|            case CharT{'C'}:
  ------------------
  |  Branch (477:13): [True: 0, False: 32.0k]
  ------------------
  478|      0|                handler.on_century();
  479|      0|                break;
  480|      0|            case CharT{'G'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 32.0k]
  ------------------
  481|      0|                handler.on_iso_week_based_year();
  482|      0|                break;
  483|      0|            case CharT{'g'}:
  ------------------
  |  Branch (483:13): [True: 0, False: 32.0k]
  ------------------
  484|      0|                handler.on_iso_week_based_short_year();
  485|      0|                break;
  486|       |            // Month
  487|  4.28k|            case CharT{'b'}:
  ------------------
  |  Branch (487:13): [True: 4.28k, False: 27.7k]
  ------------------
  488|  4.28k|            case CharT{'B'}:
  ------------------
  |  Branch (488:13): [True: 0, False: 32.0k]
  ------------------
  489|  4.28k|            case CharT{'h'}:
  ------------------
  |  Branch (489:13): [True: 0, False: 32.0k]
  ------------------
  490|  4.28k|                handler.on_month_name();
  491|  4.28k|                break;
  492|     42|            case CharT{'m'}:
  ------------------
  |  Branch (492:13): [True: 42, False: 31.9k]
  ------------------
  493|     42|                handler.on_dec_month();
  494|     42|                break;
  495|       |            // Week
  496|      0|            case CharT{'U'}:
  ------------------
  |  Branch (496:13): [True: 0, False: 32.0k]
  ------------------
  497|      0|                handler.on_dec0_week_of_year();
  498|      0|                break;
  499|      0|            case CharT{'W'}:
  ------------------
  |  Branch (499:13): [True: 0, False: 32.0k]
  ------------------
  500|      0|                handler.on_dec1_week_of_year();
  501|      0|                break;
  502|      0|            case CharT{'V'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 32.0k]
  ------------------
  503|      0|                handler.on_iso_week_of_year();
  504|      0|                break;
  505|       |            // Day of year
  506|      0|            case CharT{'j'}:
  ------------------
  |  Branch (506:13): [True: 0, False: 32.0k]
  ------------------
  507|      0|                handler.on_day_of_year();
  508|      0|                break;
  509|       |            // Day of month
  510|     26|            case CharT{'d'}:
  ------------------
  |  Branch (510:13): [True: 26, False: 31.9k]
  ------------------
  511|     26|            case CharT{'e'}:
  ------------------
  |  Branch (511:13): [True: 0, False: 32.0k]
  ------------------
  512|     26|                handler.on_day_of_month();
  513|     26|                break;
  514|       |            // Day of week
  515|  3.51k|            case CharT{'a'}:
  ------------------
  |  Branch (515:13): [True: 3.51k, False: 28.4k]
  ------------------
  516|  3.51k|            case CharT{'A'}:
  ------------------
  |  Branch (516:13): [True: 0, False: 32.0k]
  ------------------
  517|  3.51k|                handler.on_weekday_name();
  518|  3.51k|                break;
  519|      0|            case CharT{'w'}:
  ------------------
  |  Branch (519:13): [True: 0, False: 32.0k]
  ------------------
  520|      0|                handler.on_dec0_weekday();
  521|      0|                break;
  522|      0|            case CharT{'u'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 32.0k]
  ------------------
  523|      0|                handler.on_dec1_weekday();
  524|      0|                break;
  525|       |            // Hour
  526|     18|            case CharT{'H'}:
  ------------------
  |  Branch (526:13): [True: 18, False: 31.9k]
  ------------------
  527|     18|            case CharT{'k'}:
  ------------------
  |  Branch (527:13): [True: 0, False: 32.0k]
  ------------------
  528|     18|                handler.on_24_hour();
  529|     18|                break;
  530|      0|            case CharT{'I'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 32.0k]
  ------------------
  531|      0|            case CharT{'l'}:
  ------------------
  |  Branch (531:13): [True: 0, False: 32.0k]
  ------------------
  532|      0|                handler.on_12_hour();
  533|      0|                break;
  534|       |            // Minute
  535|      0|            case CharT{'M'}:
  ------------------
  |  Branch (535:13): [True: 0, False: 32.0k]
  ------------------
  536|      0|                handler.on_minute();
  537|      0|                break;
  538|       |            // Second
  539|      0|            case CharT{'S'}:
  ------------------
  |  Branch (539:13): [True: 0, False: 32.0k]
  ------------------
  540|      0|                handler.on_second();
  541|      0|                break;
  542|       |            // Subsecond
  543|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (543:13): [True: 0, False: 32.0k]
  ------------------
  544|       |                // p already increased before the switch
  545|      0|                if (p == end) {
  ------------------
  |  Branch (545:21): [True: 0, False: 0]
  ------------------
  546|      0|                    handler.on_error("Unexpected end of chrono format string");
  547|      0|                    return p;
  548|      0|                }
  549|      0|                bool use_alternate = false;
  550|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  |  Branch (550:41): [True: 0, False: 0]
  ------------------
  551|      0|                    ++p;
  552|      0|                    if (p == end) {
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|                        handler.on_error(
  554|      0|                            "Unexpected end of chrono format string");
  555|      0|                        return p;
  556|      0|                    }
  557|      0|                    use_alternate = true;
  558|      0|                }
  559|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (559:21): [True: 0, False: 0]
  ------------------
  560|      0|                    handler.on_error(
  561|      0|                        "Expected `S` after `%.` in format string");
  562|      0|                    return p;
  563|      0|                }
  564|      0|                ++p;
  565|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (565:38): [True: 0, False: 0]
  ------------------
  566|      0|                                         ? numeric_system::alternative_e
  567|      0|                                         : numeric_system::standard);
  568|      0|                break;
  569|      0|            }
  570|       |            // Timezones
  571|      0|            case CharT{'z'}:
  ------------------
  |  Branch (571:13): [True: 0, False: 32.0k]
  ------------------
  572|      0|                handler.on_tz_offset();
  573|      0|                break;
  574|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (574:13): [True: 0, False: 32.0k]
  ------------------
  575|      0|                handler.on_tz_name();
  576|      0|                break;
  577|       |            // Other
  578|      0|            case CharT{'c'}:
  ------------------
  |  Branch (578:13): [True: 0, False: 32.0k]
  ------------------
  579|      0|                handler.on_loc_datetime();
  580|      0|                break;
  581|      0|            case CharT{'x'}:
  ------------------
  |  Branch (581:13): [True: 0, False: 32.0k]
  ------------------
  582|      0|                handler.on_loc_date();
  583|      0|                break;
  584|      0|            case CharT{'X'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 32.0k]
  ------------------
  585|      0|                handler.on_loc_time();
  586|      0|                break;
  587|  3.52k|            case CharT{'D'}:
  ------------------
  |  Branch (587:13): [True: 3.52k, False: 28.4k]
  ------------------
  588|  3.52k|                handler.on_us_date();
  589|  3.52k|                break;
  590|  3.53k|            case CharT{'F'}:
  ------------------
  |  Branch (590:13): [True: 3.53k, False: 28.4k]
  ------------------
  591|  3.53k|                handler.on_iso_date();
  592|  3.53k|                break;
  593|      0|            case CharT{'r'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 32.0k]
  ------------------
  594|      0|                handler.on_loc_12_hour_time();
  595|      0|                break;
  596|  9.75k|            case CharT{'R'}:
  ------------------
  |  Branch (596:13): [True: 9.75k, False: 22.2k]
  ------------------
  597|  9.75k|                handler.on_24_hour_time();
  598|  9.75k|                break;
  599|  3.78k|            case CharT{'T'}:
  ------------------
  |  Branch (599:13): [True: 3.78k, False: 28.2k]
  ------------------
  600|  3.78k|                handler.on_iso_time();
  601|  3.78k|                break;
  602|      0|            case CharT{'p'}:
  ------------------
  |  Branch (602:13): [True: 0, False: 32.0k]
  ------------------
  603|      0|            case CharT{'P'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 32.0k]
  ------------------
  604|      0|                handler.on_am_pm();
  605|      0|                break;
  606|      0|            case CharT{'s'}:
  ------------------
  |  Branch (606:13): [True: 0, False: 32.0k]
  ------------------
  607|      0|                handler.on_epoch_offset();
  608|      0|                break;
  609|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (609:13): [True: 0, False: 32.0k]
  ------------------
  610|      0|                handler.on_duration_tick_count();
  611|      0|                break;
  612|      0|            case CharT{'q'}:
  ------------------
  |  Branch (612:13): [True: 0, False: 32.0k]
  ------------------
  613|      0|                handler.on_duration_suffix();
  614|      0|                break;
  615|       |            // 'E'
  616|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (616:13): [True: 0, False: 32.0k]
  ------------------
  617|      0|                if (p == end) {
  ------------------
  |  Branch (617:21): [True: 0, False: 0]
  ------------------
  618|      0|                    handler.on_error("Unexpected end of chrono format string");
  619|      0|                    return p;
  620|      0|                }
  621|      0|                ch = *p;
  622|      0|                ++p;
  623|       |
  624|      0|                switch (ch) {
  625|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_century(numeric_system::alternative_e);
  630|      0|                        break;
  631|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_loc_offset_year();
  639|      0|                        break;
  640|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (640:21): [True: 0, False: 0]
  ------------------
  641|      0|                        handler.on_full_year(numeric_system::alternative_e);
  642|      0|                        break;
  643|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (643:21): [True: 0, False: 0]
  ------------------
  644|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  645|      0|                        break;
  646|      0|                    default:
  ------------------
  |  Branch (646:21): [True: 0, False: 0]
  ------------------
  647|      0|                        handler.on_error(
  648|      0|                            "Invalid character following 'E' in chrono format "
  649|      0|                            "string");
  650|      0|                        return p;
  651|      0|                }
  652|      0|                break;
  653|      0|            }
  654|       |            // 'O'
  655|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (655:13): [True: 0, False: 32.0k]
  ------------------
  656|      0|                if (p == end) {
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                    handler.on_error("Unexpected end of chrono format string");
  658|      0|                    return p;
  659|      0|                }
  660|      0|                ch = *p;
  661|      0|                ++p;
  662|       |
  663|      0|                switch (ch) {
  664|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (665:21): [True: 0, False: 0]
  ------------------
  666|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  667|      0|                        break;
  668|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (668:21): [True: 0, False: 0]
  ------------------
  669|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (669:21): [True: 0, False: 0]
  ------------------
  670|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  671|      0|                        break;
  672|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (672:21): [True: 0, False: 0]
  ------------------
  673|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  678|      0|                        break;
  679|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (679:21): [True: 0, False: 0]
  ------------------
  680|      0|                        handler.on_minute(numeric_system::alternative_o);
  681|      0|                        break;
  682|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (682:21): [True: 0, False: 0]
  ------------------
  683|      0|                        handler.on_second(numeric_system::alternative_o);
  684|      0|                        break;
  685|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (685:21): [True: 0, False: 0]
  ------------------
  686|      0|                        handler.on_dec0_week_of_year(
  687|      0|                            numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  694|      0|                        break;
  695|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (695:21): [True: 0, False: 0]
  ------------------
  696|      0|                        handler.on_short_year(numeric_system::alternative_o);
  697|      0|                        break;
  698|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (698:21): [True: 0, False: 0]
  ------------------
  699|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  700|      0|                        break;
  701|      0|                    default:
  ------------------
  |  Branch (701:21): [True: 0, False: 0]
  ------------------
  702|      0|                        handler.on_error(
  703|      0|                            "Invalid character following 'O' in chrono format "
  704|      0|                            "string");
  705|      0|                        return p;
  706|      0|                }
  707|      0|                break;
  708|      0|            }
  709|      0|            default:
  ------------------
  |  Branch (709:13): [True: 0, False: 32.0k]
  ------------------
  710|      0|                handler.on_error("Invalid character in chrono format string");
  711|      0|                return p;
  712|  32.0k|        }
  713|  32.0k|        begin = p;
  714|       |
  715|  32.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (715:13): [True: 24.5k, False: 7.46k]
  ------------------
  716|  24.5k|            return p;
  717|  24.5k|        }
  718|  32.0k|    }
  719|  7.38k|    if (begin != p) {
  ------------------
  |  Branch (719:9): [True: 0, False: 7.38k]
  ------------------
  720|      0|        handler.on_text(begin, p);
  721|      0|    }
  722|  7.38k|    handler.verify();
  723|  7.38k|    return p;
  724|  31.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.05k|    {                                                                \
  778|  7.05k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.05k|        field##_set = 1;                                             \
  783|  7.05k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  3.52k|    {                                                                \
  778|  3.52k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  3.52k|        field##_set = 1;                                             \
  783|  3.52k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  1.19k|    {                                                                \
  778|  1.19k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  1.19k|        field##_set = 1;                                             \
  783|  1.19k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    110|    {                                                                \
  778|    110|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    110|        field##_set = 1;                                             \
  783|    110|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  7.01k|    {                                                                \
  778|  7.01k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  7.01k|        field##_set = 1;                                             \
  783|  7.01k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|  6.96k|    {                                                                \
  778|  6.96k|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|  6.96k|        field##_set = 1;                                             \
  783|  6.96k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  777|    292|    {                                                                \
  778|    292|        if (field##_set) {                                           \
  779|      0|            handler.set_error({scan_error::invalid_format_string,    \
  780|      0|                               #field "-field set multiple times"}); \
  781|      0|        }                                                            \
  782|    292|        field##_set = 1;                                             \
  783|    292|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  808|  7.38k|    {
  809|  7.38k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (809:13): [True: 6.56k, False: 818]
  |  Branch (809:27): [True: 0, False: 6.56k]
  ------------------
  810|      0|            return handler.set_error(
  811|      0|                {scan_error::invalid_format_string,
  812|      0|                 "24-hour and 12-hour clocks can't both be in use "
  813|      0|                 "simultaneously"});
  814|      0|        }
  815|  7.38k|        if (am_pm_set) {
  ------------------
  |  Branch (815:13): [True: 0, False: 7.38k]
  ------------------
  816|      0|            if (!hour12_set) {
  ------------------
  |  Branch (816:17): [True: 0, False: 0]
  ------------------
  817|      0|                return handler.set_error(
  818|      0|                    {scan_error::invalid_format_string,
  819|      0|                     "AM/PM specifier can't be set without an hour set"});
  820|      0|            }
  821|      0|            if (hour24_set) {
  ------------------
  |  Branch (821:17): [True: 0, False: 0]
  ------------------
  822|      0|                return handler.set_error(
  823|      0|                    {scan_error::invalid_format_string,
  824|      0|                     "Can't use AM/PM with a 24-hour clock"});
  825|      0|            }
  826|      0|        }
  827|  7.38k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (827:13): [True: 22, False: 7.36k]
  |  Branch (827:31): [True: 0, False: 22]
  |  Branch (827:46): [True: 0, False: 22]
  ------------------
  828|      0|            return handler.set_error(
  829|      0|                {scan_error::invalid_format_string,
  830|      0|                 "full-year (%Y) can't be used together with "
  831|      0|                 "century (%C) and short-year (%y)"});
  832|      0|        }
  833|  7.38k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (833:13): [True: 0, False: 7.38k]
  |  Branch (833:26): [True: 0, False: 0]
  ------------------
  834|      0|            return handler.set_error(
  835|      0|                {scan_error::invalid_format_string,
  836|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  837|      0|        }
  838|  7.38k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (838:14): [True: 0, False: 7.38k]
  |  Branch (838:26): [True: 36, False: 7.34k]
  |  Branch (838:38): [True: 0, False: 7.34k]
  ------------------
  839|  7.38k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (839:13): [True: 0, False: 36]
  ------------------
  840|      0|            return handler.set_error(
  841|      0|                {scan_error::invalid_format_string,
  842|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  843|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  844|      0|        }
  845|  7.38k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|   838k|{
 4124|   838k|    if constexpr (sizeof(U) == 1) {
 4125|   838k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|   838k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|   838k|{
 4088|   838k|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|   838k|    SCN_GCC_COMPAT_PUSH
 4091|   838k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|   838k|    constexpr char lengths[] =
 4093|   838k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|   838k|        "\1\1\1\1\1\1\1\1"
 4095|   838k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|   838k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|   838k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|   838k|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|   838k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|   838k|    SCN_GCC_COMPAT_POP
 4102|   838k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   415k|{
 4330|   415k|    if constexpr (sizeof(CharT) == 1) {
 4331|   415k|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|   415k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|   415k|{
 4143|   415k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|   415k|    const auto is_trailing_code_unit = [](char ch) {
 4146|   415k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|   415k|    };
 4148|       |
 4149|   415k|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 406k, False: 9.10k]
  ------------------
 4150|   406k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 150, False: 406k]
  ------------------
 4151|    150|            SCN_UNLIKELY_ATTR
 4152|    150|            return invalid_code_point;
 4153|    150|        }
 4154|   406k|        return static_cast<char32_t>(input[0]);
 4155|   406k|    }
 4156|       |
 4157|  9.10k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 7.59k, False: 1.51k]
  ------------------
 4158|  7.59k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 54, False: 7.54k]
  ------------------
 4159|     54|            SCN_UNLIKELY_ATTR
 4160|     54|            return invalid_code_point;
 4161|     54|        }
 4162|  7.54k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 1.85k, False: 5.69k]
  ------------------
 4163|  1.85k|            SCN_UNLIKELY_ATTR
 4164|  1.85k|            return invalid_code_point;
 4165|  1.85k|        }
 4166|       |
 4167|  5.69k|        char32_t cp{};
 4168|  5.69k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|  5.69k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|  5.69k|        return cp;
 4171|  7.54k|    }
 4172|       |
 4173|  1.51k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 572, False: 939]
  ------------------
 4174|    572|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 48, False: 524]
  ------------------
 4175|     48|            SCN_UNLIKELY_ATTR
 4176|     48|            return invalid_code_point;
 4177|     48|        }
 4178|    524|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 272, False: 252]
  ------------------
 4179|    524|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 133, False: 119]
  ------------------
 4180|    405|            SCN_UNLIKELY_ATTR
 4181|    405|            return invalid_code_point;
 4182|    405|        }
 4183|       |
 4184|    119|        char32_t cp{};
 4185|    119|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|    119|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|    119|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|    119|        return cp;
 4189|    524|    }
 4190|       |
 4191|    939|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 939, False: 0]
  ------------------
 4192|    939|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 939]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|    939|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 261, False: 678]
  ------------------
 4197|    261|            SCN_UNLIKELY_ATTR
 4198|    261|            return invalid_code_point;
 4199|    261|        }
 4200|    678|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 302, False: 376]
  ------------------
 4201|    678|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 128, False: 248]
  ------------------
 4202|    678|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 124, False: 124]
  ------------------
 4203|    554|            SCN_UNLIKELY_ATTR
 4204|    554|            return invalid_code_point;
 4205|    554|        }
 4206|       |
 4207|    124|        char32_t cp{};
 4208|    124|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|    124|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|    124|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|    124|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|    124|        return cp;
 4213|    678|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|  9.61k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  9.61k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  9.61k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|   309k|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|   309k|    else {
 4022|   309k|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|   309k|                                       to_address(first), to_address(last)))};
 4024|   309k|    }
 4025|   309k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   935k|{
  341|   935k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   935k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   935k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  1.27M|{
  319|  1.27M|    return p;
  320|  1.27M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|   458k|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|   458k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|   458k|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|   458k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|   458k|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|   458k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  40.9k|    {
 2901|  40.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  40.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  40.9k|    {
 2882|  40.9k|        return decay_copy(t.begin());
 2883|  40.9k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  1.01M|{
 2126|  1.01M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.01M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   173k|    {
 2958|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   173k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   173k|    {
 2940|   173k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   173k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
10004|  13.9k|{
10005|  13.9k|    auto result = make_scan_result<Source, Args...>();
10006|  13.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  13.9k|                                   make_scan_args(result->values())));
10008|  13.9k|    return result;
10009|  13.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9960|  28.7k|{
 9961|  28.7k|    return scan_result_type<Source, Args...>();
 9962|  28.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1583|  28.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  459|  28.7k|        : m_value(T{}), m_has_value(true)
  460|  28.7k|    {
  461|  28.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6775|  28.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|  86.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|  86.1k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6549|   130k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  28.7k|{
 9946|  28.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 15.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  15.3k|    else {
 9950|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  15.3k|    static_cast<    \
  |  | 1084|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  15.3k|    }
 9952|  28.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|  86.1k|    {
 1772|  86.1k|        return has_value();
 1773|  86.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   172k|    {
  523|   172k|        return m_has_value;
  524|   172k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  40.0k|    {
 1778|  40.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  40.0k|        return this->get_unexpected().error();
 1780|  40.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  40.0k|    {
  506|  40.0k|        return m_unexpected;
  507|  40.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  3.78M|    {
  398|  3.78M|        return m_unexpected;
  399|  3.78M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|  1.98M|        : m_unexpected(std::forward<Err>(e))
  381|  1.98M|    {
  382|  1.98M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  1.98M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  1.98M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  482|  13.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  13.3k|          m_has_value(false)
  484|  13.3k|    {
  485|  13.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|  2.00M|        : m_unexpected(std::forward<Args>(args)...)
  392|  2.00M|    {
  393|  2.00M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  2.00M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   114k|    {
  523|   114k|        return m_has_value;
  524|   114k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  59.3k|    {
  489|  59.3k|        return m_value;
  490|  59.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  13.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  536|  13.3k|    {
  537|  13.3k|        scn::detail::construct_at(&get_unexpected(),
  538|  13.3k|                                  std::forward<Args>(args)...);
  539|  13.3k|        m_has_value = false;
  540|  13.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   240k|{
  429|   240k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   240k|        T(std::forward<Args>(args)...);
  431|   240k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  13.3k|    {
  506|  13.3k|        return m_unexpected;
  507|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  13.3k|    {
  514|  13.3k|        return std::move(m_unexpected);
  515|  13.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|  46.0k|    {
 6650|  46.0k|        m_range = std::forward<Other>(r);
 6651|  46.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  46.0k|    {
 1827|  46.0k|        return value();
 1828|  46.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  46.0k|    {
 1801|  46.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  46.0k|        return this->get_value();
 1803|  46.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  46.0k|    {
  489|  46.0k|        return m_value;
  490|  46.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|  41.7k|{
 9767|  41.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  41.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|  41.7k|{
 9704|  41.7k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  41.7k|    auto result = vscan_impl(buffer, format, args);
 9707|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.7k, False: 23.0k]
  |  |  ------------------
  ------------------
 9708|  18.7k|        return unexpected(result.error());
 9709|  18.7k|    }
 9710|  23.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  41.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|  86.1k|{
 5466|  86.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|  86.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|  86.1k|                  "\n"
 5470|  86.1k|                  "Unsupported range type given as input to a scanning "
 5471|  86.1k|                  "function.\n"
 5472|  86.1k|                  "A range needs to have a character type (value type) "
 5473|  86.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|  86.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|  86.1k|                  "to be included.\n"
 5476|  86.1k|                  "See the scnlib documentation for more details.");
 5477|  86.1k|    static_assert(
 5478|  86.1k|        !std::is_same_v<T, custom_char_traits>,
 5479|  86.1k|        "\n"
 5480|  86.1k|        "Unsupported range type given as input to a scanning "
 5481|  86.1k|        "function.\n"
 5482|  86.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|  86.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|  86.1k|        "not supported.");
 5485|  86.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|  86.1k|                  "\n"
 5487|  86.1k|                  "Unsupported range type given as input to a scanning "
 5488|  86.1k|                  "function.\n"
 5489|  86.1k|                  "file_marker_found cannot be used as an "
 5490|  86.1k|                  "source range type to scn::scan.\n"
 5491|  86.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|  86.1k|                  "and do not provide an explicit source range, "
 5493|  86.1k|                  "or use scn::scan with a FILE* directly.");
 5494|  86.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|  86.1k|                  "\n"
 5496|  86.1k|                  "Unsupported range type given as input to a scanning "
 5497|  86.1k|                  "function.\n"
 5498|  86.1k|                  "In order to be scannable, a range needs to satisfy "
 5499|  86.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|  86.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|  86.1k|                  "\n"
 5502|  86.1k|                  "Unsupported range type given as input to a scanning "
 5503|  86.1k|                  "function.\n"
 5504|  86.1k|                  "A range needs to model forward_range and have a valid "
 5505|  86.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|  86.1k|                  "Examples of scannable ranges are std::string, "
 5507|  86.1k|                  "std::string_view, "
 5508|  86.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|  86.1k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|  86.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|  86.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|  86.1k|{
 5404|  86.1k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|  86.1k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|  86.1k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|  86.1k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  86.1k|    {
 3032|  86.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  86.1k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  86.1k|    {
 3013|  86.1k|        return t.data();
 3014|  86.1k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|  86.1k|    {
 3415|  86.1k|        return detail::to_address(ranges::begin(derived()));
 3416|  86.1k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   339k|{
  341|   339k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   339k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   132k|    {
 2901|   132k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   132k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   132k|    {
 2882|   132k|        return decay_copy(t.begin());
 2883|   132k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  1.14M|    {
 3513|  1.14M|        return m_iterator;
 3514|  1.14M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|  86.1k|    {
 3371|  86.1k|        return static_cast<const D&>(*this);
 3372|  86.1k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|  86.1k|    {
 3107|  86.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  86.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|  86.1k|    {
 3073|  86.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  86.1k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|   729k|{
 2126|   729k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   729k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   385k|    {
 3530|   385k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   385k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|   595k|    {
 1772|   595k|        return has_value();
 1773|   595k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  1.07M|    {
  523|  1.07M|        return m_has_value;
  524|  1.07M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   240k|    {
 1778|   240k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   240k|        return this->get_unexpected().error();
 1780|   240k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   240k|    {
  506|   240k|        return m_unexpected;
  507|   240k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  40.0k|        : base(unexpect, std::move(e.error())),
 1648|  40.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  40.0k|    {
 1650|  40.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  40.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  40.0k|          m_has_value(false)
  484|  40.0k|    {
  485|  40.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  86.1k|    {
 1348|  86.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|  46.0k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  46.0k|                      ranges::iterator_t<SourceRange>>) {
 6882|  46.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  46.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   381k|    {
 2901|   381k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   381k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   381k|    {
 2882|   381k|        return decay_copy(t.begin());
 2883|   381k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|  46.0k|{
 6867|  46.0k|    return ranges::end(source);
 6868|  46.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   121k|    {
 2958|   121k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   121k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   121k|    {
 2940|   121k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   121k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|   878k|    {
 3518|   878k|        return m_sentinel;
 3519|   878k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|   234k|    {
 1827|   234k|        return value();
 1828|   234k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|   234k|    {
 1801|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   234k|        return this->get_value();
 1803|   234k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|   234k|    {
  489|   234k|        return m_value;
  490|   234k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  46.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  46.0k|    {
 1604|  46.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  46.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  46.0k|    {
  475|  46.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8962|  27.8k|    {
 8963|  27.8k|        return m_str;
 8964|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  60.6k|{
 6275|  60.6k|    detail::check_scan_arg_types<Args...>();
 6276|  60.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  60.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5985|   130k|{
 5986|   130k|    constexpr bool default_constructible_constraint =
 5987|   130k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   130k|    static_assert(default_constructible_constraint,
 5989|   130k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   130k|    constexpr bool destructible_constraint =
 5992|   130k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   130k|    static_assert(destructible_constraint,
 5994|   130k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   130k|    constexpr bool non_reference_constraint =
 5997|   130k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   130k|    static_assert(non_reference_constraint,
 5999|   130k|                  "Scan argument types must not be references");
 6000|       |
 6001|   130k|    constexpr bool movable_constraint =
 6002|   130k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   130k|    static_assert(movable_constraint,
 6004|   130k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   130k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   130k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   130k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  60.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  60.6k|    {
 6252|  60.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  60.6k|    {
 6260|  60.6k|        return {detail::make_arg<
 6261|  60.6k|            kind, Context,
 6262|  60.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  60.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  60.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 6044|  60.6k|{
 6045|  60.6k|    return make_value<Context>(value);
 6046|  60.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5970|  62.4k|{
 5971|  62.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  62.4k|    else {
 5978|  62.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  62.4k|            value, context_tag<Context>{}));
 5980|  62.4k|    }
 5981|  62.4k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  62.4k|    {
 5867|  62.4k|        return {};
 5868|  62.4k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5939|  62.4k|{
 5940|  62.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  62.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  62.4k|    constexpr bool scannable_char =
 5944|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  62.4k|    static_assert(scannable_char,
 5946|  62.4k|                  "Cannot scan an argument of an unsupported character "
 5947|  62.4k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  62.4k|    constexpr bool scannable_const =
 5950|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  62.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  62.4k|    constexpr bool scannable_disabled =
 5954|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  62.4k|    static_assert(scannable_disabled,
 5956|  62.4k|                  "Cannot scan an argument that has been disabled by "
 5957|  62.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  62.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  62.4k|    static_assert(
 5961|  62.4k|        scannable,
 5962|  62.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  62.4k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  62.4k|    return arg_value{arg};
 5966|  62.4k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  62.4k|        : custom_value{static_cast<void*>(&val.val),
 5722|  62.4k|                       scan_custom_arg<T, Context>}
 5723|  62.4k|    {
 5724|  62.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  62.4k|    {
 5740|  62.4k|        static_assert(!is_type_disabled<T>,
 5741|  62.4k|                      "Scanning of custom types is disabled by "
 5742|  62.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  62.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  62.4k|        using context_type = Context;
 5746|  62.4k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  62.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  62.4k|        auto s = scanner_type{};
 5750|       |
 5751|  62.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  62.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  62.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  62.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  62.4k|    do {                                                            \
  |  | 3985|  62.4k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.78k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.78k|        }                                                           \
  |  | 3988|  62.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  60.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  35.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  35.6k|    static_cast<    \
  |  | 1084|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  35.6k|        return {};
 5760|  60.6k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  62.4k|{
 5670|  62.4k|#if SCN_HAS_EXCEPTIONS
 5671|  62.4k|    auto fmt_it = pctx.begin();
 5672|  62.4k|    try {
 5673|  62.4k|        fmt_it = s.parse(pctx);
 5674|  62.4k|    }
 5675|  62.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  62.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  ------------------
  ------------------
 5698|  1.78k|        return e;
 5699|  1.78k|    }
 5700|  60.6k|    pctx.advance_to(fmt_it);
 5701|  60.6k|    return {};
 5702|  62.4k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|   920k|    {
 6464|   920k|        return m_format.data();
 6465|   920k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6468|   187k|    {
 6469|   187k|        return m_format.data() + m_format.size();
 6470|   187k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6509|  5.34k|    {
 6510|  5.34k|        m_error = unexpected(detail::handle_error(
 6511|  5.34k|            scan_error{scan_error::invalid_format_string, msg}));
 6512|  5.34k|        return m_error.error();
 6513|  5.34k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|   931k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|   931k|    {
 3787|   931k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|   931k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   931k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|  16.0k|        : m_unexpected(std::forward<Err>(e))
  381|  16.0k|    {
  382|  16.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  16.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  16.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  5.62M|    {
  605|  5.62M|        return m_has_value;
  606|  5.62M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|   576k|{
 4364|       |    // Pattern_White_Space property
 4365|   576k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 492k, False: 83.5k]
  |  Branch (4365:27): [True: 7.47k, False: 485k]
  ------------------
 4366|   576k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 259k, False: 309k]
  ------------------
 4367|   576k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 7.29k, False: 301k]
  ------------------
 4368|   576k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 672, False: 301k]
  ------------------
 4369|   576k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 1.30k, False: 299k]
  ------------------
 4370|   576k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 924, False: 299k]
  ------------------
 4371|   576k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 0, False: 299k]
  ------------------
 4372|   576k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   348k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   348k|    else {
 4037|   348k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   348k|    }
 4039|   348k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6516|   187k|    {
 6517|   187k|        return m_error;
 6518|   187k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   363k|    {
 6475|   363k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   363k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  3.99M|    {
 1772|  3.99M|        return has_value();
 1773|  3.99M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|   717k|    {
 1778|   717k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   717k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   717k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   717k|        return this->get_unexpected().error();
 1780|   717k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|   717k|    {
  588|   717k|        return m_unexpected;
  589|   717k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   700k|        : base(unexpect, std::move(e.error())),
 1648|   700k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   700k|    {
 1650|   700k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|   700k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|   700k|          m_has_value(false)
  583|   700k|    {
  584|   700k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   700k|    {
 1348|   700k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|   464k|    {
 1772|   464k|        return has_value();
 1773|   464k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|   929k|    {
  523|   929k|        return m_has_value;
  524|   929k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   153k|    {
 1778|   153k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   153k|        return this->get_unexpected().error();
 1780|   153k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   153k|    {
  506|   153k|        return m_unexpected;
  507|   153k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   204k|    {
 1837|   204k|        return std::move(value());
 1838|   204k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   311k|    {
 1801|   311k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   311k|        return this->get_value();
 1803|   311k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|   311k|    {
  489|   311k|        return m_value;
  490|   311k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|   265k|    {
 9166|   265k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   265k|    static_cast<    \
  |  | 1084|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   265k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  2.04M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  2.04M|        : m_deferred_init(), m_has_value(true)
  562|  2.04M|    {
  563|  2.04M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  62.4k|    {
 5876|  62.4k|        return {val};
 5877|  62.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6558|   125k|    {
 6559|   125k|        return m_values;
 6560|   125k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  60.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  60.6k|    {
 6302|  60.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6357|   181k|        : m_desc(desc), m_values(data)
 6358|   181k|    {
 6359|   181k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|   634k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   634k|    static_cast<    \
  |  | 1084|   634k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   634k|    static_cast<    \
  |  | 1084|   634k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   634k|    {
 3498|   634k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   181k|{
 8640|   181k|    return s;
 8641|   181k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   181k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  27.8k|        : m_str(r.str)
 8958|  27.8k|    {
 8959|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1771|  28.7k|    {
 1772|  28.7k|        return has_value();
 1773|  28.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1846|  59.3k|    {
 1847|  59.3k|        return &value();
 1848|  59.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  59.3k|    {
 1801|  59.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  59.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  59.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  59.3k|        return this->get_value();
 1803|  59.3k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|  46.0k|    {
 6639|  46.0k|        return ranges::begin(m_range);
 6640|  46.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
10073|  13.9k|{
10074|  13.9k|    auto result = make_scan_result<Source, Args...>();
10075|  13.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  13.9k|                                   make_scan_args(result->values())));
10077|  13.9k|    return result;
10078|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|  41.7k|{
 9785|  41.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  41.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|  41.7k|{
 9720|  41.7k|#if !SCN_DISABLE_LOCALE
 9721|  41.7k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  41.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  41.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  41.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.7k, False: 23.0k]
  |  |  ------------------
  ------------------
 9728|  18.7k|        return unexpected(result.error());
 9729|  18.7k|    }
 9730|  23.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  41.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  2.67k|{
 9798|  2.67k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  2.67k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  2.67k|{
 9744|  2.67k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  2.67k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  2.67k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  ------------------
  ------------------
 9748|  2.67k|        return unexpected(result.error());
 9749|  2.67k|    }
 9750|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  2.67k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 6020|  1.78k|{
 6021|  1.78k|    check_scan_arg_types<T>();
 6022|       |
 6023|  1.78k|    basic_scan_arg<Context> arg;
 6024|  1.78k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  1.78k|    arg.m_value = make_value<Context>(value);
 6026|  1.78k|    return arg;
 6027|  1.78k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|   187k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|   391k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  5.34k|    {
 6581|  5.34k|        return std::get<0>(m_values);
 6582|  5.34k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
10004|  13.9k|{
10005|  13.9k|    auto result = make_scan_result<Source, Args...>();
10006|  13.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  13.9k|                                   make_scan_args(result->values())));
10008|  13.9k|    return result;
10009|  13.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9960|  28.7k|{
 9961|  28.7k|    return scan_result_type<Source, Args...>();
 9962|  28.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1583|  28.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  644|  28.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  28.7k|    {
  646|  28.7k|        construct();
  647|  28.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  28.7k|    {
  727|  28.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  28.7k|        m_has_value = true;
  729|  28.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  428|  28.7k|{
  429|  28.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  28.7k|        T(std::forward<Args>(args)...);
  431|  28.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6775|  28.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6549|   130k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   116k|    {
  751|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  28.7k|{
 9946|  28.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 15.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  15.3k|    else {
 9950|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  15.3k|    static_cast<    \
  |  | 1084|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  15.3k|    }
 9952|  28.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  669|  13.3k|        : m_has_value(false)
  670|  13.3k|    {
  671|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  428|   160k|{
  429|   160k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   160k|        T(std::forward<Args>(args)...);
  431|   160k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  66.8k|    {
  763|  66.8k|        return reinterpret_cast<unexpected<E>*>(
  764|  66.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  66.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  66.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   156k|    {
  720|   156k|        return m_has_value;
  721|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  59.3k|    {
  686|  59.3k|        return *value_ptr();
  687|  59.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  28.7k|    {
  741|  28.7k|        scn::detail::destroy_at(value_ptr());
  742|  28.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  434|  28.7k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  28.7k|    else {
  441|  28.7k|        p->~T();
  442|  28.7k|    }
  443|  28.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6782|  28.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  13.3k|    {
  711|  13.3k|        return std::move(*unexpected_ptr());
  712|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  26.7k|    {
  745|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  746|  26.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  434|   320k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   320k|    else {
  441|   320k|        p->~T();
  442|   320k|    }
  443|   320k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8962|  27.8k|    {
 8963|  27.8k|        return m_str;
 8964|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  60.6k|{
 6275|  60.6k|    detail::check_scan_arg_types<Args...>();
 6276|  60.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  60.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5985|   130k|{
 5986|   130k|    constexpr bool default_constructible_constraint =
 5987|   130k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   130k|    static_assert(default_constructible_constraint,
 5989|   130k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   130k|    constexpr bool destructible_constraint =
 5992|   130k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   130k|    static_assert(destructible_constraint,
 5994|   130k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   130k|    constexpr bool non_reference_constraint =
 5997|   130k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   130k|    static_assert(non_reference_constraint,
 5999|   130k|                  "Scan argument types must not be references");
 6000|       |
 6001|   130k|    constexpr bool movable_constraint =
 6002|   130k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   130k|    static_assert(movable_constraint,
 6004|   130k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   130k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   130k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   130k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  60.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  60.6k|    {
 6252|  60.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  60.6k|    {
 6260|  60.6k|        return {detail::make_arg<
 6261|  60.6k|            kind, Context,
 6262|  60.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  60.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  60.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 6044|  60.6k|{
 6045|  60.6k|    return make_value<Context>(value);
 6046|  60.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5970|  62.4k|{
 5971|  62.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  62.4k|    else {
 5978|  62.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  62.4k|            value, context_tag<Context>{}));
 5980|  62.4k|    }
 5981|  62.4k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  62.4k|    {
 5867|  62.4k|        return {};
 5868|  62.4k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5939|  62.4k|{
 5940|  62.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  62.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  62.4k|    constexpr bool scannable_char =
 5944|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  62.4k|    static_assert(scannable_char,
 5946|  62.4k|                  "Cannot scan an argument of an unsupported character "
 5947|  62.4k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  62.4k|    constexpr bool scannable_const =
 5950|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  62.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  62.4k|    constexpr bool scannable_disabled =
 5954|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  62.4k|    static_assert(scannable_disabled,
 5956|  62.4k|                  "Cannot scan an argument that has been disabled by "
 5957|  62.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  62.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  62.4k|    static_assert(
 5961|  62.4k|        scannable,
 5962|  62.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  62.4k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  62.4k|    return arg_value{arg};
 5966|  62.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  62.4k|        : custom_value{static_cast<void*>(&val.val),
 5722|  62.4k|                       scan_custom_arg<T, Context>}
 5723|  62.4k|    {
 5724|  62.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  62.4k|    {
 5740|  62.4k|        static_assert(!is_type_disabled<T>,
 5741|  62.4k|                      "Scanning of custom types is disabled by "
 5742|  62.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  62.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  62.4k|        using context_type = Context;
 5746|  62.4k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  62.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  62.4k|        auto s = scanner_type{};
 5750|       |
 5751|  62.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  62.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  62.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  62.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  62.4k|    do {                                                            \
  |  | 3985|  62.4k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.78k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.78k|        }                                                           \
  |  | 3988|  62.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  60.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  35.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  35.6k|    static_cast<    \
  |  | 1084|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  35.6k|        return {};
 5760|  60.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  62.4k|{
 5670|  62.4k|#if SCN_HAS_EXCEPTIONS
 5671|  62.4k|    auto fmt_it = pctx.begin();
 5672|  62.4k|    try {
 5673|  62.4k|        fmt_it = s.parse(pctx);
 5674|  62.4k|    }
 5675|  62.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  62.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  ------------------
  ------------------
 5698|  1.78k|        return e;
 5699|  1.78k|    }
 5700|  60.6k|    pctx.advance_to(fmt_it);
 5701|  60.6k|    return {};
 5702|  62.4k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  62.4k|    {
 5876|  62.4k|        return {val};
 5877|  62.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6558|   125k|    {
 6559|   125k|        return m_values;
 6560|   125k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  60.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  60.6k|    {
 6302|  60.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  27.8k|        : m_str(r.str)
 8958|  27.8k|    {
 8959|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1771|  28.7k|    {
 1772|  28.7k|        return has_value();
 1773|  28.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1846|  59.3k|    {
 1847|  59.3k|        return &value();
 1848|  59.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  59.3k|    {
 1801|  59.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  59.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  59.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  59.3k|        return this->get_value();
 1803|  59.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  675|  42.0k|    {
  676|  42.0k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 15.3k, False: 26.7k]
  ------------------
  677|  15.3k|            destroy_value();
  678|  15.3k|        }
  679|  26.7k|        else {
  680|  26.7k|            destroy_unexpected();
  681|  26.7k|        }
  682|  42.0k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
10073|  13.9k|{
10074|  13.9k|    auto result = make_scan_result<Source, Args...>();
10075|  13.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  13.9k|                                   make_scan_args(result->values())));
10077|  13.9k|    return result;
10078|  13.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 6020|  1.78k|{
 6021|  1.78k|    check_scan_arg_types<T>();
 6022|       |
 6023|  1.78k|    basic_scan_arg<Context> arg;
 6024|  1.78k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  1.78k|    arg.m_value = make_value<Context>(value);
 6026|  1.78k|    return arg;
 6027|  1.78k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  5.34k|    {
 6581|  5.34k|        return std::get<0>(m_values);
 6582|  5.34k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
10004|  13.9k|{
10005|  13.9k|    auto result = make_scan_result<Source, Args...>();
10006|  13.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  13.9k|                                   make_scan_args(result->values())));
10008|  13.9k|    return result;
10009|  13.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9960|  28.7k|{
 9961|  28.7k|    return scan_result_type<Source, Args...>();
 9962|  28.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1583|  28.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  644|  28.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  28.7k|    {
  646|  28.7k|        construct();
  647|  28.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  28.7k|    {
  727|  28.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  28.7k|        m_has_value = true;
  729|  28.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  428|  28.7k|{
  429|  28.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  28.7k|        T(std::forward<Args>(args)...);
  431|  28.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6775|  28.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6549|   130k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   116k|    {
  751|   116k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   116k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  28.7k|{
 9946|  28.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 15.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  15.3k|    else {
 9950|  15.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  15.3k|    static_cast<    \
  |  | 1084|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  15.3k|    }
 9952|  28.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  669|  13.3k|        : m_has_value(false)
  670|  13.3k|    {
  671|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  66.8k|    {
  763|  66.8k|        return reinterpret_cast<unexpected<E>*>(
  764|  66.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  66.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  66.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   156k|    {
  720|   156k|        return m_has_value;
  721|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  59.3k|    {
  686|  59.3k|        return *value_ptr();
  687|  59.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  28.7k|    {
  741|  28.7k|        scn::detail::destroy_at(value_ptr());
  742|  28.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  434|  28.7k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  28.7k|    else {
  441|  28.7k|        p->~T();
  442|  28.7k|    }
  443|  28.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6782|  28.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  13.3k|    {
  711|  13.3k|        return std::move(*unexpected_ptr());
  712|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  26.7k|    {
  745|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  746|  26.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8962|  27.8k|    {
 8963|  27.8k|        return m_str;
 8964|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  60.6k|{
 6275|  60.6k|    detail::check_scan_arg_types<Args...>();
 6276|  60.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  60.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5985|   130k|{
 5986|   130k|    constexpr bool default_constructible_constraint =
 5987|   130k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   130k|    static_assert(default_constructible_constraint,
 5989|   130k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   130k|    constexpr bool destructible_constraint =
 5992|   130k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   130k|    static_assert(destructible_constraint,
 5994|   130k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   130k|    constexpr bool non_reference_constraint =
 5997|   130k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   130k|    static_assert(non_reference_constraint,
 5999|   130k|                  "Scan argument types must not be references");
 6000|       |
 6001|   130k|    constexpr bool movable_constraint =
 6002|   130k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   130k|    static_assert(movable_constraint,
 6004|   130k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   130k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   130k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   130k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  60.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  60.6k|    {
 6252|  60.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  60.6k|    {
 6260|  60.6k|        return {detail::make_arg<
 6261|  60.6k|            kind, Context,
 6262|  60.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  60.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  60.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 6044|  60.6k|{
 6045|  60.6k|    return make_value<Context>(value);
 6046|  60.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5970|  62.4k|{
 5971|  62.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  62.4k|    else {
 5978|  62.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  62.4k|            value, context_tag<Context>{}));
 5980|  62.4k|    }
 5981|  62.4k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  62.4k|    {
 5867|  62.4k|        return {};
 5868|  62.4k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5939|  62.4k|{
 5940|  62.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  62.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  62.4k|    constexpr bool scannable_char =
 5944|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  62.4k|    static_assert(scannable_char,
 5946|  62.4k|                  "Cannot scan an argument of an unsupported character "
 5947|  62.4k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  62.4k|    constexpr bool scannable_const =
 5950|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  62.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  62.4k|    constexpr bool scannable_disabled =
 5954|  62.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  62.4k|    static_assert(scannable_disabled,
 5956|  62.4k|                  "Cannot scan an argument that has been disabled by "
 5957|  62.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  62.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  62.4k|    static_assert(
 5961|  62.4k|        scannable,
 5962|  62.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  62.4k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  62.4k|    return arg_value{arg};
 5966|  62.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  62.4k|        : custom_value{static_cast<void*>(&val.val),
 5722|  62.4k|                       scan_custom_arg<T, Context>}
 5723|  62.4k|    {
 5724|  62.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  62.4k|    {
 5740|  62.4k|        static_assert(!is_type_disabled<T>,
 5741|  62.4k|                      "Scanning of custom types is disabled by "
 5742|  62.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  62.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  62.4k|        using context_type = Context;
 5746|  62.4k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  62.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  62.4k|        auto s = scanner_type{};
 5750|       |
 5751|  62.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  62.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  62.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  62.4k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  62.4k|    do {                                                            \
  |  | 3985|  62.4k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.78k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.78k|        }                                                           \
  |  | 3988|  62.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  60.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  35.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  35.6k|    static_cast<    \
  |  | 1084|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  35.6k|        return {};
 5760|  60.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  62.4k|{
 5670|  62.4k|#if SCN_HAS_EXCEPTIONS
 5671|  62.4k|    auto fmt_it = pctx.begin();
 5672|  62.4k|    try {
 5673|  62.4k|        fmt_it = s.parse(pctx);
 5674|  62.4k|    }
 5675|  62.4k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  62.4k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.78k, False: 60.6k]
  |  |  ------------------
  ------------------
 5698|  1.78k|        return e;
 5699|  1.78k|    }
 5700|  60.6k|    pctx.advance_to(fmt_it);
 5701|  60.6k|    return {};
 5702|  62.4k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_cvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  62.4k|    {
 5876|  62.4k|        return {val};
 5877|  62.4k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6558|   125k|    {
 6559|   125k|        return m_values;
 6560|   125k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  60.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  60.6k|    {
 6302|  60.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  27.8k|        : m_str(r.str)
 8958|  27.8k|    {
 8959|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1771|  28.7k|    {
 1772|  28.7k|        return has_value();
 1773|  28.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1846|  59.3k|    {
 1847|  59.3k|        return &value();
 1848|  59.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  59.3k|    {
 1801|  59.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  59.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  59.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  59.3k|        return this->get_value();
 1803|  59.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  675|  42.0k|    {
  676|  42.0k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 15.3k, False: 26.7k]
  ------------------
  677|  15.3k|            destroy_value();
  678|  15.3k|        }
  679|  26.7k|        else {
  680|  26.7k|            destroy_unexpected();
  681|  26.7k|        }
  682|  42.0k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
10073|  13.9k|{
10074|  13.9k|    auto result = make_scan_result<Source, Args...>();
10075|  13.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  13.9k|                                   make_scan_args(result->values())));
10077|  13.9k|    return result;
10078|  13.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 6020|  1.78k|{
 6021|  1.78k|    check_scan_arg_types<T>();
 6022|       |
 6023|  1.78k|    basic_scan_arg<Context> arg;
 6024|  1.78k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  1.78k|    arg.m_value = make_value<Context>(value);
 6026|  1.78k|    return arg;
 6027|  1.78k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  5.34k|    {
 6581|  5.34k|        return std::get<0>(m_values);
 6582|  5.34k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  40.0k|    {
 2901|  40.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  40.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  40.0k|    {
 2882|  40.0k|        return decay_copy(t.begin());
 2883|  40.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  2.77M|{
 2126|  2.77M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  2.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  2.77M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   202k|    {
 2958|   202k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   202k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   202k|    {
 2940|   202k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   202k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
10004|  16.4k|{
10005|  16.4k|    auto result = make_scan_result<Source, Args...>();
10006|  16.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  16.4k|                                   make_scan_args(result->values())));
10008|  16.4k|    return result;
10009|  16.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9960|  33.7k|{
 9961|  33.7k|    return scan_result_type<Source, Args...>();
 9962|  33.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1583|  33.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  459|  33.7k|        : m_value(T{}), m_has_value(true)
  460|  33.7k|    {
  461|  33.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6775|  33.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   101k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   101k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  33.7k|{
 9946|  33.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 20.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  20.3k|    else {
 9950|  20.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  20.3k|    static_cast<    \
  |  | 1084|  20.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  20.3k|    }
 9952|  33.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   101k|    {
 1772|   101k|        return has_value();
 1773|   101k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   202k|    {
  523|   202k|        return m_has_value;
  524|   202k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  40.0k|    {
 1778|  40.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  40.0k|        return this->get_unexpected().error();
 1780|  40.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  40.0k|    {
  506|  40.0k|        return m_unexpected;
  507|  40.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|  13.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  13.3k|          m_has_value(false)
  484|  13.3k|    {
  485|  13.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   134k|    {
  523|   134k|        return m_has_value;
  524|   134k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  74.4k|    {
  489|  74.4k|        return m_value;
  490|  74.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  13.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  536|  13.3k|    {
  537|  13.3k|        scn::detail::construct_at(&get_unexpected(),
  538|  13.3k|                                  std::forward<Args>(args)...);
  539|  13.3k|        m_has_value = false;
  540|  13.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  13.3k|    {
  506|  13.3k|        return m_unexpected;
  507|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  13.3k|    {
  514|  13.3k|        return std::move(m_unexpected);
  515|  13.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|  61.0k|    {
 6650|  61.0k|        m_range = std::forward<Other>(r);
 6651|  61.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|  61.0k|    {
 1827|  61.0k|        return value();
 1828|  61.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|  61.0k|    {
 1801|  61.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  61.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  61.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  61.0k|        return this->get_value();
 1803|  61.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  61.0k|    {
  489|  61.0k|        return m_value;
  490|  61.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|  49.2k|{
 9767|  49.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  49.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|  49.2k|{
 9704|  49.2k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  49.2k|    auto result = vscan_impl(buffer, format, args);
 9707|  49.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.7k, False: 30.5k]
  |  |  ------------------
  ------------------
 9708|  18.7k|        return unexpected(result.error());
 9709|  18.7k|    }
 9710|  30.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  49.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   101k|{
 5466|   101k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   101k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   101k|                  "\n"
 5470|   101k|                  "Unsupported range type given as input to a scanning "
 5471|   101k|                  "function.\n"
 5472|   101k|                  "A range needs to have a character type (value type) "
 5473|   101k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   101k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   101k|                  "to be included.\n"
 5476|   101k|                  "See the scnlib documentation for more details.");
 5477|   101k|    static_assert(
 5478|   101k|        !std::is_same_v<T, custom_char_traits>,
 5479|   101k|        "\n"
 5480|   101k|        "Unsupported range type given as input to a scanning "
 5481|   101k|        "function.\n"
 5482|   101k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   101k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   101k|        "not supported.");
 5485|   101k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   101k|                  "\n"
 5487|   101k|                  "Unsupported range type given as input to a scanning "
 5488|   101k|                  "function.\n"
 5489|   101k|                  "file_marker_found cannot be used as an "
 5490|   101k|                  "source range type to scn::scan.\n"
 5491|   101k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   101k|                  "and do not provide an explicit source range, "
 5493|   101k|                  "or use scn::scan with a FILE* directly.");
 5494|   101k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   101k|                  "\n"
 5496|   101k|                  "Unsupported range type given as input to a scanning "
 5497|   101k|                  "function.\n"
 5498|   101k|                  "In order to be scannable, a range needs to satisfy "
 5499|   101k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   101k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   101k|                  "\n"
 5502|   101k|                  "Unsupported range type given as input to a scanning "
 5503|   101k|                  "function.\n"
 5504|   101k|                  "A range needs to model forward_range and have a valid "
 5505|   101k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   101k|                  "Examples of scannable ranges are std::string, "
 5507|   101k|                  "std::string_view, "
 5508|   101k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   101k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   101k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   101k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   101k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   101k|    else {
 5451|   101k|        return make_forward_scan_buffer(r);
 5452|   101k|    }
 5453|   101k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   101k|{
 5269|   101k|    return basic_scan_forward_buffer_impl(range);
 5270|   101k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   101k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   101k|          m_cursor(ranges::begin(*m_range))
 4830|   101k|    {
 4831|   101k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   101k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   101k|    {
 4802|   101k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   101k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   101k|    {
 4493|   101k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   184k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   162k|    {
 2901|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   162k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   162k|    {
 2882|   162k|        return decay_copy(t.begin());
 2883|   162k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|   223k|    {
 3513|   223k|        return m_iterator;
 3514|   223k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|   758k|    {
 4835|   758k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 14.7k, False: 743k]
  ------------------
 4836|  14.7k|            return false;
 4837|  14.7k|        }
 4838|   743k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|   743k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|   743k|        }
 4841|   743k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 645k, False: 98.2k]
  ------------------
 4842|   645k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|   645k|                                          this->m_current_view.begin(),
 4844|   645k|                                          this->m_current_view.end());
 4845|   645k|        }
 4846|   743k|        m_latest = *m_cursor;
 4847|   743k|        ++m_cursor;
 4848|   743k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|   743k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|   743k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|   743k|        }
 4852|   743k|        return true;
 4853|   758k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.24M|    {
 2958|  2.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.24M|    {
 2940|  2.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  2.30M|    {
 3518|  2.30M|        return m_sentinel;
 3519|  2.30M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   101k|    {
 4402|   101k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   101k|        return true;
 4404|   101k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  40.0k|        : base(unexpect, std::move(e.error())),
 1648|  40.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  40.0k|    {
 1650|  40.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  40.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  40.0k|          m_has_value(false)
  484|  40.0k|    {
  485|  40.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   101k|    {
 1348|   101k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|  61.0k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  61.0k|                      ranges::iterator_t<SourceRange>>) {
 6882|  61.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  61.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  61.0k|    {
 2901|  61.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  61.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  61.0k|    {
 2882|  61.0k|        return decay_copy(t.begin());
 2883|  61.0k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|  61.0k|{
 6867|  61.0k|    return ranges::end(source);
 6868|  61.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  61.0k|    {
 2958|  61.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  61.0k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  61.0k|    {
 2940|  61.0k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  61.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|  61.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  61.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  61.0k|    {
 1604|  61.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|  61.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  61.0k|    {
  475|  61.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  32.8k|    {
 8963|  32.8k|        return m_str;
 8964|  32.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   162k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   162k|    static_cast<    \
  |  | 1084|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   162k|    static_cast<    \
  |  | 1084|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   162k|    {
 3498|   162k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  32.8k|        : m_str(r.str)
 8958|  32.8k|    {
 8959|  32.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1771|  33.7k|    {
 1772|  33.7k|        return has_value();
 1773|  33.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1846|  74.4k|    {
 1847|  74.4k|        return &value();
 1848|  74.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  74.4k|    {
 1801|  74.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  74.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  74.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  74.4k|        return this->get_value();
 1803|  74.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|  61.0k|    {
 6639|  61.0k|        return ranges::begin(m_range);
 6640|  61.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
10073|  16.4k|{
10074|  16.4k|    auto result = make_scan_result<Source, Args...>();
10075|  16.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  16.4k|                                   make_scan_args(result->values())));
10077|  16.4k|    return result;
10078|  16.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|  49.2k|{
 9785|  49.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  49.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|  49.2k|{
 9720|  49.2k|#if !SCN_DISABLE_LOCALE
 9721|  49.2k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  49.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  49.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  49.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  49.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.7k, False: 30.5k]
  |  |  ------------------
  ------------------
 9728|  18.7k|        return unexpected(result.error());
 9729|  18.7k|    }
 9730|  30.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  49.2k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  2.67k|{
 9798|  2.67k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  2.67k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  2.67k|{
 9744|  2.67k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  2.67k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  2.67k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  ------------------
  ------------------
 9748|  2.67k|        return unexpected(result.error());
 9749|  2.67k|    }
 9750|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  2.67k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
10004|  16.4k|{
10005|  16.4k|    auto result = make_scan_result<Source, Args...>();
10006|  16.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  16.4k|                                   make_scan_args(result->values())));
10008|  16.4k|    return result;
10009|  16.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9960|  33.7k|{
 9961|  33.7k|    return scan_result_type<Source, Args...>();
 9962|  33.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1583|  33.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  644|  33.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  33.7k|    {
  646|  33.7k|        construct();
  647|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  33.7k|    {
  727|  33.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  33.7k|        m_has_value = true;
  729|  33.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  428|  33.7k|{
  429|  33.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  33.7k|        T(std::forward<Args>(args)...);
  431|  33.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6775|  33.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   141k|    {
  751|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  33.7k|{
 9946|  33.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 20.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  20.3k|    else {
 9950|  20.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  20.3k|    static_cast<    \
  |  | 1084|  20.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  20.3k|    }
 9952|  33.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  13.3k|        : m_has_value(false)
  670|  13.3k|    {
  671|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  66.8k|    {
  763|  66.8k|        return reinterpret_cast<unexpected<E>*>(
  764|  66.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  66.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  66.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   181k|    {
  720|   181k|        return m_has_value;
  721|   181k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  74.4k|    {
  686|  74.4k|        return *value_ptr();
  687|  74.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  33.7k|    {
  741|  33.7k|        scn::detail::destroy_at(value_ptr());
  742|  33.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  434|  33.7k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  33.7k|    else {
  441|  33.7k|        p->~T();
  442|  33.7k|    }
  443|  33.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6782|  33.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  13.3k|    {
  711|  13.3k|        return std::move(*unexpected_ptr());
  712|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  26.7k|    {
  745|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  746|  26.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  32.8k|    {
 8963|  32.8k|        return m_str;
 8964|  32.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  32.8k|        : m_str(r.str)
 8958|  32.8k|    {
 8959|  32.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1771|  33.7k|    {
 1772|  33.7k|        return has_value();
 1773|  33.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1846|  74.4k|    {
 1847|  74.4k|        return &value();
 1848|  74.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  74.4k|    {
 1801|  74.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  74.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  74.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  74.4k|        return this->get_value();
 1803|  74.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  675|  47.0k|    {
  676|  47.0k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 20.3k, False: 26.7k]
  ------------------
  677|  20.3k|            destroy_value();
  678|  20.3k|        }
  679|  26.7k|        else {
  680|  26.7k|            destroy_unexpected();
  681|  26.7k|        }
  682|  47.0k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
10073|  16.4k|{
10074|  16.4k|    auto result = make_scan_result<Source, Args...>();
10075|  16.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  16.4k|                                   make_scan_args(result->values())));
10077|  16.4k|    return result;
10078|  16.4k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
10004|  16.4k|{
10005|  16.4k|    auto result = make_scan_result<Source, Args...>();
10006|  16.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  16.4k|                                   make_scan_args(result->values())));
10008|  16.4k|    return result;
10009|  16.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9960|  33.7k|{
 9961|  33.7k|    return scan_result_type<Source, Args...>();
 9962|  33.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1583|  33.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  644|  33.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  33.7k|    {
  646|  33.7k|        construct();
  647|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  33.7k|    {
  727|  33.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  33.7k|        m_has_value = true;
  729|  33.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  428|  33.7k|{
  429|  33.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  33.7k|        T(std::forward<Args>(args)...);
  431|  33.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6775|  33.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   141k|    {
  751|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  33.7k|{
 9946|  33.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.3k, False: 20.3k]
  |  |  ------------------
  ------------------
 9947|  13.3k|        out = unexpected(in.error());
 9948|  13.3k|    }
 9949|  20.3k|    else {
 9950|  20.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  20.3k|    static_cast<    \
  |  | 1084|  20.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  20.3k|    }
 9952|  33.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  13.3k|        : base(unexpect, std::move(e.error())),
 1648|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  13.3k|    {
 1650|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  13.3k|        : m_has_value(false)
  670|  13.3k|    {
  671|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  66.8k|    {
  763|  66.8k|        return reinterpret_cast<unexpected<E>*>(
  764|  66.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  66.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  66.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  13.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  934|  13.3k|    {
  935|  13.3k|        assign_common(std::move(other));
  936|  13.3k|        return *this;
  937|  13.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  13.3k|    {
  982|  13.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 13.3k, False: 0]
  ------------------
  983|  13.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 13.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  13.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  13.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   181k|    {
  720|   181k|        return m_has_value;
  721|   181k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  74.4k|    {
  686|  74.4k|        return *value_ptr();
  687|  74.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  13.3k|    {
 1078|  13.3k|        this->destroy_value();
 1079|  13.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  33.7k|    {
  741|  33.7k|        scn::detail::destroy_at(value_ptr());
  742|  33.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  434|  33.7k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  33.7k|    else {
  441|  33.7k|        p->~T();
  442|  33.7k|    }
  443|  33.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6782|  33.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  13.3k|    {
  734|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  13.3k|                                  std::forward<Args>(args)...);
  736|  13.3k|        m_has_value = false;
  737|  13.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  13.3k|    {
  711|  13.3k|        return std::move(*unexpected_ptr());
  712|  13.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  26.7k|    {
  745|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  746|  26.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|  32.8k|    {
 8963|  32.8k|        return m_str;
 8964|  32.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  32.8k|        : m_str(r.str)
 8958|  32.8k|    {
 8959|  32.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1771|  33.7k|    {
 1772|  33.7k|        return has_value();
 1773|  33.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1846|  74.4k|    {
 1847|  74.4k|        return &value();
 1848|  74.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  74.4k|    {
 1801|  74.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  74.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  74.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  74.4k|        return this->get_value();
 1803|  74.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  675|  47.0k|    {
  676|  47.0k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 20.3k, False: 26.7k]
  ------------------
  677|  20.3k|            destroy_value();
  678|  20.3k|        }
  679|  26.7k|        else {
  680|  26.7k|            destroy_unexpected();
  681|  26.7k|        }
  682|  47.0k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
10073|  16.4k|{
10074|  16.4k|    auto result = make_scan_result<Source, Args...>();
10075|  16.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  16.4k|                                   make_scan_args(result->values())));
10077|  16.4k|    return result;
10078|  16.4k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10114|    891|{
10115|    891|    auto result = make_scan_result<Source, T>();
10116|    891|    fill_scan_result(
10117|    891|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|    891|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|    891|                            detail::make_arg<scan_context>(result->value())));
10119|    891|    return result;
10120|    891|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  81.9k|    {
 2901|  81.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  81.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  81.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  81.9k|    {
 2882|  81.9k|        return decay_copy(t.begin());
 2883|  81.9k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  1.04M|{
 2126|  1.04M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.04M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   206k|    {
 2958|   206k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   206k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   206k|    {
 2940|   206k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   206k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  459|  34.1k|        : m_value(T{}), m_has_value(true)
  460|  34.1k|    {
  461|  34.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|   102k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|   102k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|   102k|    {
 1772|   102k|        return has_value();
 1773|   102k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   204k|    {
  523|   204k|        return m_has_value;
  524|   204k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|  80.1k|    {
 1778|  80.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  80.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  80.1k|        return this->get_unexpected().error();
 1780|  80.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  80.1k|    {
  506|  80.1k|        return m_unexpected;
  507|  80.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  482|  26.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  26.7k|          m_has_value(false)
  484|  26.7k|    {
  485|  26.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   136k|    {
  523|   136k|        return m_has_value;
  524|   136k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  48.8k|    {
  489|  48.8k|        return m_value;
  490|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  26.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  536|  26.7k|    {
  537|  26.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  26.7k|                                  std::forward<Args>(args)...);
  539|  26.7k|        m_has_value = false;
  540|  26.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  26.7k|    {
  506|  26.7k|        return m_unexpected;
  507|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  26.7k|    {
  514|  26.7k|        return std::move(m_unexpected);
  515|  26.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|  22.1k|    {
 6650|  22.1k|        m_range = std::forward<Other>(r);
 6651|  22.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  22.1k|    {
 1827|  22.1k|        return value();
 1828|  22.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  22.1k|    {
 1801|  22.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  22.1k|        return this->get_value();
 1803|  22.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  22.1k|    {
  489|  22.1k|        return m_value;
  490|  22.1k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|  48.4k|{
 9704|  48.4k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  48.4k|    auto result = vscan_impl(buffer, format, args);
 9707|  48.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 11.0k]
  |  |  ------------------
  ------------------
 9708|  37.4k|        return unexpected(result.error());
 9709|  37.4k|    }
 9710|  11.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  48.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|   102k|{
 5466|   102k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   102k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   102k|                  "\n"
 5470|   102k|                  "Unsupported range type given as input to a scanning "
 5471|   102k|                  "function.\n"
 5472|   102k|                  "A range needs to have a character type (value type) "
 5473|   102k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   102k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   102k|                  "to be included.\n"
 5476|   102k|                  "See the scnlib documentation for more details.");
 5477|   102k|    static_assert(
 5478|   102k|        !std::is_same_v<T, custom_char_traits>,
 5479|   102k|        "\n"
 5480|   102k|        "Unsupported range type given as input to a scanning "
 5481|   102k|        "function.\n"
 5482|   102k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   102k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   102k|        "not supported.");
 5485|   102k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   102k|                  "\n"
 5487|   102k|                  "Unsupported range type given as input to a scanning "
 5488|   102k|                  "function.\n"
 5489|   102k|                  "file_marker_found cannot be used as an "
 5490|   102k|                  "source range type to scn::scan.\n"
 5491|   102k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   102k|                  "and do not provide an explicit source range, "
 5493|   102k|                  "or use scn::scan with a FILE* directly.");
 5494|   102k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   102k|                  "\n"
 5496|   102k|                  "Unsupported range type given as input to a scanning "
 5497|   102k|                  "function.\n"
 5498|   102k|                  "In order to be scannable, a range needs to satisfy "
 5499|   102k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   102k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   102k|                  "\n"
 5502|   102k|                  "Unsupported range type given as input to a scanning "
 5503|   102k|                  "function.\n"
 5504|   102k|                  "A range needs to model forward_range and have a valid "
 5505|   102k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   102k|                  "Examples of scannable ranges are std::string, "
 5507|   102k|                  "std::string_view, "
 5508|   102k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   102k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   102k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   102k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   102k|{
 5404|   102k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   102k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   102k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   102k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   102k|    {
 3032|   102k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   102k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   102k|    {
 3013|   102k|        return t.data();
 3014|   102k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|   102k|    {
 3415|   102k|        return detail::to_address(ranges::begin(derived()));
 3416|   102k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   301k|{
  341|   301k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   301k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   301k|{
  319|   301k|    return p;
  320|   301k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   124k|    {
 2901|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   124k|    {
 2882|   124k|        return decay_copy(t.begin());
 2883|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|  1.77M|    {
 3513|  1.77M|        return m_iterator;
 3514|  1.77M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|   102k|    {
 3371|   102k|        return static_cast<const D&>(*this);
 3372|   102k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   102k|    {
 3107|   102k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   102k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   102k|    {
 3073|   102k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   102k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   323k|    {
 3530|   323k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   323k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  80.1k|        : base(unexpect, std::move(e.error())),
 1648|  80.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  80.1k|    {
 1650|  80.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  80.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  80.1k|          m_has_value(false)
  484|  80.1k|    {
  485|  80.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   102k|    {
 1348|   102k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|  22.1k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  22.1k|                      ranges::iterator_t<SourceRange>>) {
 6882|  22.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  22.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   317k|    {
 2901|   317k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   317k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   317k|    {
 2882|   317k|        return decay_copy(t.begin());
 2883|   317k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|  22.1k|{
 6867|  22.1k|    return ranges::end(source);
 6868|  22.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   116k|    {
 2958|   116k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   116k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   116k|    {
 2940|   116k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   116k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|  1.40M|    {
 3518|  1.40M|        return m_sentinel;
 3519|  1.40M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  22.1k|    {
 1604|  22.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  22.1k|    {
  475|  22.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  64.6k|{
 6275|  64.6k|    detail::check_scan_arg_types<Args...>();
 6276|  64.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  64.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  64.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  64.6k|    {
 6252|  64.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  64.6k|    {
 6260|  64.6k|        return {detail::make_arg<
 6261|  64.6k|            kind, Context,
 6262|  64.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  64.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  64.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 6044|  64.6k|{
 6045|  64.6k|    return make_value<Context>(value);
 6046|  64.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5970|  68.2k|{
 5971|  68.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  68.2k|    else {
 5978|  68.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  68.2k|            value, context_tag<Context>{}));
 5980|  68.2k|    }
 5981|  68.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  68.2k|    {
 5867|  68.2k|        return {};
 5868|  68.2k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5939|  68.2k|{
 5940|  68.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  68.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  68.2k|    constexpr bool scannable_char =
 5944|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  68.2k|    static_assert(scannable_char,
 5946|  68.2k|                  "Cannot scan an argument of an unsupported character "
 5947|  68.2k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  68.2k|    constexpr bool scannable_const =
 5950|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  68.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  68.2k|    constexpr bool scannable_disabled =
 5954|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  68.2k|    static_assert(scannable_disabled,
 5956|  68.2k|                  "Cannot scan an argument that has been disabled by "
 5957|  68.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  68.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  68.2k|    static_assert(
 5961|  68.2k|        scannable,
 5962|  68.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  68.2k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  68.2k|    return arg_value{arg};
 5966|  68.2k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  68.2k|        : custom_value{static_cast<void*>(&val.val),
 5722|  68.2k|                       scan_custom_arg<T, Context>}
 5723|  68.2k|    {
 5724|  68.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  68.2k|    {
 5740|  68.2k|        static_assert(!is_type_disabled<T>,
 5741|  68.2k|                      "Scanning of custom types is disabled by "
 5742|  68.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  68.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  68.2k|        using context_type = Context;
 5746|  68.2k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  68.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  68.2k|        auto s = scanner_type{};
 5750|       |
 5751|  68.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  68.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  68.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  68.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  68.2k|    do {                                                            \
  |  | 3985|  68.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.56k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.56k|        }                                                           \
  |  | 3988|  68.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  64.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 49.8k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  49.8k|    }                                                  \
  |  |  |  | 3995|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  14.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  14.7k|    static_cast<    \
  |  | 1084|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  14.7k|        return {};
 5760|  64.6k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  68.2k|{
 5670|  68.2k|#if SCN_HAS_EXCEPTIONS
 5671|  68.2k|    auto fmt_it = pctx.begin();
 5672|  68.2k|    try {
 5673|  68.2k|        fmt_it = s.parse(pctx);
 5674|  68.2k|    }
 5675|  68.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  68.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  ------------------
  ------------------
 5698|  3.56k|        return e;
 5699|  3.56k|    }
 5700|  64.6k|    pctx.advance_to(fmt_it);
 5701|  64.6k|    return {};
 5702|  68.2k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|   991k|    {
 6464|   991k|        return m_format.data();
 6465|   991k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6468|   204k|    {
 6469|   204k|        return m_format.data() + m_format.size();
 6470|   204k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6509|  10.6k|    {
 6510|  10.6k|        m_error = unexpected(detail::handle_error(
 6511|  10.6k|            scan_error{scan_error::invalid_format_string, msg}));
 6512|  10.6k|        return m_error.error();
 6513|  10.6k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|   463k|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|   463k|    else {
 4131|       |        // utf-32
 4132|   463k|        static_assert(sizeof(U) == 4);
 4133|   463k|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|   463k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|   463k|        return 1;
 4135|   463k|    }
 4136|   463k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   355k|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|   355k|    else {
 4337|   355k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|   355k|        auto cp = static_cast<char32_t>(input.front());
 4339|   355k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 47.0k, False: 308k]
  |  |  ------------------
  ------------------
 4340|  47.0k|            return invalid_code_point;
 4341|  47.0k|        }
 4342|   308k|        return cp;
 4343|   355k|    }
 4344|   355k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   387k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   387k|    else {
 4037|   387k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   387k|    }
 4039|   387k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6516|   204k|    {
 6517|   204k|        return m_error;
 6518|   204k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   387k|    {
 6475|   387k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   387k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|   490k|    {
 1772|   490k|        return has_value();
 1773|   490k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|   980k|    {
  523|   980k|        return m_has_value;
  524|   980k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   305k|    {
 1778|   305k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   305k|        return this->get_unexpected().error();
 1780|   305k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   305k|    {
  506|   305k|        return m_unexpected;
  507|   305k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   140k|    {
 1837|   140k|        return std::move(value());
 1838|   140k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   184k|    {
 1801|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   184k|        return this->get_value();
 1803|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|   184k|    {
  489|   184k|        return m_value;
  490|   184k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|   162k|    {
 9166|   162k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   162k|    static_cast<    \
  |  | 1084|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   162k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  68.2k|    {
 5876|  68.2k|        return {val};
 5877|  68.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  64.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  64.6k|    {
 6302|  64.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6357|   193k|        : m_desc(desc), m_values(data)
 6358|   193k|    {
 6359|   193k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|   888k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   888k|    static_cast<    \
  |  | 1084|   888k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   888k|    static_cast<    \
  |  | 1084|   888k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   888k|    {
 3498|   888k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|   193k|{
 8645|   193k|    return s;
 8646|   193k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|   193k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|  22.1k|    {
 6639|  22.1k|        return ranges::begin(m_range);
 6640|  22.1k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|  48.4k|{
 9720|  48.4k|#if !SCN_DISABLE_LOCALE
 9721|  48.4k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  48.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  48.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  48.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  48.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 11.0k]
  |  |  ------------------
  ------------------
 9728|  37.4k|        return unexpected(result.error());
 9729|  37.4k|    }
 9730|  11.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  48.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  5.34k|{
 9744|  5.34k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  5.34k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  5.34k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  ------------------
  ------------------
 9748|  5.34k|        return unexpected(result.error());
 9749|  5.34k|    }
 9750|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  5.34k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 6020|  3.56k|{
 6021|  3.56k|    check_scan_arg_types<T>();
 6022|       |
 6023|  3.56k|    basic_scan_arg<Context> arg;
 6024|  3.56k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  3.56k|    arg.m_value = make_value<Context>(value);
 6026|  3.56k|    return arg;
 6027|  3.56k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|   204k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  644|  34.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  34.1k|    {
  646|  34.1k|        construct();
  647|  34.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  34.1k|    {
  727|  34.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  34.1k|        m_has_value = true;
  729|  34.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  428|  34.1k|{
  429|  34.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  34.1k|        T(std::forward<Args>(args)...);
  431|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   117k|    {
  751|   117k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   117k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  669|  26.7k|        : m_has_value(false)
  670|  26.7k|    {
  671|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   133k|    {
  763|   133k|        return reinterpret_cast<unexpected<E>*>(
  764|   133k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   133k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   197k|    {
  720|   197k|        return m_has_value;
  721|   197k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  48.8k|    {
  686|  48.8k|        return *value_ptr();
  687|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  34.1k|    {
  741|  34.1k|        scn::detail::destroy_at(value_ptr());
  742|  34.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  434|  34.1k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  34.1k|    else {
  441|  34.1k|        p->~T();
  442|  34.1k|    }
  443|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6782|  34.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  26.7k|    {
  711|  26.7k|        return std::move(*unexpected_ptr());
  712|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  53.4k|    {
  745|  53.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  53.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  64.6k|{
 6275|  64.6k|    detail::check_scan_arg_types<Args...>();
 6276|  64.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  64.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  64.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  64.6k|    {
 6252|  64.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  64.6k|    {
 6260|  64.6k|        return {detail::make_arg<
 6261|  64.6k|            kind, Context,
 6262|  64.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  64.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  64.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 6044|  64.6k|{
 6045|  64.6k|    return make_value<Context>(value);
 6046|  64.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5970|  68.2k|{
 5971|  68.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  68.2k|    else {
 5978|  68.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  68.2k|            value, context_tag<Context>{}));
 5980|  68.2k|    }
 5981|  68.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  68.2k|    {
 5867|  68.2k|        return {};
 5868|  68.2k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5939|  68.2k|{
 5940|  68.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  68.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  68.2k|    constexpr bool scannable_char =
 5944|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  68.2k|    static_assert(scannable_char,
 5946|  68.2k|                  "Cannot scan an argument of an unsupported character "
 5947|  68.2k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  68.2k|    constexpr bool scannable_const =
 5950|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  68.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  68.2k|    constexpr bool scannable_disabled =
 5954|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  68.2k|    static_assert(scannable_disabled,
 5956|  68.2k|                  "Cannot scan an argument that has been disabled by "
 5957|  68.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  68.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  68.2k|    static_assert(
 5961|  68.2k|        scannable,
 5962|  68.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  68.2k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  68.2k|    return arg_value{arg};
 5966|  68.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  68.2k|        : custom_value{static_cast<void*>(&val.val),
 5722|  68.2k|                       scan_custom_arg<T, Context>}
 5723|  68.2k|    {
 5724|  68.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  68.2k|    {
 5740|  68.2k|        static_assert(!is_type_disabled<T>,
 5741|  68.2k|                      "Scanning of custom types is disabled by "
 5742|  68.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  68.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  68.2k|        using context_type = Context;
 5746|  68.2k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  68.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  68.2k|        auto s = scanner_type{};
 5750|       |
 5751|  68.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  68.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  68.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  68.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  68.2k|    do {                                                            \
  |  | 3985|  68.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.56k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.56k|        }                                                           \
  |  | 3988|  68.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  64.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 49.8k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  49.8k|    }                                                  \
  |  |  |  | 3995|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  14.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  14.7k|    static_cast<    \
  |  | 1084|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  14.7k|        return {};
 5760|  64.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  68.2k|{
 5670|  68.2k|#if SCN_HAS_EXCEPTIONS
 5671|  68.2k|    auto fmt_it = pctx.begin();
 5672|  68.2k|    try {
 5673|  68.2k|        fmt_it = s.parse(pctx);
 5674|  68.2k|    }
 5675|  68.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  68.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  ------------------
  ------------------
 5698|  3.56k|        return e;
 5699|  3.56k|    }
 5700|  64.6k|    pctx.advance_to(fmt_it);
 5701|  64.6k|    return {};
 5702|  68.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  68.2k|    {
 5876|  68.2k|        return {val};
 5877|  68.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  64.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  64.6k|    {
 6302|  64.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  675|  60.8k|    {
  676|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 7.38k, False: 53.4k]
  ------------------
  677|  7.38k|            destroy_value();
  678|  7.38k|        }
  679|  53.4k|        else {
  680|  53.4k|            destroy_unexpected();
  681|  53.4k|        }
  682|  60.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 6020|  3.56k|{
 6021|  3.56k|    check_scan_arg_types<T>();
 6022|       |
 6023|  3.56k|    basic_scan_arg<Context> arg;
 6024|  3.56k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  3.56k|    arg.m_value = make_value<Context>(value);
 6026|  3.56k|    return arg;
 6027|  3.56k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  644|  34.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  34.1k|    {
  646|  34.1k|        construct();
  647|  34.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  34.1k|    {
  727|  34.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  34.1k|        m_has_value = true;
  729|  34.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  428|  34.1k|{
  429|  34.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  34.1k|        T(std::forward<Args>(args)...);
  431|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   117k|    {
  751|   117k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   117k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  669|  26.7k|        : m_has_value(false)
  670|  26.7k|    {
  671|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   133k|    {
  763|   133k|        return reinterpret_cast<unexpected<E>*>(
  764|   133k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   133k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   197k|    {
  720|   197k|        return m_has_value;
  721|   197k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  48.8k|    {
  686|  48.8k|        return *value_ptr();
  687|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  34.1k|    {
  741|  34.1k|        scn::detail::destroy_at(value_ptr());
  742|  34.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  434|  34.1k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  34.1k|    else {
  441|  34.1k|        p->~T();
  442|  34.1k|    }
  443|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6782|  34.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  26.7k|    {
  711|  26.7k|        return std::move(*unexpected_ptr());
  712|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  53.4k|    {
  745|  53.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  53.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  64.6k|{
 6275|  64.6k|    detail::check_scan_arg_types<Args...>();
 6276|  64.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  64.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  64.6k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  64.6k|    {
 6252|  64.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6259|  64.6k|    {
 6260|  64.6k|        return {detail::make_arg<
 6261|  64.6k|            kind, Context,
 6262|  64.6k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  64.6k|                                 typename Context::char_type>::value>(args)...};
 6264|  64.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 6044|  64.6k|{
 6045|  64.6k|    return make_value<Context>(value);
 6046|  64.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5970|  68.2k|{
 5971|  68.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|       |                                  needs_context_tag>) {
 5975|       |        return make_value_impl<T>(SCN_FWD(arg));
 5976|       |    }
 5977|  68.2k|    else {
 5978|  68.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|  68.2k|            value, context_tag<Context>{}));
 5980|  68.2k|    }
 5981|  68.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_17needs_context_tagERS9_:
 5866|  68.2k|    {
 5867|  68.2k|        return {};
 5868|  68.2k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5939|  68.2k|{
 5940|  68.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  68.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  68.2k|    constexpr bool scannable_char =
 5944|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  68.2k|    static_assert(scannable_char,
 5946|  68.2k|                  "Cannot scan an argument of an unsupported character "
 5947|  68.2k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  68.2k|    constexpr bool scannable_const =
 5950|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  68.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  68.2k|    constexpr bool scannable_disabled =
 5954|  68.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  68.2k|    static_assert(scannable_disabled,
 5956|  68.2k|                  "Cannot scan an argument that has been disabled by "
 5957|  68.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  68.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  68.2k|    static_assert(
 5961|  68.2k|        scannable,
 5962|  68.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  68.2k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  68.2k|    return arg_value{arg};
 5966|  68.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5721|  68.2k|        : custom_value{static_cast<void*>(&val.val),
 5722|  68.2k|                       scan_custom_arg<T, Context>}
 5723|  68.2k|    {
 5724|  68.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5739|  68.2k|    {
 5740|  68.2k|        static_assert(!is_type_disabled<T>,
 5741|  68.2k|                      "Scanning of custom types is disabled by "
 5742|  68.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5743|  68.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1079|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5744|       |
 5745|  68.2k|        using context_type = Context;
 5746|  68.2k|        using parse_context_type = typename context_type::parse_context_type;
 5747|  68.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5748|       |
 5749|  68.2k|        auto s = scanner_type{};
 5750|       |
 5751|  68.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5752|  68.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5753|  68.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5754|       |
 5755|  68.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3984|  68.2k|    do {                                                            \
  |  | 3985|  68.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.56k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.56k|        }                                                           \
  |  | 3988|  68.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5756|  64.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3996|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 49.8k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  49.8k|    }                                                  \
  |  |  |  | 3995|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5757|  14.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  14.7k|    static_cast<    \
  |  | 1084|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5758|       |
 5759|  14.7k|        return {};
 5760|  64.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5669|  68.2k|{
 5670|  68.2k|#if SCN_HAS_EXCEPTIONS
 5671|  68.2k|    auto fmt_it = pctx.begin();
 5672|  68.2k|    try {
 5673|  68.2k|        fmt_it = s.parse(pctx);
 5674|  68.2k|    }
 5675|  68.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5676|      0|        SCN_CLANG_PUSH
 5677|      0|        SCN_CLANG_IGNORE("-Wexit-time-destructors")
 5678|       |        // scan_error takes a const char*.
 5679|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5680|       |        // stores a reference-counted string,
 5681|       |        // that will go out of scope here.
 5682|       |        // We need to provide a const char* that will stay in scope.
 5683|       |        // If scan_format_string_error was thrown with a string literal,
 5684|       |        // use that, otherwise refer to a thread_local std::string
 5685|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5685:25): [True: 0, False: 0]
  ------------------
 5686|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5687|      0|        }
 5688|      0|        thread_local std::string err_msg{};
 5689|      0|        err_msg = ex.what();
 5690|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5691|      0|                                     err_msg.c_str());
 5692|      0|        SCN_CLANG_POP
 5693|      0|    }
 5694|       |#else
 5695|       |    auto fmt_it = s.parse(pctx_ref);
 5696|       |#endif
 5697|  68.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.56k, False: 64.6k]
  |  |  ------------------
  ------------------
 5698|  3.56k|        return e;
 5699|  3.56k|    }
 5700|  64.6k|    pctx.advance_to(fmt_it);
 5701|  64.6k|    return {};
 5702|  68.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPNSt3__19enable_ifIXsr3stdE26is_default_constructible_vINS0_7scannerIT_wvEEEEvE4typeELPv0EEENS1_14custom_wrapperISC_T0_EERSC_NS1_11context_tagISJ_EE:
 5875|  68.2k|    {
 5876|  68.2k|        return {val};
 5877|  68.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  64.6k|        : basic_scan_args(store.desc, store.args.data())
 6301|  64.6k|    {
 6302|  64.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  675|  60.8k|    {
  676|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 7.38k, False: 53.4k]
  ------------------
  677|  7.38k|            destroy_value();
  678|  7.38k|        }
  679|  53.4k|        else {
  680|  53.4k|            destroy_unexpected();
  681|  53.4k|        }
  682|  60.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 6020|  3.56k|{
 6021|  3.56k|    check_scan_arg_types<T>();
 6022|       |
 6023|  3.56k|    basic_scan_arg<Context> arg;
 6024|  3.56k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  3.56k|    arg.m_value = make_value<Context>(value);
 6026|  3.56k|    return arg;
 6027|  3.56k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  80.1k|    {
 2901|  80.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  80.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  80.1k|    {
 2882|  80.1k|        return decay_copy(t.begin());
 2883|  80.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|  1.44M|{
 2126|  1.44M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.44M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   204k|    {
 2958|   204k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   204k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   204k|    {
 2940|   204k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   204k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  459|  34.1k|        : m_value(T{}), m_has_value(true)
  460|  34.1k|    {
  461|  34.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   102k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   102k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   102k|    {
 1772|   102k|        return has_value();
 1773|   102k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   204k|    {
  523|   204k|        return m_has_value;
  524|   204k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  80.1k|    {
 1778|  80.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  80.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  80.1k|        return this->get_unexpected().error();
 1780|  80.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  80.1k|    {
  506|  80.1k|        return m_unexpected;
  507|  80.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|  26.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  26.7k|          m_has_value(false)
  484|  26.7k|    {
  485|  26.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   136k|    {
  523|   136k|        return m_has_value;
  524|   136k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  48.8k|    {
  489|  48.8k|        return m_value;
  490|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  26.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  536|  26.7k|    {
  537|  26.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  26.7k|                                  std::forward<Args>(args)...);
  539|  26.7k|        m_has_value = false;
  540|  26.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  26.7k|    {
  506|  26.7k|        return m_unexpected;
  507|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  26.7k|    {
  514|  26.7k|        return std::move(m_unexpected);
  515|  26.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|  22.1k|    {
 6650|  22.1k|        m_range = std::forward<Other>(r);
 6651|  22.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|  22.1k|    {
 1827|  22.1k|        return value();
 1828|  22.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|  22.1k|    {
 1801|  22.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  22.1k|        return this->get_value();
 1803|  22.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  22.1k|    {
  489|  22.1k|        return m_value;
  490|  22.1k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|  48.4k|{
 9704|  48.4k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  48.4k|    auto result = vscan_impl(buffer, format, args);
 9707|  48.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 11.0k]
  |  |  ------------------
  ------------------
 9708|  37.4k|        return unexpected(result.error());
 9709|  37.4k|    }
 9710|  11.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  48.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   102k|{
 5466|   102k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   102k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   102k|                  "\n"
 5470|   102k|                  "Unsupported range type given as input to a scanning "
 5471|   102k|                  "function.\n"
 5472|   102k|                  "A range needs to have a character type (value type) "
 5473|   102k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   102k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   102k|                  "to be included.\n"
 5476|   102k|                  "See the scnlib documentation for more details.");
 5477|   102k|    static_assert(
 5478|   102k|        !std::is_same_v<T, custom_char_traits>,
 5479|   102k|        "\n"
 5480|   102k|        "Unsupported range type given as input to a scanning "
 5481|   102k|        "function.\n"
 5482|   102k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   102k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   102k|        "not supported.");
 5485|   102k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   102k|                  "\n"
 5487|   102k|                  "Unsupported range type given as input to a scanning "
 5488|   102k|                  "function.\n"
 5489|   102k|                  "file_marker_found cannot be used as an "
 5490|   102k|                  "source range type to scn::scan.\n"
 5491|   102k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   102k|                  "and do not provide an explicit source range, "
 5493|   102k|                  "or use scn::scan with a FILE* directly.");
 5494|   102k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   102k|                  "\n"
 5496|   102k|                  "Unsupported range type given as input to a scanning "
 5497|   102k|                  "function.\n"
 5498|   102k|                  "In order to be scannable, a range needs to satisfy "
 5499|   102k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   102k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   102k|                  "\n"
 5502|   102k|                  "Unsupported range type given as input to a scanning "
 5503|   102k|                  "function.\n"
 5504|   102k|                  "A range needs to model forward_range and have a valid "
 5505|   102k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   102k|                  "Examples of scannable ranges are std::string, "
 5507|   102k|                  "std::string_view, "
 5508|   102k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   102k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   102k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   102k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   102k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   102k|    else {
 5451|   102k|        return make_forward_scan_buffer(r);
 5452|   102k|    }
 5453|   102k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   102k|{
 5269|   102k|    return basic_scan_forward_buffer_impl(range);
 5270|   102k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   102k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   102k|          m_cursor(ranges::begin(*m_range))
 4830|   102k|    {
 4831|   102k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   102k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   102k|    {
 4802|   102k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   102k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   102k|    {
 4493|   102k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   199k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   124k|    {
 2901|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   124k|    {
 2882|   124k|        return decay_copy(t.begin());
 2883|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|   146k|    {
 3513|   146k|        return m_iterator;
 3514|   146k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|   344k|    {
 4835|   344k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 19.4k, False: 324k]
  ------------------
 4836|  19.4k|            return false;
 4837|  19.4k|        }
 4838|   324k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|   324k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|   324k|        }
 4841|   324k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 227k, False: 96.8k]
  ------------------
 4842|   227k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|   227k|                                          this->m_current_view.begin(),
 4844|   227k|                                          this->m_current_view.end());
 4845|   227k|        }
 4846|   324k|        m_latest = *m_cursor;
 4847|   324k|        ++m_cursor;
 4848|   324k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|   324k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|   324k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|   324k|        }
 4852|   324k|        return true;
 4853|   344k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   993k|    {
 2958|   993k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   993k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   993k|    {
 2940|   993k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   993k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|  1.01M|    {
 3518|  1.01M|        return m_sentinel;
 3519|  1.01M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   102k|    {
 4402|   102k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   102k|        return true;
 4404|   102k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  80.1k|        : base(unexpect, std::move(e.error())),
 1648|  80.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  80.1k|    {
 1650|  80.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  80.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  80.1k|          m_has_value(false)
  484|  80.1k|    {
  485|  80.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   102k|    {
 1348|   102k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|  22.1k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  22.1k|                      ranges::iterator_t<SourceRange>>) {
 6882|  22.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  22.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  22.1k|    {
 2901|  22.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  22.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  22.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  22.1k|    {
 2882|  22.1k|        return decay_copy(t.begin());
 2883|  22.1k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|  22.1k|{
 6867|  22.1k|    return ranges::end(source);
 6868|  22.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  22.1k|    {
 2958|  22.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  22.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  22.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  22.1k|    {
 2940|  22.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  22.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  22.1k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  22.1k|    {
 1604|  22.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  22.1k|    {
  475|  22.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   124k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   124k|    static_cast<    \
  |  | 1084|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   124k|    static_cast<    \
  |  | 1084|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   124k|    {
 3498|   124k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|  22.1k|    {
 6639|  22.1k|        return ranges::begin(m_range);
 6640|  22.1k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|  48.4k|{
 9720|  48.4k|#if !SCN_DISABLE_LOCALE
 9721|  48.4k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  48.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  48.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  48.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  48.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 11.0k]
  |  |  ------------------
  ------------------
 9728|  37.4k|        return unexpected(result.error());
 9729|  37.4k|    }
 9730|  11.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  48.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  5.34k|{
 9744|  5.34k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  5.34k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  5.34k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  ------------------
  ------------------
 9748|  5.34k|        return unexpected(result.error());
 9749|  5.34k|    }
 9750|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  5.34k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  644|  34.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  34.1k|    {
  646|  34.1k|        construct();
  647|  34.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  34.1k|    {
  727|  34.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  34.1k|        m_has_value = true;
  729|  34.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  428|  34.1k|{
  429|  34.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  34.1k|        T(std::forward<Args>(args)...);
  431|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   117k|    {
  751|   117k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   117k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  26.7k|        : m_has_value(false)
  670|  26.7k|    {
  671|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   133k|    {
  763|   133k|        return reinterpret_cast<unexpected<E>*>(
  764|   133k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   133k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   197k|    {
  720|   197k|        return m_has_value;
  721|   197k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  48.8k|    {
  686|  48.8k|        return *value_ptr();
  687|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  34.1k|    {
  741|  34.1k|        scn::detail::destroy_at(value_ptr());
  742|  34.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  434|  34.1k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  34.1k|    else {
  441|  34.1k|        p->~T();
  442|  34.1k|    }
  443|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6782|  34.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  26.7k|    {
  711|  26.7k|        return std::move(*unexpected_ptr());
  712|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  53.4k|    {
  745|  53.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  53.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  675|  60.8k|    {
  676|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 7.38k, False: 53.4k]
  ------------------
  677|  7.38k|            destroy_value();
  678|  7.38k|        }
  679|  53.4k|        else {
  680|  53.4k|            destroy_unexpected();
  681|  53.4k|        }
  682|  60.8k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9960|  34.1k|{
 9961|  34.1k|    return scan_result_type<Source, Args...>();
 9962|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1583|  34.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  644|  34.1k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  34.1k|    {
  646|  34.1k|        construct();
  647|  34.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  34.1k|    {
  727|  34.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  34.1k|        m_has_value = true;
  729|  34.1k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  428|  34.1k|{
  429|  34.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  34.1k|        T(std::forward<Args>(args)...);
  431|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6775|  34.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   117k|    {
  751|   117k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   117k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  34.1k|{
 9946|  34.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 26.7k, False: 7.38k]
  |  |  ------------------
  ------------------
 9947|  26.7k|        out = unexpected(in.error());
 9948|  26.7k|    }
 9949|  7.38k|    else {
 9950|  7.38k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  7.38k|    static_cast<    \
  |  | 1084|  7.38k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  7.38k|    }
 9952|  34.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  26.7k|        : base(unexpect, std::move(e.error())),
 1648|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.7k|    {
 1650|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  26.7k|        : m_has_value(false)
  670|  26.7k|    {
  671|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   133k|    {
  763|   133k|        return reinterpret_cast<unexpected<E>*>(
  764|   133k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   133k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  26.7k|    {
 1348|  26.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  26.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  934|  26.7k|    {
  935|  26.7k|        assign_common(std::move(other));
  936|  26.7k|        return *this;
  937|  26.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  26.7k|    {
  982|  26.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 26.7k, False: 0]
  ------------------
  983|  26.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 26.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  26.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  26.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   197k|    {
  720|   197k|        return m_has_value;
  721|   197k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  48.8k|    {
  686|  48.8k|        return *value_ptr();
  687|  48.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  26.7k|    {
 1078|  26.7k|        this->destroy_value();
 1079|  26.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  34.1k|    {
  741|  34.1k|        scn::detail::destroy_at(value_ptr());
  742|  34.1k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  434|  34.1k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  34.1k|    else {
  441|  34.1k|        p->~T();
  442|  34.1k|    }
  443|  34.1k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6782|  34.1k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  26.7k|    {
  734|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  26.7k|                                  std::forward<Args>(args)...);
  736|  26.7k|        m_has_value = false;
  737|  26.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  26.7k|    {
  711|  26.7k|        return std::move(*unexpected_ptr());
  712|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  53.4k|    {
  745|  53.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  53.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|  32.3k|    {
 8963|  32.3k|        return m_str;
 8964|  32.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  32.3k|        : m_str(r.str)
 8958|  32.3k|    {
 8959|  32.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1771|  34.1k|    {
 1772|  34.1k|        return has_value();
 1773|  34.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1846|  48.8k|    {
 1847|  48.8k|        return &value();
 1848|  48.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  48.8k|    {
 1801|  48.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  48.8k|        return this->get_value();
 1803|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  675|  60.8k|    {
  676|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 7.38k, False: 53.4k]
  ------------------
  677|  7.38k|            destroy_value();
  678|  7.38k|        }
  679|  53.4k|        else {
  680|  53.4k|            destroy_unexpected();
  681|  53.4k|        }
  682|  60.8k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  1.33M|    {
 3513|  1.33M|        return m_iterator;
 3514|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  1.11M|    {
 3513|  1.11M|        return m_iterator;
 3514|  1.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|  12.6M|    {
 4537|  12.6M|        assert(m_begin);
 4538|  12.6M|        return m_end == nullptr;
 4539|  12.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|   181k|    {
 4554|   181k|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 83.4k, False: 98.4k]
  ------------------
 4555|  83.4k|            return make_string_view_from_pointers(
 4556|  83.4k|                static_cast<const CharT*>(m_begin) + position(),
 4557|  83.4k|                static_cast<const CharT*>(m_end));
 4558|  83.4k|        }
 4559|  98.4k|        return parent()->get_segment_starting_at(position());
 4560|   181k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  7.33M|    {
 4548|  7.33M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  7.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  7.33M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  7.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|  98.4k|    {
 4437|  98.4k|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  98.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  98.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  98.4k|        const auto upos = static_cast<std::size_t>(pos);
 4439|  98.4k|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 4440|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|      0|        }
 4442|  98.4k|        const auto start = upos - m_putback_buffer.size();
 4443|  98.4k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|  98.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  98.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|  98.4k|        return m_current_view.substr(start);
 4445|  98.4k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|   273k|    {
 4532|   273k|        return m_position;
 4533|   273k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|   386k|    {
 4463|   386k|        return m_is_contiguous;
 4464|   386k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|  6.73M|    {
 4537|  6.73M|        assert(m_begin);
 4538|  6.73M|        return m_end == nullptr;
 4539|  6.73M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|  96.9k|    {
 4554|  96.9k|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 96.9k, False: 0]
  ------------------
 4555|  96.9k|            return make_string_view_from_pointers(
 4556|  96.9k|                static_cast<const CharT*>(m_begin) + position(),
 4557|  96.9k|                static_cast<const CharT*>(m_end));
 4558|  96.9k|        }
 4559|      0|        return parent()->get_segment_starting_at(position());
 4560|  96.9k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|  3.72M|    {
 4548|  3.72M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  3.72M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  3.72M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|   141k|    {
 4532|   141k|        return m_position;
 4533|   141k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|   403k|    {
 4463|   403k|        return m_is_contiguous;
 4464|   403k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|   252k|    {
 3366|   252k|        return static_cast<D&>(*this);
 3367|   252k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|   252k|    {
 3407|   252k|        return detail::to_address(ranges::begin(derived()));
 3408|   252k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|   199k|    {
 3366|   199k|        return static_cast<D&>(*this);
 3367|   199k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|   199k|    {
 3407|   199k|        return detail::to_address(ranges::begin(derived()));
 3408|   199k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|   195k|    {
 9160|   195k|        return ranges::subrange{begin(), end()};
 9161|   195k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|   195k|    {
 9152|   195k|        return ranges::default_sentinel;
 9153|   195k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|   718k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   718k|    static_cast<    \
  |  | 1084|   718k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   718k|    static_cast<    \
  |  | 1084|   718k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   718k|    {
 3498|   718k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|   203k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  98.4k|    {
 2011|  98.4k|        return detail::transform_error_impl(std::move(*this),
 2012|  98.4k|                                            std::forward<F>(f));
 2013|  98.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  98.4k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  98.4k|    else {
 1504|  98.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  98.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  98.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 97.0k, False: 1.45k]
  |  |  ------------------
  ------------------
 1506|  98.4k|                   ? result(*std::forward<Exp>(exp))
 1507|  98.4k|                   : result(unexpect,
 1508|  1.45k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.45k|                                           std::forward<Exp>(exp).error()));
 1510|  98.4k|    }
 1511|  98.4k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   196k|    {
  523|   196k|        return m_has_value;
  524|   196k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  97.0k|    {
 1837|  97.0k|        return std::move(value());
 1838|  97.0k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  97.0k|    {
 1801|  97.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  97.0k|        return this->get_value();
 1803|  97.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  97.0k|    {
  489|  97.0k|        return m_value;
  490|  97.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|   265k|        : base(std::in_place, std::forward<U>(val)),
 1602|   265k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   265k|    {
 1604|   265k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   265k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   265k|    {
  475|   265k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   464k|    {
 1348|   464k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  4.69k|{
 1382|  4.69k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  4.69k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  1.45k|    {
 1788|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  1.45k|        return std::move(this->get_unexpected().error());
 1790|  1.45k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  1.45k|    {
  506|  1.45k|        return m_unexpected;
  507|  1.45k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|  9.38k|    {
  398|  9.38k|        return m_unexpected;
  399|  9.38k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  1.45k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  1.45k|    {
 1660|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   153k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   153k|          m_has_value(false)
  484|   153k|    {
  485|   153k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   192k|    {
 9160|   192k|        return ranges::subrange{begin(), end()};
 9161|   192k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   192k|    {
 9152|   192k|        return ranges::default_sentinel;
 9153|   192k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|   667k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   667k|    static_cast<    \
  |  | 1084|   667k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   667k|    static_cast<    \
  |  | 1084|   667k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   667k|    {
 3498|   667k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  96.9k|    {
 2011|  96.9k|        return detail::transform_error_impl(std::move(*this),
 2012|  96.9k|                                            std::forward<F>(f));
 2013|  96.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  96.9k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  96.9k|    else {
 1504|  96.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  96.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  96.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 95.7k, False: 1.24k]
  |  |  ------------------
  ------------------
 1506|  96.9k|                   ? result(*std::forward<Exp>(exp))
 1507|  96.9k|                   : result(unexpect,
 1508|  1.24k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.24k|                                           std::forward<Exp>(exp).error()));
 1510|  96.9k|    }
 1511|  96.9k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   193k|    {
  523|   193k|        return m_has_value;
  524|   193k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  95.7k|    {
 1837|  95.7k|        return std::move(value());
 1838|  95.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  95.7k|    {
 1801|  95.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  95.7k|        return this->get_value();
 1803|  95.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  95.7k|    {
  489|  95.7k|        return m_value;
  490|  95.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|   162k|        : base(std::in_place, std::forward<U>(val)),
 1602|   162k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   162k|    {
 1604|   162k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   162k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   162k|    {
  475|   162k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   490k|    {
 1348|   490k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  1.24k|    {
 1788|  1.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  1.24k|        return std::move(this->get_unexpected().error());
 1790|  1.24k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  1.24k|    {
  506|  1.24k|        return m_unexpected;
  507|  1.24k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  1.24k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  1.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  1.24k|    {
 1660|  1.24k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   305k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   305k|          m_has_value(false)
  484|   305k|    {
  485|   305k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   240k|        : base(unexpect, std::move(e.error())),
 1648|   240k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   240k|    {
 1650|   240k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   240k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   240k|          m_has_value(false)
  484|   240k|    {
  485|   240k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   391k|    {
 1348|   391k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  40.0k|        : base(unexpect, std::move(e.error())),
 1648|  40.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  40.0k|    {
 1650|  40.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  40.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  40.8k|          m_has_value(false)
  484|  40.8k|    {
  485|  40.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   169k|    {
 1348|   169k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|   128k|        : base(std::in_place, std::forward<U>(val)),
 1602|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   128k|    {
 1604|   128k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   128k|    {
  475|   128k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|   169k|    {
 1772|   169k|        return has_value();
 1773|   169k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|   339k|    {
  523|   339k|        return m_has_value;
  524|   339k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|  40.8k|    {
 1778|  40.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  40.8k|        return this->get_unexpected().error();
 1780|  40.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  40.8k|    {
  506|  40.8k|        return m_unexpected;
  507|  40.8k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|   128k|    {
 1837|   128k|        return std::move(value());
 1838|   128k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|   128k|    {
 1801|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   128k|        return this->get_value();
 1803|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|   128k|    {
  489|   128k|        return m_value;
  490|   128k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  80.1k|        : base(unexpect, std::move(e.error())),
 1648|  80.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  80.1k|    {
 1650|  80.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  81.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  81.4k|          m_has_value(false)
  484|  81.4k|    {
  485|  81.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   199k|    {
 1348|   199k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|   117k|        : base(std::in_place, std::forward<U>(val)),
 1602|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   117k|    {
 1604|   117k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   117k|    {
  475|   117k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|   199k|    {
 1772|   199k|        return has_value();
 1773|   199k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|   398k|    {
  523|   398k|        return m_has_value;
  524|   398k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|  81.4k|    {
 1778|  81.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  81.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  81.4k|        return this->get_unexpected().error();
 1780|  81.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  81.4k|    {
  506|  81.4k|        return m_unexpected;
  507|  81.4k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|   117k|    {
 1837|   117k|        return std::move(value());
 1838|   117k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|   117k|    {
 1801|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   117k|        return this->get_value();
 1803|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|   117k|    {
  489|   117k|        return m_value;
  490|   117k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  83.4k|    {
 2011|  83.4k|        return detail::transform_error_impl(std::move(*this),
 2012|  83.4k|                                            std::forward<F>(f));
 2013|  83.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  83.4k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  83.4k|    else {
 1504|  83.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  83.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  83.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 82.6k, False: 750]
  |  |  ------------------
  ------------------
 1506|  83.4k|                   ? result(*std::forward<Exp>(exp))
 1507|  83.4k|                   : result(unexpect,
 1508|    750|                            trivial_invoke(std::forward<F>(f),
 1509|    750|                                           std::forward<Exp>(exp).error()));
 1510|  83.4k|    }
 1511|  83.4k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   166k|    {
  523|   166k|        return m_has_value;
  524|   166k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  82.6k|    {
 1837|  82.6k|        return std::move(value());
 1838|  82.6k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  82.6k|    {
 1801|  82.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  82.6k|        return this->get_value();
 1803|  82.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  82.6k|    {
  489|  82.6k|        return m_value;
  490|  82.6k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|    750|    {
 1788|    750|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    750|        return std::move(this->get_unexpected().error());
 1790|    750|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|    750|    {
  506|    750|        return m_unexpected;
  507|    750|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|    750|        : base(unexpect, std::forward<Args>(args)...),
 1658|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    750|    {
 1660|    750|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|   773k|    {
 9144|   773k|        return m_current;
 9145|   773k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 9031|   166k|    {
 9032|   166k|        return m_args;
 9033|   166k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   346k|    {
 9037|   346k|        return m_locale;
 9038|   346k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   354k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   354k|    static_cast<    \
  |  | 1084|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   354k|    {
 9044|   354k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   166k|    {
 3032|   166k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   166k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   166k|    {
 3013|   166k|        return t.data();
 3014|   166k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  83.4k|    {
 3107|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3072|  83.4k|    {
 3073|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  83.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   152k|        : base(unexpect, std::move(e.error())),
 1648|   152k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   152k|    {
 1650|   152k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1601|  46.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  46.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  46.0k|    {
 1604|  46.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  46.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  46.0k|    {
  475|  46.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|   669k|    {
 9144|   669k|        return m_current;
 9145|   669k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 9031|   193k|    {
 9032|   193k|        return m_args;
 9033|   193k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   385k|    {
 9037|   385k|        return m_locale;
 9038|   385k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   398k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   398k|    static_cast<    \
  |  | 1084|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   398k|    static_cast<    \
  |  | 1084|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   398k|    {
 9044|   398k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   193k|    {
 3032|   193k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   193k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   193k|    {
 3013|   193k|        return t.data();
 3014|   193k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  96.9k|    {
 3107|  96.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  96.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3072|  96.9k|    {
 3073|  96.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  96.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   304k|        : base(unexpect, std::move(e.error())),
 1648|   304k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   304k|    {
 1650|   304k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1601|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  22.1k|    {
 1604|  22.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  22.1k|    {
  475|  22.1k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|   545k|    {
 4623|   545k|        return x.is_at_end();
 4624|   545k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  1.31M|    {
 4667|  1.31M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 1.31M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  1.31M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 1.31M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  1.31M|        return !read_at_position();
 4674|  1.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  3.79M|    {
 4647|  3.79M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  3.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  3.79M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 3.79M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  3.79M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  3.79M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.03M, False: 758k]
  |  |  ------------------
  ------------------
 4654|  3.03M|            return true;
 4655|  3.03M|        }
 4656|       |
 4657|  1.50M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 758k, False: 743k]
  ------------------
 4658|   758k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 14.7k, False: 743k]
  ------------------
 4659|  14.7k|                return false;
 4660|  14.7k|            }
 4661|   758k|        }
 4662|   743k|        return true;
 4663|   758k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  1.18M|    {
 4582|  1.18M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  1.18M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 1.18M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  1.18M|        auto res = read_at_position();
 4591|  1.18M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  1.18M|        return parent()->get_character_at(m_position);
 4593|  1.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  1.18M|    {
 4449|  1.18M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  1.18M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  1.18M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 392k, False: 793k]
  |  |  ------------------
  ------------------
 4452|   392k|            return m_putback_buffer[upos];
 4453|   392k|        }
 4454|   793k|        const auto start = upos - m_putback_buffer.size();
 4455|   793k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   793k|        return m_current_view[start];
 4457|   793k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  97.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  97.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  97.0k|    {
 1604|  97.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  97.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  97.0k|    {
  475|  97.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  98.4k|    {
 1348|  98.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  1.45k|        : base(unexpect, std::move(e.error())),
 1648|  1.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.45k|    {
 1650|  1.45k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  1.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.45k|          m_has_value(false)
  484|  1.45k|    {
  485|  1.45k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  4.69k|        : m_unexpected(std::forward<Args>(args)...)
  392|  4.69k|    {
  393|  4.69k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  4.69k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  4.69k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  1.29M|    {
 4568|  1.29M|        ++m_position;
 4569|  1.29M|        (void)read_at_position();
 4570|  1.29M|        return *this;
 4571|  1.29M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|   577k|    {
 4617|   577k|        return !(lhs == rhs);
 4618|   577k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|   577k|    {
 4612|   577k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 577k, False: 0]
  |  Branch (4612:46): [True: 69.7k, False: 507k]
  ------------------
 4613|   577k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  4.69k|        : m_unexpected(std::forward<Err>(e))
  381|  4.69k|    {
  382|  4.69k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  4.69k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  4.69k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  1.64M|    {
 3518|  1.64M|        return m_sentinel;
 3519|  1.64M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|   766k|    {
 4634|   766k|        return !x.is_at_end();
 4635|   766k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|    750|        : base(unexpect, std::move(e.error())),
 1648|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    750|    {
 1650|    750|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|    750|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    750|          m_has_value(false)
  484|    750|    {
  485|    750|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  83.4k|    {
 1348|  83.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  82.6k|        : base(std::in_place, std::forward<U>(val)),
 1602|  82.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  82.6k|    {
 1604|  82.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  82.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  82.6k|    {
  475|  82.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   250k|    {
 3032|   250k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   250k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   250k|    {
 3013|   250k|        return t.data();
 3014|   250k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|   151k|        : base(std::in_place, std::forward<U>(val)),
 1602|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   151k|    {
 1604|   151k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   151k|    {
  475|   151k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   107k|    {
 1827|   107k|        return value();
 1828|   107k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|  97.0k|    {
 2901|  97.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  97.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|  97.0k|    {
 2882|  97.0k|        return decay_copy(t.begin());
 2883|  97.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|  97.0k|{
 2126|  97.0k|    return SCN_FWD(t);
  ------------------
  |  | 1085|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  97.0k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|  83.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|  83.4k|    {
 3966|  83.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|  98.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|  98.4k|    {
 3966|  98.4k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|   428k|    {
 4623|   428k|        return x.is_at_end();
 4624|   428k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|   823k|    {
 4667|   823k|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 823k]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|   823k|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 823k]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|   823k|        return !read_at_position();
 4674|   823k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|  1.99M|    {
 4647|  1.99M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  1.99M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 1.99M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  1.99M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  1.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.64M, False: 344k]
  |  |  ------------------
  ------------------
 4654|  1.64M|            return true;
 4655|  1.64M|        }
 4656|       |
 4657|   668k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 344k, False: 324k]
  ------------------
 4658|   344k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 19.4k, False: 324k]
  ------------------
 4659|  19.4k|                return false;
 4660|  19.4k|            }
 4661|   344k|        }
 4662|   324k|        return true;
 4663|   344k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|  2.66M|    {
 4413|  2.66M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  2.66M|                                           m_current_view.size());
 4415|  2.66M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|   723k|    {
 4582|   723k|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   723k|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 723k]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|   723k|        auto res = read_at_position();
 4591|   723k|        SCN_EXPECT(res);
  ------------------
  |  | 1079|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|   723k|        return parent()->get_character_at(m_position);
 4593|   723k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|   723k|    {
 4449|   723k|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|   723k|        const auto upos = static_cast<std::size_t>(pos);
 4451|   723k|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 397k, False: 325k]
  |  |  ------------------
  ------------------
 4452|   397k|            return m_putback_buffer[upos];
 4453|   397k|        }
 4454|   325k|        const auto start = upos - m_putback_buffer.size();
 4455|   325k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   325k|        return m_current_view[start];
 4457|   325k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  95.7k|        : base(std::in_place, std::forward<U>(val)),
 1602|  95.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  95.7k|    {
 1604|  95.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  95.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  95.7k|    {
  475|  95.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  96.9k|    {
 1348|  96.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  1.24k|        : base(unexpect, std::move(e.error())),
 1648|  1.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.24k|    {
 1650|  1.24k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  1.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.24k|          m_has_value(false)
  484|  1.24k|    {
  485|  1.24k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|   445k|    {
 4568|   445k|        ++m_position;
 4569|   445k|        (void)read_at_position();
 4570|   445k|        return *this;
 4571|   445k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|   153k|    {
 4617|   153k|        return !(lhs == rhs);
 4618|   153k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|   153k|    {
 4612|   153k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 153k, False: 0]
  |  Branch (4612:46): [True: 22.1k, False: 130k]
  ------------------
 4613|   153k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  1.09M|    {
 3518|  1.09M|        return m_sentinel;
 3519|  1.09M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|   394k|    {
 4634|   394k|        return !x.is_at_end();
 4635|   394k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  1.24k|        : base(unexpect, std::move(e.error())),
 1648|  1.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.24k|    {
 1650|  1.24k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  1.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.24k|          m_has_value(false)
  484|  1.24k|    {
  485|  1.24k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  96.9k|    {
 1348|  96.9k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  95.7k|        : base(std::in_place, std::forward<U>(val)),
 1602|  95.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  95.7k|    {
 1604|  95.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  95.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  95.7k|    {
  475|  95.7k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   193k|    {
  523|   193k|        return m_has_value;
  524|   193k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  95.7k|    {
 1801|  95.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  95.7k|        return this->get_value();
 1803|  95.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  95.7k|    {
  489|  95.7k|        return m_value;
  490|  95.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  96.9k|    {
 2011|  96.9k|        return detail::transform_error_impl(std::move(*this),
 2012|  96.9k|                                            std::forward<F>(f));
 2013|  96.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  96.9k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  96.9k|    else {
 1504|  96.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  96.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  96.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 95.7k, False: 1.24k]
  |  |  ------------------
  ------------------
 1506|  96.9k|                   ? result(*std::forward<Exp>(exp))
 1507|  96.9k|                   : result(unexpect,
 1508|  1.24k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.24k|                                           std::forward<Exp>(exp).error()));
 1510|  96.9k|    }
 1511|  96.9k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  95.7k|    {
 1837|  95.7k|        return std::move(value());
 1838|  95.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  1.24k|    {
 1788|  1.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  1.24k|        return std::move(this->get_unexpected().error());
 1790|  1.24k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  1.24k|    {
  506|  1.24k|        return m_unexpected;
  507|  1.24k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  1.24k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  1.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  1.24k|    {
 1660|  1.24k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   193k|    {
 3032|   193k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   193k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   193k|    {
 3013|   193k|        return t.data();
 3014|   193k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|  44.2k|    {
 1827|  44.2k|        return value();
 1828|  44.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|  95.7k|    {
 2901|  95.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  95.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|  95.7k|    {
 2882|  95.7k|        return decay_copy(t.begin());
 2883|  95.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|  95.7k|{
 2126|  95.7k|    return SCN_FWD(t);
  ------------------
  |  | 1085|  95.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  95.7k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|  96.9k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|  96.9k|    {
 3966|  96.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|  96.9k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|  96.9k|    {
 3966|  96.9k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  5.29M|    {
 4413|  5.29M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  5.29M|                                           m_current_view.size());
 4415|  5.29M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   181k|    {
 6342|   181k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   181k|        return static_cast<std::size_t>(m_desc &
 6347|   181k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|   363k|    {
 6368|   363k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   363k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   181k|    {
 6310|   181k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   181k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   181k|        const auto t = type(id);
 6322|   181k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   181k|        basic_scan_arg<Context> arg;
 6327|   181k|        arg.m_type = t;
 6328|   181k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 0, False: 181k]
  ------------------
 6329|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6330|      0|        }
 6331|   181k|        else {
 6332|   181k|            arg.m_value = m_values[id];
 6333|   181k|        }
 6334|   181k|        return arg;
 6335|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   181k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   181k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   181k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   181k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   181k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   181k|    {
 6372|   181k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   181k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|   369k|    {
 6125|   369k|        return m_type != detail::arg_type::none_type;
 6126|   369k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  2.67k|{
 9606|  2.67k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  2.67k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  2.67k|{
 9463|  2.67k|#define SCN_VISIT(Type)                                                    \
 9464|  2.67k|    do {                                                                   \
 9465|  2.67k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  2.67k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  2.67k|        }                                                                  \
 9468|  2.67k|        else {                                                             \
 9469|  2.67k|            return vis(monostate_val);                                     \
 9470|  2.67k|        }                                                                  \
 9471|  2.67k|    } while (false)
 9472|       |
 9473|  2.67k|    monostate monostate_val{};
 9474|       |
 9475|  2.67k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 2.67k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 2.67k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 2.67k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 2.67k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 2.67k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 2.67k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 2.67k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 2.67k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 2.67k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 2.67k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 2.67k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 2.67k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 2.67k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 2.67k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 2.67k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 2.67k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 2.67k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 2.67k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 2.67k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 2.67k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 2.67k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 2.67k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 2.67k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 2.67k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 2.67k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 2.67k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 2.67k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 2.67k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|  2.67k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 2.67k, False: 0]
  ------------------
 9568|  2.67k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  2.67k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  2.67k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 2.67k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 2.67k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  2.67k|            SCN_CLANG_POP
 9585|  2.67k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|   369k|{
 6171|   369k|    return arg.m_type;
 6172|   369k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   187k|{
 6183|   187k|    return arg.m_value;
 6184|   187k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6444|  2.67k|        : m_format{format},
 6445|  2.67k|          m_next_arg_id{next_arg_id},
 6446|  2.67k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  2.67k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  2.67k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  2.67k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  2.67k|    {
 6452|  2.67k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4524|  86.1k|        : m_begin(const_cast<CharT*>(view.data())),
 4525|  86.1k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4526|  86.1k|          m_position(pos)
 4527|  86.1k|    {
 4528|  86.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   187k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   187k|    static_cast<    \
  |  | 1084|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   187k|    {
 9129|   187k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 6099|   187k|        {
 6100|   187k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6101|   187k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 6105|   187k|            : m_custom(custom)
 6106|   187k|        {
 6107|   187k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   184k|{
 4755|   184k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 83.4k, False: 101k]
  ------------------
 4756|  83.4k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|  83.4k|                                ranges::default_sentinel};
 4758|  83.4k|    }
 4759|   101k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   101k|                            ranges::default_sentinel};
 4761|   184k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   101k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   101k|    {
 4519|   101k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   101k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   101k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  2.67k|{
 9606|  2.67k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  2.67k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  2.67k|{
 9463|  2.67k|#define SCN_VISIT(Type)                                                    \
 9464|  2.67k|    do {                                                                   \
 9465|  2.67k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  2.67k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  2.67k|        }                                                                  \
 9468|  2.67k|        else {                                                             \
 9469|  2.67k|            return vis(monostate_val);                                     \
 9470|  2.67k|        }                                                                  \
 9471|  2.67k|    } while (false)
 9472|       |
 9473|  2.67k|    monostate monostate_val{};
 9474|       |
 9475|  2.67k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 2.67k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 2.67k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 2.67k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 2.67k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 2.67k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 2.67k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 2.67k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 2.67k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 2.67k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 2.67k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 2.67k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 2.67k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 2.67k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 2.67k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 2.67k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 2.67k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 2.67k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 2.67k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 2.67k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 2.67k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 2.67k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 2.67k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 2.67k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 2.67k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 2.67k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 2.67k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 2.67k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 2.67k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|  2.67k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 2.67k, False: 0]
  ------------------
 9568|  2.67k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  2.67k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  2.67k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 2.67k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 2.67k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  2.67k|            SCN_CLANG_POP
 9585|  2.67k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6444|  2.67k|        : m_format{format},
 6445|  2.67k|          m_next_arg_id{next_arg_id},
 6446|  2.67k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  2.67k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  2.67k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  2.67k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  2.67k|    {
 6452|  2.67k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|  83.4k|        : m_format{format},
 6445|  83.4k|          m_next_arg_id{next_arg_id},
 6446|  83.4k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  83.4k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  83.4k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  83.4k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  83.4k|    {
 6452|  83.4k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  83.4k|    {
 3107|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|  83.4k|    {
 3073|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  83.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  83.4k|{
 7971|  83.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  83.4k|    handler.check_args_exhausted();
 7973|  83.4k|    return handler.get_error();
 7974|  83.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  83.4k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  83.4k|    auto begin = format.data();
 7939|  83.4k|    auto it = begin;
 7940|  83.4k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   129k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 83.4k, False: 46.0k]
  ------------------
 7943|  83.4k|        const auto ch = *it++;
 7944|  83.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 83.4k, False: 0]
  ------------------
 7945|  83.4k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  83.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  83.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 37.4k, False: 46.0k]
  ------------------
 7949|  37.4k|                return;
 7950|  37.4k|            }
 7951|  83.4k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  83.4k|    }
 7962|       |
 7963|  46.0k|    handler.on_literal_text(begin, end);
 7964|  46.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|  83.4k|{
 7868|  83.4k|    struct id_adapter {
 7869|  83.4k|        constexpr void operator()()
 7870|  83.4k|        {
 7871|  83.4k|            arg_id = handler.on_arg_id();
 7872|  83.4k|        }
 7873|  83.4k|        constexpr void operator()(std::size_t id)
 7874|  83.4k|        {
 7875|  83.4k|            arg_id = handler.on_arg_id(id);
 7876|  83.4k|        }
 7877|       |
 7878|  83.4k|        constexpr void on_error(const char* msg)
 7879|  83.4k|        {
 7880|  83.4k|            SCN_UNLIKELY_ATTR
 7881|  83.4k|            handler.on_error(msg);
 7882|  83.4k|        }
 7883|       |
 7884|  83.4k|        Handler& handler;
 7885|  83.4k|        std::size_t arg_id;
 7886|  83.4k|    };
 7887|       |
 7888|  83.4k|    ++begin;
 7889|  83.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  83.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 83.4k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  83.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 83.4k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  83.4k|    else {
 7901|  83.4k|        auto adapter = id_adapter{handler, 0};
 7902|  83.4k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  83.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  83.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 83.4k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  83.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 83.4k, False: 0]
  ------------------
 7913|  83.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  83.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  83.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 83.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 83.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|  83.4k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  83.4k|    }
 7929|  83.4k|    return begin + 1;
 7930|  83.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   181k|    {
 9027|   181k|        return m_args.get(id);
 9028|   181k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   181k|    {
 6480|   181k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   181k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   181k|        do_check_arg_id(id);
 6488|   181k|        return id;
 6489|   181k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   181k|{
 6974|   181k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   181k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   181k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  83.4k|{
 7367|  83.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  83.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 83.4k, False: 0]
  |  Branch (7368:26): [True: 0, False: 83.4k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  83.4k|    handler();
 7373|  83.4k|    return begin;
 7374|  83.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  83.4k|        {
 7871|  83.4k|            arg_id = handler.on_arg_id();
 7872|  83.4k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9605|   181k|{
 9606|   181k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   181k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   181k|{
 9463|   181k|#define SCN_VISIT(Type)                                                    \
 9464|   181k|    do {                                                                   \
 9465|   181k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   181k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   181k|        }                                                                  \
 9468|   181k|        else {                                                             \
 9469|   181k|            return vis(monostate_val);                                     \
 9470|   181k|        }                                                                  \
 9471|   181k|    } while (false)
 9472|       |
 9473|   181k|    monostate monostate_val{};
 9474|       |
 9475|   181k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 181k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 181k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 181k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 181k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 181k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 181k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 181k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 181k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 181k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 181k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 181k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 181k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 181k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 181k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 181k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 181k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 181k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 181k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 181k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 181k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 181k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 181k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 181k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 181k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 181k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 181k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 181k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 181k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|   181k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 181k, False: 0]
  ------------------
 9568|   181k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   181k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   181k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 181k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 181k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   181k|            SCN_CLANG_POP
 9585|   181k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4780|  83.4k|        : base(typename base::contiguous_tag{}, sv)
 4781|  83.4k|    {
 4782|  83.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4485|  83.4k|        : m_current_view(sv), m_is_contiguous(true)
 4486|  83.4k|    {
 4487|  83.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   166k|    {
 3032|   166k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   166k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3022|   166k|    {
 3023|   166k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1085|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3024|   166k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   166k|    {
 2901|   166k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   166k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   166k|    {
 2882|   166k|        return decay_copy(t.begin());
 2883|   166k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3106|  83.4k|    {
 3107|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3072|  83.4k|    {
 3073|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  83.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4603|  83.4k|    {
 4604|  83.4k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1079|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4605|  83.4k|        m_position = i;
 4606|  83.4k|        return *this;
 4607|  83.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|  98.4k|        : m_format{format},
 6445|  98.4k|          m_next_arg_id{next_arg_id},
 6446|  98.4k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  98.4k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  98.4k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  98.4k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  98.4k|    {
 6452|  98.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  98.4k|{
 7971|  98.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  98.4k|    handler.check_args_exhausted();
 7973|  98.4k|    return handler.get_error();
 7974|  98.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  98.4k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  98.4k|    auto begin = format.data();
 7939|  98.4k|    auto it = begin;
 7940|  98.4k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   159k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 98.4k, False: 61.0k]
  ------------------
 7943|  98.4k|        const auto ch = *it++;
 7944|  98.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 98.4k, False: 0]
  ------------------
 7945|  98.4k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  98.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  98.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 37.4k, False: 61.0k]
  ------------------
 7949|  37.4k|                return;
 7950|  37.4k|            }
 7951|  98.4k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  98.4k|    }
 7962|       |
 7963|  61.0k|    handler.on_literal_text(begin, end);
 7964|  61.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|  98.4k|{
 7868|  98.4k|    struct id_adapter {
 7869|  98.4k|        constexpr void operator()()
 7870|  98.4k|        {
 7871|  98.4k|            arg_id = handler.on_arg_id();
 7872|  98.4k|        }
 7873|  98.4k|        constexpr void operator()(std::size_t id)
 7874|  98.4k|        {
 7875|  98.4k|            arg_id = handler.on_arg_id(id);
 7876|  98.4k|        }
 7877|       |
 7878|  98.4k|        constexpr void on_error(const char* msg)
 7879|  98.4k|        {
 7880|  98.4k|            SCN_UNLIKELY_ATTR
 7881|  98.4k|            handler.on_error(msg);
 7882|  98.4k|        }
 7883|       |
 7884|  98.4k|        Handler& handler;
 7885|  98.4k|        std::size_t arg_id;
 7886|  98.4k|    };
 7887|       |
 7888|  98.4k|    ++begin;
 7889|  98.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  98.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 98.4k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  98.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 98.4k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  98.4k|    else {
 7901|  98.4k|        auto adapter = id_adapter{handler, 0};
 7902|  98.4k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  98.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  98.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 98.4k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  98.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 98.4k, False: 0]
  ------------------
 7913|  98.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  98.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  98.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 98.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|  98.4k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  98.4k|    }
 7929|  98.4k|    return begin + 1;
 7930|  98.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  98.4k|{
 7367|  98.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  98.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  98.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  98.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 98.4k, False: 0]
  |  Branch (7368:26): [True: 0, False: 98.4k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  98.4k|    handler();
 7373|  98.4k|    return begin;
 7374|  98.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  98.4k|        {
 7871|  98.4k|            arg_id = handler.on_arg_id();
 7872|  98.4k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  40.0k|    {
 4408|  40.0k|        return sync(0);
 4409|  40.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|   193k|    {
 6342|   193k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   193k|        return static_cast<std::size_t>(m_desc &
 6347|   193k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   193k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|   387k|    {
 6368|   387k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   387k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|   193k|    {
 6310|   193k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   193k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   193k|        const auto t = type(id);
 6322|   193k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   193k|        basic_scan_arg<Context> arg;
 6327|   193k|        arg.m_type = t;
 6328|   193k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 0, False: 193k]
  ------------------
 6329|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6330|      0|        }
 6331|   193k|        else {
 6332|   193k|            arg.m_value = m_values[id];
 6333|   193k|        }
 6334|   193k|        return arg;
 6335|   193k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|   193k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   193k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   193k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   193k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   193k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|   193k|    {
 6372|   193k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   193k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|   398k|    {
 6125|   398k|        return m_type != detail::arg_type::none_type;
 6126|   398k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|  5.34k|{
 9606|  5.34k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  5.34k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  5.34k|{
 9463|  5.34k|#define SCN_VISIT(Type)                                                    \
 9464|  5.34k|    do {                                                                   \
 9465|  5.34k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  5.34k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  5.34k|        }                                                                  \
 9468|  5.34k|        else {                                                             \
 9469|  5.34k|            return vis(monostate_val);                                     \
 9470|  5.34k|        }                                                                  \
 9471|  5.34k|    } while (false)
 9472|       |
 9473|  5.34k|    monostate monostate_val{};
 9474|       |
 9475|  5.34k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 5.34k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 5.34k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 5.34k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 5.34k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 5.34k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 5.34k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 5.34k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 5.34k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 5.34k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 5.34k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 5.34k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 5.34k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 5.34k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 5.34k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 5.34k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 5.34k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 5.34k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 5.34k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 5.34k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 5.34k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 5.34k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 5.34k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 5.34k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 5.34k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 5.34k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 5.34k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 5.34k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 5.34k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|  5.34k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 5.34k, False: 0]
  ------------------
 9568|  5.34k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  5.34k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  5.34k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 5.34k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 5.34k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  5.34k|            SCN_CLANG_POP
 9585|  5.34k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|   398k|{
 6171|   398k|    return arg.m_type;
 6172|   398k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   204k|{
 6183|   204k|    return arg.m_value;
 6184|   204k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6444|  5.34k|        : m_format{format},
 6445|  5.34k|          m_next_arg_id{next_arg_id},
 6446|  5.34k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  5.34k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  5.34k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  5.34k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  5.34k|    {
 6452|  5.34k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4524|   102k|        : m_begin(const_cast<CharT*>(view.data())),
 4525|   102k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4526|   102k|          m_position(pos)
 4527|   102k|    {
 4528|   102k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   204k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   204k|    static_cast<    \
  |  | 1084|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   204k|    {
 9129|   204k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 6099|   204k|        {
 6100|   204k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6101|   204k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 6105|   204k|            : m_custom(custom)
 6106|   204k|        {
 6107|   204k|        }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|  96.9k|        : m_format{format},
 6445|  96.9k|          m_next_arg_id{next_arg_id},
 6446|  96.9k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  96.9k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  96.9k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  96.9k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  96.9k|    {
 6452|  96.9k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  96.9k|    {
 3107|  96.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  96.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|  96.9k|    {
 3073|  96.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  96.9k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  96.9k|{
 7971|  96.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  96.9k|    handler.check_args_exhausted();
 7973|  96.9k|    return handler.get_error();
 7974|  96.9k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  96.9k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  96.9k|    auto begin = format.data();
 7939|  96.9k|    auto it = begin;
 7940|  96.9k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   119k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 96.9k, False: 22.1k]
  ------------------
 7943|  96.9k|        const auto ch = *it++;
 7944|  96.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 96.9k, False: 0]
  ------------------
 7945|  96.9k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  96.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  96.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 74.8k, False: 22.1k]
  ------------------
 7949|  74.8k|                return;
 7950|  74.8k|            }
 7951|  96.9k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  96.9k|    }
 7962|       |
 7963|  22.1k|    handler.on_literal_text(begin, end);
 7964|  22.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|  96.9k|{
 7868|  96.9k|    struct id_adapter {
 7869|  96.9k|        constexpr void operator()()
 7870|  96.9k|        {
 7871|  96.9k|            arg_id = handler.on_arg_id();
 7872|  96.9k|        }
 7873|  96.9k|        constexpr void operator()(std::size_t id)
 7874|  96.9k|        {
 7875|  96.9k|            arg_id = handler.on_arg_id(id);
 7876|  96.9k|        }
 7877|       |
 7878|  96.9k|        constexpr void on_error(const char* msg)
 7879|  96.9k|        {
 7880|  96.9k|            SCN_UNLIKELY_ATTR
 7881|  96.9k|            handler.on_error(msg);
 7882|  96.9k|        }
 7883|       |
 7884|  96.9k|        Handler& handler;
 7885|  96.9k|        std::size_t arg_id;
 7886|  96.9k|    };
 7887|       |
 7888|  96.9k|    ++begin;
 7889|  96.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  96.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 96.9k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  96.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 96.9k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  96.9k|    else {
 7901|  96.9k|        auto adapter = id_adapter{handler, 0};
 7902|  96.9k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  96.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  96.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 96.9k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  96.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 96.9k, False: 0]
  ------------------
 7913|  96.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  96.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  96.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 96.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|  96.9k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  96.9k|    }
 7929|  96.9k|    return begin + 1;
 7930|  96.9k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   193k|    {
 9027|   193k|        return m_args.get(id);
 9028|   193k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   193k|    {
 6480|   193k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 193k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   193k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   193k|        do_check_arg_id(id);
 6488|   193k|        return id;
 6489|   193k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   193k|{
 6974|   193k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   193k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   193k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  96.9k|{
 7367|  96.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  96.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  96.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 96.9k, False: 0]
  |  Branch (7368:26): [True: 0, False: 96.9k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  96.9k|    handler();
 7373|  96.9k|    return begin;
 7374|  96.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  96.9k|        {
 7871|  96.9k|            arg_id = handler.on_arg_id();
 7872|  96.9k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9605|   193k|{
 9606|   193k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   193k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   193k|{
 9463|   193k|#define SCN_VISIT(Type)                                                    \
 9464|   193k|    do {                                                                   \
 9465|   193k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   193k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   193k|        }                                                                  \
 9468|   193k|        else {                                                             \
 9469|   193k|            return vis(monostate_val);                                     \
 9470|   193k|        }                                                                  \
 9471|   193k|    } while (false)
 9472|       |
 9473|   193k|    monostate monostate_val{};
 9474|       |
 9475|   193k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 193k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 193k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 193k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 193k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 193k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 193k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 193k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 193k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 193k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 193k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 193k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 193k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 193k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 193k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 193k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 193k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 193k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 193k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 193k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 193k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 193k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 193k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 193k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 193k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 193k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 193k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 193k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 193k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|   193k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 193k, False: 0]
  ------------------
 9568|   193k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   193k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   193k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 193k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 193k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   193k|            SCN_CLANG_POP
 9585|   193k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4780|  96.9k|        : base(typename base::contiguous_tag{}, sv)
 4781|  96.9k|    {
 4782|  96.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4485|  96.9k|        : m_current_view(sv), m_is_contiguous(true)
 4486|  96.9k|    {
 4487|  96.9k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   193k|    {
 3032|   193k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   193k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3022|   193k|    {
 3023|   193k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3024|   193k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   193k|    {
 2901|   193k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   193k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   193k|    {
 2882|   193k|        return decay_copy(t.begin());
 2883|   193k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3106|  96.9k|    {
 3107|  96.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  96.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3072|  96.9k|    {
 3073|  96.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  96.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   199k|{
 4755|   199k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 96.9k, False: 102k]
  ------------------
 4756|  96.9k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|  96.9k|                                ranges::default_sentinel};
 4758|  96.9k|    }
 4759|   102k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   102k|                            ranges::default_sentinel};
 4761|   199k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   102k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   102k|    {
 4519|   102k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   102k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   102k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4603|  96.9k|    {
 4604|  96.9k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1079|  96.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4605|  96.9k|        m_position = i;
 4606|  96.9k|        return *this;
 4607|  96.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  5.34k|{
 9606|  5.34k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  5.34k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  5.34k|{
 9463|  5.34k|#define SCN_VISIT(Type)                                                    \
 9464|  5.34k|    do {                                                                   \
 9465|  5.34k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  5.34k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  5.34k|        }                                                                  \
 9468|  5.34k|        else {                                                             \
 9469|  5.34k|            return vis(monostate_val);                                     \
 9470|  5.34k|        }                                                                  \
 9471|  5.34k|    } while (false)
 9472|       |
 9473|  5.34k|    monostate monostate_val{};
 9474|       |
 9475|  5.34k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 5.34k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 5.34k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 5.34k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 5.34k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 5.34k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 5.34k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 5.34k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 5.34k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 5.34k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 5.34k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 5.34k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 5.34k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 5.34k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 5.34k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 5.34k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 5.34k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 5.34k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 5.34k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 5.34k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 5.34k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 5.34k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 5.34k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 5.34k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 5.34k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 5.34k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 5.34k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 5.34k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 5.34k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|  5.34k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 5.34k, False: 0]
  ------------------
 9568|  5.34k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  5.34k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  5.34k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 5.34k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 5.34k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  5.34k|            SCN_CLANG_POP
 9585|  5.34k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6444|  5.34k|        : m_format{format},
 6445|  5.34k|          m_next_arg_id{next_arg_id},
 6446|  5.34k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  5.34k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  5.34k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  5.34k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  5.34k|    {
 6452|  5.34k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|  96.9k|        : m_format{format},
 6445|  96.9k|          m_next_arg_id{next_arg_id},
 6446|  96.9k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  96.9k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  96.9k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  96.9k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  96.9k|    {
 6452|  96.9k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  96.9k|{
 7971|  96.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  96.9k|    handler.check_args_exhausted();
 7973|  96.9k|    return handler.get_error();
 7974|  96.9k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  96.9k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  96.9k|    auto begin = format.data();
 7939|  96.9k|    auto it = begin;
 7940|  96.9k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   119k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 96.9k, False: 22.1k]
  ------------------
 7943|  96.9k|        const auto ch = *it++;
 7944|  96.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 96.9k, False: 0]
  ------------------
 7945|  96.9k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  96.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  96.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 74.8k, False: 22.1k]
  ------------------
 7949|  74.8k|                return;
 7950|  74.8k|            }
 7951|  96.9k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  96.9k|    }
 7962|       |
 7963|  22.1k|    handler.on_literal_text(begin, end);
 7964|  22.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|  96.9k|{
 7868|  96.9k|    struct id_adapter {
 7869|  96.9k|        constexpr void operator()()
 7870|  96.9k|        {
 7871|  96.9k|            arg_id = handler.on_arg_id();
 7872|  96.9k|        }
 7873|  96.9k|        constexpr void operator()(std::size_t id)
 7874|  96.9k|        {
 7875|  96.9k|            arg_id = handler.on_arg_id(id);
 7876|  96.9k|        }
 7877|       |
 7878|  96.9k|        constexpr void on_error(const char* msg)
 7879|  96.9k|        {
 7880|  96.9k|            SCN_UNLIKELY_ATTR
 7881|  96.9k|            handler.on_error(msg);
 7882|  96.9k|        }
 7883|       |
 7884|  96.9k|        Handler& handler;
 7885|  96.9k|        std::size_t arg_id;
 7886|  96.9k|    };
 7887|       |
 7888|  96.9k|    ++begin;
 7889|  96.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  96.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 96.9k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  96.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 96.9k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  96.9k|    else {
 7901|  96.9k|        auto adapter = id_adapter{handler, 0};
 7902|  96.9k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  96.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  96.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 96.9k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  96.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 96.9k, False: 0]
  ------------------
 7913|  96.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  96.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  96.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 96.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|  96.9k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  96.9k|    }
 7929|  96.9k|    return begin + 1;
 7930|  96.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  96.9k|{
 7367|  96.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  96.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  96.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 96.9k, False: 0]
  |  Branch (7368:26): [True: 0, False: 96.9k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  96.9k|    handler();
 7373|  96.9k|    return begin;
 7374|  96.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  96.9k|        {
 7871|  96.9k|            arg_id = handler.on_arg_id();
 7872|  96.9k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|  80.1k|    {
 4408|  80.1k|        return sync(0);
 4409|  80.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|  5.34k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|  10.6k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2957|   103k|    {
 2958|   103k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   103k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2939|   103k|    {
 2940|   103k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   103k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2125|   197k|{
 2126|   197k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   197k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4596|  46.0k|    {
 4597|  46.0k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1079|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4598|  46.0k|        m_position += n;
 4599|  46.0k|        return *this;
 4600|  46.0k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2957|  94.6k|    {
 2958|  94.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  94.6k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2939|  94.6k|    {
 2940|  94.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  94.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4596|  22.1k|    {
 4597|  22.1k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1079|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4598|  22.1k|        m_position += n;
 4599|  22.1k|        return *this;
 4600|  22.1k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  48.4k|{
   44|  48.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  48.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  48.4k|{
   60|  48.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  48.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.34k|{
   72|  5.34k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.34k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  48.4k|{
   44|  48.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  48.4k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  48.4k|{
   60|  48.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  48.4k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.34k|{
   72|  5.34k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.34k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto result = make_scan_result<Source, Args...>();
   90|  16.1k|    fill_scan_result(result,
   91|  16.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  16.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  16.1k|    return result;
   94|  16.1k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  16.1k|{
  131|  16.1k|    auto result = make_scan_result<Source, Args...>();
  132|  16.1k|    fill_scan_result(result,
  133|  16.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  16.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  16.1k|    return result;
  136|  16.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.78k|{
  171|  1.78k|    auto result = make_scan_result<Source, T>();
  172|  1.78k|    fill_scan_result(
  173|  1.78k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.78k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.78k|    return result;
  176|  1.78k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  98.4k|{
  250|  98.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  98.4k|        .transform_error(impl::make_eof_scan_error);
  252|  98.4k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  96.9k|{
  250|  96.9k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  96.9k|        .transform_error(impl::make_eof_scan_error);
  252|  96.9k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   187k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   187k|{
  309|   187k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   187k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|  41.7k|{
 2984|  41.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|  41.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|  49.2k|{
 2992|  49.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|  49.2k|    return sync_after_vscan(source, n);
 2994|  49.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|  48.4k|{
 3002|  48.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|  48.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|  48.4k|{
 3010|  48.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|  48.4k|    return sync_after_vscan(source, n);
 3012|  48.4k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  60.6k|{
 4721|  60.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.8k, False: 27.8k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.8k|    }
 4725|       |
 4726|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  27.8k|    auto begin = contiguous_ctx.begin();
 4729|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.4k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.4k|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  27.8k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  60.6k|{
 4721|  60.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.8k, False: 27.8k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.8k|    }
 4725|       |
 4726|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  27.8k|    auto begin = contiguous_ctx.begin();
 4729|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.4k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.4k|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  27.8k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  60.6k|{
 4721|  60.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.8k, False: 27.8k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.8k|    }
 4725|       |
 4726|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  27.8k|    auto begin = contiguous_ctx.begin();
 4729|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.4k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.4k|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  15.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  27.8k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  64.6k|{
 4721|  64.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.3k, False: 32.3k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.3k|    }
 4725|       |
 4726|  32.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  32.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  32.3k|    auto begin = contiguous_ctx.begin();
 4729|  32.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 7.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  7.38k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  32.3k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  64.6k|{
 4721|  64.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.3k, False: 32.3k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.3k|    }
 4725|       |
 4726|  32.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  32.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  32.3k|    auto begin = contiguous_ctx.begin();
 4729|  32.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 7.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  7.38k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  32.3k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4720|  64.6k|{
 4721|  64.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4721:9): [True: 32.3k, False: 32.3k]
  ------------------
 4722|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4723|  32.3k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4724|  32.3k|    }
 4725|       |
 4726|  32.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4727|  32.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4728|  32.3k|    auto begin = contiguous_ctx.begin();
 4729|  32.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.9k, False: 7.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.9k|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4730|  7.38k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4731|  32.3k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   181k|{
  215|   181k|    return find_classic_impl(
  216|   181k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   181k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   181k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  16.0k|{
  329|  16.0k|    SCN_UNLIKELY_ATTR
  330|  16.0k|    return e;
  331|  16.0k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|  41.7k|{
 2953|  41.7k|    return vscan_internal(source, format, args);
 2954|  41.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|  49.2k|{
 2959|  49.2k|    auto n = vscan_internal(source, format, args);
 2960|  49.2k|    return sync_after_vscan(source, n);
 2961|  49.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|  48.4k|{
 2967|  48.4k|    return vscan_internal(source, format, args);
 2968|  48.4k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|  48.4k|{
 2973|  48.4k|    auto n = vscan_internal(source, format, args);
 2974|  48.4k|    return sync_after_vscan(source, n);
 2975|  48.4k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  2.67k|{
 3039|  2.67k|    return vscan_value_internal(source, arg);
 3040|  2.67k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  2.67k|{
 3044|  2.67k|    auto n = vscan_value_internal(source, arg);
 3045|  2.67k|    return sync_after_vscan(source, n);
 3046|  2.67k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|  5.34k|{
 3052|  5.34k|    return vscan_value_internal(source, arg);
 3053|  5.34k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|  5.34k|{
 3058|  5.34k|    auto n = vscan_value_internal(source, arg);
 3059|  5.34k|    return sync_after_vscan(source, n);
 3060|  5.34k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  88.8k|{
  117|  88.8k|    static_assert(sizeof(*source.data()) == 1);
  118|  88.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|  88.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  88.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  88.8k|    uint64_t word{};
  120|  88.8k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  88.8k|    return has_byte_greater(word, 127) != 0;
  123|  88.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   181k|{
  130|   181k|    auto it = source.begin();
  131|       |
  132|   188k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 88.8k, False: 99.2k]
  ------------------
  133|  88.8k|        auto sv =
  134|  88.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  88.8k|                .substr(0, 8);
  136|       |
  137|  88.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 76.7k, False: 12.1k]
  ------------------
  138|  76.7k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  76.7k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  76.7k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 72.1k, False: 4.58k]
  ------------------
  141|  72.1k|                break;
  142|  72.1k|            }
  143|  4.58k|            continue;
  144|  76.7k|        }
  145|       |
  146|  18.5k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 16.9k, False: 1.60k]
  ------------------
  147|  16.9k|            auto tmp =
  148|  16.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  16.9k|            auto res = get_next_code_point(tmp);
  150|  16.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 10.5k, False: 6.40k]
  ------------------
  151|  10.5k|                return it;
  152|  10.5k|            }
  153|  6.40k|            i += static_cast<std::size_t>(
  154|  6.40k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  6.40k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.40k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  6.40k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.40k|        }
  158|  12.1k|    }
  159|       |
  160|   171k|    return detail::make_string_view_iterator(source, it);
  161|   181k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   164k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  16.9k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|  98.4k|{
 2850|  98.4k|    const auto argcount = args.size();
 2851|  98.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 0, False: 98.4k]
  |  Branch (2851:60): [True: 0, False: 0]
  ------------------
 2852|      0|        auto arg = args.get(0);
 2853|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|      0|    }
 2855|       |
 2856|  98.4k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 98.4k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|  98.4k|    SCN_UNLIKELY_ATTR
 2864|  98.4k|    {
 2865|  98.4k|        auto handler = format_handler<false, CharT>{
 2866|  98.4k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|  98.4k|        return vscan_parse_format_string(format, handler);
 2868|  98.4k|    }
 2869|  98.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   181k|{
 2398|   181k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 181k, False: 0]
  ------------------
 2399|   181k|        return false;
 2400|   181k|    }
 2401|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 0, False: 0]
  |  Branch (2401:39): [True: 0, False: 0]
  ------------------
 2402|   181k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  2.67k|{
 2431|  2.67k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  2.67k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  2.67k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  2.67k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  2.67k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  2.67k|    static_cast<    \
  |  | 1084|  2.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  2.67k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.67k|    }                                                  \
  |  |  |  | 3995|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|      0|    return it.position();
 2448|  2.67k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|  83.4k|        : format_handler_base{argcount},
 2674|  83.4k|          parse_ctx{source_tag<Source&&>, format},
 2675|  83.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  83.4k|    {
 2677|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|   375k|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|   375k|    {
 2493|   375k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|  83.4k|        : contiguous_ctx(source, args, loc)
 2625|  83.4k|    {
 2626|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  83.4k|{
 2815|  83.4k|    const auto beg = handler.get_ctx().begin();
 2816|  83.4k|    detail::parse_format_string<false>(format, handler);
 2817|  83.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 46.0k]
  |  |  ------------------
  ------------------
 2818|  37.4k|        return unexpected(err.error());
 2819|  37.4k|    }
 2820|  46.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|   258k|    {
 2799|   258k|        return ctx.get();
 2800|   258k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|   258k|    {
 2630|   258k|        return contiguous_ctx;
 2631|   258k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   129k|    {
 2681|   129k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 129k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   129k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|   224k|    {
 2541|   224k|        error = unexpected(err);
 2542|   224k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|  83.4k|{
 2453|  83.4k|    auto arg = ctx.arg(id);
 2454|  83.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  83.4k|    return arg;
 2458|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|   375k|    {
 2567|   375k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|   375k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|   375k|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|   375k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 375k, False: 0]
  |  |  ------------------
  ------------------
 2579|   375k|            visited_args_lower64 |= (1ull << id);
 2580|   375k|            return;
 2581|   375k|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|   375k|    {
 2551|   375k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|   375k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|   375k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 375k, False: 0]
  |  |  ------------------
  ------------------
 2558|   375k|            return (visited_args_lower64 >> id) & 1ull;
 2559|   375k|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|  83.4k|    {
 2721|  83.4k|        return parse_ctx.next_arg_id();
 2722|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|  83.4k|    {
 2761|  83.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  83.4k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  83.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 83.4k, False: 0]
  ------------------
 2765|  83.4k|            parse_ctx.advance_to(begin);
 2766|  83.4k|            on_visit_scan_arg(
 2767|  83.4k|                impl::custom_reader<detail::default_context<char_type>>{
 2768|  83.4k|                    parse_ctx, get_custom_ctx()},
 2769|  83.4k|                arg);
 2770|  83.4k|            return parse_ctx.begin();
 2771|  83.4k|        }
 2772|       |
 2773|      0|        auto specs = detail::format_specs{};
 2774|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|      0|            detail::get_arg_type(arg)};
 2777|       |
 2778|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2779|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 0]
  |  Branch (2779:29): [True: 0, False: 0]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|      0|        parse_ctx.advance_to(begin);
 2789|       |
 2790|      0|        on_visit_scan_arg(
 2791|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|      0|                                           get_ctx().locale()},
 2793|      0|            arg);
 2794|      0|        return parse_ctx.begin();
 2795|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  83.4k|    {
 2732|  83.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 83.4k]
  |  Branch (2732:13): [True: 0, False: 83.4k]
  |  Branch (2732:29): [True: 0, False: 83.4k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  83.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  83.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 46.0k]
  |  |  ------------------
  ------------------
 2739|  37.4k|            on_error(r.error());
 2740|  37.4k|        }
 2741|  46.0k|        else {
 2742|  46.0k|            get_ctx().advance_to(*r);
 2743|  46.0k|        }
 2744|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 2802|  83.4k|    {
 2803|  83.4k|        return ctx.get_custom();
 2804|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 2633|  83.4k|    {
 2634|  83.4k|        if (!buffer) {
  ------------------
  |  Branch (2634:13): [True: 83.4k, False: 0]
  ------------------
 2635|  83.4k|            buffer.emplace(detail::make_string_view_from_pointers(
 2636|  83.4k|                ranges::data(contiguous_ctx.underlying_range()),
 2637|  83.4k|                ranges::data(contiguous_ctx.underlying_range()) +
 2638|  83.4k|                    ranges::size(contiguous_ctx.underlying_range())));
 2639|  83.4k|        }
 2640|  83.4k|        auto it = buffer->get().begin();
 2641|  83.4k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2642|  83.4k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2643|  83.4k|        return *custom_ctx;
 2644|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|   375k|    {
 2500|   375k|        {
 2501|   375k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 375k]
  ------------------
 2502|   375k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 375k]
  ------------------
 2503|   375k|                                      ? std::numeric_limits<uint64_t>::max()
 2504|   375k|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|   375k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 375k]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|   375k|        }
 2511|       |
 2512|   375k|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 375k, False: 0]
  ------------------
 2513|   375k|            return;
 2514|   375k|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  1.50M|    {
 2546|  1.50M|        return error;
 2547|  1.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|  98.4k|        : format_handler_base{argcount},
 2674|  98.4k|          parse_ctx{source_tag<Source&&>, format},
 2675|  98.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  98.4k|    {
 2677|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|  98.4k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|  98.4k|    static_cast<    \
  |  | 1084|  98.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|  98.4k|    {
 2602|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  98.4k|{
 2815|  98.4k|    const auto beg = handler.get_ctx().begin();
 2816|  98.4k|    detail::parse_format_string<false>(format, handler);
 2817|  98.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 61.0k]
  |  |  ------------------
  ------------------
 2818|  37.4k|        return unexpected(err.error());
 2819|  37.4k|    }
 2820|  61.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  98.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|   319k|    {
 2799|   319k|        return ctx.get();
 2800|   319k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|   319k|    {
 2606|   319k|        return ctx;
 2607|   319k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   159k|    {
 2681|   159k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 159k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|  98.4k|{
 2453|  98.4k|    auto arg = ctx.arg(id);
 2454|  98.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 98.4k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  98.4k|    return arg;
 2458|  98.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|  98.4k|    {
 2721|  98.4k|        return parse_ctx.next_arg_id();
 2722|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|  98.4k|    {
 2761|  98.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  98.4k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  98.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 98.4k, False: 0]
  ------------------
 2765|  98.4k|            parse_ctx.advance_to(begin);
 2766|  98.4k|            on_visit_scan_arg(
 2767|  98.4k|                impl::custom_reader<detail::default_context<char_type>>{
 2768|  98.4k|                    parse_ctx, get_custom_ctx()},
 2769|  98.4k|                arg);
 2770|  98.4k|            return parse_ctx.begin();
 2771|  98.4k|        }
 2772|       |
 2773|      0|        auto specs = detail::format_specs{};
 2774|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|      0|            detail::get_arg_type(arg)};
 2777|       |
 2778|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2779|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 0]
  |  Branch (2779:29): [True: 0, False: 0]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|      0|        parse_ctx.advance_to(begin);
 2789|       |
 2790|      0|        on_visit_scan_arg(
 2791|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|      0|                                           get_ctx().locale()},
 2793|      0|            arg);
 2794|      0|        return parse_ctx.begin();
 2795|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  98.4k|    {
 2732|  98.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 98.4k]
  |  Branch (2732:13): [True: 0, False: 98.4k]
  |  Branch (2732:29): [True: 0, False: 98.4k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  98.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  98.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.4k, False: 61.0k]
  |  |  ------------------
  ------------------
 2739|  37.4k|            on_error(r.error());
 2740|  37.4k|        }
 2741|  61.0k|        else {
 2742|  61.0k|            get_ctx().advance_to(*r);
 2743|  61.0k|        }
 2744|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 2802|  98.4k|    {
 2803|  98.4k|        return ctx.get_custom();
 2804|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 2609|  98.4k|    {
 2610|  98.4k|        return ctx;
 2611|  98.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|  83.4k|{
 2830|  83.4k|    const auto argcount = args.size();
 2831|  83.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 0, False: 83.4k]
  |  Branch (2831:60): [True: 0, False: 0]
  ------------------
 2832|      0|        auto arg = args.get(0);
 2833|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|      0|    }
 2835|       |
 2836|  83.4k|    auto handler = format_handler<true, CharT>{
 2837|  83.4k|        ranges::subrange<const CharT*>{source.data(),
 2838|  83.4k|                                       source.data() + source.size()},
 2839|  83.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|  83.4k|    return vscan_parse_format_string(format, handler);
 2841|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|  2.67k|{
 2411|  2.67k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|  2.67k|    auto reader =
 2417|  2.67k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|  2.67k|            ranges::subrange<const CharT*>{source.data(),
 2419|  2.67k|                                           source.data() + source.size()},
 2420|  2.67k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  2.67k|    static_cast<    \
  |  | 1084|  2.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|  2.67k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.67k|    }                                                  \
  |  |  |  | 3995|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|      0|    return ranges::distance(source.data(), it);
 2423|  2.67k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   101k|{
 2930|   101k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   101k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 61.0k, False: 40.0k]
  |  |  ------------------
  ------------------
 2931|  61.0k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 61.0k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|  61.0k|    }
 2937|  40.0k|    else {
 2938|  40.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 40.0k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  40.0k|    }
 2944|   101k|    return result;
 2945|   101k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|  96.9k|{
 2830|  96.9k|    const auto argcount = args.size();
 2831|  96.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 0, False: 96.9k]
  |  Branch (2831:60): [True: 0, False: 0]
  ------------------
 2832|      0|        auto arg = args.get(0);
 2833|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|      0|    }
 2835|       |
 2836|  96.9k|    auto handler = format_handler<true, CharT>{
 2837|  96.9k|        ranges::subrange<const CharT*>{source.data(),
 2838|  96.9k|                                       source.data() + source.size()},
 2839|  96.9k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|  96.9k|    return vscan_parse_format_string(format, handler);
 2841|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   193k|{
 2398|   193k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 193k, False: 0]
  ------------------
 2399|   193k|        return false;
 2400|   193k|    }
 2401|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 0, False: 0]
  |  Branch (2401:39): [True: 0, False: 0]
  ------------------
 2402|   193k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|  5.34k|{
 2411|  5.34k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|  5.34k|    auto reader =
 2417|  5.34k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|  5.34k|            ranges::subrange<const CharT*>{source.data(),
 2419|  5.34k|                                           source.data() + source.size()},
 2420|  5.34k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  5.34k|    static_cast<    \
  |  | 1084|  5.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|  5.34k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  5.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  5.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  5.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.34k|    }                                                  \
  |  |  |  | 3995|  5.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|      0|    return ranges::distance(source.data(), it);
 2423|  5.34k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|  96.9k|        : format_handler_base{argcount},
 2674|  96.9k|          parse_ctx{source_tag<Source&&>, format},
 2675|  96.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  96.9k|    {
 2677|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|  96.9k|        : contiguous_ctx(source, args, loc)
 2625|  96.9k|    {
 2626|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  96.9k|{
 2815|  96.9k|    const auto beg = handler.get_ctx().begin();
 2816|  96.9k|    detail::parse_format_string<false>(format, handler);
 2817|  96.9k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.8k, False: 22.1k]
  |  |  ------------------
  ------------------
 2818|  74.8k|        return unexpected(err.error());
 2819|  74.8k|    }
 2820|  22.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|   238k|    {
 2799|   238k|        return ctx.get();
 2800|   238k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|   238k|    {
 2630|   238k|        return contiguous_ctx;
 2631|   238k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|   119k|    {
 2681|   119k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 119k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|  96.9k|{
 2453|  96.9k|    auto arg = ctx.arg(id);
 2454|  96.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  96.9k|    return arg;
 2458|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|  96.9k|    {
 2721|  96.9k|        return parse_ctx.next_arg_id();
 2722|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|  96.9k|    {
 2761|  96.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  96.9k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  96.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 96.9k, False: 0]
  ------------------
 2765|  96.9k|            parse_ctx.advance_to(begin);
 2766|  96.9k|            on_visit_scan_arg(
 2767|  96.9k|                impl::custom_reader<detail::default_context<char_type>>{
 2768|  96.9k|                    parse_ctx, get_custom_ctx()},
 2769|  96.9k|                arg);
 2770|  96.9k|            return parse_ctx.begin();
 2771|  96.9k|        }
 2772|       |
 2773|      0|        auto specs = detail::format_specs{};
 2774|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|      0|            detail::get_arg_type(arg)};
 2777|       |
 2778|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2779|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 0]
  |  Branch (2779:29): [True: 0, False: 0]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|      0|        parse_ctx.advance_to(begin);
 2789|       |
 2790|      0|        on_visit_scan_arg(
 2791|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|      0|                                           get_ctx().locale()},
 2793|      0|            arg);
 2794|      0|        return parse_ctx.begin();
 2795|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  96.9k|    {
 2732|  96.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 96.9k]
  |  Branch (2732:13): [True: 0, False: 96.9k]
  |  Branch (2732:29): [True: 0, False: 96.9k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  96.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  96.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.8k, False: 22.1k]
  |  |  ------------------
  ------------------
 2739|  74.8k|            on_error(r.error());
 2740|  74.8k|        }
 2741|  22.1k|        else {
 2742|  22.1k|            get_ctx().advance_to(*r);
 2743|  22.1k|        }
 2744|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 2802|  96.9k|    {
 2803|  96.9k|        return ctx.get_custom();
 2804|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 2633|  96.9k|    {
 2634|  96.9k|        if (!buffer) {
  ------------------
  |  Branch (2634:13): [True: 96.9k, False: 0]
  ------------------
 2635|  96.9k|            buffer.emplace(detail::make_string_view_from_pointers(
 2636|  96.9k|                ranges::data(contiguous_ctx.underlying_range()),
 2637|  96.9k|                ranges::data(contiguous_ctx.underlying_range()) +
 2638|  96.9k|                    ranges::size(contiguous_ctx.underlying_range())));
 2639|  96.9k|        }
 2640|  96.9k|        auto it = buffer->get().begin();
 2641|  96.9k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2642|  96.9k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2643|  96.9k|        return *custom_ctx;
 2644|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|  96.9k|{
 2850|  96.9k|    const auto argcount = args.size();
 2851|  96.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 0, False: 96.9k]
  |  Branch (2851:60): [True: 0, False: 0]
  ------------------
 2852|      0|        auto arg = args.get(0);
 2853|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|      0|    }
 2855|       |
 2856|  96.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 96.9k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|  96.9k|    SCN_UNLIKELY_ATTR
 2864|  96.9k|    {
 2865|  96.9k|        auto handler = format_handler<false, CharT>{
 2866|  96.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|  96.9k|        return vscan_parse_format_string(format, handler);
 2868|  96.9k|    }
 2869|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  5.34k|{
 2431|  5.34k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  5.34k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  5.34k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 5.34k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  5.34k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  5.34k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  5.34k|    static_cast<    \
  |  | 1084|  5.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  5.34k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  5.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  5.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  5.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.34k|    }                                                  \
  |  |  |  | 3995|  5.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|      0|    return it.position();
 2448|  5.34k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|  96.9k|        : format_handler_base{argcount},
 2674|  96.9k|          parse_ctx{source_tag<Source&&>, format},
 2675|  96.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  96.9k|    {
 2677|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|  96.9k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|  96.9k|    {
 2602|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  96.9k|{
 2815|  96.9k|    const auto beg = handler.get_ctx().begin();
 2816|  96.9k|    detail::parse_format_string<false>(format, handler);
 2817|  96.9k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.8k, False: 22.1k]
  |  |  ------------------
  ------------------
 2818|  74.8k|        return unexpected(err.error());
 2819|  74.8k|    }
 2820|  22.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|   238k|    {
 2799|   238k|        return ctx.get();
 2800|   238k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|   238k|    {
 2606|   238k|        return ctx;
 2607|   238k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   119k|    {
 2681|   119k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 119k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   119k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|  96.9k|{
 2453|  96.9k|    auto arg = ctx.arg(id);
 2454|  96.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  96.9k|    return arg;
 2458|  96.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|  96.9k|    {
 2721|  96.9k|        return parse_ctx.next_arg_id();
 2722|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|  96.9k|    {
 2761|  96.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  96.9k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  96.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 96.9k, False: 0]
  ------------------
 2765|  96.9k|            parse_ctx.advance_to(begin);
 2766|  96.9k|            on_visit_scan_arg(
 2767|  96.9k|                impl::custom_reader<detail::default_context<char_type>>{
 2768|  96.9k|                    parse_ctx, get_custom_ctx()},
 2769|  96.9k|                arg);
 2770|  96.9k|            return parse_ctx.begin();
 2771|  96.9k|        }
 2772|       |
 2773|      0|        auto specs = detail::format_specs{};
 2774|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|      0|            detail::get_arg_type(arg)};
 2777|       |
 2778|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2779|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 0]
  |  Branch (2779:29): [True: 0, False: 0]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|      0|        parse_ctx.advance_to(begin);
 2789|       |
 2790|      0|        on_visit_scan_arg(
 2791|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|      0|                                           get_ctx().locale()},
 2793|      0|            arg);
 2794|      0|        return parse_ctx.begin();
 2795|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  96.9k|    {
 2732|  96.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 96.9k]
  |  Branch (2732:13): [True: 0, False: 96.9k]
  |  Branch (2732:29): [True: 0, False: 96.9k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  96.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  96.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74.8k, False: 22.1k]
  |  |  ------------------
  ------------------
 2739|  74.8k|            on_error(r.error());
 2740|  74.8k|        }
 2741|  22.1k|        else {
 2742|  22.1k|            get_ctx().advance_to(*r);
 2743|  22.1k|        }
 2744|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 2802|  96.9k|    {
 2803|  96.9k|        return ctx.get_custom();
 2804|  96.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 2609|  96.9k|    {
 2610|  96.9k|        return ctx;
 2611|  96.9k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   102k|{
 2930|   102k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 22.1k, False: 80.1k]
  |  |  ------------------
  ------------------
 2931|  22.1k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 22.1k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|  22.1k|    }
 2937|  80.1k|    else {
 2938|  80.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  80.1k|    }
 2944|   102k|    return result;
 2945|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  2.67k|{
 2876|  2.67k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  2.67k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  2.67k|{
 2876|  2.67k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  2.67k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  5.34k|{
 2876|  5.34k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  5.34k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  5.34k|{
 2876|  5.34k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  5.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  5.34k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.8k|{
 4702|  32.8k|    {
 4703|  32.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 486, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    486|    }                                                  \
  |  |  |  | 3995|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  32.3k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  32.3k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  32.3k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  32.3k|        ctx.range(), t, ctx.locale());
 4710|  32.3k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  32.3k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.9k, False: 20.3k]
  |  |  ------------------
  ------------------
 4712|  11.9k|        return unexpected(e.error());
 4713|  11.9k|    }
 4714|  20.3k|    return r.get_iterator();
 4715|  32.3k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3801|  32.3k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  32.3k|          m_begin(ranges::begin(m_range)),
 3803|  32.3k|          m_tm(t),
 3804|  32.3k|          m_loc(loc)
 3805|  32.3k|    {
 3806|  32.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4480|  11.1k|    {
 4481|  11.1k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4485|  47.2k|    {
 4486|  47.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 11.9k, False: 35.2k]
  ------------------
 4487|  11.9k|            m_error = unexpected(e);
 4488|  11.9k|        }
 4489|  47.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3809|  34.2k|    {
 3810|  57.2k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 34.2k, False: 22.9k]
  ------------------
 3811|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 224, False: 34.0k]
  ------------------
 3812|    224|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    224|            }
 3814|  34.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.1k, False: 22.9k]
  ------------------
 3815|  11.1k|                return on_error("Invalid literal character");
 3816|  11.1k|            }
 3817|  22.9k|            ++beg;
 3818|  22.9k|            ++m_begin;
 3819|  22.9k|        }
 3820|  34.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.81k|    {
 3840|  3.81k|#if !SCN_DISABLE_LOCALE
 3841|  3.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.81k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.81k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.81k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.81k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  3.81k|    {
 3313|  3.81k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.81k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  3.81k|        t.tm_year = y - 1900;
 3318|  3.81k|        st.set_full_year(h);
 3319|  3.81k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4503|  58.4k|    {
 4504|  58.4k|        int digits_read = 0;
 4505|  58.4k|        int accumulator = 0;
 4506|   101k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 101k, False: 466]
  ------------------
 4507|   101k|            const auto ch = *m_begin;
 4508|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 29.0k, False: 72.2k]
  |  Branch (4508:36): [True: 19.6k, False: 52.6k]
  ------------------
 4509|  48.7k|                break;
 4510|  48.7k|            }
 4511|  52.6k|            ++m_begin;
 4512|  52.6k|            ++digits_read;
 4513|  52.6k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  52.6k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 9.31k, False: 43.3k]
  ------------------
 4515|  9.31k|                break;
 4516|  9.31k|            }
 4517|  52.6k|        }
 4518|  58.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 17.6k, False: 40.8k]
  ------------------
 4519|  17.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  17.6k|                                 "Too few integer digits"});
 4521|  17.6k|            return -1;
 4522|  17.6k|        }
 4523|  40.8k|        return accumulator;
 4524|  58.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3855|  6.17k|    {
 3856|  6.17k|#if !SCN_DISABLE_LOCALE
 3857|  6.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 6.17k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  6.17k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  6.17k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  6.17k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  6.17k|    {
 3330|  6.17k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 4.48k]
  |  |  |  Branch (1014:45): [True: 1.69k, False: 4.48k]
  |  |  |  Branch (1014:45): [True: 0, False: 4.48k]
  |  |  ------------------
  ------------------
 3331|  1.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  1.69k|                                "Invalid value for tm_year"});
 3333|  1.69k|        }
 3334|  4.48k|        st.short_year_value = static_cast<unsigned char>(y);
 3335|  4.48k|        st.set_short_year(h);
 3336|  4.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3902|  4.61k|    {
 3903|  4.61k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.61k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.61k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.61k|#endif
 3911|       |
 3912|  4.61k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.61k|            {"January", 1},
 3914|  4.61k|            {"February", 2},
 3915|  4.61k|            {"March", 3},
 3916|  4.61k|            {"April", 4},
 3917|  4.61k|            {"May", 5},
 3918|  4.61k|            {"June", 6},
 3919|  4.61k|            {"July", 7},
 3920|  4.61k|            {"August", 8},
 3921|  4.61k|            {"September", 9},
 3922|  4.61k|            {"October", 10},
 3923|  4.61k|            {"November", 11},
 3924|  4.61k|            {"December", 12},
 3925|  4.61k|        }};
 3926|  4.61k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.49k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.49k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.49k|            {"Jan", 1},
 3931|  4.49k|            {"Feb", 2},
 3932|  4.49k|            {"Mar", 3},
 3933|  4.49k|            {"Apr", 4},
 3934|  4.49k|            {"Jun", 6},
 3935|  4.49k|            {"Jul", 7},
 3936|  4.49k|            {"Aug", 8},
 3937|  4.49k|            {"Sep", 9},
 3938|  4.49k|            {"Oct", 10},
 3939|  4.49k|            {"Nov", 11},
 3940|  4.49k|            {"Dec", 12},
 3941|  4.49k|        }};
 3942|  4.49k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.70k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.70k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  11.2k|    {
 3303|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.88k, False: 8.38k]
  |  |  |  Branch (1014:45): [True: 2.73k, False: 8.53k]
  |  |  |  Branch (1014:45): [True: 144, False: 8.38k]
  |  |  ------------------
  ------------------
 3304|  2.88k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  2.88k|                                "Invalid value for tm_mon"});
 3306|  2.88k|        }
 3307|  8.38k|        t.tm_mon = m - 1;
 3308|  8.38k|        st.set_mon(h);
 3309|  8.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.61k|    {
 4554|  4.61k|        auto start_it = m_begin;
 4555|  4.61k|        std::size_t options_available = N;
 4556|  4.61k|        std::size_t chars_consumed = 0;
 4557|  18.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.42k]
  ------------------
 4558|  18.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 68, False: 13.4k]
  ------------------
 4561|     68|                options_available = 0;
 4562|     68|                break;
 4563|     68|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  83.7k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.3k, False: 13.4k]
  ------------------
 4567|  70.3k|                const auto cmp = static_cast<unsigned>(
 4568|  70.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.3k]
  ------------------
 4570|  70.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.1k, False: 12.1k]
  |  Branch (4570:34): [True: 55.1k, False: 3.00k]
  ------------------
 4571|  55.1k|                    std::rotate(
 4572|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.1k|                        options.end());
 4575|  55.1k|                    --options_available;
 4576|  55.1k|                    continue;
 4577|  55.1k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.61k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.49k, False: 120]
  ------------------
 4583|  4.49k|            m_begin = start_it;
 4584|  4.49k|            return std::nullopt;
 4585|  4.49k|        }
 4586|    120|        return options.front().second;
 4587|  4.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.49k|    {
 4554|  4.49k|        auto start_it = m_begin;
 4555|  4.49k|        std::size_t options_available = N;
 4556|  4.49k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.64k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.4k, False: 2.78k]
  ------------------
 4559|  10.4k|            std::size_t i = 0;
 4560|  10.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 10.3k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 10.3k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.4k, False: 5.88k]
  |  Branch (4570:34): [True: 46.5k, False: 2.87k]
  ------------------
 4571|  46.5k|                    std::rotate(
 4572|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.5k|                        options.end());
 4575|  46.5k|                    --options_available;
 4576|  46.5k|                    continue;
 4577|  46.5k|                }
 4578|  8.75k|                ++i;
 4579|  8.75k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.70k, False: 2.78k]
  ------------------
 4583|  1.70k|            m_begin = start_it;
 4584|  1.70k|            return std::nullopt;
 4585|  1.70k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.49k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  8.36k|    {
 3949|  8.36k|#if !SCN_DISABLE_LOCALE
 3950|  8.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 8.36k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  8.36k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  8.36k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  8.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  8.34k|    {
 3983|  8.34k|#if !SCN_DISABLE_LOCALE
 3984|  8.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 8.34k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  8.34k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  8.34k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  8.34k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  8.34k|    {
 3293|  8.34k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.38k, False: 4.96k]
  |  |  |  Branch (1014:45): [True: 3.27k, False: 5.06k]
  |  |  |  Branch (1014:45): [True: 108, False: 4.96k]
  |  |  ------------------
  ------------------
 3294|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  3.38k|                                "Invalid value for tm_mday"});
 3296|  3.38k|        }
 3297|  4.96k|        t.tm_mday = d;
 3298|  4.96k|        st.set_mday(h);
 3299|  4.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3999|  3.53k|    {
 4000|  3.53k|#if !SCN_DISABLE_LOCALE
 4001|  3.53k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.53k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.53k|#endif
 4008|       |
 4009|  3.53k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.53k|            {"Sunday", 0},
 4011|  3.53k|            {"Monday", 1},
 4012|  3.53k|            {"Tuesday", 2},
 4013|  3.53k|            {"Wednesday", 3},
 4014|  3.53k|            {"Thursday", 4},
 4015|  3.53k|            {"Friday", 5},
 4016|  3.53k|            {"Saturday", 6},
 4017|  3.53k|        }};
 4018|  3.53k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.53k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.53k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.53k|            {"Sun", 0},
 4023|  3.53k|            {"Mon", 1},
 4024|  3.53k|            {"Tue", 2},
 4025|  3.53k|            {"Wed", 3},
 4026|  3.53k|            {"Thu", 4},
 4027|  3.53k|            {"Fri", 5},
 4028|  3.53k|            {"Sat", 6},
 4029|  3.53k|        }};
 4030|  3.53k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.80k, False: 1.72k]
  ------------------
 4031|  1.80k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.80k|        }
 4033|  1.72k|        return set_error(
 4034|  1.72k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3339|  1.80k|    {
 3340|  1.80k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  ------------------
  ------------------
 3341|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3342|      0|                                "Invalid value for tm_wday"});
 3343|      0|        }
 3344|  1.80k|        t.tm_wday = d;
 3345|  1.80k|        st.set_wday(h);
 3346|  1.80k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.07k|    {
 4554|  7.07k|        auto start_it = m_begin;
 4555|  7.07k|        std::size_t options_available = N;
 4556|  7.07k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.5k, False: 5.20k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.7k, False: 1.80k]
  ------------------
 4559|  16.7k|            std::size_t i = 0;
 4560|  16.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 58, False: 16.7k]
  ------------------
 4561|     58|                options_available = 0;
 4562|     58|                break;
 4563|     58|            }
 4564|  16.7k|            const auto ch = *m_begin;
 4565|  16.7k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.1k, False: 16.7k]
  ------------------
 4567|  59.1k|                const auto cmp = static_cast<unsigned>(
 4568|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.1k]
  ------------------
 4570|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.7k, False: 11.4k]
  |  Branch (4570:34): [True: 47.6k, False: 128]
  ------------------
 4571|  47.6k|                    std::rotate(
 4572|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.6k|                        options.end());
 4575|  47.6k|                    --options_available;
 4576|  47.6k|                    continue;
 4577|  47.6k|                }
 4578|  11.5k|                ++i;
 4579|  11.5k|            }
 4580|  16.7k|            ++chars_consumed;
 4581|  16.7k|        }
 4582|  7.07k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.26k, False: 1.80k]
  ------------------
 4583|  5.26k|            m_begin = start_it;
 4584|  5.26k|            return std::nullopt;
 4585|  5.26k|        }
 4586|  1.80k|        return options.front().second;
 4587|  7.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4077|  14.2k|    {
 4078|  14.2k|#if !SCN_DISABLE_LOCALE
 4079|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 14.2k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  14.2k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  14.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  14.2k|    {
 3273|  14.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.47k, False: 11.8k]
  |  |  |  Branch (1014:45): [True: 2.20k, False: 12.0k]
  |  |  |  Branch (1014:45): [True: 270, False: 11.8k]
  |  |  ------------------
  ------------------
 3274|  2.47k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  2.47k|                                  "Invalid value for tm_hour"});
 3276|  2.47k|        }
 3277|  11.8k|        t.tm_hour = h;
 3278|  11.8k|        st.set_hour24(hdl);
 3279|  11.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4109|  14.2k|    {
 4110|  14.2k|#if !SCN_DISABLE_LOCALE
 4111|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 14.2k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  14.2k|    {
 3263|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.77k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 2.74k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 28, False: 11.4k]
  |  |  ------------------
  ------------------
 3264|  2.77k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  2.77k|                                "Invalid value for tm_min"});
 3266|  2.77k|        }
 3267|  11.4k|        t.tm_min = m;
 3268|  11.4k|        st.set_min(h);
 3269|  11.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4125|  3.23k|    {
 4126|  3.23k|#if !SCN_DISABLE_LOCALE
 4127|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.23k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.23k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.23k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.23k|    {
 3253|  3.23k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 1.54k]
  |  |  |  Branch (1014:45): [True: 1.68k, False: 1.55k]
  |  |  |  Branch (1014:45): [True: 4, False: 1.54k]
  |  |  ------------------
  ------------------
 3254|  1.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  1.69k|                                "Invalid value for tm_sec"});
 3256|  1.69k|        }
 3257|  1.54k|        t.tm_sec = s;
 3258|  1.54k|        st.set_sec(h);
 3259|  1.54k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSM_5ratioILl60ELl1EEEEE:
 3363|     18|    {
 3364|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3365|     18|            assign_gmtoff(t,
 3366|     18|                          std::chrono::duration_cast<std::chrono::seconds>(o));
 3367|       |        }
 3368|       |        else {
 3369|       |            return h.set_error(
 3370|       |                {scan_error::invalid_format_string, "tm_gmtoff not supported"});
 3371|       |        }
 3372|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4375|  6.17k|    {
 4376|       |        // %m/%d/%y
 4377|  6.17k|        constexpr CharT slash = '/';
 4378|  6.17k|        on_dec_month();
 4379|  6.17k|        on_text(&slash, &slash + 1);
 4380|  6.17k|        on_day_of_month();
 4381|  6.17k|        on_text(&slash, &slash + 1);
 4382|  6.17k|        on_short_year();
 4383|  6.17k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4385|  2.07k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.07k|        constexpr CharT dash = '-';
 4388|  2.07k|        on_full_year();
 4389|  2.07k|        on_text(&dash, &dash + 1);
 4390|  2.07k|        on_dec_month();
 4391|  2.07k|        on_text(&dash, &dash + 1);
 4392|  2.07k|        on_day_of_month();
 4393|  2.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4417|  10.9k|    {
 4418|       |        // %H:%M
 4419|  10.9k|        constexpr CharT colon = ':';
 4420|  10.9k|        on_24_hour();
 4421|  10.9k|        on_text(&colon, &colon + 1);
 4422|  10.9k|        on_minute();
 4423|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4425|  3.21k|    {
 4426|       |        // %H:%M:%S
 4427|  3.21k|        constexpr CharT colon = ':';
 4428|  3.21k|        on_24_hour();
 4429|  3.21k|        on_text(&colon, &colon + 1);
 4430|  3.21k|        on_minute();
 4431|  3.21k|        on_text(&colon, &colon + 1);
 4432|  3.21k|        on_second();
 4433|  3.21k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4464|  20.3k|    {
 4465|  20.3k|        m_st.verify(*this);
 4466|  20.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 20.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  20.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 19.9k, False: 356]
  |  Branch (4469:37): [True: 4.46k, False: 15.5k]
  |  Branch (4469:60): [True: 0, False: 15.5k]
  ------------------
 4470|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|  4.46k|        }
 4472|  20.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3390|  9.28k|    {
 3391|  9.28k|        st.handle_short_year_and_century(t.tm_year, 1900);
 3392|  9.28k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4475|  65.0k|    {
 4476|  65.0k|        return m_error;
 4477|  65.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4492|  20.3k|    {
 4493|  20.3k|        return m_begin;
 4494|  20.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  27.8k|{
 4702|  27.8k|    {
 4703|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 250, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    250|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  27.5k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  27.5k|        ctx.range(), t, ctx.locale());
 4710|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12.2k, False: 15.3k]
  |  |  ------------------
  ------------------
 4712|  12.2k|        return unexpected(e.error());
 4713|  12.2k|    }
 4714|  15.3k|    return r.get_iterator();
 4715|  27.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  83.4k|{
  250|  83.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  83.4k|        .transform_error(impl::make_eof_scan_error);
  252|  83.4k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3801|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  27.5k|          m_begin(ranges::begin(m_range)),
 3803|  27.5k|          m_tm(t),
 3804|  27.5k|          m_loc(loc)
 3805|  27.5k|    {
 3806|  27.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4480|  11.4k|    {
 4481|  11.4k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4485|  48.9k|    {
 4486|  48.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 12.2k, False: 36.7k]
  ------------------
 4487|  12.2k|            m_error = unexpected(e);
 4488|  12.2k|        }
 4489|  48.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3809|  25.1k|    {
 3810|  38.7k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 25.1k, False: 13.5k]
  ------------------
 3811|  25.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 172, False: 25.0k]
  ------------------
 3812|    172|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    172|            }
 3814|  25.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.4k, False: 13.5k]
  ------------------
 3815|  11.4k|                return on_error("Invalid literal character");
 3816|  11.4k|            }
 3817|  13.5k|            ++beg;
 3818|  13.5k|            ++m_begin;
 3819|  13.5k|        }
 3820|  25.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.86k|    {
 3840|  3.86k|#if !SCN_DISABLE_LOCALE
 3841|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.86k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.86k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.86k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  3.86k|    {
 3313|  3.86k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.86k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  3.86k|        t.tm_year = y - 1900;
 3318|  3.86k|        st.set_full_year(h);
 3319|  3.86k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4503|  44.5k|    {
 4504|  44.5k|        int digits_read = 0;
 4505|  44.5k|        int accumulator = 0;
 4506|  73.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 72.6k, False: 378]
  ------------------
 4507|  72.6k|            const auto ch = *m_begin;
 4508|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 21.0k, False: 51.6k]
  |  Branch (4508:36): [True: 18.4k, False: 33.2k]
  ------------------
 4509|  39.4k|                break;
 4510|  39.4k|            }
 4511|  33.2k|            ++m_begin;
 4512|  33.2k|            ++digits_read;
 4513|  33.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  33.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 4.75k, False: 28.4k]
  ------------------
 4515|  4.75k|                break;
 4516|  4.75k|            }
 4517|  33.2k|        }
 4518|  44.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 18.3k, False: 26.2k]
  ------------------
 4519|  18.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  18.3k|                                 "Too few integer digits"});
 4521|  18.3k|            return -1;
 4522|  18.3k|        }
 4523|  26.2k|        return accumulator;
 4524|  44.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3855|  1.89k|    {
 3856|  1.89k|#if !SCN_DISABLE_LOCALE
 3857|  1.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 1.89k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  1.89k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  1.89k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  1.89k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  1.89k|    {
 3330|  1.89k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.73k, False: 160]
  |  |  |  Branch (1014:45): [True: 1.73k, False: 160]
  |  |  |  Branch (1014:45): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 3331|  1.73k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  1.73k|                                "Invalid value for tm_year"});
 3333|  1.73k|        }
 3334|    160|        st.short_year_value = static_cast<unsigned char>(y);
 3335|    160|        st.set_short_year(h);
 3336|    160|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3902|  4.64k|    {
 3903|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.64k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.64k|#endif
 3911|       |
 3912|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.64k|            {"January", 1},
 3914|  4.64k|            {"February", 2},
 3915|  4.64k|            {"March", 3},
 3916|  4.64k|            {"April", 4},
 3917|  4.64k|            {"May", 5},
 3918|  4.64k|            {"June", 6},
 3919|  4.64k|            {"July", 7},
 3920|  4.64k|            {"August", 8},
 3921|  4.64k|            {"September", 9},
 3922|  4.64k|            {"October", 10},
 3923|  4.64k|            {"November", 11},
 3924|  4.64k|            {"December", 12},
 3925|  4.64k|        }};
 3926|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.52k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.52k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.52k|            {"Jan", 1},
 3931|  4.52k|            {"Feb", 2},
 3932|  4.52k|            {"Mar", 3},
 3933|  4.52k|            {"Apr", 4},
 3934|  4.52k|            {"Jun", 6},
 3935|  4.52k|            {"Jul", 7},
 3936|  4.52k|            {"Aug", 8},
 3937|  4.52k|            {"Sep", 9},
 3938|  4.52k|            {"Oct", 10},
 3939|  4.52k|            {"Nov", 11},
 3940|  4.52k|            {"Dec", 12},
 3941|  4.52k|        }};
 3942|  4.52k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.74k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.74k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.01k|    {
 3303|  7.01k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.98k, False: 4.02k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 4.15k]
  |  |  |  Branch (1014:45): [True: 130, False: 4.02k]
  |  |  ------------------
  ------------------
 3304|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  2.98k|                                "Invalid value for tm_mon"});
 3306|  2.98k|        }
 3307|  4.02k|        t.tm_mon = m - 1;
 3308|  4.02k|        st.set_mon(h);
 3309|  4.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.64k|    {
 4554|  4.64k|        auto start_it = m_begin;
 4555|  4.64k|        std::size_t options_available = N;
 4556|  4.64k|        std::size_t chars_consumed = 0;
 4557|  18.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.46k]
  ------------------
 4558|  18.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 13.4k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  84.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.5k, False: 13.4k]
  ------------------
 4567|  70.5k|                const auto cmp = static_cast<unsigned>(
 4568|  70.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.5k]
  ------------------
 4570|  70.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.4k, False: 12.1k]
  |  Branch (4570:34): [True: 55.4k, False: 2.97k]
  ------------------
 4571|  55.4k|                    std::rotate(
 4572|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.4k|                        options.end());
 4575|  55.4k|                    --options_available;
 4576|  55.4k|                    continue;
 4577|  55.4k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.52k, False: 120]
  ------------------
 4583|  4.52k|            m_begin = start_it;
 4584|  4.52k|            return std::nullopt;
 4585|  4.52k|        }
 4586|    120|        return options.front().second;
 4587|  4.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.52k|    {
 4554|  4.52k|        auto start_it = m_begin;
 4555|  4.52k|        std::size_t options_available = N;
 4556|  4.52k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.68k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.3k, False: 2.78k]
  ------------------
 4559|  10.3k|            std::size_t i = 0;
 4560|  10.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 52, False: 10.3k]
  ------------------
 4561|     52|                options_available = 0;
 4562|     52|                break;
 4563|     52|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.9k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.5k, False: 10.3k]
  ------------------
 4567|  55.5k|                const auto cmp = static_cast<unsigned>(
 4568|  55.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.5k]
  ------------------
 4570|  55.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.7k, False: 5.85k]
  |  Branch (4570:34): [True: 46.8k, False: 2.84k]
  ------------------
 4571|  46.8k|                    std::rotate(
 4572|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.8k|                        options.end());
 4575|  46.8k|                    --options_available;
 4576|  46.8k|                    continue;
 4577|  46.8k|                }
 4578|  8.69k|                ++i;
 4579|  8.69k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.52k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.74k, False: 2.78k]
  ------------------
 4583|  1.74k|            m_begin = start_it;
 4584|  1.74k|            return std::nullopt;
 4585|  1.74k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  4.10k|    {
 3949|  4.10k|#if !SCN_DISABLE_LOCALE
 3950|  4.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 4.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  4.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  4.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  4.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  4.09k|    {
 3983|  4.09k|#if !SCN_DISABLE_LOCALE
 3984|  4.09k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 4.09k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  4.09k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  4.09k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  4.09k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  4.09k|    {
 3293|  4.09k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.46k, False: 626]
  |  |  |  Branch (1014:45): [True: 3.36k, False: 730]
  |  |  |  Branch (1014:45): [True: 104, False: 626]
  |  |  ------------------
  ------------------
 3294|  3.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  3.46k|                                "Invalid value for tm_mday"});
 3296|  3.46k|        }
 3297|    626|        t.tm_mday = d;
 3298|    626|        st.set_mday(h);
 3299|    626|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3999|  3.54k|    {
 4000|  3.54k|#if !SCN_DISABLE_LOCALE
 4001|  3.54k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.54k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.54k|#endif
 4008|       |
 4009|  3.54k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.54k|            {"Sunday", 0},
 4011|  3.54k|            {"Monday", 1},
 4012|  3.54k|            {"Tuesday", 2},
 4013|  3.54k|            {"Wednesday", 3},
 4014|  3.54k|            {"Thursday", 4},
 4015|  3.54k|            {"Friday", 5},
 4016|  3.54k|            {"Saturday", 6},
 4017|  3.54k|        }};
 4018|  3.54k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.54k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.54k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.54k|            {"Sun", 0},
 4023|  3.54k|            {"Mon", 1},
 4024|  3.54k|            {"Tue", 2},
 4025|  3.54k|            {"Wed", 3},
 4026|  3.54k|            {"Thu", 4},
 4027|  3.54k|            {"Fri", 5},
 4028|  3.54k|            {"Sat", 6},
 4029|  3.54k|        }};
 4030|  3.54k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.79k, False: 1.75k]
  ------------------
 4031|  1.79k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.79k|        }
 4033|  1.75k|        return set_error(
 4034|  1.75k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.54k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3339|  1.79k|    {
 3340|  1.79k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  ------------------
  ------------------
 3341|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3342|      0|                                "Invalid value for tm_wday"});
 3343|      0|        }
 3344|  1.79k|        t.tm_wday = d;
 3345|  1.79k|        st.set_wday(h);
 3346|  1.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.09k|    {
 4554|  7.09k|        auto start_it = m_begin;
 4555|  7.09k|        std::size_t options_available = N;
 4556|  7.09k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.4k, False: 5.26k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.6k, False: 1.79k]
  ------------------
 4559|  16.6k|            std::size_t i = 0;
 4560|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 16.6k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  16.6k|            const auto ch = *m_begin;
 4565|  16.6k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.2k, False: 16.6k]
  ------------------
 4567|  59.2k|                const auto cmp = static_cast<unsigned>(
 4568|  59.2k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.2k]
  ------------------
 4570|  59.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.9k, False: 11.2k]
  |  Branch (4570:34): [True: 47.8k, False: 100]
  ------------------
 4571|  47.8k|                    std::rotate(
 4572|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.8k|                        options.end());
 4575|  47.8k|                    --options_available;
 4576|  47.8k|                    continue;
 4577|  47.8k|                }
 4578|  11.3k|                ++i;
 4579|  11.3k|            }
 4580|  16.6k|            ++chars_consumed;
 4581|  16.6k|        }
 4582|  7.09k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.30k, False: 1.79k]
  ------------------
 4583|  5.30k|            m_begin = start_it;
 4584|  5.30k|            return std::nullopt;
 4585|  5.30k|        }
 4586|  1.79k|        return options.front().second;
 4587|  7.09k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4077|  13.6k|    {
 4078|  13.6k|#if !SCN_DISABLE_LOCALE
 4079|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.6k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.6k|    {
 3273|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (1014:45): [True: 2.46k, False: 11.2k]
  |  |  |  Branch (1014:45): [True: 252, False: 10.9k]
  |  |  ------------------
  ------------------
 3274|  2.72k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  2.72k|                                  "Invalid value for tm_hour"});
 3276|  2.72k|        }
 3277|  10.9k|        t.tm_hour = h;
 3278|  10.9k|        st.set_hour24(hdl);
 3279|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4109|  13.6k|    {
 4110|  13.6k|#if !SCN_DISABLE_LOCALE
 4111|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.6k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.6k|    {
 3263|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.87k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 20, False: 10.7k]
  |  |  ------------------
  ------------------
 3264|  2.87k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  2.87k|                                "Invalid value for tm_min"});
 3266|  2.87k|        }
 3267|  10.7k|        t.tm_min = m;
 3268|  10.7k|        st.set_min(h);
 3269|  10.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4125|  3.25k|    {
 4126|  3.25k|#if !SCN_DISABLE_LOCALE
 4127|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.25k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.25k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.25k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.25k|    {
 3253|  3.25k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 2, False: 1.53k]
  |  |  ------------------
  ------------------
 3254|  1.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  1.72k|                                "Invalid value for tm_sec"});
 3256|  1.72k|        }
 3257|  1.53k|        t.tm_sec = s;
 3258|  1.53k|        st.set_sec(h);
 3259|  1.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSK_5ratioILl60ELl1EEEEE:
 3363|     18|    {
 3364|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3365|     18|            assign_gmtoff(t,
 3366|     18|                          std::chrono::duration_cast<std::chrono::seconds>(o));
 3367|       |        }
 3368|       |        else {
 3369|       |            return h.set_error(
 3370|       |                {scan_error::invalid_format_string, "tm_gmtoff not supported"});
 3371|       |        }
 3372|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4375|  1.89k|    {
 4376|       |        // %m/%d/%y
 4377|  1.89k|        constexpr CharT slash = '/';
 4378|  1.89k|        on_dec_month();
 4379|  1.89k|        on_text(&slash, &slash + 1);
 4380|  1.89k|        on_day_of_month();
 4381|  1.89k|        on_text(&slash, &slash + 1);
 4382|  1.89k|        on_short_year();
 4383|  1.89k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4385|  2.10k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.10k|        constexpr CharT dash = '-';
 4388|  2.10k|        on_full_year();
 4389|  2.10k|        on_text(&dash, &dash + 1);
 4390|  2.10k|        on_dec_month();
 4391|  2.10k|        on_text(&dash, &dash + 1);
 4392|  2.10k|        on_day_of_month();
 4393|  2.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4417|  10.3k|    {
 4418|       |        // %H:%M
 4419|  10.3k|        constexpr CharT colon = ':';
 4420|  10.3k|        on_24_hour();
 4421|  10.3k|        on_text(&colon, &colon + 1);
 4422|  10.3k|        on_minute();
 4423|  10.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4425|  3.23k|    {
 4426|       |        // %H:%M:%S
 4427|  3.23k|        constexpr CharT colon = ':';
 4428|  3.23k|        on_24_hour();
 4429|  3.23k|        on_text(&colon, &colon + 1);
 4430|  3.23k|        on_minute();
 4431|  3.23k|        on_text(&colon, &colon + 1);
 4432|  3.23k|        on_second();
 4433|  3.23k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4464|  15.3k|    {
 4465|  15.3k|        m_st.verify(*this);
 4466|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 15.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 14.9k, False: 356]
  |  Branch (4469:37): [True: 148, False: 14.8k]
  |  Branch (4469:60): [True: 0, False: 14.8k]
  ------------------
 4470|    148|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|    148|        }
 4472|  15.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4475|  55.4k|    {
 4476|  55.4k|        return m_error;
 4477|  55.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4492|  15.3k|    {
 4493|  15.3k|        return m_begin;
 4494|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.8k|{
 4702|  32.8k|    {
 4703|  32.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 486, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    486|    }                                                  \
  |  |  |  | 3995|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  32.3k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  32.3k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  32.3k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  32.3k|        ctx.range(), t, ctx.locale());
 4710|  32.3k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  32.3k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.9k, False: 20.3k]
  |  |  ------------------
  ------------------
 4712|  11.9k|        return unexpected(e.error());
 4713|  11.9k|    }
 4714|  20.3k|    return r.get_iterator();
 4715|  32.3k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3801|  32.3k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  32.3k|          m_begin(ranges::begin(m_range)),
 3803|  32.3k|          m_tm(t),
 3804|  32.3k|          m_loc(loc)
 3805|  32.3k|    {
 3806|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4480|  11.1k|    {
 4481|  11.1k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4485|  47.2k|    {
 4486|  47.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 11.9k, False: 35.2k]
  ------------------
 4487|  11.9k|            m_error = unexpected(e);
 4488|  11.9k|        }
 4489|  47.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3809|  34.2k|    {
 3810|  57.2k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 34.2k, False: 22.9k]
  ------------------
 3811|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 224, False: 34.0k]
  ------------------
 3812|    224|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    224|            }
 3814|  34.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.1k, False: 22.9k]
  ------------------
 3815|  11.1k|                return on_error("Invalid literal character");
 3816|  11.1k|            }
 3817|  22.9k|            ++beg;
 3818|  22.9k|            ++m_begin;
 3819|  22.9k|        }
 3820|  34.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.81k|    {
 3840|  3.81k|#if !SCN_DISABLE_LOCALE
 3841|  3.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.81k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.81k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.81k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.81k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  3.81k|    {
 3313|  3.81k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.81k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  3.81k|        t.tm_year = y - 1900;
 3318|  3.81k|        st.set_full_year(h);
 3319|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4503|  58.4k|    {
 4504|  58.4k|        int digits_read = 0;
 4505|  58.4k|        int accumulator = 0;
 4506|   101k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 101k, False: 466]
  ------------------
 4507|   101k|            const auto ch = *m_begin;
 4508|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 29.0k, False: 72.2k]
  |  Branch (4508:36): [True: 19.6k, False: 52.6k]
  ------------------
 4509|  48.7k|                break;
 4510|  48.7k|            }
 4511|  52.6k|            ++m_begin;
 4512|  52.6k|            ++digits_read;
 4513|  52.6k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  52.6k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 9.31k, False: 43.3k]
  ------------------
 4515|  9.31k|                break;
 4516|  9.31k|            }
 4517|  52.6k|        }
 4518|  58.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 17.6k, False: 40.8k]
  ------------------
 4519|  17.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  17.6k|                                 "Too few integer digits"});
 4521|  17.6k|            return -1;
 4522|  17.6k|        }
 4523|  40.8k|        return accumulator;
 4524|  58.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3855|  6.17k|    {
 3856|  6.17k|#if !SCN_DISABLE_LOCALE
 3857|  6.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 6.17k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  6.17k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  6.17k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  6.17k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  6.17k|    {
 3330|  6.17k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 4.48k]
  |  |  |  Branch (1014:45): [True: 1.69k, False: 4.48k]
  |  |  |  Branch (1014:45): [True: 0, False: 4.48k]
  |  |  ------------------
  ------------------
 3331|  1.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  1.69k|                                "Invalid value for tm_year"});
 3333|  1.69k|        }
 3334|  4.48k|        st.short_year_value = static_cast<unsigned char>(y);
 3335|  4.48k|        st.set_short_year(h);
 3336|  4.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3902|  4.61k|    {
 3903|  4.61k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.61k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.61k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.61k|#endif
 3911|       |
 3912|  4.61k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.61k|            {"January", 1},
 3914|  4.61k|            {"February", 2},
 3915|  4.61k|            {"March", 3},
 3916|  4.61k|            {"April", 4},
 3917|  4.61k|            {"May", 5},
 3918|  4.61k|            {"June", 6},
 3919|  4.61k|            {"July", 7},
 3920|  4.61k|            {"August", 8},
 3921|  4.61k|            {"September", 9},
 3922|  4.61k|            {"October", 10},
 3923|  4.61k|            {"November", 11},
 3924|  4.61k|            {"December", 12},
 3925|  4.61k|        }};
 3926|  4.61k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.49k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.49k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.49k|            {"Jan", 1},
 3931|  4.49k|            {"Feb", 2},
 3932|  4.49k|            {"Mar", 3},
 3933|  4.49k|            {"Apr", 4},
 3934|  4.49k|            {"Jun", 6},
 3935|  4.49k|            {"Jul", 7},
 3936|  4.49k|            {"Aug", 8},
 3937|  4.49k|            {"Sep", 9},
 3938|  4.49k|            {"Oct", 10},
 3939|  4.49k|            {"Nov", 11},
 3940|  4.49k|            {"Dec", 12},
 3941|  4.49k|        }};
 3942|  4.49k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.70k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.70k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  11.2k|    {
 3303|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.88k, False: 8.38k]
  |  |  |  Branch (1014:45): [True: 2.73k, False: 8.53k]
  |  |  |  Branch (1014:45): [True: 144, False: 8.38k]
  |  |  ------------------
  ------------------
 3304|  2.88k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  2.88k|                                "Invalid value for tm_mon"});
 3306|  2.88k|        }
 3307|  8.38k|        t.tm_mon = m - 1;
 3308|  8.38k|        st.set_mon(h);
 3309|  8.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.61k|    {
 4554|  4.61k|        auto start_it = m_begin;
 4555|  4.61k|        std::size_t options_available = N;
 4556|  4.61k|        std::size_t chars_consumed = 0;
 4557|  18.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.42k]
  ------------------
 4558|  18.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 68, False: 13.4k]
  ------------------
 4561|     68|                options_available = 0;
 4562|     68|                break;
 4563|     68|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  83.7k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.3k, False: 13.4k]
  ------------------
 4567|  70.3k|                const auto cmp = static_cast<unsigned>(
 4568|  70.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.3k]
  ------------------
 4570|  70.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.1k, False: 12.1k]
  |  Branch (4570:34): [True: 55.1k, False: 3.00k]
  ------------------
 4571|  55.1k|                    std::rotate(
 4572|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.1k|                        options.end());
 4575|  55.1k|                    --options_available;
 4576|  55.1k|                    continue;
 4577|  55.1k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.61k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.49k, False: 120]
  ------------------
 4583|  4.49k|            m_begin = start_it;
 4584|  4.49k|            return std::nullopt;
 4585|  4.49k|        }
 4586|    120|        return options.front().second;
 4587|  4.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.49k|    {
 4554|  4.49k|        auto start_it = m_begin;
 4555|  4.49k|        std::size_t options_available = N;
 4556|  4.49k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.64k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.4k, False: 2.78k]
  ------------------
 4559|  10.4k|            std::size_t i = 0;
 4560|  10.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 10.3k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 10.3k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.4k, False: 5.88k]
  |  Branch (4570:34): [True: 46.5k, False: 2.87k]
  ------------------
 4571|  46.5k|                    std::rotate(
 4572|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.5k|                        options.end());
 4575|  46.5k|                    --options_available;
 4576|  46.5k|                    continue;
 4577|  46.5k|                }
 4578|  8.75k|                ++i;
 4579|  8.75k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.70k, False: 2.78k]
  ------------------
 4583|  1.70k|            m_begin = start_it;
 4584|  1.70k|            return std::nullopt;
 4585|  1.70k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.49k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  8.36k|    {
 3949|  8.36k|#if !SCN_DISABLE_LOCALE
 3950|  8.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 8.36k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  8.36k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  8.36k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  8.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  8.34k|    {
 3983|  8.34k|#if !SCN_DISABLE_LOCALE
 3984|  8.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 8.34k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  8.34k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  8.34k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  8.34k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  8.34k|    {
 3293|  8.34k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.38k, False: 4.96k]
  |  |  |  Branch (1014:45): [True: 3.27k, False: 5.06k]
  |  |  |  Branch (1014:45): [True: 108, False: 4.96k]
  |  |  ------------------
  ------------------
 3294|  3.38k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  3.38k|                                "Invalid value for tm_mday"});
 3296|  3.38k|        }
 3297|  4.96k|        t.tm_mday = d;
 3298|  4.96k|        st.set_mday(h);
 3299|  4.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3999|  3.53k|    {
 4000|  3.53k|#if !SCN_DISABLE_LOCALE
 4001|  3.53k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.53k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.53k|#endif
 4008|       |
 4009|  3.53k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.53k|            {"Sunday", 0},
 4011|  3.53k|            {"Monday", 1},
 4012|  3.53k|            {"Tuesday", 2},
 4013|  3.53k|            {"Wednesday", 3},
 4014|  3.53k|            {"Thursday", 4},
 4015|  3.53k|            {"Friday", 5},
 4016|  3.53k|            {"Saturday", 6},
 4017|  3.53k|        }};
 4018|  3.53k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.53k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.53k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.53k|            {"Sun", 0},
 4023|  3.53k|            {"Mon", 1},
 4024|  3.53k|            {"Tue", 2},
 4025|  3.53k|            {"Wed", 3},
 4026|  3.53k|            {"Thu", 4},
 4027|  3.53k|            {"Fri", 5},
 4028|  3.53k|            {"Sat", 6},
 4029|  3.53k|        }};
 4030|  3.53k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.80k, False: 1.72k]
  ------------------
 4031|  1.80k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.80k|        }
 4033|  1.72k|        return set_error(
 4034|  1.72k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3339|  1.80k|    {
 3340|  1.80k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  ------------------
  ------------------
 3341|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3342|      0|                                "Invalid value for tm_wday"});
 3343|      0|        }
 3344|  1.80k|        t.tm_wday = d;
 3345|  1.80k|        st.set_wday(h);
 3346|  1.80k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.07k|    {
 4554|  7.07k|        auto start_it = m_begin;
 4555|  7.07k|        std::size_t options_available = N;
 4556|  7.07k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.5k, False: 5.20k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.7k, False: 1.80k]
  ------------------
 4559|  16.7k|            std::size_t i = 0;
 4560|  16.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 58, False: 16.7k]
  ------------------
 4561|     58|                options_available = 0;
 4562|     58|                break;
 4563|     58|            }
 4564|  16.7k|            const auto ch = *m_begin;
 4565|  16.7k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.1k, False: 16.7k]
  ------------------
 4567|  59.1k|                const auto cmp = static_cast<unsigned>(
 4568|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.1k]
  ------------------
 4570|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.7k, False: 11.4k]
  |  Branch (4570:34): [True: 47.6k, False: 128]
  ------------------
 4571|  47.6k|                    std::rotate(
 4572|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.6k|                        options.end());
 4575|  47.6k|                    --options_available;
 4576|  47.6k|                    continue;
 4577|  47.6k|                }
 4578|  11.5k|                ++i;
 4579|  11.5k|            }
 4580|  16.7k|            ++chars_consumed;
 4581|  16.7k|        }
 4582|  7.07k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.26k, False: 1.80k]
  ------------------
 4583|  5.26k|            m_begin = start_it;
 4584|  5.26k|            return std::nullopt;
 4585|  5.26k|        }
 4586|  1.80k|        return options.front().second;
 4587|  7.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4077|  14.2k|    {
 4078|  14.2k|#if !SCN_DISABLE_LOCALE
 4079|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 14.2k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  14.2k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  14.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  14.2k|    {
 3273|  14.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.47k, False: 11.8k]
  |  |  |  Branch (1014:45): [True: 2.20k, False: 12.0k]
  |  |  |  Branch (1014:45): [True: 270, False: 11.8k]
  |  |  ------------------
  ------------------
 3274|  2.47k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  2.47k|                                  "Invalid value for tm_hour"});
 3276|  2.47k|        }
 3277|  11.8k|        t.tm_hour = h;
 3278|  11.8k|        st.set_hour24(hdl);
 3279|  11.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4109|  14.2k|    {
 4110|  14.2k|#if !SCN_DISABLE_LOCALE
 4111|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 14.2k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  14.2k|    {
 3263|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.77k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 2.74k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 28, False: 11.4k]
  |  |  ------------------
  ------------------
 3264|  2.77k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  2.77k|                                "Invalid value for tm_min"});
 3266|  2.77k|        }
 3267|  11.4k|        t.tm_min = m;
 3268|  11.4k|        st.set_min(h);
 3269|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4125|  3.23k|    {
 4126|  3.23k|#if !SCN_DISABLE_LOCALE
 4127|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.23k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.23k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.23k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.23k|    {
 3253|  3.23k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 1.54k]
  |  |  |  Branch (1014:45): [True: 1.68k, False: 1.55k]
  |  |  |  Branch (1014:45): [True: 4, False: 1.54k]
  |  |  ------------------
  ------------------
 3254|  1.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  1.69k|                                "Invalid value for tm_sec"});
 3256|  1.69k|        }
 3257|  1.54k|        t.tm_sec = s;
 3258|  1.54k|        st.set_sec(h);
 3259|  1.54k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterINS0_10tm_with_tzEE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSM_5ratioILl60ELl1EEEEE:
 3590|     18|    {
 3591|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3592|     18|            t.tz_offset = o;
 3593|     18|            return datetime_setter<std::tm>::set_tz_offset(h, t, st, o);
 3594|       |        }
 3595|       |        else {
 3596|       |            t.tz_offset = o;
 3597|       |            return st.set_tzoff(h);
 3598|       |        }
 3599|     18|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_tz_offsetINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSN_5ratioILl60ELl1EEEEE:
 3363|     18|    {
 3364|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3365|     18|            assign_gmtoff(t,
 3366|     18|                          std::chrono::duration_cast<std::chrono::seconds>(o));
 3367|       |        }
 3368|       |        else {
 3369|       |            return h.set_error(
 3370|       |                {scan_error::invalid_format_string, "tm_gmtoff not supported"});
 3371|       |        }
 3372|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4375|  6.17k|    {
 4376|       |        // %m/%d/%y
 4377|  6.17k|        constexpr CharT slash = '/';
 4378|  6.17k|        on_dec_month();
 4379|  6.17k|        on_text(&slash, &slash + 1);
 4380|  6.17k|        on_day_of_month();
 4381|  6.17k|        on_text(&slash, &slash + 1);
 4382|  6.17k|        on_short_year();
 4383|  6.17k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4385|  2.07k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.07k|        constexpr CharT dash = '-';
 4388|  2.07k|        on_full_year();
 4389|  2.07k|        on_text(&dash, &dash + 1);
 4390|  2.07k|        on_dec_month();
 4391|  2.07k|        on_text(&dash, &dash + 1);
 4392|  2.07k|        on_day_of_month();
 4393|  2.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4417|  10.9k|    {
 4418|       |        // %H:%M
 4419|  10.9k|        constexpr CharT colon = ':';
 4420|  10.9k|        on_24_hour();
 4421|  10.9k|        on_text(&colon, &colon + 1);
 4422|  10.9k|        on_minute();
 4423|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4425|  3.21k|    {
 4426|       |        // %H:%M:%S
 4427|  3.21k|        constexpr CharT colon = ':';
 4428|  3.21k|        on_24_hour();
 4429|  3.21k|        on_text(&colon, &colon + 1);
 4430|  3.21k|        on_minute();
 4431|  3.21k|        on_text(&colon, &colon + 1);
 4432|  3.21k|        on_second();
 4433|  3.21k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4464|  20.3k|    {
 4465|  20.3k|        m_st.verify(*this);
 4466|  20.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 20.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  20.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 19.9k, False: 356]
  |  Branch (4469:37): [True: 4.46k, False: 15.5k]
  |  Branch (4469:60): [True: 0, False: 15.5k]
  ------------------
 4470|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|  4.46k|        }
 4472|  20.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4475|  65.0k|    {
 4476|  65.0k|        return m_error;
 4477|  65.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4492|  20.3k|    {
 4493|  20.3k|        return m_begin;
 4494|  20.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  27.8k|{
 4702|  27.8k|    {
 4703|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 250, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    250|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  27.5k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  27.5k|        ctx.range(), t, ctx.locale());
 4710|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12.2k, False: 15.3k]
  |  |  ------------------
  ------------------
 4712|  12.2k|        return unexpected(e.error());
 4713|  12.2k|    }
 4714|  15.3k|    return r.get_iterator();
 4715|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3801|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  27.5k|          m_begin(ranges::begin(m_range)),
 3803|  27.5k|          m_tm(t),
 3804|  27.5k|          m_loc(loc)
 3805|  27.5k|    {
 3806|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4480|  11.4k|    {
 4481|  11.4k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4485|  48.9k|    {
 4486|  48.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 12.2k, False: 36.7k]
  ------------------
 4487|  12.2k|            m_error = unexpected(e);
 4488|  12.2k|        }
 4489|  48.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3809|  25.1k|    {
 3810|  38.7k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 25.1k, False: 13.5k]
  ------------------
 3811|  25.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 172, False: 25.0k]
  ------------------
 3812|    172|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    172|            }
 3814|  25.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.4k, False: 13.5k]
  ------------------
 3815|  11.4k|                return on_error("Invalid literal character");
 3816|  11.4k|            }
 3817|  13.5k|            ++beg;
 3818|  13.5k|            ++m_begin;
 3819|  13.5k|        }
 3820|  25.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.86k|    {
 3840|  3.86k|#if !SCN_DISABLE_LOCALE
 3841|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.86k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.86k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.86k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  3.86k|    {
 3313|  3.86k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.86k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  3.86k|        t.tm_year = y - 1900;
 3318|  3.86k|        st.set_full_year(h);
 3319|  3.86k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4503|  44.5k|    {
 4504|  44.5k|        int digits_read = 0;
 4505|  44.5k|        int accumulator = 0;
 4506|  73.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 72.6k, False: 378]
  ------------------
 4507|  72.6k|            const auto ch = *m_begin;
 4508|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 21.0k, False: 51.6k]
  |  Branch (4508:36): [True: 18.4k, False: 33.2k]
  ------------------
 4509|  39.4k|                break;
 4510|  39.4k|            }
 4511|  33.2k|            ++m_begin;
 4512|  33.2k|            ++digits_read;
 4513|  33.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  33.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 4.75k, False: 28.4k]
  ------------------
 4515|  4.75k|                break;
 4516|  4.75k|            }
 4517|  33.2k|        }
 4518|  44.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 18.3k, False: 26.2k]
  ------------------
 4519|  18.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  18.3k|                                 "Too few integer digits"});
 4521|  18.3k|            return -1;
 4522|  18.3k|        }
 4523|  26.2k|        return accumulator;
 4524|  44.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3855|  1.89k|    {
 3856|  1.89k|#if !SCN_DISABLE_LOCALE
 3857|  1.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 1.89k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  1.89k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  1.89k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  1.89k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  1.89k|    {
 3330|  1.89k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.73k, False: 160]
  |  |  |  Branch (1014:45): [True: 1.73k, False: 160]
  |  |  |  Branch (1014:45): [True: 0, False: 160]
  |  |  ------------------
  ------------------
 3331|  1.73k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  1.73k|                                "Invalid value for tm_year"});
 3333|  1.73k|        }
 3334|    160|        st.short_year_value = static_cast<unsigned char>(y);
 3335|    160|        st.set_short_year(h);
 3336|    160|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3902|  4.64k|    {
 3903|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.64k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.64k|#endif
 3911|       |
 3912|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.64k|            {"January", 1},
 3914|  4.64k|            {"February", 2},
 3915|  4.64k|            {"March", 3},
 3916|  4.64k|            {"April", 4},
 3917|  4.64k|            {"May", 5},
 3918|  4.64k|            {"June", 6},
 3919|  4.64k|            {"July", 7},
 3920|  4.64k|            {"August", 8},
 3921|  4.64k|            {"September", 9},
 3922|  4.64k|            {"October", 10},
 3923|  4.64k|            {"November", 11},
 3924|  4.64k|            {"December", 12},
 3925|  4.64k|        }};
 3926|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.52k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.52k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.52k|            {"Jan", 1},
 3931|  4.52k|            {"Feb", 2},
 3932|  4.52k|            {"Mar", 3},
 3933|  4.52k|            {"Apr", 4},
 3934|  4.52k|            {"Jun", 6},
 3935|  4.52k|            {"Jul", 7},
 3936|  4.52k|            {"Aug", 8},
 3937|  4.52k|            {"Sep", 9},
 3938|  4.52k|            {"Oct", 10},
 3939|  4.52k|            {"Nov", 11},
 3940|  4.52k|            {"Dec", 12},
 3941|  4.52k|        }};
 3942|  4.52k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.74k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.74k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.01k|    {
 3303|  7.01k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.98k, False: 4.02k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 4.15k]
  |  |  |  Branch (1014:45): [True: 130, False: 4.02k]
  |  |  ------------------
  ------------------
 3304|  2.98k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  2.98k|                                "Invalid value for tm_mon"});
 3306|  2.98k|        }
 3307|  4.02k|        t.tm_mon = m - 1;
 3308|  4.02k|        st.set_mon(h);
 3309|  4.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.64k|    {
 4554|  4.64k|        auto start_it = m_begin;
 4555|  4.64k|        std::size_t options_available = N;
 4556|  4.64k|        std::size_t chars_consumed = 0;
 4557|  18.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.46k]
  ------------------
 4558|  18.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 13.4k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  84.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.5k, False: 13.4k]
  ------------------
 4567|  70.5k|                const auto cmp = static_cast<unsigned>(
 4568|  70.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.5k]
  ------------------
 4570|  70.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.4k, False: 12.1k]
  |  Branch (4570:34): [True: 55.4k, False: 2.97k]
  ------------------
 4571|  55.4k|                    std::rotate(
 4572|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.4k|                        options.end());
 4575|  55.4k|                    --options_available;
 4576|  55.4k|                    continue;
 4577|  55.4k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.52k, False: 120]
  ------------------
 4583|  4.52k|            m_begin = start_it;
 4584|  4.52k|            return std::nullopt;
 4585|  4.52k|        }
 4586|    120|        return options.front().second;
 4587|  4.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.52k|    {
 4554|  4.52k|        auto start_it = m_begin;
 4555|  4.52k|        std::size_t options_available = N;
 4556|  4.52k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.68k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.3k, False: 2.78k]
  ------------------
 4559|  10.3k|            std::size_t i = 0;
 4560|  10.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 52, False: 10.3k]
  ------------------
 4561|     52|                options_available = 0;
 4562|     52|                break;
 4563|     52|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.9k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.5k, False: 10.3k]
  ------------------
 4567|  55.5k|                const auto cmp = static_cast<unsigned>(
 4568|  55.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.5k]
  ------------------
 4570|  55.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.7k, False: 5.85k]
  |  Branch (4570:34): [True: 46.8k, False: 2.84k]
  ------------------
 4571|  46.8k|                    std::rotate(
 4572|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.8k|                        options.end());
 4575|  46.8k|                    --options_available;
 4576|  46.8k|                    continue;
 4577|  46.8k|                }
 4578|  8.69k|                ++i;
 4579|  8.69k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.52k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.74k, False: 2.78k]
  ------------------
 4583|  1.74k|            m_begin = start_it;
 4584|  1.74k|            return std::nullopt;
 4585|  1.74k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  4.10k|    {
 3949|  4.10k|#if !SCN_DISABLE_LOCALE
 3950|  4.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 4.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  4.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  4.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  4.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  4.09k|    {
 3983|  4.09k|#if !SCN_DISABLE_LOCALE
 3984|  4.09k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 4.09k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  4.09k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  4.09k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  4.09k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  4.09k|    {
 3293|  4.09k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.46k, False: 626]
  |  |  |  Branch (1014:45): [True: 3.36k, False: 730]
  |  |  |  Branch (1014:45): [True: 104, False: 626]
  |  |  ------------------
  ------------------
 3294|  3.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  3.46k|                                "Invalid value for tm_mday"});
 3296|  3.46k|        }
 3297|    626|        t.tm_mday = d;
 3298|    626|        st.set_mday(h);
 3299|    626|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3999|  3.54k|    {
 4000|  3.54k|#if !SCN_DISABLE_LOCALE
 4001|  3.54k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.54k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.54k|#endif
 4008|       |
 4009|  3.54k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.54k|            {"Sunday", 0},
 4011|  3.54k|            {"Monday", 1},
 4012|  3.54k|            {"Tuesday", 2},
 4013|  3.54k|            {"Wednesday", 3},
 4014|  3.54k|            {"Thursday", 4},
 4015|  3.54k|            {"Friday", 5},
 4016|  3.54k|            {"Saturday", 6},
 4017|  3.54k|        }};
 4018|  3.54k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.54k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.54k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.54k|            {"Sun", 0},
 4023|  3.54k|            {"Mon", 1},
 4024|  3.54k|            {"Tue", 2},
 4025|  3.54k|            {"Wed", 3},
 4026|  3.54k|            {"Thu", 4},
 4027|  3.54k|            {"Fri", 5},
 4028|  3.54k|            {"Sat", 6},
 4029|  3.54k|        }};
 4030|  3.54k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.79k, False: 1.75k]
  ------------------
 4031|  1.79k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.79k|        }
 4033|  1.75k|        return set_error(
 4034|  1.75k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.54k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3339|  1.79k|    {
 3340|  1.79k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  ------------------
  ------------------
 3341|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3342|      0|                                "Invalid value for tm_wday"});
 3343|      0|        }
 3344|  1.79k|        t.tm_wday = d;
 3345|  1.79k|        st.set_wday(h);
 3346|  1.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.09k|    {
 4554|  7.09k|        auto start_it = m_begin;
 4555|  7.09k|        std::size_t options_available = N;
 4556|  7.09k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.4k, False: 5.26k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.6k, False: 1.79k]
  ------------------
 4559|  16.6k|            std::size_t i = 0;
 4560|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 16.6k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  16.6k|            const auto ch = *m_begin;
 4565|  16.6k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.2k, False: 16.6k]
  ------------------
 4567|  59.2k|                const auto cmp = static_cast<unsigned>(
 4568|  59.2k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.2k]
  ------------------
 4570|  59.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.9k, False: 11.2k]
  |  Branch (4570:34): [True: 47.8k, False: 100]
  ------------------
 4571|  47.8k|                    std::rotate(
 4572|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.8k|                        options.end());
 4575|  47.8k|                    --options_available;
 4576|  47.8k|                    continue;
 4577|  47.8k|                }
 4578|  11.3k|                ++i;
 4579|  11.3k|            }
 4580|  16.6k|            ++chars_consumed;
 4581|  16.6k|        }
 4582|  7.09k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.30k, False: 1.79k]
  ------------------
 4583|  5.30k|            m_begin = start_it;
 4584|  5.30k|            return std::nullopt;
 4585|  5.30k|        }
 4586|  1.79k|        return options.front().second;
 4587|  7.09k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4077|  13.6k|    {
 4078|  13.6k|#if !SCN_DISABLE_LOCALE
 4079|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.6k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.6k|    {
 3273|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (1014:45): [True: 2.46k, False: 11.2k]
  |  |  |  Branch (1014:45): [True: 252, False: 10.9k]
  |  |  ------------------
  ------------------
 3274|  2.72k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  2.72k|                                  "Invalid value for tm_hour"});
 3276|  2.72k|        }
 3277|  10.9k|        t.tm_hour = h;
 3278|  10.9k|        st.set_hour24(hdl);
 3279|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4109|  13.6k|    {
 4110|  13.6k|#if !SCN_DISABLE_LOCALE
 4111|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.6k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.6k|    {
 3263|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.87k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 20, False: 10.7k]
  |  |  ------------------
  ------------------
 3264|  2.87k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  2.87k|                                "Invalid value for tm_min"});
 3266|  2.87k|        }
 3267|  10.7k|        t.tm_min = m;
 3268|  10.7k|        st.set_min(h);
 3269|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4125|  3.25k|    {
 4126|  3.25k|#if !SCN_DISABLE_LOCALE
 4127|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.25k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.25k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.25k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.25k|    {
 3253|  3.25k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 2, False: 1.53k]
  |  |  ------------------
  ------------------
 3254|  1.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  1.72k|                                "Invalid value for tm_sec"});
 3256|  1.72k|        }
 3257|  1.53k|        t.tm_sec = s;
 3258|  1.53k|        st.set_sec(h);
 3259|  1.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterINS0_10tm_with_tzEE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSK_5ratioILl60ELl1EEEEE:
 3590|     18|    {
 3591|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3592|     18|            t.tz_offset = o;
 3593|     18|            return datetime_setter<std::tm>::set_tz_offset(h, t, st, o);
 3594|       |        }
 3595|       |        else {
 3596|       |            t.tz_offset = o;
 3597|       |            return st.set_tzoff(h);
 3598|       |        }
 3599|     18|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_tz_offsetINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSL_5ratioILl60ELl1EEEEE:
 3363|     18|    {
 3364|     18|        if constexpr (mp_valid<has_tm_gmtoff_predicate, std::tm>::value) {
 3365|     18|            assign_gmtoff(t,
 3366|     18|                          std::chrono::duration_cast<std::chrono::seconds>(o));
 3367|       |        }
 3368|       |        else {
 3369|       |            return h.set_error(
 3370|       |                {scan_error::invalid_format_string, "tm_gmtoff not supported"});
 3371|       |        }
 3372|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4375|  1.89k|    {
 4376|       |        // %m/%d/%y
 4377|  1.89k|        constexpr CharT slash = '/';
 4378|  1.89k|        on_dec_month();
 4379|  1.89k|        on_text(&slash, &slash + 1);
 4380|  1.89k|        on_day_of_month();
 4381|  1.89k|        on_text(&slash, &slash + 1);
 4382|  1.89k|        on_short_year();
 4383|  1.89k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4385|  2.10k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.10k|        constexpr CharT dash = '-';
 4388|  2.10k|        on_full_year();
 4389|  2.10k|        on_text(&dash, &dash + 1);
 4390|  2.10k|        on_dec_month();
 4391|  2.10k|        on_text(&dash, &dash + 1);
 4392|  2.10k|        on_day_of_month();
 4393|  2.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4417|  10.3k|    {
 4418|       |        // %H:%M
 4419|  10.3k|        constexpr CharT colon = ':';
 4420|  10.3k|        on_24_hour();
 4421|  10.3k|        on_text(&colon, &colon + 1);
 4422|  10.3k|        on_minute();
 4423|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4425|  3.23k|    {
 4426|       |        // %H:%M:%S
 4427|  3.23k|        constexpr CharT colon = ':';
 4428|  3.23k|        on_24_hour();
 4429|  3.23k|        on_text(&colon, &colon + 1);
 4430|  3.23k|        on_minute();
 4431|  3.23k|        on_text(&colon, &colon + 1);
 4432|  3.23k|        on_second();
 4433|  3.23k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4464|  15.3k|    {
 4465|  15.3k|        m_st.verify(*this);
 4466|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 15.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 14.9k, False: 356]
  |  Branch (4469:37): [True: 148, False: 14.8k]
  |  Branch (4469:60): [True: 0, False: 14.8k]
  ------------------
 4470|    148|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|    148|        }
 4472|  15.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4475|  55.4k|    {
 4476|  55.4k|        return m_error;
 4477|  55.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4492|  15.3k|    {
 4493|  15.3k|        return m_begin;
 4494|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.8k|{
 4702|  32.8k|    {
 4703|  32.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 486, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    486|    }                                                  \
  |  |  |  | 3995|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  32.3k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  32.3k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  32.3k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  32.3k|        ctx.range(), t, ctx.locale());
 4710|  32.3k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  32.3k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.9k, False: 20.3k]
  |  |  ------------------
  ------------------
 4712|  11.9k|        return unexpected(e.error());
 4713|  11.9k|    }
 4714|  20.3k|    return r.get_iterator();
 4715|  32.3k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3801|  32.3k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  32.3k|    static_cast<    \
  |  | 1084|  32.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  32.3k|          m_begin(ranges::begin(m_range)),
 3803|  32.3k|          m_tm(t),
 3804|  32.3k|          m_loc(loc)
 3805|  32.3k|    {
 3806|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4480|  11.1k|    {
 4481|  11.1k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4485|  45.5k|    {
 4486|  45.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 11.9k, False: 33.5k]
  ------------------
 4487|  11.9k|            m_error = unexpected(e);
 4488|  11.9k|        }
 4489|  45.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3809|  34.2k|    {
 3810|  57.2k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 34.2k, False: 22.9k]
  ------------------
 3811|  34.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 224, False: 34.0k]
  ------------------
 3812|    224|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    224|            }
 3814|  34.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.1k, False: 22.9k]
  ------------------
 3815|  11.1k|                return on_error("Invalid literal character");
 3816|  11.1k|            }
 3817|  22.9k|            ++beg;
 3818|  22.9k|            ++m_begin;
 3819|  22.9k|        }
 3820|  34.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.81k|    {
 3840|  3.81k|#if !SCN_DISABLE_LOCALE
 3841|  3.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.81k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.81k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.81k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.81k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3490|  3.81k|    {
 3491|  3.81k|        t.year = y;
 3492|  3.81k|        st.set_full_year(h);
 3493|  3.81k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4503|  58.4k|    {
 4504|  58.4k|        int digits_read = 0;
 4505|  58.4k|        int accumulator = 0;
 4506|   101k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 101k, False: 466]
  ------------------
 4507|   101k|            const auto ch = *m_begin;
 4508|   101k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 29.0k, False: 72.2k]
  |  Branch (4508:36): [True: 19.6k, False: 52.6k]
  ------------------
 4509|  48.7k|                break;
 4510|  48.7k|            }
 4511|  52.6k|            ++m_begin;
 4512|  52.6k|            ++digits_read;
 4513|  52.6k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  52.6k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 9.31k, False: 43.3k]
  ------------------
 4515|  9.31k|                break;
 4516|  9.31k|            }
 4517|  52.6k|        }
 4518|  58.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 17.6k, False: 40.8k]
  ------------------
 4519|  17.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  17.6k|                                 "Too few integer digits"});
 4521|  17.6k|            return -1;
 4522|  17.6k|        }
 4523|  40.8k|        return accumulator;
 4524|  58.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3855|  6.17k|    {
 3856|  6.17k|#if !SCN_DISABLE_LOCALE
 3857|  6.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 6.17k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  6.17k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  6.17k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  6.17k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3513|  6.17k|    {
 3514|  6.17k|        if (!t.year) {
  ------------------
  |  Branch (3514:13): [True: 6.17k, False: 0]
  ------------------
 3515|  6.17k|            t.year = y;
 3516|  6.17k|        }
 3517|      0|        else {
 3518|      0|            t.year = *t.year + y;
 3519|      0|        }
 3520|  6.17k|        st.set_short_year(h);
 3521|  6.17k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3902|  4.61k|    {
 3903|  4.61k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.61k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.61k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.61k|#endif
 3911|       |
 3912|  4.61k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.61k|            {"January", 1},
 3914|  4.61k|            {"February", 2},
 3915|  4.61k|            {"March", 3},
 3916|  4.61k|            {"April", 4},
 3917|  4.61k|            {"May", 5},
 3918|  4.61k|            {"June", 6},
 3919|  4.61k|            {"July", 7},
 3920|  4.61k|            {"August", 8},
 3921|  4.61k|            {"September", 9},
 3922|  4.61k|            {"October", 10},
 3923|  4.61k|            {"November", 11},
 3924|  4.61k|            {"December", 12},
 3925|  4.61k|        }};
 3926|  4.61k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.49k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.49k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.49k|            {"Jan", 1},
 3931|  4.49k|            {"Feb", 2},
 3932|  4.49k|            {"Mar", 3},
 3933|  4.49k|            {"Apr", 4},
 3934|  4.49k|            {"Jun", 6},
 3935|  4.49k|            {"Jul", 7},
 3936|  4.49k|            {"Aug", 8},
 3937|  4.49k|            {"Sep", 9},
 3938|  4.49k|            {"Oct", 10},
 3939|  4.49k|            {"Nov", 11},
 3940|  4.49k|            {"Dec", 12},
 3941|  4.49k|        }};
 3942|  4.49k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.70k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.70k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.70k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3477|  11.2k|    {
 3478|  11.2k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.88k, False: 8.38k]
  |  |  |  Branch (1014:45): [True: 2.73k, False: 8.53k]
  |  |  |  Branch (1014:45): [True: 144, False: 8.38k]
  |  |  ------------------
  ------------------
 3479|  2.88k|            return h.set_error(
 3480|  2.88k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3481|  2.88k|        }
 3482|  8.38k|        t.mon = month{static_cast<unsigned>(m)};
 3483|  8.38k|        st.set_mon(h);
 3484|  8.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.61k|    {
 4554|  4.61k|        auto start_it = m_begin;
 4555|  4.61k|        std::size_t options_available = N;
 4556|  4.61k|        std::size_t chars_consumed = 0;
 4557|  18.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.42k]
  ------------------
 4558|  18.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 68, False: 13.4k]
  ------------------
 4561|     68|                options_available = 0;
 4562|     68|                break;
 4563|     68|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  83.7k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.3k, False: 13.4k]
  ------------------
 4567|  70.3k|                const auto cmp = static_cast<unsigned>(
 4568|  70.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.3k]
  ------------------
 4570|  70.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.1k, False: 12.1k]
  |  Branch (4570:34): [True: 55.1k, False: 3.00k]
  ------------------
 4571|  55.1k|                    std::rotate(
 4572|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.1k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.1k|                        options.end());
 4575|  55.1k|                    --options_available;
 4576|  55.1k|                    continue;
 4577|  55.1k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.61k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.49k, False: 120]
  ------------------
 4583|  4.49k|            m_begin = start_it;
 4584|  4.49k|            return std::nullopt;
 4585|  4.49k|        }
 4586|    120|        return options.front().second;
 4587|  4.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.49k|    {
 4554|  4.49k|        auto start_it = m_begin;
 4555|  4.49k|        std::size_t options_available = N;
 4556|  4.49k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.64k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.4k, False: 2.78k]
  ------------------
 4559|  10.4k|            std::size_t i = 0;
 4560|  10.4k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 10.3k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 10.3k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.4k, False: 5.88k]
  |  Branch (4570:34): [True: 46.5k, False: 2.87k]
  ------------------
 4571|  46.5k|                    std::rotate(
 4572|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.5k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.5k|                        options.end());
 4575|  46.5k|                    --options_available;
 4576|  46.5k|                    continue;
 4577|  46.5k|                }
 4578|  8.75k|                ++i;
 4579|  8.75k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.70k, False: 2.78k]
  ------------------
 4583|  1.70k|            m_begin = start_it;
 4584|  1.70k|            return std::nullopt;
 4585|  1.70k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.49k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  8.36k|    {
 3949|  8.36k|#if !SCN_DISABLE_LOCALE
 3950|  8.36k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 8.36k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  8.36k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  8.36k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  8.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  8.34k|    {
 3983|  8.34k|#if !SCN_DISABLE_LOCALE
 3984|  8.34k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 8.34k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  8.34k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  8.34k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  8.34k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3464|  8.34k|    {
 3465|  8.34k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.38k, False: 4.96k]
  |  |  |  Branch (1014:45): [True: 3.27k, False: 5.06k]
  |  |  |  Branch (1014:45): [True: 108, False: 4.96k]
  |  |  ------------------
  ------------------
 3466|  3.38k|            return h.set_error(
 3467|  3.38k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3468|  3.38k|        }
 3469|  4.96k|        t.mday = d;
 3470|  4.96k|        st.set_mday(h);
 3471|  4.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3999|  3.53k|    {
 4000|  3.53k|#if !SCN_DISABLE_LOCALE
 4001|  3.53k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.53k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.53k|#endif
 4008|       |
 4009|  3.53k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.53k|            {"Sunday", 0},
 4011|  3.53k|            {"Monday", 1},
 4012|  3.53k|            {"Tuesday", 2},
 4013|  3.53k|            {"Wednesday", 3},
 4014|  3.53k|            {"Thursday", 4},
 4015|  3.53k|            {"Friday", 5},
 4016|  3.53k|            {"Saturday", 6},
 4017|  3.53k|        }};
 4018|  3.53k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.53k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.53k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.53k|            {"Sun", 0},
 4023|  3.53k|            {"Mon", 1},
 4024|  3.53k|            {"Tue", 2},
 4025|  3.53k|            {"Wed", 3},
 4026|  3.53k|            {"Thu", 4},
 4027|  3.53k|            {"Fri", 5},
 4028|  3.53k|            {"Sat", 6},
 4029|  3.53k|        }};
 4030|  3.53k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.80k, False: 1.72k]
  ------------------
 4031|  1.80k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.80k|        }
 4033|  1.72k|        return set_error(
 4034|  1.72k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.53k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3527|  1.80k|    {
 3528|  1.80k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.80k]
  |  |  ------------------
  ------------------
 3529|      0|            return h.set_error(
 3530|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3531|      0|        }
 3532|  1.80k|        t.wday = weekday{static_cast<unsigned>(d)};
 3533|  1.80k|        st.set_wday(h);
 3534|  1.80k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.07k|    {
 4554|  7.07k|        auto start_it = m_begin;
 4555|  7.07k|        std::size_t options_available = N;
 4556|  7.07k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.5k, False: 5.20k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.7k, False: 1.80k]
  ------------------
 4559|  16.7k|            std::size_t i = 0;
 4560|  16.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 58, False: 16.7k]
  ------------------
 4561|     58|                options_available = 0;
 4562|     58|                break;
 4563|     58|            }
 4564|  16.7k|            const auto ch = *m_begin;
 4565|  16.7k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.1k, False: 16.7k]
  ------------------
 4567|  59.1k|                const auto cmp = static_cast<unsigned>(
 4568|  59.1k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.1k]
  ------------------
 4570|  59.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.7k, False: 11.4k]
  |  Branch (4570:34): [True: 47.6k, False: 128]
  ------------------
 4571|  47.6k|                    std::rotate(
 4572|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.6k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.6k|                        options.end());
 4575|  47.6k|                    --options_available;
 4576|  47.6k|                    continue;
 4577|  47.6k|                }
 4578|  11.5k|                ++i;
 4579|  11.5k|            }
 4580|  16.7k|            ++chars_consumed;
 4581|  16.7k|        }
 4582|  7.07k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.26k, False: 1.80k]
  ------------------
 4583|  5.26k|            m_begin = start_it;
 4584|  5.26k|            return std::nullopt;
 4585|  5.26k|        }
 4586|  1.80k|        return options.front().second;
 4587|  7.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4077|  14.2k|    {
 4078|  14.2k|#if !SCN_DISABLE_LOCALE
 4079|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 14.2k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  14.2k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  14.2k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  14.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3438|  14.2k|    {
 3439|  14.2k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.47k, False: 11.8k]
  |  |  |  Branch (1014:45): [True: 2.20k, False: 12.0k]
  |  |  |  Branch (1014:45): [True: 270, False: 11.8k]
  |  |  ------------------
  ------------------
 3440|  2.47k|            return hdl.set_error(
 3441|  2.47k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3442|  2.47k|        }
 3443|  11.8k|        t.hour = h;
 3444|  11.8k|        st.set_hour24(hdl);
 3445|  11.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4109|  14.2k|    {
 4110|  14.2k|#if !SCN_DISABLE_LOCALE
 4111|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 14.2k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  14.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3425|  14.2k|    {
 3426|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.77k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 2.74k, False: 11.4k]
  |  |  |  Branch (1014:45): [True: 28, False: 11.4k]
  |  |  ------------------
  ------------------
 3427|  2.77k|            return h.set_error({scan_error::invalid_scanned_value,
 3428|  2.77k|                                "Invalid value for minutes"});
 3429|  2.77k|        }
 3430|  11.4k|        t.min = m;
 3431|  11.4k|        st.set_min(h);
 3432|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4125|  3.23k|    {
 4126|  3.23k|#if !SCN_DISABLE_LOCALE
 4127|  3.23k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.23k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.23k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.23k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.23k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3412|  3.23k|    {
 3413|  3.23k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 1.54k]
  |  |  |  Branch (1014:45): [True: 1.68k, False: 1.55k]
  |  |  |  Branch (1014:45): [True: 4, False: 1.54k]
  |  |  ------------------
  ------------------
 3414|  1.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3415|  1.69k|                                "Invalid value for seconds"});
 3416|  1.69k|        }
 3417|  1.54k|        t.sec = s;
 3418|  1.54k|        st.set_sec(h);
 3419|  1.54k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSM_5ratioILl60ELl1EEEEE:
 3554|     18|    {
 3555|     18|        t.tz_offset = o;
 3556|     18|        return st.set_tzoff(h);
 3557|     18|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4375|  6.17k|    {
 4376|       |        // %m/%d/%y
 4377|  6.17k|        constexpr CharT slash = '/';
 4378|  6.17k|        on_dec_month();
 4379|  6.17k|        on_text(&slash, &slash + 1);
 4380|  6.17k|        on_day_of_month();
 4381|  6.17k|        on_text(&slash, &slash + 1);
 4382|  6.17k|        on_short_year();
 4383|  6.17k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4385|  2.07k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.07k|        constexpr CharT dash = '-';
 4388|  2.07k|        on_full_year();
 4389|  2.07k|        on_text(&dash, &dash + 1);
 4390|  2.07k|        on_dec_month();
 4391|  2.07k|        on_text(&dash, &dash + 1);
 4392|  2.07k|        on_day_of_month();
 4393|  2.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4417|  10.9k|    {
 4418|       |        // %H:%M
 4419|  10.9k|        constexpr CharT colon = ':';
 4420|  10.9k|        on_24_hour();
 4421|  10.9k|        on_text(&colon, &colon + 1);
 4422|  10.9k|        on_minute();
 4423|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4425|  3.21k|    {
 4426|       |        // %H:%M:%S
 4427|  3.21k|        constexpr CharT colon = ':';
 4428|  3.21k|        on_24_hour();
 4429|  3.21k|        on_text(&colon, &colon + 1);
 4430|  3.21k|        on_minute();
 4431|  3.21k|        on_text(&colon, &colon + 1);
 4432|  3.21k|        on_second();
 4433|  3.21k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4464|  20.3k|    {
 4465|  20.3k|        m_st.verify(*this);
 4466|  20.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 20.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  20.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 19.9k, False: 356]
  |  Branch (4469:37): [True: 4.46k, False: 15.5k]
  |  Branch (4469:60): [True: 0, False: 15.5k]
  ------------------
 4470|  4.46k|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|  4.46k|        }
 4472|  20.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3577|  4.64k|    {
 3578|  4.64k|        assert(t.year);
 3579|  4.64k|        st.handle_short_year_and_century(*t.year, 0);
 3580|  4.64k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4475|  65.0k|    {
 4476|  65.0k|        return m_error;
 4477|  65.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4492|  20.3k|    {
 4493|  20.3k|        return m_begin;
 4494|  20.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  27.8k|{
 4702|  27.8k|    {
 4703|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3996|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 250, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    250|    }                                                  \
  |  |  |  | 3995|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  27.5k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  27.5k|        ctx.range(), t, ctx.locale());
 4710|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12.2k, False: 15.3k]
  |  |  ------------------
  ------------------
 4712|  12.2k|        return unexpected(e.error());
 4713|  12.2k|    }
 4714|  15.3k|    return r.get_iterator();
 4715|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3801|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  27.5k|    static_cast<    \
  |  | 1084|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  27.5k|          m_begin(ranges::begin(m_range)),
 3803|  27.5k|          m_tm(t),
 3804|  27.5k|          m_loc(loc)
 3805|  27.5k|    {
 3806|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4480|  11.4k|    {
 4481|  11.4k|        set_error({scan_error::invalid_format_string, msg});
 4482|  11.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4485|  47.2k|    {
 4486|  47.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 12.2k, False: 35.0k]
  ------------------
 4487|  12.2k|            m_error = unexpected(e);
 4488|  12.2k|        }
 4489|  47.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3809|  25.1k|    {
 3810|  38.7k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 25.1k, False: 13.5k]
  ------------------
 3811|  25.1k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 172, False: 25.0k]
  ------------------
 3812|    172|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    172|            }
 3814|  25.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 11.4k, False: 13.5k]
  ------------------
 3815|  11.4k|                return on_error("Invalid literal character");
 3816|  11.4k|            }
 3817|  13.5k|            ++beg;
 3818|  13.5k|            ++m_begin;
 3819|  13.5k|        }
 3820|  25.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3839|  3.86k|    {
 3840|  3.86k|#if !SCN_DISABLE_LOCALE
 3841|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 3.86k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  3.86k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  3.86k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  3.86k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3490|  3.86k|    {
 3491|  3.86k|        t.year = y;
 3492|  3.86k|        st.set_full_year(h);
 3493|  3.86k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4503|  44.5k|    {
 4504|  44.5k|        int digits_read = 0;
 4505|  44.5k|        int accumulator = 0;
 4506|  73.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 72.6k, False: 378]
  ------------------
 4507|  72.6k|            const auto ch = *m_begin;
 4508|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 21.0k, False: 51.6k]
  |  Branch (4508:36): [True: 18.4k, False: 33.2k]
  ------------------
 4509|  39.4k|                break;
 4510|  39.4k|            }
 4511|  33.2k|            ++m_begin;
 4512|  33.2k|            ++digits_read;
 4513|  33.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  33.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 4.75k, False: 28.4k]
  ------------------
 4515|  4.75k|                break;
 4516|  4.75k|            }
 4517|  33.2k|        }
 4518|  44.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 18.3k, False: 26.2k]
  ------------------
 4519|  18.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  18.3k|                                 "Too few integer digits"});
 4521|  18.3k|            return -1;
 4522|  18.3k|        }
 4523|  26.2k|        return accumulator;
 4524|  44.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3855|  1.89k|    {
 3856|  1.89k|#if !SCN_DISABLE_LOCALE
 3857|  1.89k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 1.89k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  1.89k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  1.89k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  1.89k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3513|  1.89k|    {
 3514|  1.89k|        if (!t.year) {
  ------------------
  |  Branch (3514:13): [True: 1.89k, False: 0]
  ------------------
 3515|  1.89k|            t.year = y;
 3516|  1.89k|        }
 3517|      0|        else {
 3518|      0|            t.year = *t.year + y;
 3519|      0|        }
 3520|  1.89k|        st.set_short_year(h);
 3521|  1.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3902|  4.64k|    {
 3903|  4.64k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.64k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.64k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.64k|#endif
 3911|       |
 3912|  4.64k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.64k|            {"January", 1},
 3914|  4.64k|            {"February", 2},
 3915|  4.64k|            {"March", 3},
 3916|  4.64k|            {"April", 4},
 3917|  4.64k|            {"May", 5},
 3918|  4.64k|            {"June", 6},
 3919|  4.64k|            {"July", 7},
 3920|  4.64k|            {"August", 8},
 3921|  4.64k|            {"September", 9},
 3922|  4.64k|            {"October", 10},
 3923|  4.64k|            {"November", 11},
 3924|  4.64k|            {"December", 12},
 3925|  4.64k|        }};
 3926|  4.64k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 120, False: 4.52k]
  ------------------
 3927|    120|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|    120|        }
 3929|  4.52k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.52k|            {"Jan", 1},
 3931|  4.52k|            {"Feb", 2},
 3932|  4.52k|            {"Mar", 3},
 3933|  4.52k|            {"Apr", 4},
 3934|  4.52k|            {"Jun", 6},
 3935|  4.52k|            {"Jul", 7},
 3936|  4.52k|            {"Aug", 8},
 3937|  4.52k|            {"Sep", 9},
 3938|  4.52k|            {"Oct", 10},
 3939|  4.52k|            {"Nov", 11},
 3940|  4.52k|            {"Dec", 12},
 3941|  4.52k|        }};
 3942|  4.52k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 2.78k, False: 1.74k]
  ------------------
 3943|  2.78k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|  2.78k|        }
 3945|  1.74k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  1.74k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3477|  7.01k|    {
 3478|  7.01k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.98k, False: 4.02k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 4.15k]
  |  |  |  Branch (1014:45): [True: 130, False: 4.02k]
  |  |  ------------------
  ------------------
 3479|  2.98k|            return h.set_error(
 3480|  2.98k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3481|  2.98k|        }
 3482|  4.02k|        t.mon = month{static_cast<unsigned>(m)};
 3483|  4.02k|        st.set_mon(h);
 3484|  4.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.64k|    {
 4554|  4.64k|        auto start_it = m_begin;
 4555|  4.64k|        std::size_t options_available = N;
 4556|  4.64k|        std::size_t chars_consumed = 0;
 4557|  18.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.6k, False: 4.46k]
  ------------------
 4558|  18.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 13.5k, False: 120]
  ------------------
 4559|  13.5k|            std::size_t i = 0;
 4560|  13.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 60, False: 13.4k]
  ------------------
 4561|     60|                options_available = 0;
 4562|     60|                break;
 4563|     60|            }
 4564|  13.4k|            const auto ch = *m_begin;
 4565|  13.4k|            ++m_begin;
 4566|  84.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 70.5k, False: 13.4k]
  ------------------
 4567|  70.5k|                const auto cmp = static_cast<unsigned>(
 4568|  70.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  70.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 70.5k]
  ------------------
 4570|  70.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 58.4k, False: 12.1k]
  |  Branch (4570:34): [True: 55.4k, False: 2.97k]
  ------------------
 4571|  55.4k|                    std::rotate(
 4572|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  55.4k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  55.4k|                        options.end());
 4575|  55.4k|                    --options_available;
 4576|  55.4k|                    continue;
 4577|  55.4k|                }
 4578|  15.1k|                ++i;
 4579|  15.1k|            }
 4580|  13.4k|            ++chars_consumed;
 4581|  13.4k|        }
 4582|  4.64k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.52k, False: 120]
  ------------------
 4583|  4.52k|            m_begin = start_it;
 4584|  4.52k|            return std::nullopt;
 4585|  4.52k|        }
 4586|    120|        return options.front().second;
 4587|  4.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.52k|    {
 4554|  4.52k|        auto start_it = m_begin;
 4555|  4.52k|        std::size_t options_available = N;
 4556|  4.52k|        std::size_t chars_consumed = 0;
 4557|  14.8k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 13.1k, False: 1.68k]
  ------------------
 4558|  14.8k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 10.3k, False: 2.78k]
  ------------------
 4559|  10.3k|            std::size_t i = 0;
 4560|  10.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 52, False: 10.3k]
  ------------------
 4561|     52|                options_available = 0;
 4562|     52|                break;
 4563|     52|            }
 4564|  10.3k|            const auto ch = *m_begin;
 4565|  10.3k|            ++m_begin;
 4566|  65.9k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.5k, False: 10.3k]
  ------------------
 4567|  55.5k|                const auto cmp = static_cast<unsigned>(
 4568|  55.5k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.5k]
  ------------------
 4570|  55.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.7k, False: 5.85k]
  |  Branch (4570:34): [True: 46.8k, False: 2.84k]
  ------------------
 4571|  46.8k|                    std::rotate(
 4572|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.8k|                        options.end());
 4575|  46.8k|                    --options_available;
 4576|  46.8k|                    continue;
 4577|  46.8k|                }
 4578|  8.69k|                ++i;
 4579|  8.69k|            }
 4580|  10.3k|            ++chars_consumed;
 4581|  10.3k|        }
 4582|  4.52k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 1.74k, False: 2.78k]
  ------------------
 4583|  1.74k|            m_begin = start_it;
 4584|  1.74k|            return std::nullopt;
 4585|  1.74k|        }
 4586|  2.78k|        return options.front().second;
 4587|  4.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3948|  4.10k|    {
 3949|  4.10k|#if !SCN_DISABLE_LOCALE
 3950|  4.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 4.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  4.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  4.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  4.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3982|  4.09k|    {
 3983|  4.09k|#if !SCN_DISABLE_LOCALE
 3984|  4.09k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 4.09k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  4.09k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  4.09k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  4.09k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3464|  4.09k|    {
 3465|  4.09k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.46k, False: 626]
  |  |  |  Branch (1014:45): [True: 3.36k, False: 730]
  |  |  |  Branch (1014:45): [True: 104, False: 626]
  |  |  ------------------
  ------------------
 3466|  3.46k|            return h.set_error(
 3467|  3.46k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3468|  3.46k|        }
 3469|    626|        t.mday = d;
 3470|    626|        st.set_mday(h);
 3471|    626|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3999|  3.54k|    {
 4000|  3.54k|#if !SCN_DISABLE_LOCALE
 4001|  3.54k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.54k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.54k|#endif
 4008|       |
 4009|  3.54k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.54k|            {"Sunday", 0},
 4011|  3.54k|            {"Monday", 1},
 4012|  3.54k|            {"Tuesday", 2},
 4013|  3.54k|            {"Wednesday", 3},
 4014|  3.54k|            {"Thursday", 4},
 4015|  3.54k|            {"Friday", 5},
 4016|  3.54k|            {"Saturday", 6},
 4017|  3.54k|        }};
 4018|  3.54k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.54k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.54k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.54k|            {"Sun", 0},
 4023|  3.54k|            {"Mon", 1},
 4024|  3.54k|            {"Tue", 2},
 4025|  3.54k|            {"Wed", 3},
 4026|  3.54k|            {"Thu", 4},
 4027|  3.54k|            {"Fri", 5},
 4028|  3.54k|            {"Sat", 6},
 4029|  3.54k|        }};
 4030|  3.54k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 1.79k, False: 1.75k]
  ------------------
 4031|  1.79k|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|  1.79k|        }
 4033|  1.75k|        return set_error(
 4034|  1.75k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.54k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3527|  1.79k|    {
 3528|  1.79k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1014|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  |  Branch (1014:45): [True: 0, False: 1.79k]
  |  |  ------------------
  ------------------
 3529|      0|            return h.set_error(
 3530|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3531|      0|        }
 3532|  1.79k|        t.wday = weekday{static_cast<unsigned>(d)};
 3533|  1.79k|        st.set_wday(h);
 3534|  1.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.09k|    {
 4554|  7.09k|        auto start_it = m_begin;
 4555|  7.09k|        std::size_t options_available = N;
 4556|  7.09k|        std::size_t chars_consumed = 0;
 4557|  23.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 18.4k, False: 5.26k]
  ------------------
 4558|  23.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 16.6k, False: 1.79k]
  ------------------
 4559|  16.6k|            std::size_t i = 0;
 4560|  16.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 16.6k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  16.6k|            const auto ch = *m_begin;
 4565|  16.6k|            ++m_begin;
 4566|  75.8k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 59.2k, False: 16.6k]
  ------------------
 4567|  59.2k|                const auto cmp = static_cast<unsigned>(
 4568|  59.2k|                    ch ^ options[i].first[chars_consumed]);
 4569|  59.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 59.2k]
  ------------------
 4570|  59.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 47.9k, False: 11.2k]
  |  Branch (4570:34): [True: 47.8k, False: 100]
  ------------------
 4571|  47.8k|                    std::rotate(
 4572|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  47.8k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  47.8k|                        options.end());
 4575|  47.8k|                    --options_available;
 4576|  47.8k|                    continue;
 4577|  47.8k|                }
 4578|  11.3k|                ++i;
 4579|  11.3k|            }
 4580|  16.6k|            ++chars_consumed;
 4581|  16.6k|        }
 4582|  7.09k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 5.30k, False: 1.79k]
  ------------------
 4583|  5.30k|            m_begin = start_it;
 4584|  5.30k|            return std::nullopt;
 4585|  5.30k|        }
 4586|  1.79k|        return options.front().second;
 4587|  7.09k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4077|  13.6k|    {
 4078|  13.6k|#if !SCN_DISABLE_LOCALE
 4079|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.6k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3438|  13.6k|    {
 3439|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (1014:45): [True: 2.46k, False: 11.2k]
  |  |  |  Branch (1014:45): [True: 252, False: 10.9k]
  |  |  ------------------
  ------------------
 3440|  2.72k|            return hdl.set_error(
 3441|  2.72k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3442|  2.72k|        }
 3443|  10.9k|        t.hour = h;
 3444|  10.9k|        st.set_hour24(hdl);
 3445|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4109|  13.6k|    {
 4110|  13.6k|#if !SCN_DISABLE_LOCALE
 4111|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.6k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3425|  13.6k|    {
 3426|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.87k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 2.85k, False: 10.7k]
  |  |  |  Branch (1014:45): [True: 20, False: 10.7k]
  |  |  ------------------
  ------------------
 3427|  2.87k|            return h.set_error({scan_error::invalid_scanned_value,
 3428|  2.87k|                                "Invalid value for minutes"});
 3429|  2.87k|        }
 3430|  10.7k|        t.min = m;
 3431|  10.7k|        st.set_min(h);
 3432|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4125|  3.25k|    {
 4126|  3.25k|#if !SCN_DISABLE_LOCALE
 4127|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.25k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.25k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.25k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.25k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3412|  3.25k|    {
 3413|  3.25k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 1.72k, False: 1.53k]
  |  |  |  Branch (1014:45): [True: 2, False: 1.53k]
  |  |  ------------------
  ------------------
 3414|  1.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3415|  1.72k|                                "Invalid value for seconds"});
 3416|  1.72k|        }
 3417|  1.53k|        t.sec = s;
 3418|  1.53k|        st.set_sec(h);
 3419|  1.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_tz_offsetENS1_14numeric_systemE:
 4199|     22|    {
 4200|       |        // [+|-]
 4201|     22|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4201:13): [True: 2, False: 20]
  ------------------
 4202|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4203|      2|        }
 4204|     20|        bool is_minus = false;
 4205|     20|        {
 4206|     20|            const auto sign_ch = *m_begin;
 4207|     20|            if (sign_ch == CharT{'+'}) {
  ------------------
  |  Branch (4207:17): [True: 6, False: 14]
  ------------------
 4208|      6|                ++m_begin;
 4209|      6|            }
 4210|     14|            else if (sign_ch == CharT{'-'}) {
  ------------------
  |  Branch (4210:22): [True: 6, False: 8]
  ------------------
 4211|      6|                is_minus = true;
 4212|      6|                ++m_begin;
 4213|      6|            }
 4214|     20|        }
 4215|     20|        if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (4215:13): [True: 2, False: 18]
  ------------------
 4216|      2|            return set_error({scan_error::end_of_input, "EOF"});
 4217|      2|        }
 4218|       |
 4219|     18|        int hour = 0;
 4220|     18|        int minute = 0;
 4221|     18|        if (sys == numeric_system::standard) {
  ------------------
  |  Branch (4221:13): [True: 18, False: 0]
  ------------------
 4222|       |            // hh[[:]mm]
 4223|     18|            hour = read_classic_unsigned_integer(2, 2);
 4224|     18|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4224:17): [True: 16, False: 2]
  ------------------
 4225|     16|                auto it_before_colon = m_begin;
 4226|     16|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4226:21): [True: 6, False: 10]
  ------------------
 4227|      6|                    ++m_begin;
 4228|      6|                }
 4229|     16|                if (m_begin == ranges::end(m_range) || *m_begin < CharT{'0'} ||
  ------------------
  |  Branch (4229:21): [True: 2, False: 14]
  |  Branch (4229:56): [True: 2, False: 12]
  ------------------
 4230|     16|                    *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4230:21): [True: 4, False: 8]
  ------------------
 4231|      8|                    m_begin = it_before_colon;
 4232|      8|                }
 4233|      8|                else {
 4234|      8|                    minute = read_classic_unsigned_integer(2, 2);
 4235|      8|                }
 4236|     16|            }
 4237|     18|        }
 4238|      0|        else {
 4239|       |            // h[h][:mm]
 4240|      0|            hour = read_classic_unsigned_integer(1, 2);
 4241|      0|            if (m_begin != ranges::end(m_range)) {
  ------------------
  |  Branch (4241:17): [True: 0, False: 0]
  ------------------
 4242|      0|                auto it_before_colon = m_begin;
 4243|      0|                if (*m_begin == CharT{':'}) {
  ------------------
  |  Branch (4243:21): [True: 0, False: 0]
  ------------------
 4244|      0|                    ++m_begin;
 4245|      0|                    if (m_begin == ranges::end(m_range) ||
  ------------------
  |  Branch (4245:25): [True: 0, False: 0]
  ------------------
 4246|      0|                        *m_begin < CharT{'0'} || *m_begin > CharT{'9'}) {
  ------------------
  |  Branch (4246:25): [True: 0, False: 0]
  |  Branch (4246:50): [True: 0, False: 0]
  ------------------
 4247|      0|                        m_begin = it_before_colon;
 4248|      0|                    }
 4249|      0|                    else {
 4250|      0|                        minute = read_classic_unsigned_integer(2, 2);
 4251|      0|                    }
 4252|      0|                }
 4253|      0|            }
 4254|      0|        }
 4255|       |
 4256|     18|        setter::set_tz_offset(
 4257|     18|            *this, m_tm, m_st,
 4258|     18|            std::chrono::minutes{(is_minus ? -1 : 1) * (hour * 60 + minute)});
  ------------------
  |  Branch (4258:35): [True: 6, False: 12]
  ------------------
 4259|     18|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_tz_offsetINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateENSt3__16chrono8durationIlNSK_5ratioILl60ELl1EEEEE:
 3554|     18|    {
 3555|     18|        t.tz_offset = o;
 3556|     18|        return st.set_tzoff(h);
 3557|     18|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4375|  1.89k|    {
 4376|       |        // %m/%d/%y
 4377|  1.89k|        constexpr CharT slash = '/';
 4378|  1.89k|        on_dec_month();
 4379|  1.89k|        on_text(&slash, &slash + 1);
 4380|  1.89k|        on_day_of_month();
 4381|  1.89k|        on_text(&slash, &slash + 1);
 4382|  1.89k|        on_short_year();
 4383|  1.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4385|  2.10k|    {
 4386|       |        // %Y-%m-%d
 4387|  2.10k|        constexpr CharT dash = '-';
 4388|  2.10k|        on_full_year();
 4389|  2.10k|        on_text(&dash, &dash + 1);
 4390|  2.10k|        on_dec_month();
 4391|  2.10k|        on_text(&dash, &dash + 1);
 4392|  2.10k|        on_day_of_month();
 4393|  2.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4417|  10.3k|    {
 4418|       |        // %H:%M
 4419|  10.3k|        constexpr CharT colon = ':';
 4420|  10.3k|        on_24_hour();
 4421|  10.3k|        on_text(&colon, &colon + 1);
 4422|  10.3k|        on_minute();
 4423|  10.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4425|  3.23k|    {
 4426|       |        // %H:%M:%S
 4427|  3.23k|        constexpr CharT colon = ':';
 4428|  3.23k|        on_24_hour();
 4429|  3.23k|        on_text(&colon, &colon + 1);
 4430|  3.23k|        on_minute();
 4431|  3.23k|        on_text(&colon, &colon + 1);
 4432|  3.23k|        on_second();
 4433|  3.23k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4464|  15.3k|    {
 4465|  15.3k|        m_st.verify(*this);
 4466|  15.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 15.3k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  15.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 14.9k, False: 356]
  |  Branch (4469:37): [True: 148, False: 14.8k]
  |  Branch (4469:60): [True: 0, False: 14.8k]
  ------------------
 4470|    148|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|    148|        }
 4472|  15.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4475|  55.4k|    {
 4476|  55.4k|        return m_error;
 4477|  55.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4492|  15.3k|    {
 4493|  15.3k|        return m_begin;
 4494|  15.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4485|   105k|    {
 4486|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 80.9k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   105k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  7.05k|    {
 3313|  7.05k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  7.05k|        t.tm_year = y - 1900;
 3318|  7.05k|        st.set_full_year(h);
 3319|  7.05k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  3.52k|    {
 3330|  3.52k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3331|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  3.50k|                                "Invalid value for tm_year"});
 3333|  3.50k|        }
 3334|     22|        st.short_year_value = static_cast<unsigned char>(y);
 3335|     22|        st.set_short_year(h);
 3336|     22|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.88k|    {
 3303|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3304|  6.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  6.69k|                                "Invalid value for tm_mon"});
 3306|  6.69k|        }
 3307|  1.19k|        t.tm_mon = m - 1;
 3308|  1.19k|        st.set_mon(h);
 3309|  1.19k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  7.08k|    {
 3293|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3294|  6.97k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  6.97k|                                "Invalid value for tm_mday"});
 3296|  6.97k|        }
 3297|    110|        t.tm_mday = d;
 3298|    110|        st.set_mday(h);
 3299|    110|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.5k|    {
 3273|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3274|  6.54k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  6.54k|                                  "Invalid value for tm_hour"});
 3276|  6.54k|        }
 3277|  7.01k|        t.tm_hour = h;
 3278|  7.01k|        st.set_hour24(hdl);
 3279|  7.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.5k|    {
 3263|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3264|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  6.58k|                                "Invalid value for tm_min"});
 3266|  6.58k|        }
 3267|  6.96k|        t.tm_min = m;
 3268|  6.96k|        st.set_min(h);
 3269|  6.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.78k|    {
 3253|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3254|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  3.49k|                                "Invalid value for tm_sec"});
 3256|  3.49k|        }
 3257|    292|        t.tm_sec = s;
 3258|    292|        st.set_sec(h);
 3259|    292|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  96.9k|{
  250|  96.9k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  96.9k|        .transform_error(impl::make_eof_scan_error);
  252|  96.9k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4485|   105k|    {
 4486|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 80.9k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   105k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  7.05k|    {
 3313|  7.05k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  7.05k|        t.tm_year = y - 1900;
 3318|  7.05k|        st.set_full_year(h);
 3319|  7.05k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  3.52k|    {
 3330|  3.52k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3331|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  3.50k|                                "Invalid value for tm_year"});
 3333|  3.50k|        }
 3334|     22|        st.short_year_value = static_cast<unsigned char>(y);
 3335|     22|        st.set_short_year(h);
 3336|     22|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.88k|    {
 3303|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3304|  6.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  6.69k|                                "Invalid value for tm_mon"});
 3306|  6.69k|        }
 3307|  1.19k|        t.tm_mon = m - 1;
 3308|  1.19k|        st.set_mon(h);
 3309|  1.19k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  7.08k|    {
 3293|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3294|  6.97k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  6.97k|                                "Invalid value for tm_mday"});
 3296|  6.97k|        }
 3297|    110|        t.tm_mday = d;
 3298|    110|        st.set_mday(h);
 3299|    110|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.5k|    {
 3273|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3274|  6.54k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  6.54k|                                  "Invalid value for tm_hour"});
 3276|  6.54k|        }
 3277|  7.01k|        t.tm_hour = h;
 3278|  7.01k|        st.set_hour24(hdl);
 3279|  7.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.5k|    {
 3263|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3264|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  6.58k|                                "Invalid value for tm_min"});
 3266|  6.58k|        }
 3267|  6.96k|        t.tm_min = m;
 3268|  6.96k|        st.set_min(h);
 3269|  6.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.78k|    {
 3253|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3254|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  3.49k|                                "Invalid value for tm_sec"});
 3256|  3.49k|        }
 3257|    292|        t.tm_sec = s;
 3258|    292|        st.set_sec(h);
 3259|    292|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4485|   105k|    {
 4486|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 80.9k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   105k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  7.05k|    {
 3313|  7.05k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  7.05k|        t.tm_year = y - 1900;
 3318|  7.05k|        st.set_full_year(h);
 3319|  7.05k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  3.52k|    {
 3330|  3.52k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3331|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  3.50k|                                "Invalid value for tm_year"});
 3333|  3.50k|        }
 3334|     22|        st.short_year_value = static_cast<unsigned char>(y);
 3335|     22|        st.set_short_year(h);
 3336|     22|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.88k|    {
 3303|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3304|  6.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  6.69k|                                "Invalid value for tm_mon"});
 3306|  6.69k|        }
 3307|  1.19k|        t.tm_mon = m - 1;
 3308|  1.19k|        st.set_mon(h);
 3309|  1.19k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  7.08k|    {
 3293|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3294|  6.97k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  6.97k|                                "Invalid value for tm_mday"});
 3296|  6.97k|        }
 3297|    110|        t.tm_mday = d;
 3298|    110|        st.set_mday(h);
 3299|    110|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.5k|    {
 3273|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3274|  6.54k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  6.54k|                                  "Invalid value for tm_hour"});
 3276|  6.54k|        }
 3277|  7.01k|        t.tm_hour = h;
 3278|  7.01k|        st.set_hour24(hdl);
 3279|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.5k|    {
 3263|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3264|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  6.58k|                                "Invalid value for tm_min"});
 3266|  6.58k|        }
 3267|  6.96k|        t.tm_min = m;
 3268|  6.96k|        st.set_min(h);
 3269|  6.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.78k|    {
 3253|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3254|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  3.49k|                                "Invalid value for tm_sec"});
 3256|  3.49k|        }
 3257|    292|        t.tm_sec = s;
 3258|    292|        st.set_sec(h);
 3259|    292|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4485|   105k|    {
 4486|   105k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 80.9k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   105k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3312|  7.05k|    {
 3313|  7.05k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1014|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 3314|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3315|      0|                                "Invalid value for tm_year"});
 3316|      0|        }
 3317|  7.05k|        t.tm_year = y - 1900;
 3318|  7.05k|        st.set_full_year(h);
 3319|  7.05k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3329|  3.52k|    {
 3330|  3.52k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1014|  3.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 3.50k, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3331|  3.50k|            return h.set_error({scan_error::invalid_scanned_value,
 3332|  3.50k|                                "Invalid value for tm_year"});
 3333|  3.50k|        }
 3334|     22|        st.short_year_value = static_cast<unsigned char>(y);
 3335|     22|        st.set_short_year(h);
 3336|     22|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3302|  7.88k|    {
 3303|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3304|  6.69k|            return h.set_error({scan_error::invalid_scanned_value,
 3305|  6.69k|                                "Invalid value for tm_mon"});
 3306|  6.69k|        }
 3307|  1.19k|        t.tm_mon = m - 1;
 3308|  1.19k|        st.set_mon(h);
 3309|  1.19k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3292|  7.08k|    {
 3293|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3294|  6.97k|            return h.set_error({scan_error::invalid_scanned_value,
 3295|  6.97k|                                "Invalid value for tm_mday"});
 3296|  6.97k|        }
 3297|    110|        t.tm_mday = d;
 3298|    110|        st.set_mday(h);
 3299|    110|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3272|  13.5k|    {
 3273|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3274|  6.54k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3275|  6.54k|                                  "Invalid value for tm_hour"});
 3276|  6.54k|        }
 3277|  7.01k|        t.tm_hour = h;
 3278|  7.01k|        st.set_hour24(hdl);
 3279|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3262|  13.5k|    {
 3263|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3264|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3265|  6.58k|                                "Invalid value for tm_min"});
 3266|  6.58k|        }
 3267|  6.96k|        t.tm_min = m;
 3268|  6.96k|        st.set_min(h);
 3269|  6.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3252|  3.78k|    {
 3253|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3254|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3255|  3.49k|                                "Invalid value for tm_sec"});
 3256|  3.49k|        }
 3257|    292|        t.tm_sec = s;
 3258|    292|        st.set_sec(h);
 3259|    292|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4485|   101k|    {
 4486|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 77.3k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3490|  7.05k|    {
 3491|  7.05k|        t.year = y;
 3492|  7.05k|        st.set_full_year(h);
 3493|  7.05k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3513|  3.52k|    {
 3514|  3.52k|        if (!t.year) {
  ------------------
  |  Branch (3514:13): [True: 3.52k, False: 0]
  ------------------
 3515|  3.52k|            t.year = y;
 3516|  3.52k|        }
 3517|      0|        else {
 3518|      0|            t.year = *t.year + y;
 3519|      0|        }
 3520|  3.52k|        st.set_short_year(h);
 3521|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3477|  7.88k|    {
 3478|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3479|  6.69k|            return h.set_error(
 3480|  6.69k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3481|  6.69k|        }
 3482|  1.19k|        t.mon = month{static_cast<unsigned>(m)};
 3483|  1.19k|        st.set_mon(h);
 3484|  1.19k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3464|  7.08k|    {
 3465|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3466|  6.97k|            return h.set_error(
 3467|  6.97k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3468|  6.97k|        }
 3469|    110|        t.mday = d;
 3470|    110|        st.set_mday(h);
 3471|    110|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3438|  13.5k|    {
 3439|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3440|  6.54k|            return hdl.set_error(
 3441|  6.54k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3442|  6.54k|        }
 3443|  7.01k|        t.hour = h;
 3444|  7.01k|        st.set_hour24(hdl);
 3445|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3425|  13.5k|    {
 3426|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3427|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3428|  6.58k|                                "Invalid value for minutes"});
 3429|  6.58k|        }
 3430|  6.96k|        t.min = m;
 3431|  6.96k|        st.set_min(h);
 3432|  6.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3412|  3.78k|    {
 3413|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3414|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3415|  3.49k|                                "Invalid value for seconds"});
 3416|  3.49k|        }
 3417|    292|        t.sec = s;
 3418|    292|        st.set_sec(h);
 3419|    292|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4701|  32.3k|{
 4702|  32.3k|    {
 4703|  32.3k|        SCN_TRY(it,
  ------------------
  |  | 3996|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 414, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    414|    }                                                  \
  |  |  |  | 3995|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4704|  31.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4705|  31.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4706|  31.9k|    }
 4707|       |
 4708|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4709|  31.9k|        ctx.range(), t, ctx.locale());
 4710|  31.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4711|  31.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.5k, False: 7.38k]
  |  |  ------------------
  ------------------
 4712|  24.5k|        return unexpected(e.error());
 4713|  24.5k|    }
 4714|  7.38k|    return r.get_iterator();
 4715|  31.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3801|  31.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1083|  31.9k|    static_cast<    \
  |  | 1084|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3802|  31.9k|          m_begin(ranges::begin(m_range)),
 3803|  31.9k|          m_tm(t),
 3804|  31.9k|          m_loc(loc)
 3805|  31.9k|    {
 3806|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4480|  23.9k|    {
 4481|  23.9k|        set_error({scan_error::invalid_format_string, msg});
 4482|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4485|   101k|    {
 4486|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4486:13): [True: 24.5k, False: 77.3k]
  ------------------
 4487|  24.5k|            m_error = unexpected(e);
 4488|  24.5k|        }
 4489|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3809|  31.5k|    {
 3810|  39.0k|        while (beg != end) {
  ------------------
  |  Branch (3810:16): [True: 31.5k, False: 7.47k]
  ------------------
 3811|  31.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3811:17): [True: 148, False: 31.3k]
  ------------------
 3812|    148|                return set_error({scan_error::end_of_input, "EOF"});
 3813|    148|            }
 3814|  31.3k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3814:17): [True: 23.9k, False: 7.47k]
  ------------------
 3815|  23.9k|                return on_error("Invalid literal character");
 3816|  23.9k|            }
 3817|  7.47k|            ++beg;
 3818|  7.47k|            ++m_begin;
 3819|  7.47k|        }
 3820|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3839|  7.05k|    {
 3840|  7.05k|#if !SCN_DISABLE_LOCALE
 3841|  7.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3841:13): [True: 0, False: 7.05k]
  |  Branch (3841:31): [True: 0, False: 0]
  ------------------
 3842|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3842:22): [True: 0, False: 0]
  ------------------
 3843|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3844|      0|            }
 3845|      0|            return;
 3846|      0|        }
 3847|       |#else
 3848|       |        SCN_UNUSED(sys);
 3849|       |#endif
 3850|       |
 3851|  7.05k|        int yr = read_classic_unsigned_integer(4, 4);
 3852|  7.05k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3853|  7.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3490|  7.05k|    {
 3491|  7.05k|        t.year = y;
 3492|  7.05k|        st.set_full_year(h);
 3493|  7.05k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4503|  55.6k|    {
 4504|  55.6k|        int digits_read = 0;
 4505|  55.6k|        int accumulator = 0;
 4506|  71.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4506:16): [True: 71.3k, False: 310]
  ------------------
 4507|  71.3k|            const auto ch = *m_begin;
 4508|  71.3k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4508:17): [True: 30.7k, False: 40.6k]
  |  Branch (4508:36): [True: 22.1k, False: 18.4k]
  ------------------
 4509|  52.8k|                break;
 4510|  52.8k|            }
 4511|  18.4k|            ++m_begin;
 4512|  18.4k|            ++digits_read;
 4513|  18.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4514|  18.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4514:17): [True: 2.49k, False: 16.0k]
  ------------------
 4515|  2.49k|                break;
 4516|  2.49k|            }
 4517|  18.4k|        }
 4518|  55.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4518:13): [True: 40.5k, False: 15.0k]
  ------------------
 4519|  40.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4520|  40.5k|                                 "Too few integer digits"});
 4521|  40.5k|            return -1;
 4522|  40.5k|        }
 4523|  15.0k|        return accumulator;
 4524|  55.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3855|  3.52k|    {
 3856|  3.52k|#if !SCN_DISABLE_LOCALE
 3857|  3.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3857:13): [True: 0, False: 3.52k]
  |  Branch (3857:31): [True: 0, False: 0]
  ------------------
 3858|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3858:22): [True: 0, False: 0]
  ------------------
 3859|      0|                setter::set_short_year(*this, m_tm, m_st,
 3860|      0|                                       (t->tm_year + 1900) % 100);
 3861|      0|            }
 3862|      0|            return;
 3863|      0|        }
 3864|       |#else
 3865|       |        SCN_UNUSED(sys);
 3866|       |#endif
 3867|       |
 3868|  3.52k|        int yr = read_classic_unsigned_integer(2, 2);
 3869|  3.52k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3870|  3.52k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3513|  3.52k|    {
 3514|  3.52k|        if (!t.year) {
  ------------------
  |  Branch (3514:13): [True: 3.52k, False: 0]
  ------------------
 3515|  3.52k|            t.year = y;
 3516|  3.52k|        }
 3517|      0|        else {
 3518|      0|            t.year = *t.year + y;
 3519|      0|        }
 3520|  3.52k|        st.set_short_year(h);
 3521|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3902|  4.28k|    {
 3903|  4.28k|#if !SCN_DISABLE_FAST_FLOAT
 3904|  4.28k|        if (m_st.localized) {
  ------------------
  |  Branch (3904:13): [True: 0, False: 4.28k]
  ------------------
 3905|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3905:22): [True: 0, False: 0]
  ------------------
 3906|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3907|      0|            }
 3908|      0|            return;
 3909|      0|        }
 3910|  4.28k|#endif
 3911|       |
 3912|  4.28k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3913|  4.28k|            {"January", 1},
 3914|  4.28k|            {"February", 2},
 3915|  4.28k|            {"March", 3},
 3916|  4.28k|            {"April", 4},
 3917|  4.28k|            {"May", 5},
 3918|  4.28k|            {"June", 6},
 3919|  4.28k|            {"July", 7},
 3920|  4.28k|            {"August", 8},
 3921|  4.28k|            {"September", 9},
 3922|  4.28k|            {"October", 10},
 3923|  4.28k|            {"November", 11},
 3924|  4.28k|            {"December", 12},
 3925|  4.28k|        }};
 3926|  4.28k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3926:18): [True: 26, False: 4.25k]
  ------------------
 3927|     26|            return setter::set_mon(*this, m_tm, m_st, *m);
 3928|     26|        }
 3929|  4.25k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3930|  4.25k|            {"Jan", 1},
 3931|  4.25k|            {"Feb", 2},
 3932|  4.25k|            {"Mar", 3},
 3933|  4.25k|            {"Apr", 4},
 3934|  4.25k|            {"Jun", 6},
 3935|  4.25k|            {"Jul", 7},
 3936|  4.25k|            {"Aug", 8},
 3937|  4.25k|            {"Sep", 9},
 3938|  4.25k|            {"Oct", 10},
 3939|  4.25k|            {"Nov", 11},
 3940|  4.25k|            {"Dec", 12},
 3941|  4.25k|        }};
 3942|  4.25k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3942:18): [True: 756, False: 3.49k]
  ------------------
 3943|    756|            return setter::set_mon(*this, m_tm, m_st, *m);
 3944|    756|        }
 3945|  3.49k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3946|  3.49k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3477|  7.88k|    {
 3478|  7.88k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.69k, False: 1.19k]
  |  |  |  Branch (1014:45): [True: 6.63k, False: 1.25k]
  |  |  |  Branch (1014:45): [True: 58, False: 1.19k]
  |  |  ------------------
  ------------------
 3479|  6.69k|            return h.set_error(
 3480|  6.69k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3481|  6.69k|        }
 3482|  1.19k|        t.mon = month{static_cast<unsigned>(m)};
 3483|  1.19k|        st.set_mon(h);
 3484|  1.19k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.28k|    {
 4554|  4.28k|        auto start_it = m_begin;
 4555|  4.28k|        std::size_t options_available = N;
 4556|  4.28k|        std::size_t chars_consumed = 0;
 4557|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.72k, False: 4.21k]
  ------------------
 4558|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 6.69k, False: 26]
  ------------------
 4559|  6.69k|            std::size_t i = 0;
 4560|  6.69k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 42, False: 6.65k]
  ------------------
 4561|     42|                options_available = 0;
 4562|     42|                break;
 4563|     42|            }
 4564|  6.65k|            const auto ch = *m_begin;
 4565|  6.65k|            ++m_begin;
 4566|  62.0k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 55.3k, False: 6.65k]
  ------------------
 4567|  55.3k|                const auto cmp = static_cast<unsigned>(
 4568|  55.3k|                    ch ^ options[i].first[chars_consumed]);
 4569|  55.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 55.3k]
  ------------------
 4570|  55.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 52.1k, False: 3.19k]
  |  Branch (4570:34): [True: 51.2k, False: 894]
  ------------------
 4571|  51.2k|                    std::rotate(
 4572|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  51.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  51.2k|                        options.end());
 4575|  51.2k|                    --options_available;
 4576|  51.2k|                    continue;
 4577|  51.2k|                }
 4578|  4.09k|                ++i;
 4579|  4.09k|            }
 4580|  6.65k|            ++chars_consumed;
 4581|  6.65k|        }
 4582|  4.28k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 4.25k, False: 26]
  ------------------
 4583|  4.25k|            m_begin = start_it;
 4584|  4.25k|            return std::nullopt;
 4585|  4.25k|        }
 4586|     26|        return options.front().second;
 4587|  4.28k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  4.25k|    {
 4554|  4.25k|        auto start_it = m_begin;
 4555|  4.25k|        std::size_t options_available = N;
 4556|  4.25k|        std::size_t chars_consumed = 0;
 4557|  10.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 6.62k, False: 3.46k]
  ------------------
 4558|  10.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 5.86k, False: 756]
  ------------------
 4559|  5.86k|            std::size_t i = 0;
 4560|  5.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 30, False: 5.83k]
  ------------------
 4561|     30|                options_available = 0;
 4562|     30|                break;
 4563|     30|            }
 4564|  5.83k|            const auto ch = *m_begin;
 4565|  5.83k|            ++m_begin;
 4566|  54.2k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 48.4k, False: 5.83k]
  ------------------
 4567|  48.4k|                const auto cmp = static_cast<unsigned>(
 4568|  48.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  48.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 48.4k]
  ------------------
 4570|  48.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 46.8k, False: 1.56k]
  |  Branch (4570:34): [True: 46.0k, False: 836]
  ------------------
 4571|  46.0k|                    std::rotate(
 4572|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  46.0k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  46.0k|                        options.end());
 4575|  46.0k|                    --options_available;
 4576|  46.0k|                    continue;
 4577|  46.0k|                }
 4578|  2.40k|                ++i;
 4579|  2.40k|            }
 4580|  5.83k|            ++chars_consumed;
 4581|  5.83k|        }
 4582|  4.25k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 3.49k, False: 756]
  ------------------
 4583|  3.49k|            m_begin = start_it;
 4584|  3.49k|            return std::nullopt;
 4585|  3.49k|        }
 4586|    756|        return options.front().second;
 4587|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3948|  7.10k|    {
 3949|  7.10k|#if !SCN_DISABLE_LOCALE
 3950|  7.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 7.10k]
  |  Branch (3950:31): [True: 0, False: 0]
  ------------------
 3951|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3953|      0|            }
 3954|      0|            return;
 3955|      0|        }
 3956|       |#else
 3957|       |        SCN_UNUSED(sys);
 3958|       |#endif
 3959|       |
 3960|  7.10k|        int mon = read_classic_unsigned_integer(1, 2);
 3961|  7.10k|        setter::set_mon(*this, m_tm, m_st, mon);
 3962|  7.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3982|  7.08k|    {
 3983|  7.08k|#if !SCN_DISABLE_LOCALE
 3984|  7.08k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 7.08k]
  |  Branch (3984:31): [True: 0, False: 0]
  ------------------
 3985|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3987|      0|            }
 3988|      0|            return;
 3989|      0|        }
 3990|       |#else
 3991|       |        SCN_UNUSED(sys);
 3992|       |#endif
 3993|       |
 3994|  7.08k|        int mday = read_classic_unsigned_integer(1, 2);
 3995|  7.08k|        setter::set_mday(*this, m_tm, m_st, mday);
 3996|  7.08k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3464|  7.08k|    {
 3465|  7.08k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1014|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.97k, False: 110]
  |  |  |  Branch (1014:45): [True: 6.96k, False: 120]
  |  |  |  Branch (1014:45): [True: 10, False: 110]
  |  |  ------------------
  ------------------
 3466|  6.97k|            return h.set_error(
 3467|  6.97k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3468|  6.97k|        }
 3469|    110|        t.mday = d;
 3470|    110|        st.set_mday(h);
 3471|    110|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3999|  3.51k|    {
 4000|  3.51k|#if !SCN_DISABLE_LOCALE
 4001|  3.51k|        if (m_st.localized) {
  ------------------
  |  Branch (4001:13): [True: 0, False: 3.51k]
  ------------------
 4002|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (4002:22): [True: 0, False: 0]
  ------------------
 4003|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 4004|      0|            }
 4005|      0|            return;
 4006|      0|        }
 4007|  3.51k|#endif
 4008|       |
 4009|  3.51k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 4010|  3.51k|            {"Sunday", 0},
 4011|  3.51k|            {"Monday", 1},
 4012|  3.51k|            {"Tuesday", 2},
 4013|  3.51k|            {"Wednesday", 3},
 4014|  3.51k|            {"Thursday", 4},
 4015|  3.51k|            {"Friday", 5},
 4016|  3.51k|            {"Saturday", 6},
 4017|  3.51k|        }};
 4018|  3.51k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 3.51k]
  ------------------
 4019|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4020|      0|        }
 4021|  3.51k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 4022|  3.51k|            {"Sun", 0},
 4023|  3.51k|            {"Mon", 1},
 4024|  3.51k|            {"Tue", 2},
 4025|  3.51k|            {"Wed", 3},
 4026|  3.51k|            {"Thu", 4},
 4027|  3.51k|            {"Fri", 5},
 4028|  3.51k|            {"Sat", 6},
 4029|  3.51k|        }};
 4030|  3.51k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (4030:18): [True: 0, False: 3.51k]
  ------------------
 4031|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 4032|      0|        }
 4033|  3.51k|        return set_error(
 4034|  3.51k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 4035|  3.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4553|  7.03k|    {
 4554|  7.03k|        auto start_it = m_begin;
 4555|  7.03k|        std::size_t options_available = N;
 4556|  7.03k|        std::size_t chars_consumed = 0;
 4557|  14.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4557:16): [True: 7.24k, False: 7.01k]
  ------------------
 4558|  14.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4558:16): [True: 7.24k, False: 0]
  ------------------
 4559|  7.24k|            std::size_t i = 0;
 4560|  7.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4560:17): [True: 16, False: 7.22k]
  ------------------
 4561|     16|                options_available = 0;
 4562|     16|                break;
 4563|     16|            }
 4564|  7.22k|            const auto ch = *m_begin;
 4565|  7.22k|            ++m_begin;
 4566|  56.6k|            while (i < options_available) {
  ------------------
  |  Branch (4566:20): [True: 49.4k, False: 7.22k]
  ------------------
 4567|  49.4k|                const auto cmp = static_cast<unsigned>(
 4568|  49.4k|                    ch ^ options[i].first[chars_consumed]);
 4569|  49.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4569:21): [True: 0, False: 49.4k]
  ------------------
 4570|  49.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4570:22): [True: 49.2k, False: 212]
  |  Branch (4570:34): [True: 49.2k, False: 16]
  ------------------
 4571|  49.2k|                    std::rotate(
 4572|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i),
 4573|  49.2k|                        options.begin() + static_cast<std::ptrdiff_t>(i) + 1,
 4574|  49.2k|                        options.end());
 4575|  49.2k|                    --options_available;
 4576|  49.2k|                    continue;
 4577|  49.2k|                }
 4578|    228|                ++i;
 4579|    228|            }
 4580|  7.22k|            ++chars_consumed;
 4581|  7.22k|        }
 4582|  7.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4582:13): [True: 7.03k, False: 0]
  ------------------
 4583|  7.03k|            m_begin = start_it;
 4584|  7.03k|            return std::nullopt;
 4585|  7.03k|        }
 4586|      0|        return options.front().second;
 4587|  7.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4077|  13.5k|    {
 4078|  13.5k|#if !SCN_DISABLE_LOCALE
 4079|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4079:13): [True: 0, False: 13.5k]
  |  Branch (4079:31): [True: 0, False: 0]
  ------------------
 4080|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4080:22): [True: 0, False: 0]
  ------------------
 4081|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4082|      0|            }
 4083|      0|            return;
 4084|      0|        }
 4085|       |#else
 4086|       |        SCN_UNUSED(sys);
 4087|       |#endif
 4088|       |
 4089|  13.5k|        int hr = read_classic_unsigned_integer(1, 2);
 4090|  13.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4091|  13.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3438|  13.5k|    {
 3439|  13.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1014|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.54k, False: 7.01k]
  |  |  |  Branch (1014:45): [True: 6.45k, False: 7.10k]
  |  |  |  Branch (1014:45): [True: 94, False: 7.01k]
  |  |  ------------------
  ------------------
 3440|  6.54k|            return hdl.set_error(
 3441|  6.54k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3442|  6.54k|        }
 3443|  7.01k|        t.hour = h;
 3444|  7.01k|        st.set_hour24(hdl);
 3445|  7.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4109|  13.5k|    {
 4110|  13.5k|#if !SCN_DISABLE_LOCALE
 4111|  13.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4111:13): [True: 0, False: 13.5k]
  |  Branch (4111:31): [True: 0, False: 0]
  ------------------
 4112|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4112:22): [True: 0, False: 0]
  ------------------
 4113|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4114|      0|            }
 4115|      0|            return;
 4116|      0|        }
 4117|       |#else
 4118|       |        SCN_UNUSED(sys);
 4119|       |#endif
 4120|       |
 4121|  13.5k|        int min = read_classic_unsigned_integer(1, 2);
 4122|  13.5k|        setter::set_min(*this, m_tm, m_st, min);
 4123|  13.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3425|  13.5k|    {
 3426|  13.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1014|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.58k, False: 6.96k]
  |  |  |  Branch (1014:45): [True: 6.57k, False: 6.97k]
  |  |  |  Branch (1014:45): [True: 12, False: 6.96k]
  |  |  ------------------
  ------------------
 3427|  6.58k|            return h.set_error({scan_error::invalid_scanned_value,
 3428|  6.58k|                                "Invalid value for minutes"});
 3429|  6.58k|        }
 3430|  6.96k|        t.min = m;
 3431|  6.96k|        st.set_min(h);
 3432|  6.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4125|  3.78k|    {
 4126|  3.78k|#if !SCN_DISABLE_LOCALE
 4127|  3.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4127:13): [True: 0, False: 3.78k]
  |  Branch (4127:31): [True: 0, False: 0]
  ------------------
 4128|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4128:22): [True: 0, False: 0]
  ------------------
 4129|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4130|      0|            }
 4131|      0|            return;
 4132|      0|        }
 4133|       |#else
 4134|       |        SCN_UNUSED(sys);
 4135|       |#endif
 4136|       |
 4137|  3.78k|        int sec = read_classic_unsigned_integer(1, 2);
 4138|  3.78k|        setter::set_sec(*this, m_tm, m_st, sec);
 4139|  3.78k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3412|  3.78k|    {
 3413|  3.78k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1014|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.49k, False: 292]
  |  |  |  Branch (1014:45): [True: 3.49k, False: 294]
  |  |  |  Branch (1014:45): [True: 2, False: 292]
  |  |  ------------------
  ------------------
 3414|  3.49k|            return h.set_error({scan_error::invalid_scanned_value,
 3415|  3.49k|                                "Invalid value for seconds"});
 3416|  3.49k|        }
 3417|    292|        t.sec = s;
 3418|    292|        st.set_sec(h);
 3419|    292|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4375|  3.52k|    {
 4376|       |        // %m/%d/%y
 4377|  3.52k|        constexpr CharT slash = '/';
 4378|  3.52k|        on_dec_month();
 4379|  3.52k|        on_text(&slash, &slash + 1);
 4380|  3.52k|        on_day_of_month();
 4381|  3.52k|        on_text(&slash, &slash + 1);
 4382|  3.52k|        on_short_year();
 4383|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4385|  3.53k|    {
 4386|       |        // %Y-%m-%d
 4387|  3.53k|        constexpr CharT dash = '-';
 4388|  3.53k|        on_full_year();
 4389|  3.53k|        on_text(&dash, &dash + 1);
 4390|  3.53k|        on_dec_month();
 4391|  3.53k|        on_text(&dash, &dash + 1);
 4392|  3.53k|        on_day_of_month();
 4393|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4417|  9.75k|    {
 4418|       |        // %H:%M
 4419|  9.75k|        constexpr CharT colon = ':';
 4420|  9.75k|        on_24_hour();
 4421|  9.75k|        on_text(&colon, &colon + 1);
 4422|  9.75k|        on_minute();
 4423|  9.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4425|  3.78k|    {
 4426|       |        // %H:%M:%S
 4427|  3.78k|        constexpr CharT colon = ':';
 4428|  3.78k|        on_24_hour();
 4429|  3.78k|        on_text(&colon, &colon + 1);
 4430|  3.78k|        on_minute();
 4431|  3.78k|        on_text(&colon, &colon + 1);
 4432|  3.78k|        on_second();
 4433|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4464|  7.38k|    {
 4465|  7.38k|        m_st.verify(*this);
 4466|  7.38k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4466:13): [True: 0, False: 7.38k]
  |  Branch (4466:31): [True: 0, False: 0]
  ------------------
 4467|      0|            setter::handle_am_pm(m_tm, m_st);
 4468|      0|        }
 4469|  7.38k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4469:13): [True: 7.36k, False: 22]
  |  Branch (4469:37): [True: 14, False: 7.34k]
  |  Branch (4469:60): [True: 0, False: 7.34k]
  ------------------
 4470|     14|            setter::handle_short_year_and_century(m_tm, m_st);
 4471|     14|        }
 4472|  7.38k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4475|  63.9k|    {
 4476|  63.9k|        return m_error;
 4477|  63.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4492|  7.38k|    {
 4493|  7.38k|        return m_begin;
 4494|  7.38k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    891|{
 1487|    891|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|    891|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|    891|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|    891|            return transcode_to_string_impl_to32(src, dest);
 1498|    891|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|    891|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    891|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|    891|{
 1379|    891|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|    891|    auto it = src.begin();
 1382|   204k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 203k, False: 891]
  ------------------
 1383|   203k|        auto res = get_next_code_point(
 1384|   203k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   203k|                                                                 src.end()));
 1386|   203k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.19k, False: 198k]
  |  |  ------------------
  ------------------
 1387|  5.19k|            dest.push_back(DestCharT{0xfffd});
 1388|  5.19k|        }
 1389|   198k|        else {
 1390|   198k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   198k|        }
 1392|   203k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   203k|    }
 1394|    891|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   220k|{
 1303|   220k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   220k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   220k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.55k, False: 212k]
  |  |  ------------------
  ------------------
 1307|  8.55k|        return {get_start_for_next_code_point(input),
 1308|  8.55k|                detail::invalid_code_point};
 1309|  8.55k|    }
 1310|   212k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 259, False: 211k]
  |  |  ------------------
  ------------------
 1311|    259|        return {input.end(), detail::invalid_code_point};
 1312|    259|    }
 1313|       |
 1314|   211k|    return {input.begin() + len,
 1315|   211k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   212k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  8.55k|{
 1289|  8.55k|    auto it = input.begin();
 1290|   112k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 112k, False: 577]
  ------------------
 1291|   112k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 7.97k, False: 104k]
  ------------------
 1292|  7.97k|            break;
 1293|  7.97k|        }
 1294|   112k|    }
 1295|  8.55k|    return it;
 1296|  8.55k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   164k|{
  458|   164k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   164k|        static_cast<unsigned char>(ch))];
  460|   164k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|  88.8k|{
  538|  88.8k|    SCN_GCC_PUSH
  539|  88.8k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|  88.8k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|  88.8k|    SCN_GCC_POP
  542|  88.8k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|   375k|{
  794|   375k|    return e != eof_error::good;
  795|   375k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  4.69k|{
  808|  4.69k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  4.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  4.69k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  4.69k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  83.4k|    {
  304|  83.4k|        ranges::advance(x, n);
  305|  83.4k|        return x;
  306|  83.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  83.4k|    {
  268|  83.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  83.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  83.4k|    {
  151|  83.4k|        i += n;
  152|  83.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   219k|    {
  108|   219k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   219k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   219k|    {
   87|   219k|        return s - i;
   88|   219k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   119k|    {
  108|   119k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   119k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   119k|    {
   87|   119k|        return s - i;
   88|   119k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 3047|  83.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  83.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  83.4k|          m_current(m_range.begin())
 3050|  83.4k|    {
 3051|  83.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|   462k|    {
 3055|   462k|        return m_current;
 3056|   462k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 3047|  96.9k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  96.9k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  96.9k|          m_current(m_range.begin())
 3050|  96.9k|    {
 3051|  96.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|   505k|    {
 3055|   505k|        return m_current;
 3056|   505k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  1.11M|    {
  773|  1.11M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  1.11M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|   292k|        : m_fptr([](storage fn,
  753|   292k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   292k|              cvref<T> obj = *get<T>(fn);
  755|   292k|              if constexpr (std::is_void_v<R>) {
  756|   292k|                  obj(static_cast<decltype(args)>(args)...);
  757|   292k|              }
  758|   292k|              else {
  759|   292k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   292k|              }
  761|   292k|          }),
  762|   292k|          m_storage(std::addressof(f))
  763|   292k|    {
  764|   292k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|   559k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   559k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   559k|              else {
  759|   559k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   559k|              }
  761|   559k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|   559k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   559k|        else if constexpr (std::is_object_v<T>) {
  694|   559k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   559k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|   292k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   292k|        {
  668|   292k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  61.0k|    {
  108|  61.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  61.0k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  61.0k|    {
   94|  61.0k|        iter_difference_t<I> counter{0};
   95|   550k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 489k, False: 61.0k]
  ------------------
   96|   489k|            ++i;
   97|   489k|            ++counter;
   98|   489k|        }
   99|  61.0k|        return counter;
  100|  61.0k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  98.4k|{
  961|  98.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.45k, False: 97.0k]
  |  |  ------------------
  ------------------
  962|  1.45k|        return eof_error::eof;
  963|  1.45k|    }
  964|  97.0k|    return eof_error::good;
  965|  98.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|   319k|{
  955|   319k|    return is_range_eof(r.begin(), r.end());
  956|   319k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|   319k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   319k|    {
  948|   319k|        return begin == end;
  949|   319k|    }
  950|   319k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|  83.4k|{
  961|  83.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 750, False: 82.6k]
  |  |  ------------------
  ------------------
  962|    750|        return eof_error::eof;
  963|    750|    }
  964|  82.6k|    return eof_error::good;
  965|  83.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|  83.4k|{
  955|  83.4k|    return is_range_eof(r.begin(), r.end());
  956|  83.4k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|  83.4k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  83.4k|    {
  948|  83.4k|        return begin == end;
  949|  83.4k|    }
  950|  83.4k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|   166k|    {
 1627|   166k|        return sv;
 1628|   166k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  83.4k|{
 3129|  83.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 83.4k, False: 0]
  ------------------
 3130|  83.4k|        auto it = read_while_classic_space(range);
 3131|  83.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  83.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 750, False: 82.6k]
  |  |  ------------------
  ------------------
 3133|    750|            return unexpected(e);
 3134|    750|        }
 3135|       |
 3136|  82.6k|        return it;
 3137|  83.4k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  83.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  83.4k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|  83.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|  83.4k|        auto buf = make_contiguous_buffer(range);
 2281|  83.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|  83.4k|        return ranges::next(range.begin(),
 2283|  83.4k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|  83.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|  83.4k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  83.4k|                  ranges::sized_range<Range>) {
 1811|  83.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  83.4k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|  83.4k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  83.4k|    {
 1614|  83.4k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  98.4k|    {
  268|  98.4k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  98.4k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  98.4k|    {
  181|  98.4k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 98.4k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  98.4k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|  98.4k|{
 1055|  98.4k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|  98.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|  98.4k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|  98.4k|        else {
 1072|  98.4k|            return r.begin().contiguous_segment();
 1073|  98.4k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|  98.4k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  98.4k|{
 2220|  98.4k|    auto it = range.begin();
 2221|   222k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 221k, False: 1.45k]
  ------------------
 2222|   221k|        const auto val =
 2223|   221k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   221k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 203k, False: 18.0k]
  |  |  ------------------
  ------------------
 2225|   203k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   203k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   203k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   203k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 97.0k, False: 106k]
  ------------------
 2229|  97.0k|                return it;
 2230|  97.0k|            }
 2231|   203k|        }
 2232|   124k|        it = val.iterator;
 2233|   124k|    }
 2234|       |
 2235|  1.45k|    return it;
 2236|  98.4k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   221k|{
 2024|   221k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   221k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   221k|    auto it = range.begin();
 2028|   221k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   221k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.0k, False: 203k]
  |  |  ------------------
  ------------------
 2031|  18.0k|        ++it;
 2032|  18.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  18.0k|        return {it, {}};
 2034|  18.0k|    }
 2035|       |
 2036|   203k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 199k, False: 4.33k]
  ------------------
 2037|   199k|        ++it;
 2038|   199k|        return {it, string_type(1, *range.begin())};
 2039|   199k|    }
 2040|       |
 2041|  4.33k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  4.33k|    return {it, string_type{range.begin(), it}};
 2043|   203k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  18.0k|{
 1289|  18.0k|    auto it = input.begin();
 1290|   228k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 228k, False: 540]
  ------------------
 1291|   228k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 17.5k, False: 210k]
  ------------------
 1292|  17.5k|            break;
 1293|  17.5k|        }
 1294|   228k|    }
 1295|  18.0k|    return it;
 1296|  18.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.33k|    {
  283|  4.33k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.33k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.33k|    {
  252|  4.33k|        constexpr iter_difference_t<I> zero{0};
  253|  4.33k|        iter_difference_t<I> counter{0};
  254|       |
  255|  13.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 9.67k, False: 4.08k]
  |  Branch (255:30): [True: 9.42k, False: 252]
  ------------------
  256|  9.42k|            ++i;
  257|  9.42k|            ++counter;
  258|  9.42k|        }
  259|       |
  260|  4.33k|        return counter;
  261|  4.33k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|   221k|    {
 2015|   221k|        return !codepoint.empty();
 2016|   221k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|  98.4k|{
 2242|  98.4k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  98.4k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|  98.4k|{
 3129|  98.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 98.4k, False: 0]
  ------------------
 3130|  98.4k|        auto it = read_while_classic_space(range);
 3131|  98.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  98.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  98.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.45k, False: 97.0k]
  |  |  ------------------
  ------------------
 3133|  1.45k|            return unexpected(e);
 3134|  1.45k|        }
 3135|       |
 3136|  97.0k|        return it;
 3137|  98.4k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  98.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|  98.4k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  98.4k|    else {
 2286|  98.4k|        auto it = range.begin();
 2287|       |
 2288|  98.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|  98.4k|            auto seg = get_contiguous_beginning(range);
 2290|  98.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|  98.4k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 0, False: 98.4k]
  ------------------
 2292|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|      0|            }
 2294|  98.4k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|  98.4k|        }
 2296|       |
 2297|  98.4k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  98.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  98.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  98.4k|            return detail::is_cp_space(cp);
 2300|  98.4k|        });
 2301|  98.4k|    }
 2302|  98.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|  98.4k|        : m_fptr([](storage fn,
  753|  98.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  98.4k|              cvref<T> obj = *get<T>(fn);
  755|  98.4k|              if constexpr (std::is_void_v<R>) {
  756|  98.4k|                  obj(static_cast<decltype(args)>(args)...);
  757|  98.4k|              }
  758|  98.4k|              else {
  759|  98.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  98.4k|              }
  761|  98.4k|          }),
  762|  98.4k|          m_storage(std::addressof(f))
  763|  98.4k|    {
  764|  98.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   203k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   203k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   203k|              else {
  759|   203k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   203k|              }
  761|   203k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   203k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   203k|        else if constexpr (std::is_object_v<T>) {
  694|   203k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   203k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   203k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   203k|            return detail::is_cp_space(cp);
 2300|   203k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  98.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  98.4k|        {
  668|  98.4k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  22.1k|    {
  108|  22.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  22.1k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  22.1k|    {
   94|  22.1k|        iter_difference_t<I> counter{0};
   95|   153k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 130k, False: 22.1k]
  ------------------
   96|   130k|            ++i;
   97|   130k|            ++counter;
   98|   130k|        }
   99|  22.1k|        return counter;
  100|  22.1k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  96.9k|{
  961|  96.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.24k, False: 95.7k]
  |  |  ------------------
  ------------------
  962|  1.24k|        return eof_error::eof;
  963|  1.24k|    }
  964|  95.7k|    return eof_error::good;
  965|  96.9k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|   274k|{
  955|   274k|    return is_range_eof(r.begin(), r.end());
  956|   274k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|   274k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   274k|    {
  948|   274k|        return begin == end;
  949|   274k|    }
  950|   274k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|   177k|{
 2024|   177k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   177k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   177k|    auto it = range.begin();
 2028|   177k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   177k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 177k, False: 0]
  ------------------
 2037|   177k|        ++it;
 2038|   177k|        return {it, string_type(1, *range.begin())};
 2039|   177k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   177k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|   274k|{
  955|   274k|    return is_range_eof(r.begin(), r.end());
  956|   274k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|   274k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   274k|    {
  948|   274k|        return begin == end;
  949|   274k|    }
  950|   274k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|   177k|    {
 2015|   177k|        return !codepoint.empty();
 2016|   177k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  96.9k|{
  961|  96.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.24k, False: 95.7k]
  |  |  ------------------
  ------------------
  962|  1.24k|        return eof_error::eof;
  963|  1.24k|    }
  964|  95.7k|    return eof_error::good;
  965|  96.9k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  96.9k|{
 3129|  96.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 96.9k, False: 0]
  ------------------
 3130|  96.9k|        auto it = read_while_classic_space(range);
 3131|  96.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  96.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.24k, False: 95.7k]
  |  |  ------------------
  ------------------
 3133|  1.24k|            return unexpected(e);
 3134|  1.24k|        }
 3135|       |
 3136|  95.7k|        return it;
 3137|  96.9k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  96.9k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  96.9k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  96.9k|    else {
 2286|  96.9k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  96.9k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  96.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  96.9k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  96.9k|            return detail::is_cp_space(cp);
 2300|  96.9k|        });
 2301|  96.9k|    }
 2302|  96.9k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|  96.9k|{
 2242|  96.9k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  96.9k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  96.9k|{
 2220|  96.9k|    auto it = range.begin();
 2221|   179k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 177k, False: 1.24k]
  ------------------
 2222|   177k|        const auto val =
 2223|   177k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   177k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 177k, False: 0]
  |  |  ------------------
  ------------------
 2225|   177k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   177k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   177k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   177k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 95.7k, False: 82.2k]
  ------------------
 2229|  95.7k|                return it;
 2230|  95.7k|            }
 2231|   177k|        }
 2232|  82.2k|        it = val.iterator;
 2233|  82.2k|    }
 2234|       |
 2235|  1.24k|    return it;
 2236|  96.9k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  96.9k|        : m_fptr([](storage fn,
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|  96.9k|              if constexpr (std::is_void_v<R>) {
  756|  96.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.9k|              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
  762|  96.9k|          m_storage(std::addressof(f))
  763|  96.9k|    {
  764|  96.9k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   177k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   177k|              else {
  759|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   177k|              }
  761|   177k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|   177k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   177k|        else if constexpr (std::is_object_v<T>) {
  694|   177k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   177k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|   177k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   177k|            return detail::is_cp_space(cp);
 2300|   177k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  96.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.9k|        {
  668|  96.9k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  96.9k|{
 2220|  96.9k|    auto it = range.begin();
 2221|   179k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 177k, False: 1.24k]
  ------------------
 2222|   177k|        const auto val =
 2223|   177k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   177k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 177k, False: 0]
  |  |  ------------------
  ------------------
 2225|   177k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   177k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   177k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   177k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 95.7k, False: 82.2k]
  ------------------
 2229|  95.7k|                return it;
 2230|  95.7k|            }
 2231|   177k|        }
 2232|  82.2k|        it = val.iterator;
 2233|  82.2k|    }
 2234|       |
 2235|  1.24k|    return it;
 2236|  96.9k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   177k|{
 2024|   177k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   177k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   177k|    auto it = range.begin();
 2028|   177k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   177k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 177k, False: 0]
  ------------------
 2037|   177k|        ++it;
 2038|   177k|        return {it, string_type(1, *range.begin())};
 2039|   177k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   177k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|   177k|    {
 2015|   177k|        return !codepoint.empty();
 2016|   177k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|  96.9k|{
 2242|  96.9k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  96.9k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|  96.9k|{
 3129|  96.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 96.9k, False: 0]
  ------------------
 3130|  96.9k|        auto it = read_while_classic_space(range);
 3131|  96.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  96.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.24k, False: 95.7k]
  |  |  ------------------
  ------------------
 3133|  1.24k|            return unexpected(e);
 3134|  1.24k|        }
 3135|       |
 3136|  95.7k|        return it;
 3137|  96.9k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  96.9k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|  96.9k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  96.9k|    else {
 2286|  96.9k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  96.9k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  96.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  96.9k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  96.9k|            return detail::is_cp_space(cp);
 2300|  96.9k|        });
 2301|  96.9k|    }
 2302|  96.9k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|  96.9k|        : m_fptr([](storage fn,
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|  96.9k|              if constexpr (std::is_void_v<R>) {
  756|  96.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.9k|              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
  762|  96.9k|          m_storage(std::addressof(f))
  763|  96.9k|    {
  764|  96.9k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   177k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   177k|              else {
  759|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   177k|              }
  761|   177k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   177k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   177k|        else if constexpr (std::is_object_v<T>) {
  694|   177k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   177k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   177k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   177k|            return detail::is_cp_space(cp);
 2300|   177k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  96.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.9k|        {
  668|  96.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 6052|  2.67k|    {
 6053|  2.67k|        if constexpr (!detail::is_type_disabled<void>) {
 6054|  2.67k|            basic_scan_parse_context<char_type> parse_ctx{
 6055|  2.67k|                source_tag<range_type>, {}};
 6056|  2.67k|            auto ctx = make_custom_ctx();
 6057|  2.67k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|  2.67k|    do {                                                            \
  |  | 3985|  2.67k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  2.67k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  2.67k|        }                                                           \
  |  | 3988|  2.67k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6058|       |
 6059|       |            if constexpr (std::is_same_v<
 6060|       |                              context_type,
 6061|      0|                              basic_contiguous_scan_context<char_type>>) {
 6062|      0|                return range.begin() + ctx.begin().position();
 6063|       |            }
 6064|       |            else {
 6065|       |                return ctx.begin();
 6066|       |            }
 6067|       |        }
 6068|       |        else {
 6069|       |            SCN_EXPECT(false);
 6070|       |            SCN_UNREACHABLE;
 6071|       |        }
 6072|  2.67k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 6034|  2.67k|    {
 6035|       |        if constexpr (std::is_same_v<
 6036|       |                          context_type,
 6037|  2.67k|                          basic_contiguous_scan_context<char_type>>) {
 6038|  2.67k|            auto it =
 6039|  2.67k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6040|  2.67k|                    std::basic_string_view<char_type>(range.data(),
 6041|  2.67k|                                                      range.size()),
 6042|  2.67k|                    0};
 6043|  2.67k|            return {it, args, loc};
 6044|       |        }
 6045|       |        else {
 6046|       |            return {range.begin(), args, loc};
 6047|       |        }
 6048|  2.67k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6052|  2.67k|    {
 6053|  2.67k|        if constexpr (!detail::is_type_disabled<void>) {
 6054|  2.67k|            basic_scan_parse_context<char_type> parse_ctx{
 6055|  2.67k|                source_tag<range_type>, {}};
 6056|  2.67k|            auto ctx = make_custom_ctx();
 6057|  2.67k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|  2.67k|    do {                                                            \
  |  | 3985|  2.67k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.67k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  2.67k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  2.67k|        }                                                           \
  |  | 3988|  2.67k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6058|       |
 6059|       |            if constexpr (std::is_same_v<
 6060|       |                              context_type,
 6061|       |                              basic_contiguous_scan_context<char_type>>) {
 6062|       |                return range.begin() + ctx.begin().position();
 6063|       |            }
 6064|      0|            else {
 6065|      0|                return ctx.begin();
 6066|      0|            }
 6067|       |        }
 6068|       |        else {
 6069|       |            SCN_EXPECT(false);
 6070|       |            SCN_UNREACHABLE;
 6071|       |        }
 6072|  2.67k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 6034|  2.67k|    {
 6035|       |        if constexpr (std::is_same_v<
 6036|       |                          context_type,
 6037|       |                          basic_contiguous_scan_context<char_type>>) {
 6038|       |            auto it =
 6039|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6040|       |                    std::basic_string_view<char_type>(range.data(),
 6041|       |                                                      range.size()),
 6042|       |                    0};
 6043|       |            return {it, args, loc};
 6044|       |        }
 6045|  2.67k|        else {
 6046|  2.67k|            return {range.begin(), args, loc};
 6047|  2.67k|        }
 6048|  2.67k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|  83.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  83.4k|    static_cast<    \
  |  | 1084|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  83.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  83.4k|          m_current(m_range.begin())
 3050|  83.4k|    {
 3051|  83.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   248k|    {
 3060|   248k|        return m_range.end();
 3061|   248k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|  82.6k|    {
 3075|  82.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  82.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  82.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 82.6k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  82.6k|        }
 3081|  82.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  82.6k|    static_cast<    \
  |  | 1084|  82.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  82.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|   166k|    {
 3065|   166k|        return ranges::subrange{begin(), end()};
 3066|   166k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6384|   181k|    {
 6385|   181k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|   181k|    do {                                                            \
  |  | 3985|   181k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 74.8k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  74.8k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  74.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  74.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  74.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  74.8k|        }                                                           \
  |  | 3988|   181k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6386|   107k|        return {ctx.begin()};
 6387|   181k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3085|  46.0k|    {
 3086|  46.0k|        SCN_EXPECT(it.position() <=
  ------------------
  |  | 1079|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3087|  46.0k|                   static_cast<std::ptrdiff_t>(m_range.size()));
 3088|  46.0k|        m_current = m_range.begin() + it.position();
 3089|  46.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3069|   250k|    {
 3070|   250k|        return m_range;
 3071|   250k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3092|  83.4k|    {
 3093|  83.4k|        return ranges::distance(m_range.begin(), begin());
 3094|  83.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 6052|  5.34k|    {
 6053|  5.34k|        if constexpr (!detail::is_type_disabled<void>) {
 6054|  5.34k|            basic_scan_parse_context<char_type> parse_ctx{
 6055|  5.34k|                source_tag<range_type>, {}};
 6056|  5.34k|            auto ctx = make_custom_ctx();
 6057|  5.34k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|  5.34k|    do {                                                            \
  |  | 3985|  5.34k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  5.34k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  5.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  5.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  5.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  5.34k|        }                                                           \
  |  | 3988|  5.34k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6058|       |
 6059|       |            if constexpr (std::is_same_v<
 6060|       |                              context_type,
 6061|      0|                              basic_contiguous_scan_context<char_type>>) {
 6062|      0|                return range.begin() + ctx.begin().position();
 6063|       |            }
 6064|       |            else {
 6065|       |                return ctx.begin();
 6066|       |            }
 6067|       |        }
 6068|       |        else {
 6069|       |            SCN_EXPECT(false);
 6070|       |            SCN_UNREACHABLE;
 6071|       |        }
 6072|  5.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 6034|  5.34k|    {
 6035|       |        if constexpr (std::is_same_v<
 6036|       |                          context_type,
 6037|  5.34k|                          basic_contiguous_scan_context<char_type>>) {
 6038|  5.34k|            auto it =
 6039|  5.34k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6040|  5.34k|                    std::basic_string_view<char_type>(range.data(),
 6041|  5.34k|                                                      range.size()),
 6042|  5.34k|                    0};
 6043|  5.34k|            return {it, args, loc};
 6044|       |        }
 6045|       |        else {
 6046|       |            return {range.begin(), args, loc};
 6047|       |        }
 6048|  5.34k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|  96.9k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  96.9k|    static_cast<    \
  |  | 1084|  96.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  96.9k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  96.9k|          m_current(m_range.begin())
 3050|  96.9k|    {
 3051|  96.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|   288k|    {
 3060|   288k|        return m_range.end();
 3061|   288k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|  95.7k|    {
 3075|  95.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  95.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  95.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  95.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  95.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 95.7k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  95.7k|        }
 3081|  95.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  95.7k|    static_cast<    \
  |  | 1084|  95.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  95.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   192k|    {
 3065|   192k|        return ranges::subrange{begin(), end()};
 3066|   192k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6384|   193k|    {
 6385|   193k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|   193k|    do {                                                            \
  |  | 3985|   193k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 149k, False: 44.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|   149k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|   149k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|   149k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|   149k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|   149k|        }                                                           \
  |  | 3988|   193k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6386|  44.2k|        return {ctx.begin()};
 6387|   193k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3085|  22.1k|    {
 3086|  22.1k|        SCN_EXPECT(it.position() <=
  ------------------
  |  | 1079|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3087|  22.1k|                   static_cast<std::ptrdiff_t>(m_range.size()));
 3088|  22.1k|        m_current = m_range.begin() + it.position();
 3089|  22.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3069|   290k|    {
 3070|   290k|        return m_range;
 3071|   290k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3092|  96.9k|    {
 3093|  96.9k|        return ranges::distance(m_range.begin(), begin());
 3094|  96.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6052|  5.34k|    {
 6053|  5.34k|        if constexpr (!detail::is_type_disabled<void>) {
 6054|  5.34k|            basic_scan_parse_context<char_type> parse_ctx{
 6055|  5.34k|                source_tag<range_type>, {}};
 6056|  5.34k|            auto ctx = make_custom_ctx();
 6057|  5.34k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3984|  5.34k|    do {                                                            \
  |  | 3985|  5.34k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 5.34k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  5.34k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  5.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  5.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  5.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  5.34k|        }                                                           \
  |  | 3988|  5.34k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6058|       |
 6059|       |            if constexpr (std::is_same_v<
 6060|       |                              context_type,
 6061|       |                              basic_contiguous_scan_context<char_type>>) {
 6062|       |                return range.begin() + ctx.begin().position();
 6063|       |            }
 6064|      0|            else {
 6065|      0|                return ctx.begin();
 6066|      0|            }
 6067|       |        }
 6068|       |        else {
 6069|       |            SCN_EXPECT(false);
 6070|       |            SCN_UNREACHABLE;
 6071|       |        }
 6072|  5.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 6034|  5.34k|    {
 6035|       |        if constexpr (std::is_same_v<
 6036|       |                          context_type,
 6037|       |                          basic_contiguous_scan_context<char_type>>) {
 6038|       |            auto it =
 6039|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6040|       |                    std::basic_string_view<char_type>(range.data(),
 6041|       |                                                      range.size()),
 6042|       |                    0};
 6043|       |            return {it, args, loc};
 6044|       |        }
 6045|  5.34k|        else {
 6046|  5.34k|            return {range.begin(), args, loc};
 6047|  5.34k|        }
 6048|  5.34k|    }

LLVMFuzzerTestOneInput:
   58|    891|{
   59|    891|    scn::fuzz::run(data, size);
   60|    891|    return 0;
   61|    891|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    891|{
   35|    891|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 891]
  |  Branch (35:35): [True: 0, False: 891]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    891|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    891|    const auto& f =
   42|    891|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    891|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    891|    do_basic_run(sv, f);
   45|       |
   46|    891|    const auto& wf = get_format_strings<wchar_t>(
   47|    891|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    891|        L"{:%a}", L"{:%b}");
   49|    891|    do_basic_run(wsv_reinterpret, wf);
   50|    891|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 891, False: 0]
  ------------------
   51|    891|        do_basic_run(wsv_transcode, wf);
   52|    891|    }
   53|    891|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    891|{
   27|    891|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    891|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    891|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    891|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    891|{
   27|    891|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    891|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    891|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    891|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.78k|{
   27|  1.78k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.78k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.78k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.78k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.78k|{
   27|  1.78k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.78k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.78k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.78k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    891|{
   53|    891|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    891|    string_buffer.resize(size);
   57|    891|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    891|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    891|    const auto wsv_reinterpret_size =
   62|    891|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 72, False: 819]
  ------------------
   63|    891|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    891|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    891|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    891|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    891|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    891|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    891|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    891|{
  123|    891|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    891|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    891|    buf.resize(sizeof...(Args));
  126|    891|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    891|    return buf;
  128|    891|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    891|{
  109|    891|    if constexpr (std::is_same_v<CharT, char>) {
  110|    891|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    891|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    891|{
  186|    891|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    891|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    891|                                   format_strings);
  189|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 7.66k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 7.66k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 7.66k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 7.66k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 7.66k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  7.66k|            it = result->begin();
  146|  7.66k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 7.66k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  16.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.4k|            auto result = scn::scan<T>(
  140|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.4k|                scn::runtime_format(f));
  142|  16.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 10.1k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  10.1k|            it = result->begin();
  146|  10.1k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  16.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.4k|            auto result = scn::scan<T>(
  155|  16.4k|                global_locale,
  156|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.4k|                scn::runtime_format(f));
  158|  16.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 10.1k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  10.1k|            it = result->begin();
  162|  10.1k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  16.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.4k|            auto result = scn::scan<T>(
  140|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.4k|                scn::runtime_format(f));
  142|  16.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 10.1k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  10.1k|            it = result->begin();
  146|  10.1k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  16.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.4k|            auto result = scn::scan<T>(
  155|  16.4k|                global_locale,
  156|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.4k|                scn::runtime_format(f));
  158|  16.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 10.1k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  10.1k|            it = result->begin();
  162|  10.1k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    891|{
  134|       |    // Regular scan
  135|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.23k, False: 891]
  ------------------
  136|  6.23k|        auto it = scn::ranges::begin(source);
  137|  16.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.4k|            auto result = scn::scan<T>(
  140|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.4k|                scn::runtime_format(f));
  142|  16.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.23k, False: 10.1k]
  ------------------
  143|  6.23k|                break;
  144|  6.23k|            }
  145|  10.1k|            it = result->begin();
  146|  10.1k|        }
  147|  6.23k|    }
  148|       |
  149|       |    // scan localized
  150|  6.23k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.23k, False: 891]
  ------------------
  151|  6.23k|        auto it = scn::ranges::begin(source);
  152|  16.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.4k|            auto result = scn::scan<T>(
  155|  16.4k|                global_locale,
  156|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.4k|                scn::runtime_format(f));
  158|  16.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.23k, False: 10.1k]
  ------------------
  159|  6.23k|                break;
  160|  6.23k|            }
  161|  10.1k|            it = result->begin();
  162|  10.1k|        }
  163|  6.23k|    }
  164|       |
  165|       |    // scan_value
  166|    891|    {
  167|    891|        auto it = scn::ranges::begin(source);
  168|    891|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    891|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|    891|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    891|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    891|            auto result = scn::scan_value<T>(
  171|    891|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    891|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 891, False: 0]
  ------------------
  173|    891|                break;
  174|    891|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    891|    }
  178|    891|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    891|{
   91|    891|    using char_type = ranges::range_value_t<Source>;
   92|    891|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    891|    deque.clear();
   94|    891|    std::copy(ranges::begin(source), ranges::end(source),
   95|    891|              std::back_inserter(deque));
   96|    891|    return deque;
   97|    891|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    891|{
   80|    891|    if constexpr (std::is_same_v<CharT, char>) {
   81|    891|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    891|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    891|{
  123|    891|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    891|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    891|    buf.resize(sizeof...(Args));
  126|    891|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    891|    return buf;
  128|    891|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    891|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    891|    else {
  113|    891|        return wformat_string_view_buffer;
  114|    891|    }
  115|    891|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.78k|{
  186|  1.78k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.78k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.78k|                                   format_strings);
  189|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.78k|{
  134|       |    // Regular scan
  135|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 12.4k, False: 1.78k]
  ------------------
  136|  12.4k|        auto it = scn::ranges::begin(source);
  137|  16.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.1k|            auto result = scn::scan<T>(
  140|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.1k|                scn::runtime_format(f));
  142|  16.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 12.4k, False: 3.69k]
  ------------------
  143|  12.4k|                break;
  144|  12.4k|            }
  145|  3.69k|            it = result->begin();
  146|  3.69k|        }
  147|  12.4k|    }
  148|       |
  149|       |    // scan localized
  150|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 12.4k, False: 1.78k]
  ------------------
  151|  12.4k|        auto it = scn::ranges::begin(source);
  152|  16.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.1k|            auto result = scn::scan<T>(
  155|  16.1k|                global_locale,
  156|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.1k|                scn::runtime_format(f));
  158|  16.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 12.4k, False: 3.69k]
  ------------------
  159|  12.4k|                break;
  160|  12.4k|            }
  161|  3.69k|            it = result->begin();
  162|  3.69k|        }
  163|  12.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.78k|    {
  167|  1.78k|        auto it = scn::ranges::begin(source);
  168|  1.78k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.78k|            auto result = scn::scan_value<T>(
  171|  1.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.78k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.78k, False: 0]
  ------------------
  173|  1.78k|                break;
  174|  1.78k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.78k|    }
  178|  1.78k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.78k|{
   91|  1.78k|    using char_type = ranges::range_value_t<Source>;
   92|  1.78k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.78k|    deque.clear();
   94|  1.78k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.78k|              std::back_inserter(deque));
   96|  1.78k|    return deque;
   97|  1.78k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.78k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.78k|    else {
   84|  1.78k|        return wnoncontiguous_buffer;
   85|  1.78k|    }
   86|  1.78k|}

