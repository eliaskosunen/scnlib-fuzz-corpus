_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  54.9k|    {
 1523|  54.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.9k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.9k|{
 1494|  54.9k|    auto it = pctx.begin();
 1495|  54.9k|    auto end = pctx.end();
 1496|  54.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.55k, False: 53.3k]
  |  Branch (1496:22): [True: 0, False: 53.3k]
  ------------------
 1497|  1.55k|        pctx.on_error(
 1498|  1.55k|            "Format string without specifiers is not valid for this type");
 1499|  1.55k|        return it;
 1500|  1.55k|    }
 1501|       |
 1502|  53.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  53.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  53.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 53.3k, False: 0]
  ------------------
 1505|  53.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  53.3k|    }
 1507|  53.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 53.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  53.3k|    return end;
 1512|  53.3k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   650k|        : localized(0),
  743|   650k|          subsec_set(0),
  744|   650k|          sec_set(0),
  745|   650k|          min_set(0),
  746|   650k|          hour24_set(0),
  747|   650k|          hour12_set(0),
  748|   650k|          mday_set(0),
  749|   650k|          mon_set(0),
  750|   650k|          full_year_set(0),
  751|   650k|          century_set(0),
  752|   650k|          short_year_set(0),
  753|   650k|          wday_set(0),
  754|   650k|          yday_set(0),
  755|   650k|          tzoff_set(0),
  756|   650k|          tzname_set(0),
  757|   650k|          am_pm_set(0),
  758|   650k|          epoch_ticks_set(0),
  759|   650k|          duration_ticks_set(0),
  760|   650k|          duration_suffix_set(0),
  761|   650k|          is_pm(0)
  762|   650k|    {
  763|   650k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  53.3k|{
  377|  53.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 53.3k]
  |  Branch (377:25): [True: 0, False: 53.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  53.3k|    auto p = begin;
  383|  53.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 53.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  53.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 53.3k]
  |  Branch (392:21): [True: 0, False: 53.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   140k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 140k, False: 0]
  ------------------
  399|   140k|        auto ch = *p;
  400|   140k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 53.3k, False: 87.4k]
  ------------------
  401|  53.3k|            break;
  402|  53.3k|        }
  403|  87.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.5k, False: 71.9k]
  ------------------
  404|  15.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.5k]
  |  Branch (404:32): [True: 15.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.5k|            const auto cp_len =
  412|  15.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.5k|            ++p;
  439|  15.5k|            continue;
  440|  15.5k|        }
  441|  71.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.5k, False: 56.4k]
  ------------------
  442|  15.5k|            handler.on_text(begin, p);
  443|  15.5k|        }
  444|  71.9k|        ++p;  // Consume '%'
  445|  71.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 71.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  71.9k|        ch = *p;
  451|  71.9k|        ++p;
  452|       |
  453|  71.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 71.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 71.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 71.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.10k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.10k, False: 68.8k]
  ------------------
  463|  3.10k|                handler.on_full_year();
  464|  3.10k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 71.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 71.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 71.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 71.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 65.6k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 71.9k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 71.9k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  3.10k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.10k, False: 68.8k]
  ------------------
  484|  3.10k|                handler.on_dec_month();
  485|  3.10k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 71.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 71.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 71.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 71.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.10k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.10k, False: 68.8k]
  ------------------
  502|  3.10k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 71.9k]
  ------------------
  503|  3.10k|                handler.on_day_of_month();
  504|  3.10k|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 68.7k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 71.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 71.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 71.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.10k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.10k, False: 68.8k]
  ------------------
  518|  3.10k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 71.9k]
  ------------------
  519|  3.10k|                handler.on_24_hour();
  520|  3.10k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 71.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 71.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.10k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.10k, False: 68.8k]
  ------------------
  527|  3.10k|                handler.on_minute();
  528|  3.10k|                break;
  529|       |            // Second
  530|  3.10k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.10k, False: 68.8k]
  ------------------
  531|  3.10k|                handler.on_second();
  532|  3.10k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 71.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.10k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.10k, False: 68.8k]
  ------------------
  563|  3.10k|                handler.on_tz_offset();
  564|  3.10k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 71.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 71.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 71.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 71.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.23k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.23k, False: 64.7k]
  ------------------
  579|  7.23k|                handler.on_us_date();
  580|  7.23k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 68.6k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 71.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.0k, False: 46.9k]
  ------------------
  588|  25.0k|                handler.on_24_hour_time();
  589|  25.0k|                break;
  590|  5.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.13k, False: 66.8k]
  ------------------
  591|  5.13k|                handler.on_iso_time();
  592|  5.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 71.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 71.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 71.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 71.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 71.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 71.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 71.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 71.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  71.9k|        }
  704|  71.9k|        begin = p;
  705|       |
  706|  71.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 71.9k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  71.9k|    }
  710|  53.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 53.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  53.3k|    handler.verify();
  714|  53.3k|    return p;
  715|  53.3k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  15.5k|    {
 1177|  15.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  18.8k|    {
 1189|  18.8k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.8k|        st.set_full_year(*this);
 1193|  18.8k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  18.8k|    {                                                                \
  769|  18.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.8k|        field##_set = 1;                                             \
  774|  18.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  13.4k|    {
 1196|  13.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  13.4k|        st.set_short_year(*this);
 1200|  13.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  12.6k|    {
 1232|  12.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.2k|    {
 1238|  32.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.2k|        st.set_mon(*this);
 1242|  32.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.2k|    {
 1266|  32.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.2k|        st.set_mday(*this);
 1270|  32.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  9.44k|    {
 1274|  9.44k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.44k|        st.set_wday(*this);
 1278|  9.44k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.44k|    {                                                                \
  769|  9.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.44k|        field##_set = 1;                                             \
  774|  9.44k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  63.9k|    {
 1296|  63.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.9k|        st.set_hour24(*this);
 1300|  63.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  63.9k|    {
 1310|  63.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.9k|        st.set_min(*this);
 1314|  63.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  20.7k|    {
 1317|  20.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.7k|        st.set_sec(*this);
 1321|  20.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.7k|    {                                                                \
  769|  20.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.7k|        field##_set = 1;                                             \
  774|  20.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.30k|    {
 1336|  9.30k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.30k|        st.set_tzoff(*this);
 1340|  9.30k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.30k|    {                                                                \
  769|  9.30k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.30k|        field##_set = 1;                                             \
  774|  9.30k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  13.4k|    {
 1369|  13.4k|        on_dec_month();
 1370|  13.4k|        on_day_of_month();
 1371|  13.4k|        on_short_year();
 1372|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  9.52k|    {
 1375|  9.52k|        on_full_year();
 1376|  9.52k|        on_dec_month();
 1377|  9.52k|        on_day_of_month();
 1378|  9.52k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  43.2k|    {
 1387|  43.2k|        on_24_hour();
 1388|  43.2k|        on_minute();
 1389|  43.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  11.4k|    {
 1392|  11.4k|        on_24_hour();
 1393|  11.4k|        on_minute();
 1394|  11.4k|        on_second();
 1395|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   109k|    {
 1419|   109k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   109k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   109k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   109k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   109k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   109k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   109k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   109k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   109k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   109k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   109k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   109k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   109k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   109k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   109k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   109k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   109k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   109k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   109k|        st.verify(*this);
 1463|   109k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   109k|    {
  800|   109k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.9k, False: 45.0k]
  |  Branch (800:27): [True: 0, False: 63.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   109k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 109k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   109k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.8k, False: 90.2k]
  |  Branch (818:31): [True: 0, False: 18.8k]
  |  Branch (818:46): [True: 0, False: 18.8k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   109k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.30k, False: 99.7k]
  |  Branch (824:26): [True: 0, False: 9.30k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   109k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.44k, False: 99.5k]
  |  Branch (829:26): [True: 32.2k, False: 67.2k]
  |  Branch (829:38): [True: 0, False: 67.2k]
  ------------------
  830|   109k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   109k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   273k|    {
 1467|   273k|        return err;
 1468|   273k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  53.3k|    {
 1530|  53.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  53.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  54.9k|    {
 1523|  54.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.9k|{
 1494|  54.9k|    auto it = pctx.begin();
 1495|  54.9k|    auto end = pctx.end();
 1496|  54.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.55k, False: 53.3k]
  |  Branch (1496:22): [True: 0, False: 53.3k]
  ------------------
 1497|  1.55k|        pctx.on_error(
 1498|  1.55k|            "Format string without specifiers is not valid for this type");
 1499|  1.55k|        return it;
 1500|  1.55k|    }
 1501|       |
 1502|  53.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  53.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  53.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 53.3k, False: 0]
  ------------------
 1505|  53.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  53.3k|    }
 1507|  53.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 53.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  53.3k|    return end;
 1512|  53.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  53.3k|{
  377|  53.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 53.3k]
  |  Branch (377:25): [True: 0, False: 53.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  53.3k|    auto p = begin;
  383|  53.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 53.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  53.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 53.3k]
  |  Branch (392:21): [True: 0, False: 53.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   140k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 140k, False: 0]
  ------------------
  399|   140k|        auto ch = *p;
  400|   140k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 53.3k, False: 87.4k]
  ------------------
  401|  53.3k|            break;
  402|  53.3k|        }
  403|  87.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.5k, False: 71.9k]
  ------------------
  404|  15.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.5k]
  |  Branch (404:32): [True: 15.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.5k|            const auto cp_len =
  412|  15.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.5k|            ++p;
  439|  15.5k|            continue;
  440|  15.5k|        }
  441|  71.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.5k, False: 56.4k]
  ------------------
  442|  15.5k|            handler.on_text(begin, p);
  443|  15.5k|        }
  444|  71.9k|        ++p;  // Consume '%'
  445|  71.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 71.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  71.9k|        ch = *p;
  451|  71.9k|        ++p;
  452|       |
  453|  71.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 71.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 71.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 71.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.10k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.10k, False: 68.8k]
  ------------------
  463|  3.10k|                handler.on_full_year();
  464|  3.10k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 71.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 71.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 71.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 71.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 65.6k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 71.9k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 71.9k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  3.10k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.10k, False: 68.8k]
  ------------------
  484|  3.10k|                handler.on_dec_month();
  485|  3.10k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 71.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 71.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 71.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 71.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.10k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.10k, False: 68.8k]
  ------------------
  502|  3.10k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 71.9k]
  ------------------
  503|  3.10k|                handler.on_day_of_month();
  504|  3.10k|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 68.7k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 71.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 71.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 71.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.10k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.10k, False: 68.8k]
  ------------------
  518|  3.10k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 71.9k]
  ------------------
  519|  3.10k|                handler.on_24_hour();
  520|  3.10k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 71.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 71.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.10k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.10k, False: 68.8k]
  ------------------
  527|  3.10k|                handler.on_minute();
  528|  3.10k|                break;
  529|       |            // Second
  530|  3.10k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.10k, False: 68.8k]
  ------------------
  531|  3.10k|                handler.on_second();
  532|  3.10k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 71.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.10k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.10k, False: 68.8k]
  ------------------
  563|  3.10k|                handler.on_tz_offset();
  564|  3.10k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 71.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 71.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 71.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 71.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.23k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.23k, False: 64.7k]
  ------------------
  579|  7.23k|                handler.on_us_date();
  580|  7.23k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 68.6k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 71.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.0k, False: 46.9k]
  ------------------
  588|  25.0k|                handler.on_24_hour_time();
  589|  25.0k|                break;
  590|  5.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.13k, False: 66.8k]
  ------------------
  591|  5.13k|                handler.on_iso_time();
  592|  5.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 71.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 71.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 71.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 71.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 71.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 71.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 71.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 71.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  71.9k|        }
  704|  71.9k|        begin = p;
  705|       |
  706|  71.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 71.9k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  71.9k|    }
  710|  53.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 53.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  53.3k|    handler.verify();
  714|  53.3k|    return p;
  715|  53.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  15.5k|    {
 1177|  15.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.8k|    {
 1189|  18.8k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.8k|        st.set_full_year(*this);
 1193|  18.8k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  18.8k|    {                                                                \
  769|  18.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.8k|        field##_set = 1;                                             \
  774|  18.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  13.4k|    {
 1196|  13.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  13.4k|        st.set_short_year(*this);
 1200|  13.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  12.6k|    {
 1232|  12.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.2k|    {
 1238|  32.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.2k|        st.set_mon(*this);
 1242|  32.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.2k|    {
 1266|  32.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.2k|        st.set_mday(*this);
 1270|  32.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  9.44k|    {
 1274|  9.44k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.44k|        st.set_wday(*this);
 1278|  9.44k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.44k|    {                                                                \
  769|  9.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.44k|        field##_set = 1;                                             \
  774|  9.44k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.9k|    {
 1296|  63.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.9k|        st.set_hour24(*this);
 1300|  63.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  63.9k|    {
 1310|  63.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.9k|        st.set_min(*this);
 1314|  63.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  20.7k|    {
 1317|  20.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.7k|        st.set_sec(*this);
 1321|  20.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.7k|    {                                                                \
  769|  20.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.7k|        field##_set = 1;                                             \
  774|  20.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.30k|    {
 1336|  9.30k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.30k|        st.set_tzoff(*this);
 1340|  9.30k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.30k|    {                                                                \
  769|  9.30k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.30k|        field##_set = 1;                                             \
  774|  9.30k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  13.4k|    {
 1369|  13.4k|        on_dec_month();
 1370|  13.4k|        on_day_of_month();
 1371|  13.4k|        on_short_year();
 1372|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  9.52k|    {
 1375|  9.52k|        on_full_year();
 1376|  9.52k|        on_dec_month();
 1377|  9.52k|        on_day_of_month();
 1378|  9.52k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  43.2k|    {
 1387|  43.2k|        on_24_hour();
 1388|  43.2k|        on_minute();
 1389|  43.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  11.4k|    {
 1392|  11.4k|        on_24_hour();
 1393|  11.4k|        on_minute();
 1394|  11.4k|        on_second();
 1395|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   109k|    {
 1419|   109k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   109k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   109k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   109k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   109k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   109k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   109k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   109k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   109k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   109k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   109k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   109k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   109k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   109k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   109k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   109k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   109k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   109k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   109k|        st.verify(*this);
 1463|   109k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   109k|    {
  800|   109k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.9k, False: 45.0k]
  |  Branch (800:27): [True: 0, False: 63.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   109k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 109k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   109k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.8k, False: 90.2k]
  |  Branch (818:31): [True: 0, False: 18.8k]
  |  Branch (818:46): [True: 0, False: 18.8k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   109k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.30k, False: 99.7k]
  |  Branch (824:26): [True: 0, False: 9.30k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   109k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.44k, False: 99.5k]
  |  Branch (829:26): [True: 32.2k, False: 67.2k]
  |  Branch (829:38): [True: 0, False: 67.2k]
  ------------------
  830|   109k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   109k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   273k|    {
 1467|   273k|        return err;
 1468|   273k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  53.3k|    {
 1530|  53.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  53.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  54.9k|    {
 1523|  54.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  54.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  54.9k|{
 1494|  54.9k|    auto it = pctx.begin();
 1495|  54.9k|    auto end = pctx.end();
 1496|  54.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.55k, False: 53.3k]
  |  Branch (1496:22): [True: 0, False: 53.3k]
  ------------------
 1497|  1.55k|        pctx.on_error(
 1498|  1.55k|            "Format string without specifiers is not valid for this type");
 1499|  1.55k|        return it;
 1500|  1.55k|    }
 1501|       |
 1502|  53.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  53.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  53.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 53.3k, False: 0]
  ------------------
 1505|  53.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  53.3k|    }
 1507|  53.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 53.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  53.3k|    return end;
 1512|  53.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  53.3k|{
  377|  53.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 53.3k]
  |  Branch (377:25): [True: 0, False: 53.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  53.3k|    auto p = begin;
  383|  53.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 53.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  53.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 53.3k]
  |  Branch (392:21): [True: 0, False: 53.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   140k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 140k, False: 0]
  ------------------
  399|   140k|        auto ch = *p;
  400|   140k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 53.3k, False: 87.4k]
  ------------------
  401|  53.3k|            break;
  402|  53.3k|        }
  403|  87.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 15.5k, False: 71.9k]
  ------------------
  404|  15.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 15.5k]
  |  Branch (404:32): [True: 15.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 15.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  15.5k|            const auto cp_len =
  412|  15.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  15.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 15.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  15.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 15.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  15.5k|            ++p;
  439|  15.5k|            continue;
  440|  15.5k|        }
  441|  71.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 15.5k, False: 56.4k]
  ------------------
  442|  15.5k|            handler.on_text(begin, p);
  443|  15.5k|        }
  444|  71.9k|        ++p;  // Consume '%'
  445|  71.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 71.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  71.9k|        ch = *p;
  451|  71.9k|        ++p;
  452|       |
  453|  71.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 71.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 71.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 71.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.10k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.10k, False: 68.8k]
  ------------------
  463|  3.10k|                handler.on_full_year();
  464|  3.10k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 71.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 71.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 71.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 71.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 65.6k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 71.9k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 71.9k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  3.10k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.10k, False: 68.8k]
  ------------------
  484|  3.10k|                handler.on_dec_month();
  485|  3.10k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 71.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 71.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 71.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 71.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.10k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.10k, False: 68.8k]
  ------------------
  502|  3.10k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 71.9k]
  ------------------
  503|  3.10k|                handler.on_day_of_month();
  504|  3.10k|                break;
  505|       |            // Day of week
  506|  3.24k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.24k, False: 68.7k]
  ------------------
  507|  3.24k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 71.9k]
  ------------------
  508|  3.24k|                handler.on_weekday_name();
  509|  3.24k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 71.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 71.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.10k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.10k, False: 68.8k]
  ------------------
  518|  3.10k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 71.9k]
  ------------------
  519|  3.10k|                handler.on_24_hour();
  520|  3.10k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 71.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 71.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.10k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.10k, False: 68.8k]
  ------------------
  527|  3.10k|                handler.on_minute();
  528|  3.10k|                break;
  529|       |            // Second
  530|  3.10k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.10k, False: 68.8k]
  ------------------
  531|  3.10k|                handler.on_second();
  532|  3.10k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 71.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.10k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.10k, False: 68.8k]
  ------------------
  563|  3.10k|                handler.on_tz_offset();
  564|  3.10k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 71.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 71.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 71.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 71.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.23k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.23k, False: 64.7k]
  ------------------
  579|  7.23k|                handler.on_us_date();
  580|  7.23k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 68.6k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 71.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  25.0k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 25.0k, False: 46.9k]
  ------------------
  588|  25.0k|                handler.on_24_hour_time();
  589|  25.0k|                break;
  590|  5.13k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.13k, False: 66.8k]
  ------------------
  591|  5.13k|                handler.on_iso_time();
  592|  5.13k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 71.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 71.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 71.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 71.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 71.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 71.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 71.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 71.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  71.9k|        }
  704|  71.9k|        begin = p;
  705|       |
  706|  71.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 71.9k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  71.9k|    }
  710|  53.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 53.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  53.3k|    handler.verify();
  714|  53.3k|    return p;
  715|  53.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  15.5k|    {
 1177|  15.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.8k|    {
 1189|  18.8k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.8k|        st.set_full_year(*this);
 1193|  18.8k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  18.8k|    {                                                                \
  769|  18.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.8k|        field##_set = 1;                                             \
  774|  18.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  13.4k|    {
 1196|  13.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  13.4k|        st.set_short_year(*this);
 1200|  13.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  13.4k|    {                                                                \
  769|  13.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.4k|        field##_set = 1;                                             \
  774|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  12.6k|    {
 1232|  12.6k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  12.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.2k|    {
 1238|  32.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.2k|        st.set_mon(*this);
 1242|  32.2k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.2k|    {
 1266|  32.2k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.2k|        st.set_mday(*this);
 1270|  32.2k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  32.2k|    {                                                                \
  769|  32.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.2k|        field##_set = 1;                                             \
  774|  32.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  9.44k|    {
 1274|  9.44k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  9.44k|        st.set_wday(*this);
 1278|  9.44k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.44k|    {                                                                \
  769|  9.44k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.44k|        field##_set = 1;                                             \
  774|  9.44k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.9k|    {
 1296|  63.9k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.9k|        st.set_hour24(*this);
 1300|  63.9k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  63.9k|    {
 1310|  63.9k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.9k|        st.set_min(*this);
 1314|  63.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.9k|    {                                                                \
  769|  63.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.9k|        field##_set = 1;                                             \
  774|  63.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  20.7k|    {
 1317|  20.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  20.7k|        st.set_sec(*this);
 1321|  20.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.7k|    {                                                                \
  769|  20.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.7k|        field##_set = 1;                                             \
  774|  20.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.30k|    {
 1336|  9.30k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.30k|        st.set_tzoff(*this);
 1340|  9.30k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.30k|    {                                                                \
  769|  9.30k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.30k|        field##_set = 1;                                             \
  774|  9.30k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  13.4k|    {
 1369|  13.4k|        on_dec_month();
 1370|  13.4k|        on_day_of_month();
 1371|  13.4k|        on_short_year();
 1372|  13.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  9.52k|    {
 1375|  9.52k|        on_full_year();
 1376|  9.52k|        on_dec_month();
 1377|  9.52k|        on_day_of_month();
 1378|  9.52k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  43.2k|    {
 1387|  43.2k|        on_24_hour();
 1388|  43.2k|        on_minute();
 1389|  43.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  11.4k|    {
 1392|  11.4k|        on_24_hour();
 1393|  11.4k|        on_minute();
 1394|  11.4k|        on_second();
 1395|  11.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   109k|    {
 1419|   109k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   109k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   109k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   109k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   109k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   109k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   109k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   109k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   109k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   109k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   109k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   109k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   109k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   109k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   109k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   109k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   109k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   109k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   109k|        st.verify(*this);
 1463|   109k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   109k|    {
  800|   109k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.9k, False: 45.0k]
  |  Branch (800:27): [True: 0, False: 63.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   109k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 109k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   109k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.8k, False: 90.2k]
  |  Branch (818:31): [True: 0, False: 18.8k]
  |  Branch (818:46): [True: 0, False: 18.8k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   109k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.30k, False: 99.7k]
  |  Branch (824:26): [True: 0, False: 9.30k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   109k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 9.44k, False: 99.5k]
  |  Branch (829:26): [True: 32.2k, False: 67.2k]
  |  Branch (829:38): [True: 0, False: 67.2k]
  ------------------
  830|   109k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.7k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   109k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   273k|    {
 1467|   273k|        return err;
 1468|   273k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  53.3k|    {
 1530|  53.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  53.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  58.7k|    {
 1523|  58.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.7k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.7k|{
 1494|  58.7k|    auto it = pctx.begin();
 1495|  58.7k|    auto end = pctx.end();
 1496|  58.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.10k, False: 55.6k]
  |  Branch (1496:22): [True: 0, False: 55.6k]
  ------------------
 1497|  3.10k|        pctx.on_error(
 1498|  3.10k|            "Format string without specifiers is not valid for this type");
 1499|  3.10k|        return it;
 1500|  3.10k|    }
 1501|       |
 1502|  55.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.6k, False: 0]
  ------------------
 1505|  55.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.6k|    }
 1507|  55.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.6k|    return end;
 1512|  55.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  55.6k|{
  377|  55.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.6k]
  |  Branch (377:25): [True: 0, False: 55.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.6k|    auto p = begin;
  383|  55.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.6k]
  |  Branch (392:21): [True: 0, False: 55.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   179k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 179k, False: 0]
  ------------------
  399|   179k|        auto ch = *p;
  400|   179k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.6k, False: 123k]
  ------------------
  401|  55.6k|            break;
  402|  55.6k|        }
  403|   123k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 31.0k, False: 92.8k]
  ------------------
  404|  31.0k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 31.0k]
  |  Branch (404:32): [True: 31.0k, False: 0]
  |  Branch (404:46): [True: 0, False: 31.0k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  31.0k|            const auto cp_len =
  412|  31.0k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  31.0k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 31.0k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  31.0k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 31.0k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  31.0k|            ++p;
  439|  31.0k|            continue;
  440|  31.0k|        }
  441|  92.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 31.0k, False: 61.8k]
  ------------------
  442|  31.0k|            handler.on_text(begin, p);
  443|  31.0k|        }
  444|  92.8k|        ++p;  // Consume '%'
  445|  92.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 92.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  92.8k|        ch = *p;
  451|  92.8k|        ++p;
  452|       |
  453|  92.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 92.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 92.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 92.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.20k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.20k, False: 86.6k]
  ------------------
  463|  6.20k|                handler.on_full_year();
  464|  6.20k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 92.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 92.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 92.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 92.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 86.4k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 92.8k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 92.8k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  6.20k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.20k, False: 86.6k]
  ------------------
  484|  6.20k|                handler.on_dec_month();
  485|  6.20k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 92.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 92.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 92.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 92.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.20k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.20k, False: 86.6k]
  ------------------
  502|  6.20k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 92.8k]
  ------------------
  503|  6.20k|                handler.on_day_of_month();
  504|  6.20k|                break;
  505|       |            // Day of week
  506|  6.20k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.20k, False: 86.6k]
  ------------------
  507|  6.20k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 92.8k]
  ------------------
  508|  6.20k|                handler.on_weekday_name();
  509|  6.20k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 92.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 92.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.20k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.20k, False: 86.6k]
  ------------------
  518|  6.20k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 92.8k]
  ------------------
  519|  6.20k|                handler.on_24_hour();
  520|  6.20k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 92.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 92.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.20k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.20k, False: 86.6k]
  ------------------
  527|  6.20k|                handler.on_minute();
  528|  6.20k|                break;
  529|       |            // Second
  530|  6.20k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.20k, False: 86.6k]
  ------------------
  531|  6.20k|                handler.on_second();
  532|  6.20k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 92.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.20k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.20k, False: 86.6k]
  ------------------
  563|  6.20k|                handler.on_tz_offset();
  564|  6.20k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 92.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 92.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 92.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 92.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.21k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.21k, False: 86.6k]
  ------------------
  579|  6.21k|                handler.on_us_date();
  580|  6.21k|                break;
  581|  6.20k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.20k, False: 86.6k]
  ------------------
  582|  6.20k|                handler.on_iso_date();
  583|  6.20k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 92.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  18.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 18.1k, False: 74.6k]
  ------------------
  588|  18.1k|                handler.on_24_hour_time();
  589|  18.1k|                break;
  590|  6.28k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.28k, False: 86.5k]
  ------------------
  591|  6.28k|                handler.on_iso_time();
  592|  6.28k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 92.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 92.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 92.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 92.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 92.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 92.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 92.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 92.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  92.8k|        }
  704|  92.8k|        begin = p;
  705|       |
  706|  92.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 92.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  92.8k|    }
  710|  55.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.6k|    handler.verify();
  714|  55.6k|    return p;
  715|  55.6k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  31.0k|    {
 1177|  31.0k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.6k|    {
 1530|  55.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  58.7k|    {
 1523|  58.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.7k|{
 1494|  58.7k|    auto it = pctx.begin();
 1495|  58.7k|    auto end = pctx.end();
 1496|  58.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.10k, False: 55.6k]
  |  Branch (1496:22): [True: 0, False: 55.6k]
  ------------------
 1497|  3.10k|        pctx.on_error(
 1498|  3.10k|            "Format string without specifiers is not valid for this type");
 1499|  3.10k|        return it;
 1500|  3.10k|    }
 1501|       |
 1502|  55.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.6k, False: 0]
  ------------------
 1505|  55.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.6k|    }
 1507|  55.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.6k|    return end;
 1512|  55.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  55.6k|{
  377|  55.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.6k]
  |  Branch (377:25): [True: 0, False: 55.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.6k|    auto p = begin;
  383|  55.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.6k]
  |  Branch (392:21): [True: 0, False: 55.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   179k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 179k, False: 0]
  ------------------
  399|   179k|        auto ch = *p;
  400|   179k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.6k, False: 123k]
  ------------------
  401|  55.6k|            break;
  402|  55.6k|        }
  403|   123k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 31.0k, False: 92.8k]
  ------------------
  404|  31.0k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 31.0k]
  |  Branch (404:32): [True: 31.0k, False: 0]
  |  Branch (404:46): [True: 0, False: 31.0k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  31.0k|            const auto cp_len =
  412|  31.0k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  31.0k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 31.0k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  31.0k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 31.0k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  31.0k|            ++p;
  439|  31.0k|            continue;
  440|  31.0k|        }
  441|  92.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 31.0k, False: 61.8k]
  ------------------
  442|  31.0k|            handler.on_text(begin, p);
  443|  31.0k|        }
  444|  92.8k|        ++p;  // Consume '%'
  445|  92.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 92.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  92.8k|        ch = *p;
  451|  92.8k|        ++p;
  452|       |
  453|  92.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 92.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 92.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 92.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.20k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.20k, False: 86.6k]
  ------------------
  463|  6.20k|                handler.on_full_year();
  464|  6.20k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 92.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 92.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 92.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 92.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 86.4k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 92.8k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 92.8k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  6.20k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.20k, False: 86.6k]
  ------------------
  484|  6.20k|                handler.on_dec_month();
  485|  6.20k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 92.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 92.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 92.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 92.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.20k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.20k, False: 86.6k]
  ------------------
  502|  6.20k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 92.8k]
  ------------------
  503|  6.20k|                handler.on_day_of_month();
  504|  6.20k|                break;
  505|       |            // Day of week
  506|  6.20k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.20k, False: 86.6k]
  ------------------
  507|  6.20k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 92.8k]
  ------------------
  508|  6.20k|                handler.on_weekday_name();
  509|  6.20k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 92.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 92.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.20k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.20k, False: 86.6k]
  ------------------
  518|  6.20k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 92.8k]
  ------------------
  519|  6.20k|                handler.on_24_hour();
  520|  6.20k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 92.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 92.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.20k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.20k, False: 86.6k]
  ------------------
  527|  6.20k|                handler.on_minute();
  528|  6.20k|                break;
  529|       |            // Second
  530|  6.20k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.20k, False: 86.6k]
  ------------------
  531|  6.20k|                handler.on_second();
  532|  6.20k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 92.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.20k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.20k, False: 86.6k]
  ------------------
  563|  6.20k|                handler.on_tz_offset();
  564|  6.20k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 92.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 92.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 92.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 92.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.21k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.21k, False: 86.6k]
  ------------------
  579|  6.21k|                handler.on_us_date();
  580|  6.21k|                break;
  581|  6.20k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.20k, False: 86.6k]
  ------------------
  582|  6.20k|                handler.on_iso_date();
  583|  6.20k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 92.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  18.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 18.1k, False: 74.6k]
  ------------------
  588|  18.1k|                handler.on_24_hour_time();
  589|  18.1k|                break;
  590|  6.28k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.28k, False: 86.5k]
  ------------------
  591|  6.28k|                handler.on_iso_time();
  592|  6.28k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 92.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 92.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 92.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 92.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 92.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 92.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 92.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 92.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  92.8k|        }
  704|  92.8k|        begin = p;
  705|       |
  706|  92.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 92.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  92.8k|    }
  710|  55.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.6k|    handler.verify();
  714|  55.6k|    return p;
  715|  55.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  31.0k|    {
 1177|  31.0k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.6k|    {
 1530|  55.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  58.7k|    {
 1523|  58.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.7k|{
 1494|  58.7k|    auto it = pctx.begin();
 1495|  58.7k|    auto end = pctx.end();
 1496|  58.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.10k, False: 55.6k]
  |  Branch (1496:22): [True: 0, False: 55.6k]
  ------------------
 1497|  3.10k|        pctx.on_error(
 1498|  3.10k|            "Format string without specifiers is not valid for this type");
 1499|  3.10k|        return it;
 1500|  3.10k|    }
 1501|       |
 1502|  55.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.6k, False: 0]
  ------------------
 1505|  55.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.6k|    }
 1507|  55.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.6k|    return end;
 1512|  55.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  55.6k|{
  377|  55.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.6k]
  |  Branch (377:25): [True: 0, False: 55.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.6k|    auto p = begin;
  383|  55.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.6k]
  |  Branch (392:21): [True: 0, False: 55.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   179k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 179k, False: 0]
  ------------------
  399|   179k|        auto ch = *p;
  400|   179k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.6k, False: 123k]
  ------------------
  401|  55.6k|            break;
  402|  55.6k|        }
  403|   123k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 31.0k, False: 92.8k]
  ------------------
  404|  31.0k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 31.0k]
  |  Branch (404:32): [True: 31.0k, False: 0]
  |  Branch (404:46): [True: 0, False: 31.0k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  31.0k|            const auto cp_len =
  412|  31.0k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  31.0k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 31.0k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  31.0k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 31.0k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  31.0k|            ++p;
  439|  31.0k|            continue;
  440|  31.0k|        }
  441|  92.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 31.0k, False: 61.8k]
  ------------------
  442|  31.0k|            handler.on_text(begin, p);
  443|  31.0k|        }
  444|  92.8k|        ++p;  // Consume '%'
  445|  92.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 92.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  92.8k|        ch = *p;
  451|  92.8k|        ++p;
  452|       |
  453|  92.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 92.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 92.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 92.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.20k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.20k, False: 86.6k]
  ------------------
  463|  6.20k|                handler.on_full_year();
  464|  6.20k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 92.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 92.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 92.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 92.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  6.33k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 6.33k, False: 86.4k]
  ------------------
  479|  6.33k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 92.8k]
  ------------------
  480|  6.33k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 92.8k]
  ------------------
  481|  6.33k|                handler.on_month_name();
  482|  6.33k|                break;
  483|  6.20k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.20k, False: 86.6k]
  ------------------
  484|  6.20k|                handler.on_dec_month();
  485|  6.20k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 92.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 92.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 92.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 92.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.20k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.20k, False: 86.6k]
  ------------------
  502|  6.20k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 92.8k]
  ------------------
  503|  6.20k|                handler.on_day_of_month();
  504|  6.20k|                break;
  505|       |            // Day of week
  506|  6.20k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.20k, False: 86.6k]
  ------------------
  507|  6.20k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 92.8k]
  ------------------
  508|  6.20k|                handler.on_weekday_name();
  509|  6.20k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 92.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 92.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.20k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.20k, False: 86.6k]
  ------------------
  518|  6.20k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 92.8k]
  ------------------
  519|  6.20k|                handler.on_24_hour();
  520|  6.20k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 92.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 92.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.20k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.20k, False: 86.6k]
  ------------------
  527|  6.20k|                handler.on_minute();
  528|  6.20k|                break;
  529|       |            // Second
  530|  6.20k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.20k, False: 86.6k]
  ------------------
  531|  6.20k|                handler.on_second();
  532|  6.20k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 92.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.20k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.20k, False: 86.6k]
  ------------------
  563|  6.20k|                handler.on_tz_offset();
  564|  6.20k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 92.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 92.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 92.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 92.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.21k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.21k, False: 86.6k]
  ------------------
  579|  6.21k|                handler.on_us_date();
  580|  6.21k|                break;
  581|  6.20k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.20k, False: 86.6k]
  ------------------
  582|  6.20k|                handler.on_iso_date();
  583|  6.20k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 92.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  18.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 18.1k, False: 74.6k]
  ------------------
  588|  18.1k|                handler.on_24_hour_time();
  589|  18.1k|                break;
  590|  6.28k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.28k, False: 86.5k]
  ------------------
  591|  6.28k|                handler.on_iso_time();
  592|  6.28k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 92.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 92.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 92.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 92.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 92.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 92.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 92.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 92.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  92.8k|        }
  704|  92.8k|        begin = p;
  705|       |
  706|  92.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 92.8k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  92.8k|    }
  710|  55.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.6k|    handler.verify();
  714|  55.6k|    return p;
  715|  55.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  31.0k|    {
 1177|  31.0k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.6k|    {
 1530|  55.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.6k|    }
_ZN3scn2v47weekdayC2Ej:
   71|    148|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 148, False: 0]
  ------------------
   72|    148|    {
   73|    148|    }
_ZN3scn2v45monthC2Ej:
  119|  9.49k|        : m_value(static_cast<unsigned char>(d))
  120|  9.49k|    {
  121|  9.49k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  28.7k|{
  377|  28.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.7k]
  |  Branch (377:25): [True: 0, False: 28.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.7k|    auto p = begin;
  383|  28.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.7k]
  |  Branch (392:21): [True: 0, False: 28.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  47.3k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.0k, False: 18.3k]
  ------------------
  399|  29.0k|        auto ch = *p;
  400|  29.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 150, False: 28.9k]
  ------------------
  404|    150|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 150]
  |  Branch (404:32): [True: 150, False: 0]
  |  Branch (404:46): [True: 0, False: 150]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    150|            const auto cp_len =
  412|    150|                detail::code_point_length_by_starting_code_unit(ch);
  413|    150|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 150]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    150|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 150]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    150|            ++p;
  439|    150|            continue;
  440|    150|        }
  441|  28.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 150, False: 28.7k]
  ------------------
  442|    150|            handler.on_text(begin, p);
  443|    150|        }
  444|  28.9k|        ++p;  // Consume '%'
  445|  28.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.9k|        ch = *p;
  451|  28.9k|        ++p;
  452|       |
  453|  28.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.50k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.50k, False: 27.4k]
  ------------------
  463|  1.50k|                handler.on_full_year();
  464|  1.50k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 25.7k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.9k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.9k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     66|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 66, False: 28.8k]
  ------------------
  484|     66|                handler.on_dec_month();
  485|     66|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 28.8k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.9k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.57k, False: 27.3k]
  ------------------
  507|  1.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.9k]
  ------------------
  508|  1.57k|                handler.on_weekday_name();
  509|  1.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 28.8k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.9k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.53k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.53k, False: 23.3k]
  ------------------
  579|  5.53k|                handler.on_us_date();
  580|  5.53k|                break;
  581|  1.60k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.60k, False: 27.2k]
  ------------------
  582|  1.60k|                handler.on_iso_date();
  583|  1.60k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.8k, False: 16.0k]
  ------------------
  588|  12.8k|                handler.on_24_hour_time();
  589|  12.8k|                break;
  590|  2.51k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.51k, False: 26.3k]
  ------------------
  591|  2.51k|                handler.on_iso_time();
  592|  2.51k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.9k|        }
  704|  28.9k|        begin = p;
  705|       |
  706|  28.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.4k, False: 18.4k]
  ------------------
  707|  10.4k|            return p;
  708|  10.4k|        }
  709|  28.9k|    }
  710|  18.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 18.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  18.3k|    handler.verify();
  714|  18.3k|    return p;
  715|  28.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.10k|    {                                                                \
  769|  3.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.10k|        field##_set = 1;                                             \
  774|  3.10k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.05k|    {                                                                \
  769|  4.05k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.05k|        field##_set = 1;                                             \
  774|  4.05k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.36k|    {                                                                \
  769|  6.36k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.36k|        field##_set = 1;                                             \
  774|  6.36k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.25k|    {                                                                \
  769|  4.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.25k|        field##_set = 1;                                             \
  774|  4.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.3k|    {                                                                \
  769|  13.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.3k|        field##_set = 1;                                             \
  774|  13.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.05k|    {                                                                \
  769|  1.05k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.05k|        field##_set = 1;                                             \
  774|  1.05k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  18.3k|    {
  800|  18.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.4k, False: 5.87k]
  |  Branch (800:27): [True: 0, False: 12.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  18.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 18.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  18.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 18.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  18.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 18.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  18.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 18.2k]
  |  Branch (829:26): [True: 4.15k, False: 14.1k]
  |  Branch (829:38): [True: 0, False: 14.1k]
  ------------------
  830|  18.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 4.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  18.3k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  12.4k|    {
  867|  12.4k|        assert(!full_year_set);
  868|  12.4k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 12.4k, False: 0]
  |  Branch (868:31): [True: 0, False: 12.4k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  12.4k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 12.4k, False: 0]
  ------------------
  872|  12.4k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 52, False: 12.4k]
  ------------------
  873|     52|                year = 1900 + short_year_value - offset;
  874|     52|            }
  875|  12.4k|            else {
  876|  12.4k|                year = 2000 + short_year_value - offset;
  877|  12.4k|            }
  878|  12.4k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  12.4k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.9k|{
  377|  23.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.9k]
  |  Branch (377:25): [True: 0, False: 23.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.9k|    auto p = begin;
  383|  23.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.9k]
  |  Branch (392:21): [True: 0, False: 23.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.2k, False: 13.3k]
  ------------------
  399|  24.2k|        auto ch = *p;
  400|  24.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 146, False: 24.1k]
  ------------------
  404|    146|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 146]
  |  Branch (404:32): [True: 146, False: 0]
  |  Branch (404:46): [True: 0, False: 146]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    146|            const auto cp_len =
  412|    146|                detail::code_point_length_by_starting_code_unit(ch);
  413|    146|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 146]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    146|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 146]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    146|            ++p;
  439|    146|            continue;
  440|    146|        }
  441|  24.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 146, False: 23.9k]
  ------------------
  442|    146|            handler.on_text(begin, p);
  443|    146|        }
  444|  24.1k|        ++p;  // Consume '%'
  445|  24.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 24.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  24.1k|        ch = *p;
  451|  24.1k|        ++p;
  452|       |
  453|  24.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 24.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 24.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 24.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.52k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.52k, False: 22.5k]
  ------------------
  463|  1.52k|                handler.on_full_year();
  464|  1.52k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 24.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 24.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 24.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 24.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.10k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.10k, False: 21.0k]
  ------------------
  479|  3.10k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 24.1k]
  ------------------
  480|  3.10k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 24.1k]
  ------------------
  481|  3.10k|                handler.on_month_name();
  482|  3.10k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 24.0k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 24.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 24.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 24.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 24.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 24.0k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 24.1k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.59k, False: 22.5k]
  ------------------
  507|  1.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 24.1k]
  ------------------
  508|  1.59k|                handler.on_weekday_name();
  509|  1.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 24.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 24.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 24.0k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 24.1k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 24.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 24.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 24.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 24.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 24.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 24.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 24.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 24.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 24.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 24.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.61k, False: 22.4k]
  ------------------
  579|  1.61k|                handler.on_us_date();
  580|  1.61k|                break;
  581|  1.62k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.62k, False: 22.4k]
  ------------------
  582|  1.62k|                handler.on_iso_date();
  583|  1.62k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 24.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 12.1k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  2.53k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.53k, False: 21.5k]
  ------------------
  591|  2.53k|                handler.on_iso_time();
  592|  2.53k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 24.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 24.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 24.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 24.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 24.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 24.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 24.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 24.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  24.1k|        }
  704|  24.1k|        begin = p;
  705|       |
  706|  24.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.6k, False: 13.5k]
  ------------------
  707|  10.6k|            return p;
  708|  10.6k|        }
  709|  24.1k|    }
  710|  13.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.3k|    handler.verify();
  714|  13.3k|    return p;
  715|  23.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.15k|    {                                                                \
  769|  3.15k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.15k|        field##_set = 1;                                             \
  774|  3.15k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    106|    {                                                                \
  769|    106|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    106|        field##_set = 1;                                             \
  774|    106|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.31k|    {                                                                \
  769|  2.31k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.31k|        field##_set = 1;                                             \
  774|  2.31k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    288|    {                                                                \
  769|    288|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    288|        field##_set = 1;                                             \
  774|    288|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.1k|    {                                                                \
  769|  12.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.1k|        field##_set = 1;                                             \
  774|  12.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.04k|    {                                                                \
  769|  1.04k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.04k|        field##_set = 1;                                             \
  774|  1.04k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.3k|    {
  800|  13.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.4k, False: 1.87k]
  |  Branch (800:27): [True: 0, False: 11.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 13.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 13.2k]
  |  Branch (829:26): [True: 206, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 280]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  28.7k|{
  377|  28.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.7k]
  |  Branch (377:25): [True: 0, False: 28.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.7k|    auto p = begin;
  383|  28.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.7k]
  |  Branch (392:21): [True: 0, False: 28.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  47.3k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.0k, False: 18.3k]
  ------------------
  399|  29.0k|        auto ch = *p;
  400|  29.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 150, False: 28.9k]
  ------------------
  404|    150|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 150]
  |  Branch (404:32): [True: 150, False: 0]
  |  Branch (404:46): [True: 0, False: 150]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    150|            const auto cp_len =
  412|    150|                detail::code_point_length_by_starting_code_unit(ch);
  413|    150|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 150]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    150|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 150]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    150|            ++p;
  439|    150|            continue;
  440|    150|        }
  441|  28.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 150, False: 28.7k]
  ------------------
  442|    150|            handler.on_text(begin, p);
  443|    150|        }
  444|  28.9k|        ++p;  // Consume '%'
  445|  28.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.9k|        ch = *p;
  451|  28.9k|        ++p;
  452|       |
  453|  28.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.50k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.50k, False: 27.4k]
  ------------------
  463|  1.50k|                handler.on_full_year();
  464|  1.50k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 25.7k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.9k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.9k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     66|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 66, False: 28.8k]
  ------------------
  484|     66|                handler.on_dec_month();
  485|     66|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 28.8k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.9k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.57k, False: 27.3k]
  ------------------
  507|  1.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.9k]
  ------------------
  508|  1.57k|                handler.on_weekday_name();
  509|  1.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 28.8k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.9k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.53k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.53k, False: 23.3k]
  ------------------
  579|  5.53k|                handler.on_us_date();
  580|  5.53k|                break;
  581|  1.60k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.60k, False: 27.2k]
  ------------------
  582|  1.60k|                handler.on_iso_date();
  583|  1.60k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.8k, False: 16.0k]
  ------------------
  588|  12.8k|                handler.on_24_hour_time();
  589|  12.8k|                break;
  590|  2.51k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.51k, False: 26.3k]
  ------------------
  591|  2.51k|                handler.on_iso_time();
  592|  2.51k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.9k|        }
  704|  28.9k|        begin = p;
  705|       |
  706|  28.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.4k, False: 18.4k]
  ------------------
  707|  10.4k|            return p;
  708|  10.4k|        }
  709|  28.9k|    }
  710|  18.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 18.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  18.3k|    handler.verify();
  714|  18.3k|    return p;
  715|  28.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.10k|    {                                                                \
  769|  3.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.10k|        field##_set = 1;                                             \
  774|  3.10k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.05k|    {                                                                \
  769|  4.05k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.05k|        field##_set = 1;                                             \
  774|  4.05k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.36k|    {                                                                \
  769|  6.36k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.36k|        field##_set = 1;                                             \
  774|  6.36k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.25k|    {                                                                \
  769|  4.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.25k|        field##_set = 1;                                             \
  774|  4.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.3k|    {                                                                \
  769|  13.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.3k|        field##_set = 1;                                             \
  774|  13.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.05k|    {                                                                \
  769|  1.05k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.05k|        field##_set = 1;                                             \
  774|  1.05k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  18.3k|    {
  800|  18.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.4k, False: 5.87k]
  |  Branch (800:27): [True: 0, False: 12.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  18.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 18.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  18.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 18.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  18.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 18.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  18.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 18.2k]
  |  Branch (829:26): [True: 4.15k, False: 14.1k]
  |  Branch (829:38): [True: 0, False: 14.1k]
  ------------------
  830|  18.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 4.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  18.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.9k|{
  377|  23.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.9k]
  |  Branch (377:25): [True: 0, False: 23.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.9k|    auto p = begin;
  383|  23.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.9k]
  |  Branch (392:21): [True: 0, False: 23.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.2k, False: 13.3k]
  ------------------
  399|  24.2k|        auto ch = *p;
  400|  24.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 146, False: 24.1k]
  ------------------
  404|    146|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 146]
  |  Branch (404:32): [True: 146, False: 0]
  |  Branch (404:46): [True: 0, False: 146]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    146|            const auto cp_len =
  412|    146|                detail::code_point_length_by_starting_code_unit(ch);
  413|    146|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 146]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    146|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 146]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    146|            ++p;
  439|    146|            continue;
  440|    146|        }
  441|  24.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 146, False: 23.9k]
  ------------------
  442|    146|            handler.on_text(begin, p);
  443|    146|        }
  444|  24.1k|        ++p;  // Consume '%'
  445|  24.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 24.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  24.1k|        ch = *p;
  451|  24.1k|        ++p;
  452|       |
  453|  24.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 24.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 24.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 24.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.52k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.52k, False: 22.5k]
  ------------------
  463|  1.52k|                handler.on_full_year();
  464|  1.52k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 24.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 24.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 24.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 24.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.10k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.10k, False: 21.0k]
  ------------------
  479|  3.10k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 24.1k]
  ------------------
  480|  3.10k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 24.1k]
  ------------------
  481|  3.10k|                handler.on_month_name();
  482|  3.10k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 24.0k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 24.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 24.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 24.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 24.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 24.0k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 24.1k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.59k, False: 22.5k]
  ------------------
  507|  1.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 24.1k]
  ------------------
  508|  1.59k|                handler.on_weekday_name();
  509|  1.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 24.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 24.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 24.0k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 24.1k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 24.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 24.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 24.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 24.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 24.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 24.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 24.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 24.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 24.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 24.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.61k, False: 22.4k]
  ------------------
  579|  1.61k|                handler.on_us_date();
  580|  1.61k|                break;
  581|  1.62k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.62k, False: 22.4k]
  ------------------
  582|  1.62k|                handler.on_iso_date();
  583|  1.62k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 24.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 12.1k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  2.53k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.53k, False: 21.5k]
  ------------------
  591|  2.53k|                handler.on_iso_time();
  592|  2.53k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 24.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 24.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 24.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 24.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 24.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 24.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 24.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 24.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  24.1k|        }
  704|  24.1k|        begin = p;
  705|       |
  706|  24.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.6k, False: 13.5k]
  ------------------
  707|  10.6k|            return p;
  708|  10.6k|        }
  709|  24.1k|    }
  710|  13.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.3k|    handler.verify();
  714|  13.3k|    return p;
  715|  23.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.15k|    {                                                                \
  769|  3.15k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.15k|        field##_set = 1;                                             \
  774|  3.15k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    106|    {                                                                \
  769|    106|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    106|        field##_set = 1;                                             \
  774|    106|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.31k|    {                                                                \
  769|  2.31k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.31k|        field##_set = 1;                                             \
  774|  2.31k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    288|    {                                                                \
  769|    288|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    288|        field##_set = 1;                                             \
  774|    288|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.1k|    {                                                                \
  769|  12.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.1k|        field##_set = 1;                                             \
  774|  12.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.04k|    {                                                                \
  769|  1.04k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.04k|        field##_set = 1;                                             \
  774|  1.04k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.3k|    {
  800|  13.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.4k, False: 1.87k]
  |  Branch (800:27): [True: 0, False: 11.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 13.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 13.2k]
  |  Branch (829:26): [True: 206, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 280]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  28.7k|{
  377|  28.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.7k]
  |  Branch (377:25): [True: 0, False: 28.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.7k|    auto p = begin;
  383|  28.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.7k]
  |  Branch (392:21): [True: 0, False: 28.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  47.3k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 29.0k, False: 18.3k]
  ------------------
  399|  29.0k|        auto ch = *p;
  400|  29.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 29.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  29.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 150, False: 28.9k]
  ------------------
  404|    150|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 150]
  |  Branch (404:32): [True: 150, False: 0]
  |  Branch (404:46): [True: 0, False: 150]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    150|            const auto cp_len =
  412|    150|                detail::code_point_length_by_starting_code_unit(ch);
  413|    150|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 150]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    150|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 150]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    150|            ++p;
  439|    150|            continue;
  440|    150|        }
  441|  28.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 150, False: 28.7k]
  ------------------
  442|    150|            handler.on_text(begin, p);
  443|    150|        }
  444|  28.9k|        ++p;  // Consume '%'
  445|  28.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.9k|        ch = *p;
  451|  28.9k|        ++p;
  452|       |
  453|  28.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.50k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.50k, False: 27.4k]
  ------------------
  463|  1.50k|                handler.on_full_year();
  464|  1.50k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 25.7k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.9k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.9k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     66|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 66, False: 28.8k]
  ------------------
  484|     66|                handler.on_dec_month();
  485|     66|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 28.8k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.9k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.57k, False: 27.3k]
  ------------------
  507|  1.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.9k]
  ------------------
  508|  1.57k|                handler.on_weekday_name();
  509|  1.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 28.8k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.9k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.53k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.53k, False: 23.3k]
  ------------------
  579|  5.53k|                handler.on_us_date();
  580|  5.53k|                break;
  581|  1.60k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.60k, False: 27.2k]
  ------------------
  582|  1.60k|                handler.on_iso_date();
  583|  1.60k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.8k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.8k, False: 16.0k]
  ------------------
  588|  12.8k|                handler.on_24_hour_time();
  589|  12.8k|                break;
  590|  2.51k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.51k, False: 26.3k]
  ------------------
  591|  2.51k|                handler.on_iso_time();
  592|  2.51k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.9k|        }
  704|  28.9k|        begin = p;
  705|       |
  706|  28.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.4k, False: 18.4k]
  ------------------
  707|  10.4k|            return p;
  708|  10.4k|        }
  709|  28.9k|    }
  710|  18.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 18.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  18.3k|    handler.verify();
  714|  18.3k|    return p;
  715|  28.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.10k|    {                                                                \
  769|  3.10k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.10k|        field##_set = 1;                                             \
  774|  3.10k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.53k|    {                                                                \
  769|  5.53k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.53k|        field##_set = 1;                                             \
  774|  5.53k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  6.36k|    {                                                                \
  769|  6.36k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.36k|        field##_set = 1;                                             \
  774|  6.36k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.25k|    {                                                                \
  769|  4.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.25k|        field##_set = 1;                                             \
  774|  4.25k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.3k|    {                                                                \
  769|  13.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.3k|        field##_set = 1;                                             \
  774|  13.3k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.05k|    {                                                                \
  769|  1.05k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.05k|        field##_set = 1;                                             \
  774|  1.05k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  18.3k|    {
  800|  18.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.4k, False: 5.87k]
  |  Branch (800:27): [True: 0, False: 12.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  18.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 18.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  18.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 18.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  18.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 18.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  18.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 18.2k]
  |  Branch (829:26): [True: 4.15k, False: 14.1k]
  |  Branch (829:38): [True: 0, False: 14.1k]
  ------------------
  830|  18.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 4.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  18.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.9k|{
  377|  23.9k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.9k]
  |  Branch (377:25): [True: 0, False: 23.9k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.9k|    auto p = begin;
  383|  23.9k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.9k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.9k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.9k]
  |  Branch (392:21): [True: 0, False: 23.9k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 24.2k, False: 13.3k]
  ------------------
  399|  24.2k|        auto ch = *p;
  400|  24.2k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 24.2k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  24.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 146, False: 24.1k]
  ------------------
  404|    146|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 146]
  |  Branch (404:32): [True: 146, False: 0]
  |  Branch (404:46): [True: 0, False: 146]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    146|            const auto cp_len =
  412|    146|                detail::code_point_length_by_starting_code_unit(ch);
  413|    146|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 146]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    146|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 146]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    146|            ++p;
  439|    146|            continue;
  440|    146|        }
  441|  24.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 146, False: 23.9k]
  ------------------
  442|    146|            handler.on_text(begin, p);
  443|    146|        }
  444|  24.1k|        ++p;  // Consume '%'
  445|  24.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 24.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  24.1k|        ch = *p;
  451|  24.1k|        ++p;
  452|       |
  453|  24.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 24.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 24.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 24.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.52k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.52k, False: 22.5k]
  ------------------
  463|  1.52k|                handler.on_full_year();
  464|  1.52k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 24.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 24.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 24.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 24.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.10k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.10k, False: 21.0k]
  ------------------
  479|  3.10k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 24.1k]
  ------------------
  480|  3.10k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 24.1k]
  ------------------
  481|  3.10k|                handler.on_month_name();
  482|  3.10k|                break;
  483|     62|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 62, False: 24.0k]
  ------------------
  484|     62|                handler.on_dec_month();
  485|     62|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 24.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 24.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 24.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 24.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     46|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 46, False: 24.0k]
  ------------------
  502|     46|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 24.1k]
  ------------------
  503|     46|                handler.on_day_of_month();
  504|     46|                break;
  505|       |            // Day of week
  506|  1.59k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.59k, False: 22.5k]
  ------------------
  507|  1.59k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 24.1k]
  ------------------
  508|  1.59k|                handler.on_weekday_name();
  509|  1.59k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 24.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 24.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     38|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 38, False: 24.0k]
  ------------------
  518|     38|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 24.1k]
  ------------------
  519|     38|                handler.on_24_hour();
  520|     38|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 24.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 24.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 24.1k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 24.1k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 24.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 24.1k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 24.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 24.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 24.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 24.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.61k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.61k, False: 22.4k]
  ------------------
  579|  1.61k|                handler.on_us_date();
  580|  1.61k|                break;
  581|  1.62k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.62k, False: 22.4k]
  ------------------
  582|  1.62k|                handler.on_iso_date();
  583|  1.62k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 24.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.9k, False: 12.1k]
  ------------------
  588|  11.9k|                handler.on_24_hour_time();
  589|  11.9k|                break;
  590|  2.53k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.53k, False: 21.5k]
  ------------------
  591|  2.53k|                handler.on_iso_time();
  592|  2.53k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 24.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 24.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 24.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 24.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 24.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 24.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 24.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 24.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  24.1k|        }
  704|  24.1k|        begin = p;
  705|       |
  706|  24.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.6k, False: 13.5k]
  ------------------
  707|  10.6k|            return p;
  708|  10.6k|        }
  709|  24.1k|    }
  710|  13.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.3k|    handler.verify();
  714|  13.3k|    return p;
  715|  23.9k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.15k|    {                                                                \
  769|  3.15k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.15k|        field##_set = 1;                                             \
  774|  3.15k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.61k|    {                                                                \
  769|  1.61k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.61k|        field##_set = 1;                                             \
  774|  1.61k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.31k|    {                                                                \
  769|  2.31k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.31k|        field##_set = 1;                                             \
  774|  2.31k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    288|    {                                                                \
  769|    288|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    288|        field##_set = 1;                                             \
  774|    288|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|     74|    {                                                                \
  769|     74|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     74|        field##_set = 1;                                             \
  774|     74|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.1k|    {                                                                \
  769|  12.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.1k|        field##_set = 1;                                             \
  774|  12.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.04k|    {                                                                \
  769|  1.04k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.04k|        field##_set = 1;                                             \
  774|  1.04k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.3k|    {
  800|  13.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.4k, False: 1.87k]
  |  Branch (800:27): [True: 0, False: 11.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 110, False: 13.2k]
  |  Branch (818:31): [True: 0, False: 110]
  |  Branch (818:46): [True: 0, False: 110]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 74, False: 13.2k]
  |  Branch (829:26): [True: 206, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 280]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.07k|    {                                                                \
  769|  3.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.07k|        field##_set = 1;                                             \
  774|  3.07k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  27.5k|{
  377|  27.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 27.5k]
  |  Branch (377:25): [True: 0, False: 27.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  27.5k|    auto p = begin;
  383|  27.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 27.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  27.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 27.5k]
  |  Branch (392:21): [True: 0, False: 27.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  33.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 27.5k, False: 6.11k]
  ------------------
  399|  27.5k|        auto ch = *p;
  400|  27.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 27.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  27.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14, False: 27.5k]
  ------------------
  404|     14|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14]
  |  Branch (404:32): [True: 14, False: 0]
  |  Branch (404:46): [True: 0, False: 14]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     14|            const auto cp_len =
  412|     14|                detail::code_point_length_by_starting_code_unit(ch);
  413|     14|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     14|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     14|            ++p;
  439|     14|            continue;
  440|     14|        }
  441|  27.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14, False: 27.5k]
  ------------------
  442|     14|            handler.on_text(begin, p);
  443|     14|        }
  444|  27.5k|        ++p;  // Consume '%'
  445|  27.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 27.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  27.5k|        ch = *p;
  451|  27.5k|        ++p;
  452|       |
  453|  27.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 27.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 27.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 27.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.06k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.06k, False: 24.4k]
  ------------------
  463|  3.06k|                handler.on_full_year();
  464|  3.06k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 27.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 27.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 27.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 27.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.12k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.12k, False: 24.4k]
  ------------------
  479|  3.12k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 27.5k]
  ------------------
  480|  3.12k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 27.5k]
  ------------------
  481|  3.12k|                handler.on_month_name();
  482|  3.12k|                break;
  483|     14|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 14, False: 27.5k]
  ------------------
  484|     14|                handler.on_dec_month();
  485|     14|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 27.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 27.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 27.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 27.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 27.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 27.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.06k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.06k, False: 24.4k]
  ------------------
  507|  3.06k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 27.5k]
  ------------------
  508|  3.06k|                handler.on_weekday_name();
  509|  3.06k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 27.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 27.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 27.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 27.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 27.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 27.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 27.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 27.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 27.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 27.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 27.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 27.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 27.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 27.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.07k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.07k, False: 24.4k]
  ------------------
  579|  3.07k|                handler.on_us_date();
  580|  3.07k|                break;
  581|  3.06k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.06k, False: 24.4k]
  ------------------
  582|  3.06k|                handler.on_iso_date();
  583|  3.06k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 27.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.03k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.03k, False: 18.5k]
  ------------------
  588|  9.03k|                handler.on_24_hour_time();
  589|  9.03k|                break;
  590|  3.10k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.10k, False: 24.4k]
  ------------------
  591|  3.10k|                handler.on_iso_time();
  592|  3.10k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 27.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 27.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 27.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 27.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 27.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 27.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 27.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 27.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  27.5k|        }
  704|  27.5k|        begin = p;
  705|       |
  706|  27.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 21.4k, False: 6.12k]
  ------------------
  707|  21.4k|            return p;
  708|  21.4k|        }
  709|  27.5k|    }
  710|  6.11k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 6.11k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  6.11k|    handler.verify();
  714|  6.11k|    return p;
  715|  27.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.13k|    {                                                                \
  769|  6.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.13k|        field##_set = 1;                                             \
  774|  6.13k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.07k|    {                                                                \
  769|  3.07k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.07k|        field##_set = 1;                                             \
  774|  3.07k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    408|    {                                                                \
  769|    408|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    408|        field##_set = 1;                                             \
  774|    408|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.46k|    {                                                                \
  769|  6.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.46k|        field##_set = 1;                                             \
  774|  6.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.37k|    {                                                                \
  769|  6.37k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.37k|        field##_set = 1;                                             \
  774|  6.37k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     64|    {                                                                \
  769|     64|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     64|        field##_set = 1;                                             \
  774|     64|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  6.11k|    {
  800|  6.11k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.03k, False: 74]
  |  Branch (800:27): [True: 0, False: 6.03k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  6.11k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 6.11k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  6.11k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 6.11k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  6.11k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 6.11k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  6.11k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 6.11k]
  |  Branch (829:26): [True: 8, False: 6.10k]
  |  Branch (829:38): [True: 0, False: 6.10k]
  ------------------
  830|  6.11k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  6.11k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   827k|{
 4068|   827k|    if constexpr (sizeof(U) == 1) {
 4069|   827k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   827k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   827k|{
 4032|   827k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   827k|    SCN_GCC_COMPAT_PUSH
 4035|   827k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   827k|    constexpr char lengths[] =
 4037|   827k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   827k|        "\1\1\1\1\1\1\1\1"
 4039|   827k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   827k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   827k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   827k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   827k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   827k|    SCN_GCC_COMPAT_POP
 4046|   827k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   410k|{
 4274|   410k|    if constexpr (sizeof(CharT) == 1) {
 4275|   410k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   410k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   410k|{
 4087|   410k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   410k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   410k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   410k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   410k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   410k|    };
 4092|       |
 4093|   410k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 399k, False: 10.8k]
  ------------------
 4094|   399k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 132, False: 399k]
  ------------------
 4095|    132|            SCN_UNLIKELY_ATTR
 4096|    132|            return invalid_code_point;
 4097|    132|        }
 4098|   399k|        return static_cast<char32_t>(input[0]);
 4099|   399k|    }
 4100|       |
 4101|  10.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 8.65k, False: 2.15k]
  ------------------
 4102|  8.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 48, False: 8.61k]
  ------------------
 4103|     48|            SCN_UNLIKELY_ATTR
 4104|     48|            return invalid_code_point;
 4105|     48|        }
 4106|  8.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 1.79k, False: 6.81k]
  ------------------
 4107|  1.79k|            SCN_UNLIKELY_ATTR
 4108|  1.79k|            return invalid_code_point;
 4109|  1.79k|        }
 4110|       |
 4111|  6.81k|        char32_t cp{};
 4112|  6.81k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  6.81k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  6.81k|        return cp;
 4115|  8.61k|    }
 4116|       |
 4117|  2.15k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 1.01k, False: 1.13k]
  ------------------
 4118|  1.01k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 54, False: 962]
  ------------------
 4119|     54|            SCN_UNLIKELY_ATTR
 4120|     54|            return invalid_code_point;
 4121|     54|        }
 4122|    962|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 618, False: 344]
  ------------------
 4123|    962|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 221, False: 123]
  ------------------
 4124|    839|            SCN_UNLIKELY_ATTR
 4125|    839|            return invalid_code_point;
 4126|    839|        }
 4127|       |
 4128|    123|        char32_t cp{};
 4129|    123|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    123|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    123|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    123|        return cp;
 4133|    962|    }
 4134|       |
 4135|  1.13k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.13k, False: 0]
  ------------------
 4136|  1.13k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.13k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.13k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 307, False: 829]
  ------------------
 4141|    307|            SCN_UNLIKELY_ATTR
 4142|    307|            return invalid_code_point;
 4143|    307|        }
 4144|    829|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 414, False: 415]
  ------------------
 4145|    829|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 131, False: 284]
  ------------------
 4146|    829|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 150, False: 134]
  ------------------
 4147|    695|            SCN_UNLIKELY_ATTR
 4148|    695|            return invalid_code_point;
 4149|    695|        }
 4150|       |
 4151|    134|        char32_t cp{};
 4152|    134|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    134|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    134|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    134|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    134|        return cp;
 4157|    829|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  11.4k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  11.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  11.4k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   288k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   288k|    else {
 3966|   288k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   288k|                                       to_address(first), to_address(last)))};
 3968|   288k|    }
 3969|   288k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   870k|{
  316|   870k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   870k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   870k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.16M|{
  294|  1.16M|    return p;
  295|  1.16M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   415k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   415k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   415k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   415k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   415k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   415k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  35.6k|    {
 2869|  35.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  35.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  35.6k|    {
 2850|  35.6k|        return decay_copy(t.begin());
 2851|  35.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   889k|{
 2094|   889k|    return SCN_FWD(t);
  ------------------
  |  |  936|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   889k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   150k|    {
 2926|   150k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   150k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   150k|    {
 2908|   150k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   150k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.1k|{
 9681|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.1k|                                   make_scan_args(result->values())));
 9684|  12.1k|    return result;
 9685|  12.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9636|  24.9k|{
 9637|  24.9k|    return scan_result_type<Source, Args...>();
 9638|  24.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  24.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  24.9k|        : m_value(T{}), m_has_value(true)
  427|  24.9k|    {
  428|  24.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6570|  24.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  74.9k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  74.9k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6344|   113k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.9k|{
 9622|  24.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  13.3k|    else {
 9626|  13.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.3k|    static_cast<    \
  |  |  935|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.3k|    }
 9628|  24.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  74.9k|    {
 1740|  74.9k|        return has_value();
 1741|  74.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   149k|    {
  490|   149k|        return m_has_value;
  491|   149k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  34.8k|    {
 1746|  34.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  34.8k|        return this->get_unexpected().error();
 1748|  34.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  34.8k|    {
  473|  34.8k|        return m_unexpected;
  474|  34.8k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.26M|    {
  365|  3.26M|        return m_unexpected;
  366|  3.26M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.71M|        : m_unexpected(std::forward<Err>(e))
  350|  1.71M|    {
  351|  1.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.71M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.72M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.72M|    {
  360|  1.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.72M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  99.9k|    {
  490|  99.9k|        return m_has_value;
  491|  99.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  51.6k|    {
  456|  51.6k|        return m_value;
  457|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  11.6k|    {
  504|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.6k|                                  std::forward<Args>(args)...);
  506|  11.6k|        m_has_value = false;
  507|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   209k|{
  396|   209k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   209k|        T(std::forward<Args>(args)...);
  398|   209k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.6k|    {
  481|  11.6k|        return std::move(m_unexpected);
  482|  11.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  40.0k|    {
 6445|  40.0k|        m_range = std::forward<Other>(r);
 6446|  40.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  40.0k|    {
 1795|  40.0k|        return value();
 1796|  40.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  40.0k|    {
 1769|  40.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  40.0k|        return this->get_value();
 1771|  40.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  40.0k|    {
  456|  40.0k|        return m_value;
  457|  40.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|  36.3k|{
 9461|  36.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  36.3k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  36.3k|{
 9398|  36.3k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  36.3k|    auto result = vscan_impl(buffer, format, args);
 9401|  36.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 20.0k]
  |  |  ------------------
  ------------------
 9402|  16.2k|        return unexpected(result.error());
 9403|  16.2k|    }
 9404|  20.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  36.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  74.9k|{
 5381|  74.9k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  74.9k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  74.9k|                  "\n"
 5385|  74.9k|                  "Unsupported range type given as input to a scanning "
 5386|  74.9k|                  "function.\n"
 5387|  74.9k|                  "A range needs to have a character type (value type) "
 5388|  74.9k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  74.9k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  74.9k|                  "to be included.\n"
 5391|  74.9k|                  "See the scnlib documentation for more details.");
 5392|  74.9k|    static_assert(
 5393|  74.9k|        !std::is_same_v<T, custom_char_traits>,
 5394|  74.9k|        "\n"
 5395|  74.9k|        "Unsupported range type given as input to a scanning "
 5396|  74.9k|        "function.\n"
 5397|  74.9k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  74.9k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  74.9k|        "not supported.");
 5400|  74.9k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  74.9k|                  "\n"
 5402|  74.9k|                  "Unsupported range type given as input to a scanning "
 5403|  74.9k|                  "function.\n"
 5404|  74.9k|                  "file_marker_found cannot be used as an "
 5405|  74.9k|                  "source range type to scn::scan.\n"
 5406|  74.9k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  74.9k|                  "and do not provide an explicit source range, "
 5408|  74.9k|                  "or use scn::scan with a FILE* directly.");
 5409|  74.9k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  74.9k|                  "\n"
 5411|  74.9k|                  "Unsupported range type given as input to a scanning "
 5412|  74.9k|                  "function.\n"
 5413|  74.9k|                  "In order to be scannable, a range needs to satisfy "
 5414|  74.9k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  74.9k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  74.9k|                  "\n"
 5417|  74.9k|                  "Unsupported range type given as input to a scanning "
 5418|  74.9k|                  "function.\n"
 5419|  74.9k|                  "A range needs to model forward_range and have a valid "
 5420|  74.9k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  74.9k|                  "Examples of scannable ranges are std::string, "
 5422|  74.9k|                  "std::string_view, "
 5423|  74.9k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  74.9k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  74.9k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  74.9k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  74.9k|{
 5320|  74.9k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  74.9k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  74.9k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  74.9k|    {
 3000|  74.9k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  74.9k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  74.9k|    {
 2981|  74.9k|        return t.data();
 2982|  74.9k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  74.9k|    {
 3383|  74.9k|        return detail::to_address(ranges::begin(derived()));
 3384|  74.9k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   295k|{
  316|   295k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   295k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   115k|    {
 2869|   115k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   115k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   115k|    {
 2850|   115k|        return decay_copy(t.begin());
 2851|   115k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|   995k|    {
 3480|   995k|        return m_iterator;
 3481|   995k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  74.9k|    {
 3339|  74.9k|        return static_cast<const D&>(*this);
 3340|  74.9k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  74.9k|    {
 3075|  74.9k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  74.9k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  74.9k|    {
 3041|  74.9k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  74.9k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   631k|{
 2094|   631k|    return SCN_FWD(t);
  ------------------
  |  |  936|   631k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   631k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   335k|    {
 3496|   335k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   335k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   518k|    {
 1740|   518k|        return has_value();
 1741|   518k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   933k|    {
  490|   933k|        return m_has_value;
  491|   933k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   209k|    {
 1746|   209k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   209k|        return this->get_unexpected().error();
 1748|   209k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   209k|    {
  473|   209k|        return m_unexpected;
  474|   209k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  34.8k|        : base(unexpect, std::move(e.error())),
 1616|  34.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.8k|    {
 1618|  34.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  34.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  34.8k|          m_has_value(false)
  451|  34.8k|    {
  452|  34.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  74.9k|    {
 1316|  74.9k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  40.0k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  40.0k|                      ranges::iterator_t<SourceRange>>) {
 6677|  40.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  40.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   332k|    {
 2869|   332k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   332k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   332k|    {
 2850|   332k|        return decay_copy(t.begin());
 2851|   332k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|  40.0k|{
 6662|  40.0k|    return ranges::end(source);
 6663|  40.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   111k|    {
 2926|   111k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   111k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   111k|    {
 2908|   111k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   111k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   740k|    {
 3484|   740k|        return m_sentinel;
 3485|   740k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   205k|    {
 1795|   205k|        return value();
 1796|   205k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   205k|    {
 1769|   205k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   205k|        return this->get_value();
 1771|   205k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   205k|    {
  456|   205k|        return m_value;
  457|   205k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  40.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  40.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  40.0k|    {
 1572|  40.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  40.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  40.0k|    {
  442|  40.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.2k|    {
 8768|  24.2k|        return m_str;
 8769|  24.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  53.3k|{
 6110|  53.3k|    detail::check_scan_arg_types<Args...>();
 6111|  53.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  53.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5824|   113k|{
 5825|   113k|    constexpr bool default_constructible_constraint =
 5826|   113k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   113k|    static_assert(default_constructible_constraint,
 5828|   113k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   113k|    constexpr bool destructible_constraint =
 5831|   113k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   113k|    static_assert(destructible_constraint,
 5833|   113k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   113k|    constexpr bool non_reference_constraint =
 5836|   113k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   113k|    static_assert(non_reference_constraint,
 5838|   113k|                  "Scan argument types must not be references");
 5839|       |
 5840|   113k|    constexpr bool movable_constraint =
 5841|   113k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   113k|    static_assert(movable_constraint,
 5843|   113k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   113k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   113k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   113k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  53.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  53.3k|    {
 6087|  53.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  53.3k|    {
 6095|  53.3k|        return {detail::make_arg<
 6096|  53.3k|            kind, Context,
 6097|  53.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  53.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  53.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  53.3k|{
 5884|  53.3k|    return make_value<Context>(value);
 5885|  53.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5809|  54.9k|{
 5810|  54.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.9k|    else {
 5817|  54.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.9k|            value, context_tag<Context>{}));
 5819|  54.9k|    }
 5820|  54.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.9k|    {
 5715|  54.9k|        return {};
 5716|  54.9k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  54.9k|{
 5779|  54.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.9k|    constexpr bool scannable_char =
 5783|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.9k|    static_assert(scannable_char,
 5785|  54.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.9k|    constexpr bool scannable_const =
 5789|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.9k|    constexpr bool scannable_disabled =
 5793|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.9k|    static_assert(scannable_disabled,
 5795|  54.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.9k|    static_assert(
 5800|  54.9k|        scannable,
 5801|  54.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.9k|    return arg_value{arg};
 5805|  54.9k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.9k|                       scan_custom_arg<T, Context>}
 5570|  54.9k|    {
 5571|  54.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.9k|    {
 5587|  54.9k|        static_assert(!is_type_disabled<T>,
 5588|  54.9k|                      "Scanning of custom types is disabled by "
 5589|  54.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.9k|        using context_type = Context;
 5593|  54.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.9k|        auto s = scanner_type{};
 5597|       |
 5598|  54.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.9k|#if SCN_HAS_EXCEPTIONS
 5603|  54.9k|        auto fmt_it = pctx_ref.begin();
 5604|  54.9k|        try {
 5605|  54.9k|            fmt_it = s.parse(pctx_ref);
 5606|  54.9k|        }
 5607|  54.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 53.3k]
  |  |  ------------------
  ------------------
 5628|  1.55k|            return e;
 5629|  1.55k|        }
 5630|  53.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  53.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  31.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.6k|    static_cast<    \
  |  |  935|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  31.6k|        return {};
 5636|  53.3k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|   810k|    {
 6270|   810k|        return m_format.data();
 6271|   810k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6274|   164k|    {
 6275|   164k|        return m_format.data() + m_format.size();
 6276|   164k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|  4.65k|    {
 6316|  4.65k|        m_error = unexpected(detail::handle_error(
 6317|  4.65k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  4.65k|        return m_error.error();
 6319|  4.65k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   811k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   811k|    {
 3742|   811k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   811k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   811k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  13.9k|        : m_unexpected(std::forward<Err>(e))
  350|  13.9k|    {
  351|  13.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  13.9k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  4.53M|    {
  572|  4.53M|        return m_has_value;
  573|  4.53M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   551k|{
 4308|       |    // Pattern_White_Space property
 4309|   551k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 476k, False: 74.7k]
  |  Branch (4309:27): [True: 8.92k, False: 468k]
  ------------------
 4310|   551k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 271k, False: 271k]
  ------------------
 4311|   551k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 7.62k, False: 263k]
  ------------------
 4312|   551k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 263k]
  ------------------
 4313|   551k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 1.00k, False: 262k]
  ------------------
 4314|   551k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 96, False: 262k]
  ------------------
 4315|   551k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 262k]
  ------------------
 4316|   551k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   305k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   305k|    else {
 3981|   305k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   305k|    }
 3983|   305k|}
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   610k|    {
 1746|   610k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   610k|        return this->get_unexpected().error();
 1748|   610k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   610k|    {
  555|   610k|        return m_unexpected;
  556|   610k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   596k|        : base(unexpect, std::move(e.error())),
 1616|   596k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   596k|    {
 1618|   596k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   596k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   596k|          m_has_value(false)
  550|   596k|    {
  551|   596k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   596k|    {
 1316|   596k|    }
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6322|   164k|    {
 6323|   164k|        return m_error;
 6324|   164k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  3.13M|    {
 1740|  3.13M|        return has_value();
 1741|  3.13M|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   320k|    {
 6281|   320k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   320k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   410k|    {
 1740|   410k|        return has_value();
 1741|   410k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   820k|    {
  490|   820k|        return m_has_value;
  491|   820k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   133k|    {
 1746|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   133k|        return this->get_unexpected().error();
 1748|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   133k|    {
  473|   133k|        return m_unexpected;
  474|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   181k|    {
 1805|   181k|        return std::move(value());
 1806|   181k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   276k|    {
 1769|   276k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   276k|        return this->get_value();
 1771|   276k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   276k|    {
  456|   276k|        return m_value;
  457|   276k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   236k|    {
 8971|   236k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   236k|    static_cast<    \
  |  |  935|   236k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   236k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.45M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.45M|        : m_deferred_init(), m_has_value(true)
  529|  1.45M|    {
  530|  1.45M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.9k|    {
 5723|  54.9k|        return {val};
 5724|  54.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6353|   109k|    {
 6354|   109k|        return m_values;
 6355|   109k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  53.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  53.3k|    {
 6137|  53.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6192|   160k|        : m_desc(desc), m_values(data)
 6193|   160k|    {
 6194|   160k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   552k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   552k|    static_cast<    \
  |  |  935|   552k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   552k|    static_cast<    \
  |  |  935|   552k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   552k|    {
 3466|   552k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   160k|{
 8441|   160k|    return s;
 8442|   160k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   160k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.2k|        : m_str(r.str)
 8763|  24.2k|    {
 8764|  24.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  24.9k|    {
 1740|  24.9k|        return has_value();
 1741|  24.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|  40.0k|    {
 6434|  40.0k|        return ranges::begin(m_range);
 6435|  40.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.1k|{
 9750|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.1k|                                   make_scan_args(result->values())));
 9753|  12.1k|    return result;
 9754|  12.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|  36.3k|{
 9479|  36.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  36.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  36.3k|{
 9414|  36.3k|#if !SCN_DISABLE_LOCALE
 9415|  36.3k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  36.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  36.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  36.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  36.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 20.0k]
  |  |  ------------------
  ------------------
 9422|  16.2k|        return unexpected(result.error());
 9423|  16.2k|    }
 9424|  20.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  36.3k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  2.32k|{
 9492|  2.32k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.32k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.32k|{
 9438|  2.32k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.32k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.32k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.32k|        return unexpected(result.error());
 9443|  2.32k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.32k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.55k|{
 5860|  1.55k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.55k|    basic_scan_arg<Context> arg;
 5863|  1.55k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.55k|    arg.m_value = make_value<Context>(value);
 5865|  1.55k|    return arg;
 5866|  1.55k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   164k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|   341k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.65k|    {
 6376|  4.65k|        return std::get<0>(m_values);
 6377|  4.65k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.1k|{
 9681|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.1k|                                   make_scan_args(result->values())));
 9684|  12.1k|    return result;
 9685|  12.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  24.9k|{
 9637|  24.9k|    return scan_result_type<Source, Args...>();
 9638|  24.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  24.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.9k|    {
  613|  24.9k|        construct();
  614|  24.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.9k|    {
  694|  24.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.9k|        m_has_value = true;
  696|  24.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  24.9k|{
  396|  24.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.9k|        T(std::forward<Args>(args)...);
  398|  24.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  24.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6344|   113k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   101k|    {
  718|   101k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   101k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   101k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.9k|{
 9622|  24.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  13.3k|    else {
 9626|  13.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.3k|    static_cast<    \
  |  |  935|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.3k|    }
 9628|  24.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   139k|{
  396|   139k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   139k|        T(std::forward<Args>(args)...);
  398|   139k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   136k|    {
  687|   136k|        return m_has_value;
  688|   136k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.6k|    {
  653|  51.6k|        return *value_ptr();
  654|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.9k|    {
  708|  24.9k|        scn::detail::destroy_at(value_ptr());
  709|  24.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  24.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.9k|    else {
  408|  24.9k|        p->~T();
  409|  24.9k|    }
  410|  24.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  24.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   279k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   279k|    else {
  408|   279k|        p->~T();
  409|   279k|    }
  410|   279k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.2k|    {
 8768|  24.2k|        return m_str;
 8769|  24.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  53.3k|{
 6110|  53.3k|    detail::check_scan_arg_types<Args...>();
 6111|  53.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  53.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5824|   113k|{
 5825|   113k|    constexpr bool default_constructible_constraint =
 5826|   113k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   113k|    static_assert(default_constructible_constraint,
 5828|   113k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   113k|    constexpr bool destructible_constraint =
 5831|   113k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   113k|    static_assert(destructible_constraint,
 5833|   113k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   113k|    constexpr bool non_reference_constraint =
 5836|   113k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   113k|    static_assert(non_reference_constraint,
 5838|   113k|                  "Scan argument types must not be references");
 5839|       |
 5840|   113k|    constexpr bool movable_constraint =
 5841|   113k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   113k|    static_assert(movable_constraint,
 5843|   113k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   113k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   113k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   113k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  53.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  53.3k|    {
 6087|  53.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  53.3k|    {
 6095|  53.3k|        return {detail::make_arg<
 6096|  53.3k|            kind, Context,
 6097|  53.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  53.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  53.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  53.3k|{
 5884|  53.3k|    return make_value<Context>(value);
 5885|  53.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5809|  54.9k|{
 5810|  54.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.9k|    else {
 5817|  54.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.9k|            value, context_tag<Context>{}));
 5819|  54.9k|    }
 5820|  54.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.9k|    {
 5715|  54.9k|        return {};
 5716|  54.9k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  54.9k|{
 5779|  54.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.9k|    constexpr bool scannable_char =
 5783|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.9k|    static_assert(scannable_char,
 5785|  54.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.9k|    constexpr bool scannable_const =
 5789|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.9k|    constexpr bool scannable_disabled =
 5793|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.9k|    static_assert(scannable_disabled,
 5795|  54.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.9k|    static_assert(
 5800|  54.9k|        scannable,
 5801|  54.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.9k|    return arg_value{arg};
 5805|  54.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.9k|                       scan_custom_arg<T, Context>}
 5570|  54.9k|    {
 5571|  54.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.9k|    {
 5587|  54.9k|        static_assert(!is_type_disabled<T>,
 5588|  54.9k|                      "Scanning of custom types is disabled by "
 5589|  54.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.9k|        using context_type = Context;
 5593|  54.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.9k|        auto s = scanner_type{};
 5597|       |
 5598|  54.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.9k|#if SCN_HAS_EXCEPTIONS
 5603|  54.9k|        auto fmt_it = pctx_ref.begin();
 5604|  54.9k|        try {
 5605|  54.9k|            fmt_it = s.parse(pctx_ref);
 5606|  54.9k|        }
 5607|  54.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 53.3k]
  |  |  ------------------
  ------------------
 5628|  1.55k|            return e;
 5629|  1.55k|        }
 5630|  53.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  53.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  31.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.6k|    static_cast<    \
  |  |  935|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  31.6k|        return {};
 5636|  53.3k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.9k|    {
 5723|  54.9k|        return {val};
 5724|  54.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6353|   109k|    {
 6354|   109k|        return m_values;
 6355|   109k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  53.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  53.3k|    {
 6137|  53.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.2k|        : m_str(r.str)
 8763|  24.2k|    {
 8764|  24.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  24.9k|    {
 1740|  24.9k|        return has_value();
 1741|  24.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  36.6k|    {
  643|  36.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.3k, False: 23.2k]
  ------------------
  644|  13.3k|            destroy_value();
  645|  13.3k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|  36.6k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.1k|{
 9750|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.1k|                                   make_scan_args(result->values())));
 9753|  12.1k|    return result;
 9754|  12.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.55k|{
 5860|  1.55k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.55k|    basic_scan_arg<Context> arg;
 5863|  1.55k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.55k|    arg.m_value = make_value<Context>(value);
 5865|  1.55k|    return arg;
 5866|  1.55k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.65k|    {
 6376|  4.65k|        return std::get<0>(m_values);
 6377|  4.65k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  12.1k|{
 9681|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  12.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  12.1k|                                   make_scan_args(result->values())));
 9684|  12.1k|    return result;
 9685|  12.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  24.9k|{
 9637|  24.9k|    return scan_result_type<Source, Args...>();
 9638|  24.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  24.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.9k|    {
  613|  24.9k|        construct();
  614|  24.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.9k|    {
  694|  24.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.9k|        m_has_value = true;
  696|  24.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  24.9k|{
  396|  24.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.9k|        T(std::forward<Args>(args)...);
  398|  24.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  24.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6344|   113k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   101k|    {
  718|   101k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   101k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   101k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.9k|{
 9622|  24.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  13.3k|    else {
 9626|  13.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.3k|    static_cast<    \
  |  |  935|  13.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.3k|    }
 9628|  24.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   136k|    {
  687|   136k|        return m_has_value;
  688|   136k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  51.6k|    {
  653|  51.6k|        return *value_ptr();
  654|  51.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.9k|    {
  708|  24.9k|        scn::detail::destroy_at(value_ptr());
  709|  24.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  24.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.9k|    else {
  408|  24.9k|        p->~T();
  409|  24.9k|    }
  410|  24.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  24.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  24.2k|    {
 8768|  24.2k|        return m_str;
 8769|  24.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  53.3k|{
 6110|  53.3k|    detail::check_scan_arg_types<Args...>();
 6111|  53.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  53.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5824|   113k|{
 5825|   113k|    constexpr bool default_constructible_constraint =
 5826|   113k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   113k|    static_assert(default_constructible_constraint,
 5828|   113k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   113k|    constexpr bool destructible_constraint =
 5831|   113k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   113k|    static_assert(destructible_constraint,
 5833|   113k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   113k|    constexpr bool non_reference_constraint =
 5836|   113k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   113k|    static_assert(non_reference_constraint,
 5838|   113k|                  "Scan argument types must not be references");
 5839|       |
 5840|   113k|    constexpr bool movable_constraint =
 5841|   113k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   113k|    static_assert(movable_constraint,
 5843|   113k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   113k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   113k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   113k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  53.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  53.3k|    {
 6087|  53.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  53.3k|    {
 6095|  53.3k|        return {detail::make_arg<
 6096|  53.3k|            kind, Context,
 6097|  53.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  53.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  53.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  53.3k|{
 5884|  53.3k|    return make_value<Context>(value);
 5885|  53.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5809|  54.9k|{
 5810|  54.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  54.9k|    else {
 5817|  54.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  54.9k|            value, context_tag<Context>{}));
 5819|  54.9k|    }
 5820|  54.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  54.9k|    {
 5715|  54.9k|        return {};
 5716|  54.9k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  54.9k|{
 5779|  54.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  54.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  54.9k|    constexpr bool scannable_char =
 5783|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  54.9k|    static_assert(scannable_char,
 5785|  54.9k|                  "Cannot scan an argument of an unsupported character "
 5786|  54.9k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  54.9k|    constexpr bool scannable_const =
 5789|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  54.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  54.9k|    constexpr bool scannable_disabled =
 5793|  54.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  54.9k|    static_assert(scannable_disabled,
 5795|  54.9k|                  "Cannot scan an argument that has been disabled by "
 5796|  54.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  54.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  54.9k|    static_assert(
 5800|  54.9k|        scannable,
 5801|  54.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  54.9k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  54.9k|    return arg_value{arg};
 5805|  54.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  54.9k|        : custom_value{static_cast<void*>(&val.val),
 5569|  54.9k|                       scan_custom_arg<T, Context>}
 5570|  54.9k|    {
 5571|  54.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  54.9k|    {
 5587|  54.9k|        static_assert(!is_type_disabled<T>,
 5588|  54.9k|                      "Scanning of custom types is disabled by "
 5589|  54.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  54.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  54.9k|        using context_type = Context;
 5593|  54.9k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  54.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  54.9k|        auto s = scanner_type{};
 5597|       |
 5598|  54.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  54.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  54.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  54.9k|#if SCN_HAS_EXCEPTIONS
 5603|  54.9k|        auto fmt_it = pctx_ref.begin();
 5604|  54.9k|        try {
 5605|  54.9k|            fmt_it = s.parse(pctx_ref);
 5606|  54.9k|        }
 5607|  54.9k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  54.9k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.55k, False: 53.3k]
  |  |  ------------------
  ------------------
 5628|  1.55k|            return e;
 5629|  1.55k|        }
 5630|  53.3k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  53.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  31.6k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.6k|    static_cast<    \
  |  |  935|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  31.6k|        return {};
 5636|  53.3k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  54.9k|    {
 5723|  54.9k|        return {val};
 5724|  54.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6353|   109k|    {
 6354|   109k|        return m_values;
 6355|   109k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  53.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  53.3k|    {
 6137|  53.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  24.2k|        : m_str(r.str)
 8763|  24.2k|    {
 8764|  24.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  24.9k|    {
 1740|  24.9k|        return has_value();
 1741|  24.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  51.6k|    {
 1815|  51.6k|        return &value();
 1816|  51.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  51.6k|    {
 1769|  51.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  51.6k|        return this->get_value();
 1771|  51.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  36.6k|    {
  643|  36.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.3k, False: 23.2k]
  ------------------
  644|  13.3k|            destroy_value();
  645|  13.3k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|  36.6k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  12.1k|{
 9750|  12.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  12.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  12.1k|                                   make_scan_args(result->values())));
 9753|  12.1k|    return result;
 9754|  12.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.55k|{
 5860|  1.55k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.55k|    basic_scan_arg<Context> arg;
 5863|  1.55k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.55k|    arg.m_value = make_value<Context>(value);
 5865|  1.55k|    return arg;
 5866|  1.55k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.65k|    {
 6376|  4.65k|        return std::get<0>(m_values);
 6377|  4.65k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  34.8k|    {
 2869|  34.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  34.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  34.8k|    {
 2850|  34.8k|        return decay_copy(t.begin());
 2851|  34.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  2.57M|{
 2094|  2.57M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.57M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   179k|    {
 2926|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   179k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   179k|    {
 2908|   179k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   179k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  14.5k|{
 9681|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9682|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  14.5k|                                   make_scan_args(result->values())));
 9684|  14.5k|    return result;
 9685|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9636|  29.9k|{
 9637|  29.9k|    return scan_result_type<Source, Args...>();
 9638|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  29.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.9k|        : m_value(T{}), m_has_value(true)
  427|  29.9k|    {
  428|  29.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6570|  29.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|  89.8k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  89.8k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.9k|{
 9622|  29.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 18.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  18.3k|    else {
 9626|  18.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  18.3k|    static_cast<    \
  |  |  935|  18.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  18.3k|    }
 9628|  29.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  89.8k|    {
 1740|  89.8k|        return has_value();
 1741|  89.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   179k|    {
  490|   179k|        return m_has_value;
  491|   179k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  34.8k|    {
 1746|  34.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  34.8k|        return this->get_unexpected().error();
 1748|  34.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  34.8k|    {
  473|  34.8k|        return m_unexpected;
  474|  34.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.6k|          m_has_value(false)
  451|  11.6k|    {
  452|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   119k|    {
  490|   119k|        return m_has_value;
  491|   119k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  66.6k|    {
  456|  66.6k|        return m_value;
  457|  66.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  11.6k|    {
  504|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.6k|                                  std::forward<Args>(args)...);
  506|  11.6k|        m_has_value = false;
  507|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.6k|    {
  473|  11.6k|        return m_unexpected;
  474|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.6k|    {
  481|  11.6k|        return std::move(m_unexpected);
  482|  11.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  55.0k|    {
 6445|  55.0k|        m_range = std::forward<Other>(r);
 6446|  55.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  55.0k|    {
 1795|  55.0k|        return value();
 1796|  55.0k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  55.0k|    {
 1769|  55.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  55.0k|        return this->get_value();
 1771|  55.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  55.0k|    {
  456|  55.0k|        return m_value;
  457|  55.0k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|  43.7k|{
 9461|  43.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  43.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  43.7k|{
 9398|  43.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  43.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 27.5k]
  |  |  ------------------
  ------------------
 9402|  16.2k|        return unexpected(result.error());
 9403|  16.2k|    }
 9404|  27.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  43.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  89.8k|{
 5381|  89.8k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  89.8k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  89.8k|                  "\n"
 5385|  89.8k|                  "Unsupported range type given as input to a scanning "
 5386|  89.8k|                  "function.\n"
 5387|  89.8k|                  "A range needs to have a character type (value type) "
 5388|  89.8k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  89.8k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  89.8k|                  "to be included.\n"
 5391|  89.8k|                  "See the scnlib documentation for more details.");
 5392|  89.8k|    static_assert(
 5393|  89.8k|        !std::is_same_v<T, custom_char_traits>,
 5394|  89.8k|        "\n"
 5395|  89.8k|        "Unsupported range type given as input to a scanning "
 5396|  89.8k|        "function.\n"
 5397|  89.8k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  89.8k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  89.8k|        "not supported.");
 5400|  89.8k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  89.8k|                  "\n"
 5402|  89.8k|                  "Unsupported range type given as input to a scanning "
 5403|  89.8k|                  "function.\n"
 5404|  89.8k|                  "file_marker_found cannot be used as an "
 5405|  89.8k|                  "source range type to scn::scan.\n"
 5406|  89.8k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  89.8k|                  "and do not provide an explicit source range, "
 5408|  89.8k|                  "or use scn::scan with a FILE* directly.");
 5409|  89.8k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  89.8k|                  "\n"
 5411|  89.8k|                  "Unsupported range type given as input to a scanning "
 5412|  89.8k|                  "function.\n"
 5413|  89.8k|                  "In order to be scannable, a range needs to satisfy "
 5414|  89.8k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  89.8k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  89.8k|                  "\n"
 5417|  89.8k|                  "Unsupported range type given as input to a scanning "
 5418|  89.8k|                  "function.\n"
 5419|  89.8k|                  "A range needs to model forward_range and have a valid "
 5420|  89.8k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  89.8k|                  "Examples of scannable ranges are std::string, "
 5422|  89.8k|                  "std::string_view, "
 5423|  89.8k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  89.8k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  89.8k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  89.8k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  89.8k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  89.8k|    else {
 5366|  89.8k|        return make_forward_scan_buffer(r);
 5367|  89.8k|    }
 5368|  89.8k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  89.8k|{
 5185|  89.8k|    return basic_scan_forward_buffer_impl(range);
 5186|  89.8k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  89.8k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  89.8k|          m_cursor(ranges::begin(*m_range))
 4766|  89.8k|    {
 4767|  89.8k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  89.8k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  89.8k|    {
 4738|  89.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  89.8k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  89.8k|    {
 4429|  89.8k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   162k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   144k|    {
 2869|   144k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   144k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   144k|    {
 2850|   144k|        return decay_copy(t.begin());
 2851|   144k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   199k|    {
 3480|   199k|        return m_iterator;
 3481|   199k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   711k|    {
 4771|   711k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 12.7k, False: 698k]
  ------------------
 4772|  12.7k|            return false;
 4773|  12.7k|        }
 4774|   698k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   698k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   698k|        }
 4777|   698k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 610k, False: 87.4k]
  ------------------
 4778|   610k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   610k|                                          this->m_current_view.begin(),
 4780|   610k|                                          this->m_current_view.end());
 4781|   610k|        }
 4782|   698k|        m_latest = *m_cursor;
 4783|   698k|        ++m_cursor;
 4784|   698k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   698k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   698k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   698k|        }
 4788|   698k|        return true;
 4789|   711k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.10M|    {
 2926|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.10M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.10M|    {
 2908|  2.10M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.16M|    {
 3484|  2.16M|        return m_sentinel;
 3485|  2.16M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  89.8k|    {
 4346|  89.8k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  89.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  89.8k|        return true;
 4348|  89.8k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  34.8k|        : base(unexpect, std::move(e.error())),
 1616|  34.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.8k|    {
 1618|  34.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  34.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  34.8k|          m_has_value(false)
  451|  34.8k|    {
  452|  34.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  89.8k|    {
 1316|  89.8k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  55.0k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  55.0k|                      ranges::iterator_t<SourceRange>>) {
 6677|  55.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  55.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  55.0k|    {
 2869|  55.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  55.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  55.0k|    {
 2850|  55.0k|        return decay_copy(t.begin());
 2851|  55.0k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|  55.0k|{
 6662|  55.0k|    return ranges::end(source);
 6663|  55.0k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  55.0k|    {
 2926|  55.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  55.0k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  55.0k|    {
 2908|  55.0k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  55.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  55.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  55.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  55.0k|    {
 1572|  55.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  55.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  55.0k|    {
  442|  55.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  29.1k|    {
 8768|  29.1k|        return m_str;
 8769|  29.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   144k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   144k|    static_cast<    \
  |  |  935|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   144k|    static_cast<    \
  |  |  935|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   144k|    {
 3466|   144k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  29.1k|        : m_str(r.str)
 8763|  29.1k|    {
 8764|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  29.9k|    {
 1740|  29.9k|        return has_value();
 1741|  29.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  66.6k|    {
 1815|  66.6k|        return &value();
 1816|  66.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  66.6k|    {
 1769|  66.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  66.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  66.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  66.6k|        return this->get_value();
 1771|  66.6k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|  55.0k|    {
 6434|  55.0k|        return ranges::begin(m_range);
 6435|  55.0k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  14.5k|{
 9750|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9751|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  14.5k|                                   make_scan_args(result->values())));
 9753|  14.5k|    return result;
 9754|  14.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|  43.7k|{
 9479|  43.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  43.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  43.7k|{
 9414|  43.7k|#if !SCN_DISABLE_LOCALE
 9415|  43.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  43.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  43.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  43.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.2k, False: 27.5k]
  |  |  ------------------
  ------------------
 9422|  16.2k|        return unexpected(result.error());
 9423|  16.2k|    }
 9424|  27.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  43.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  2.32k|{
 9492|  2.32k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.32k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.32k|{
 9438|  2.32k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.32k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.32k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.32k|        return unexpected(result.error());
 9443|  2.32k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.32k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  14.5k|{
 9681|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9682|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  14.5k|                                   make_scan_args(result->values())));
 9684|  14.5k|    return result;
 9685|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  29.9k|{
 9637|  29.9k|    return scan_result_type<Source, Args...>();
 9638|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  29.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.9k|    {
  613|  29.9k|        construct();
  614|  29.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.9k|    {
  694|  29.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.9k|        m_has_value = true;
  696|  29.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  29.9k|{
  396|  29.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.9k|        T(std::forward<Args>(args)...);
  398|  29.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  29.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   126k|    {
  718|   126k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   126k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   126k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.9k|{
 9622|  29.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 18.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  18.3k|    else {
 9626|  18.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  18.3k|    static_cast<    \
  |  |  935|  18.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  18.3k|    }
 9628|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   161k|    {
  687|   161k|        return m_has_value;
  688|   161k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  66.6k|    {
  653|  66.6k|        return *value_ptr();
  654|  66.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.9k|    {
  708|  29.9k|        scn::detail::destroy_at(value_ptr());
  709|  29.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  29.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.9k|    else {
  408|  29.9k|        p->~T();
  409|  29.9k|    }
  410|  29.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  29.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  29.1k|    {
 8768|  29.1k|        return m_str;
 8769|  29.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  29.1k|        : m_str(r.str)
 8763|  29.1k|    {
 8764|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  29.9k|    {
 1740|  29.9k|        return has_value();
 1741|  29.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  66.6k|    {
 1815|  66.6k|        return &value();
 1816|  66.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  66.6k|    {
 1769|  66.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  66.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  66.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  66.6k|        return this->get_value();
 1771|  66.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  41.5k|    {
  643|  41.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 18.3k, False: 23.2k]
  ------------------
  644|  18.3k|            destroy_value();
  645|  18.3k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|  41.5k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  14.5k|{
 9750|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9751|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  14.5k|                                   make_scan_args(result->values())));
 9753|  14.5k|    return result;
 9754|  14.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  14.5k|{
 9681|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9682|  14.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  14.5k|                                   make_scan_args(result->values())));
 9684|  14.5k|    return result;
 9685|  14.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  29.9k|{
 9637|  29.9k|    return scan_result_type<Source, Args...>();
 9638|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  29.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.9k|    {
  613|  29.9k|        construct();
  614|  29.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.9k|    {
  694|  29.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.9k|        m_has_value = true;
  696|  29.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  29.9k|{
  396|  29.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.9k|        T(std::forward<Args>(args)...);
  398|  29.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  29.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   126k|    {
  718|   126k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   126k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   126k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.9k|{
 9622|  29.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.6k, False: 18.3k]
  |  |  ------------------
  ------------------
 9623|  11.6k|        out = unexpected(in.error());
 9624|  11.6k|    }
 9625|  18.3k|    else {
 9626|  18.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  18.3k|    static_cast<    \
  |  |  935|  18.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  18.3k|    }
 9628|  29.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.6k|        : base(unexpect, std::move(e.error())),
 1616|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.6k|    {
 1618|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.6k|        : m_has_value(false)
  637|  11.6k|    {
  638|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  58.1k|    {
  730|  58.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  58.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  58.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  58.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.6k|    {
 1316|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.6k|    {
  903|  11.6k|        assign_common(std::move(other));
  904|  11.6k|        return *this;
  905|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.6k|    {
  950|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.6k, False: 0]
  ------------------
  951|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   161k|    {
  687|   161k|        return m_has_value;
  688|   161k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  66.6k|    {
  653|  66.6k|        return *value_ptr();
  654|  66.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.6k|    {
 1046|  11.6k|        this->destroy_value();
 1047|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.9k|    {
  708|  29.9k|        scn::detail::destroy_at(value_ptr());
  709|  29.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  29.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.9k|    else {
  408|  29.9k|        p->~T();
  409|  29.9k|    }
  410|  29.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  29.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.6k|    {
  701|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.6k|                                  std::forward<Args>(args)...);
  703|  11.6k|        m_has_value = false;
  704|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.6k|    {
  678|  11.6k|        return std::move(*unexpected_ptr());
  679|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  23.2k|    {
  712|  23.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  23.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  29.1k|    {
 8768|  29.1k|        return m_str;
 8769|  29.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  29.1k|        : m_str(r.str)
 8763|  29.1k|    {
 8764|  29.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  29.9k|    {
 1740|  29.9k|        return has_value();
 1741|  29.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  66.6k|    {
 1815|  66.6k|        return &value();
 1816|  66.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  66.6k|    {
 1769|  66.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  66.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  66.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  66.6k|        return this->get_value();
 1771|  66.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  41.5k|    {
  643|  41.5k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 18.3k, False: 23.2k]
  ------------------
  644|  18.3k|            destroy_value();
  645|  18.3k|        }
  646|  23.2k|        else {
  647|  23.2k|            destroy_unexpected();
  648|  23.2k|        }
  649|  41.5k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  14.5k|{
 9750|  14.5k|    auto result = make_scan_result<Source, Args...>();
 9751|  14.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  14.5k|                                   make_scan_args(result->values())));
 9753|  14.5k|    return result;
 9754|  14.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    775|{
 9791|    775|    auto result = make_scan_result<Source, T>();
 9792|    775|    fill_scan_result(
 9793|    775|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    775|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    775|                            detail::make_arg<scan_context>(result->value())));
 9795|    775|    return result;
 9796|    775|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  71.3k|    {
 2869|  71.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  71.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  71.3k|    {
 2850|  71.3k|        return decay_copy(t.begin());
 2851|  71.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   895k|{
 2094|   895k|    return SCN_FWD(t);
  ------------------
  |  |  936|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   895k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   177k|    {
 2926|   177k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   177k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   177k|    {
 2908|   177k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   177k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.3k|        : m_value(T{}), m_has_value(true)
  427|  29.3k|    {
  428|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  88.0k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  88.0k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  88.0k|    {
 1740|  88.0k|        return has_value();
 1741|  88.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   176k|    {
  490|   176k|        return m_has_value;
  491|   176k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  69.7k|    {
 1746|  69.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  69.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  69.7k|        return this->get_unexpected().error();
 1748|  69.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  69.7k|    {
  473|  69.7k|        return m_unexpected;
  474|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  41.5k|    {
  456|  41.5k|        return m_value;
  457|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  23.2k|    {
  504|  23.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.2k|                                  std::forward<Args>(args)...);
  506|  23.2k|        m_has_value = false;
  507|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.2k|    {
  473|  23.2k|        return m_unexpected;
  474|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.2k|    {
  481|  23.2k|        return std::move(m_unexpected);
  482|  23.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  18.3k|    {
 6445|  18.3k|        m_range = std::forward<Other>(r);
 6446|  18.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  18.3k|    {
 1795|  18.3k|        return value();
 1796|  18.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  18.3k|    {
 1769|  18.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  18.3k|        return this->get_value();
 1771|  18.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  18.3k|    {
  456|  18.3k|        return m_value;
  457|  18.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  41.7k|{
 9398|  41.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  41.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 9.16k]
  |  |  ------------------
  ------------------
 9402|  32.5k|        return unexpected(result.error());
 9403|  32.5k|    }
 9404|  9.16k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  9.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  41.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  88.0k|{
 5381|  88.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  88.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  88.0k|                  "\n"
 5385|  88.0k|                  "Unsupported range type given as input to a scanning "
 5386|  88.0k|                  "function.\n"
 5387|  88.0k|                  "A range needs to have a character type (value type) "
 5388|  88.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  88.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  88.0k|                  "to be included.\n"
 5391|  88.0k|                  "See the scnlib documentation for more details.");
 5392|  88.0k|    static_assert(
 5393|  88.0k|        !std::is_same_v<T, custom_char_traits>,
 5394|  88.0k|        "\n"
 5395|  88.0k|        "Unsupported range type given as input to a scanning "
 5396|  88.0k|        "function.\n"
 5397|  88.0k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  88.0k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  88.0k|        "not supported.");
 5400|  88.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  88.0k|                  "\n"
 5402|  88.0k|                  "Unsupported range type given as input to a scanning "
 5403|  88.0k|                  "function.\n"
 5404|  88.0k|                  "file_marker_found cannot be used as an "
 5405|  88.0k|                  "source range type to scn::scan.\n"
 5406|  88.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  88.0k|                  "and do not provide an explicit source range, "
 5408|  88.0k|                  "or use scn::scan with a FILE* directly.");
 5409|  88.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  88.0k|                  "\n"
 5411|  88.0k|                  "Unsupported range type given as input to a scanning "
 5412|  88.0k|                  "function.\n"
 5413|  88.0k|                  "In order to be scannable, a range needs to satisfy "
 5414|  88.0k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  88.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  88.0k|                  "\n"
 5417|  88.0k|                  "Unsupported range type given as input to a scanning "
 5418|  88.0k|                  "function.\n"
 5419|  88.0k|                  "A range needs to model forward_range and have a valid "
 5420|  88.0k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  88.0k|                  "Examples of scannable ranges are std::string, "
 5422|  88.0k|                  "std::string_view, "
 5423|  88.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  88.0k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  88.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  88.0k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  88.0k|{
 5320|  88.0k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  88.0k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  88.0k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  88.0k|    {
 3000|  88.0k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  88.0k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  88.0k|    {
 2981|  88.0k|        return t.data();
 2982|  88.0k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  88.0k|    {
 3383|  88.0k|        return detail::to_address(ranges::begin(derived()));
 3384|  88.0k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   259k|{
  316|   259k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   259k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   259k|{
  294|   259k|    return p;
  295|   259k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   106k|    {
 2869|   106k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   106k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   106k|    {
 2850|   106k|        return decay_copy(t.begin());
 2851|   106k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.55M|    {
 3480|  1.55M|        return m_iterator;
 3481|  1.55M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  88.0k|    {
 3339|  88.0k|        return static_cast<const D&>(*this);
 3340|  88.0k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  88.0k|    {
 3075|  88.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  88.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  88.0k|    {
 3041|  88.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  88.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   277k|    {
 3496|   277k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   277k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  69.7k|        : base(unexpect, std::move(e.error())),
 1616|  69.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  69.7k|    {
 1618|  69.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  69.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  69.7k|          m_has_value(false)
  451|  69.7k|    {
  452|  69.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  88.0k|    {
 1316|  88.0k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  18.3k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  18.3k|                      ranges::iterator_t<SourceRange>>) {
 6677|  18.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  18.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   272k|    {
 2869|   272k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   272k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   272k|    {
 2850|   272k|        return decay_copy(t.begin());
 2851|   272k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  18.3k|{
 6662|  18.3k|    return ranges::end(source);
 6663|  18.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   100k|    {
 2926|   100k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   100k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   100k|    {
 2908|   100k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   100k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  1.23M|    {
 3484|  1.23M|        return m_sentinel;
 3485|  1.23M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  18.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  18.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  18.3k|    {
 1572|  18.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  18.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  18.3k|    {
  442|  18.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.6k|{
 6110|  55.6k|    detail::check_scan_arg_types<Args...>();
 6111|  55.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.6k|    {
 6087|  55.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.6k|    {
 6095|  55.6k|        return {detail::make_arg<
 6096|  55.6k|            kind, Context,
 6097|  55.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  55.6k|{
 5884|  55.6k|    return make_value<Context>(value);
 5885|  55.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5809|  58.7k|{
 5810|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  58.7k|    else {
 5817|  58.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  58.7k|            value, context_tag<Context>{}));
 5819|  58.7k|    }
 5820|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  58.7k|    {
 5715|  58.7k|        return {};
 5716|  58.7k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  58.7k|{
 5779|  58.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  58.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  58.7k|    constexpr bool scannable_char =
 5783|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  58.7k|    static_assert(scannable_char,
 5785|  58.7k|                  "Cannot scan an argument of an unsupported character "
 5786|  58.7k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  58.7k|    constexpr bool scannable_const =
 5789|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  58.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  58.7k|    constexpr bool scannable_disabled =
 5793|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  58.7k|    static_assert(scannable_disabled,
 5795|  58.7k|                  "Cannot scan an argument that has been disabled by "
 5796|  58.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  58.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  58.7k|    static_assert(
 5800|  58.7k|        scannable,
 5801|  58.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  58.7k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  58.7k|    return arg_value{arg};
 5805|  58.7k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  58.7k|        : custom_value{static_cast<void*>(&val.val),
 5569|  58.7k|                       scan_custom_arg<T, Context>}
 5570|  58.7k|    {
 5571|  58.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  58.7k|    {
 5587|  58.7k|        static_assert(!is_type_disabled<T>,
 5588|  58.7k|                      "Scanning of custom types is disabled by "
 5589|  58.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  58.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  58.7k|        using context_type = Context;
 5593|  58.7k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  58.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  58.7k|        auto s = scanner_type{};
 5597|       |
 5598|  58.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  58.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  58.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  58.7k|#if SCN_HAS_EXCEPTIONS
 5603|  58.7k|        auto fmt_it = pctx_ref.begin();
 5604|  58.7k|        try {
 5605|  58.7k|            fmt_it = s.parse(pctx_ref);
 5606|  58.7k|        }
 5607|  58.7k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  58.7k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 55.6k]
  |  |  ------------------
  ------------------
 5628|  3.10k|            return e;
 5629|  3.10k|        }
 5630|  55.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 43.4k, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  43.4k|    }                                                  \
  |  |  |  | 3939|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  12.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  12.2k|    static_cast<    \
  |  |  935|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  12.2k|        return {};
 5636|  55.6k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   852k|    {
 6270|   852k|        return m_format.data();
 6271|   852k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6274|   176k|    {
 6275|   176k|        return m_format.data() + m_format.size();
 6276|   176k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|  9.30k|    {
 6316|  9.30k|        m_error = unexpected(detail::handle_error(
 6317|  9.30k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  9.30k|        return m_error.error();
 6319|  9.30k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   417k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   417k|    else {
 4075|       |        // utf-32
 4076|   417k|        static_assert(sizeof(U) == 4);
 4077|   417k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   417k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   417k|        return 1;
 4079|   417k|    }
 4080|   417k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   324k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   324k|    else {
 4281|   324k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   324k|        auto cp = static_cast<char32_t>(input.front());
 4283|   324k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40.8k, False: 283k]
  |  |  ------------------
  ------------------
 4284|  40.8k|            return invalid_code_point;
 4285|  40.8k|        }
 4286|   283k|        return cp;
 4287|   324k|    }
 4288|   324k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   333k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   333k|    else {
 3981|   333k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   333k|    }
 3983|   333k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6322|   176k|    {
 6323|   176k|        return m_error;
 6324|   176k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   333k|    {
 6281|   333k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   333k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   421k|    {
 1740|   421k|        return has_value();
 1741|   421k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   843k|    {
  490|   843k|        return m_has_value;
  491|   843k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   265k|    {
 1746|   265k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   265k|        return this->get_unexpected().error();
 1748|   265k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   265k|    {
  473|   265k|        return m_unexpected;
  474|   265k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   119k|    {
 1805|   119k|        return std::move(value());
 1806|   119k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   155k|    {
 1769|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   155k|        return this->get_value();
 1771|   155k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   155k|    {
  456|   155k|        return m_value;
  457|   155k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   137k|    {
 8971|   137k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   137k|    static_cast<    \
  |  |  935|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   137k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  58.7k|    {
 5723|  58.7k|        return {val};
 5724|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.6k|    {
 6137|  55.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6192|   166k|        : m_desc(desc), m_values(data)
 6193|   166k|    {
 6194|   166k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   773k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   773k|    static_cast<    \
  |  |  935|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   773k|    static_cast<    \
  |  |  935|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   773k|    {
 3466|   773k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   166k|{
 8446|   166k|    return s;
 8447|   166k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   166k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  18.3k|    {
 6434|  18.3k|        return ranges::begin(m_range);
 6435|  18.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  41.7k|{
 9414|  41.7k|#if !SCN_DISABLE_LOCALE
 9415|  41.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  41.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  41.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  41.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 9.16k]
  |  |  ------------------
  ------------------
 9422|  32.5k|        return unexpected(result.error());
 9423|  32.5k|    }
 9424|  9.16k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  9.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  41.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.65k|{
 9438|  4.65k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.65k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.65k|        return unexpected(result.error());
 9443|  4.65k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.65k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.10k|{
 5860|  3.10k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.10k|    basic_scan_arg<Context> arg;
 5863|  3.10k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.10k|    arg.m_value = make_value<Context>(value);
 5865|  3.10k|    return arg;
 5866|  3.10k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   176k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.3k|    {
  613|  29.3k|        construct();
  614|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.3k|    {
  694|  29.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.3k|        m_has_value = true;
  696|  29.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  29.3k|{
  396|  29.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.3k|        T(std::forward<Args>(args)...);
  398|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   100k|    {
  718|   100k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   100k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   100k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   170k|    {
  687|   170k|        return m_has_value;
  688|   170k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  41.5k|    {
  653|  41.5k|        return *value_ptr();
  654|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.3k|    {
  708|  29.3k|        scn::detail::destroy_at(value_ptr());
  709|  29.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  29.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.3k|    else {
  408|  29.3k|        p->~T();
  409|  29.3k|    }
  410|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  29.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.5k|    {
  712|  46.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.6k|{
 6110|  55.6k|    detail::check_scan_arg_types<Args...>();
 6111|  55.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.6k|    {
 6087|  55.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.6k|    {
 6095|  55.6k|        return {detail::make_arg<
 6096|  55.6k|            kind, Context,
 6097|  55.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  55.6k|{
 5884|  55.6k|    return make_value<Context>(value);
 5885|  55.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5809|  58.7k|{
 5810|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  58.7k|    else {
 5817|  58.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  58.7k|            value, context_tag<Context>{}));
 5819|  58.7k|    }
 5820|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  58.7k|    {
 5715|  58.7k|        return {};
 5716|  58.7k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  58.7k|{
 5779|  58.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  58.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  58.7k|    constexpr bool scannable_char =
 5783|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  58.7k|    static_assert(scannable_char,
 5785|  58.7k|                  "Cannot scan an argument of an unsupported character "
 5786|  58.7k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  58.7k|    constexpr bool scannable_const =
 5789|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  58.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  58.7k|    constexpr bool scannable_disabled =
 5793|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  58.7k|    static_assert(scannable_disabled,
 5795|  58.7k|                  "Cannot scan an argument that has been disabled by "
 5796|  58.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  58.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  58.7k|    static_assert(
 5800|  58.7k|        scannable,
 5801|  58.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  58.7k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  58.7k|    return arg_value{arg};
 5805|  58.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  58.7k|        : custom_value{static_cast<void*>(&val.val),
 5569|  58.7k|                       scan_custom_arg<T, Context>}
 5570|  58.7k|    {
 5571|  58.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  58.7k|    {
 5587|  58.7k|        static_assert(!is_type_disabled<T>,
 5588|  58.7k|                      "Scanning of custom types is disabled by "
 5589|  58.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  58.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  58.7k|        using context_type = Context;
 5593|  58.7k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  58.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  58.7k|        auto s = scanner_type{};
 5597|       |
 5598|  58.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  58.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  58.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  58.7k|#if SCN_HAS_EXCEPTIONS
 5603|  58.7k|        auto fmt_it = pctx_ref.begin();
 5604|  58.7k|        try {
 5605|  58.7k|            fmt_it = s.parse(pctx_ref);
 5606|  58.7k|        }
 5607|  58.7k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  58.7k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 55.6k]
  |  |  ------------------
  ------------------
 5628|  3.10k|            return e;
 5629|  3.10k|        }
 5630|  55.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 43.4k, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  43.4k|    }                                                  \
  |  |  |  | 3939|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  12.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  12.2k|    static_cast<    \
  |  |  935|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  12.2k|        return {};
 5636|  55.6k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  58.7k|    {
 5723|  58.7k|        return {val};
 5724|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.6k|    {
 6137|  55.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  52.6k|    {
  643|  52.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 6.11k, False: 46.5k]
  ------------------
  644|  6.11k|            destroy_value();
  645|  6.11k|        }
  646|  46.5k|        else {
  647|  46.5k|            destroy_unexpected();
  648|  46.5k|        }
  649|  52.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.10k|{
 5860|  3.10k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.10k|    basic_scan_arg<Context> arg;
 5863|  3.10k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.10k|    arg.m_value = make_value<Context>(value);
 5865|  3.10k|    return arg;
 5866|  3.10k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.3k|    {
  613|  29.3k|        construct();
  614|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.3k|    {
  694|  29.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.3k|        m_has_value = true;
  696|  29.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  29.3k|{
  396|  29.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.3k|        T(std::forward<Args>(args)...);
  398|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   100k|    {
  718|   100k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   100k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   100k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   170k|    {
  687|   170k|        return m_has_value;
  688|   170k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  41.5k|    {
  653|  41.5k|        return *value_ptr();
  654|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.3k|    {
  708|  29.3k|        scn::detail::destroy_at(value_ptr());
  709|  29.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  29.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.3k|    else {
  408|  29.3k|        p->~T();
  409|  29.3k|    }
  410|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  29.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.5k|    {
  712|  46.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.6k|{
 6110|  55.6k|    detail::check_scan_arg_types<Args...>();
 6111|  55.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.6k|    {
 6087|  55.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.6k|    {
 6095|  55.6k|        return {detail::make_arg<
 6096|  55.6k|            kind, Context,
 6097|  55.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  55.6k|{
 5884|  55.6k|    return make_value<Context>(value);
 5885|  55.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5809|  58.7k|{
 5810|  58.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  58.7k|    else {
 5817|  58.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  58.7k|            value, context_tag<Context>{}));
 5819|  58.7k|    }
 5820|  58.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  58.7k|    {
 5715|  58.7k|        return {};
 5716|  58.7k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  58.7k|{
 5779|  58.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  58.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  58.7k|    constexpr bool scannable_char =
 5783|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  58.7k|    static_assert(scannable_char,
 5785|  58.7k|                  "Cannot scan an argument of an unsupported character "
 5786|  58.7k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  58.7k|    constexpr bool scannable_const =
 5789|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  58.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  58.7k|    constexpr bool scannable_disabled =
 5793|  58.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  58.7k|    static_assert(scannable_disabled,
 5795|  58.7k|                  "Cannot scan an argument that has been disabled by "
 5796|  58.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  58.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  58.7k|    static_assert(
 5800|  58.7k|        scannable,
 5801|  58.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  58.7k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  58.7k|    return arg_value{arg};
 5805|  58.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  58.7k|        : custom_value{static_cast<void*>(&val.val),
 5569|  58.7k|                       scan_custom_arg<T, Context>}
 5570|  58.7k|    {
 5571|  58.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  58.7k|    {
 5587|  58.7k|        static_assert(!is_type_disabled<T>,
 5588|  58.7k|                      "Scanning of custom types is disabled by "
 5589|  58.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  58.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  58.7k|        using context_type = Context;
 5593|  58.7k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  58.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  58.7k|        auto s = scanner_type{};
 5597|       |
 5598|  58.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  58.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  58.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  58.7k|#if SCN_HAS_EXCEPTIONS
 5603|  58.7k|        auto fmt_it = pctx_ref.begin();
 5604|  58.7k|        try {
 5605|  58.7k|            fmt_it = s.parse(pctx_ref);
 5606|  58.7k|        }
 5607|  58.7k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  58.7k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 55.6k]
  |  |  ------------------
  ------------------
 5628|  3.10k|            return e;
 5629|  3.10k|        }
 5630|  55.6k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 43.4k, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  43.4k|    }                                                  \
  |  |  |  | 3939|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  12.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  12.2k|    static_cast<    \
  |  |  935|  12.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  12.2k|        return {};
 5636|  55.6k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  58.7k|    {
 5723|  58.7k|        return {val};
 5724|  58.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.6k|    {
 6137|  55.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  52.6k|    {
  643|  52.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 6.11k, False: 46.5k]
  ------------------
  644|  6.11k|            destroy_value();
  645|  6.11k|        }
  646|  46.5k|        else {
  647|  46.5k|            destroy_unexpected();
  648|  46.5k|        }
  649|  52.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  3.10k|{
 5860|  3.10k|    check_scan_arg_types<T>();
 5861|       |
 5862|  3.10k|    basic_scan_arg<Context> arg;
 5863|  3.10k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  3.10k|    arg.m_value = make_value<Context>(value);
 5865|  3.10k|    return arg;
 5866|  3.10k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  69.7k|    {
 2869|  69.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  69.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  69.7k|    {
 2850|  69.7k|        return decay_copy(t.begin());
 2851|  69.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  1.25M|{
 2094|  1.25M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.25M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   176k|    {
 2926|   176k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   176k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   176k|    {
 2908|   176k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   176k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  29.3k|        : m_value(T{}), m_has_value(true)
  427|  29.3k|    {
  428|  29.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|  88.0k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  88.0k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  88.0k|    {
 1740|  88.0k|        return has_value();
 1741|  88.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   176k|    {
  490|   176k|        return m_has_value;
  491|   176k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  69.7k|    {
 1746|  69.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  69.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  69.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  69.7k|        return this->get_unexpected().error();
 1748|  69.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  69.7k|    {
  473|  69.7k|        return m_unexpected;
  474|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   117k|    {
  490|   117k|        return m_has_value;
  491|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  41.5k|    {
  456|  41.5k|        return m_value;
  457|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  23.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  23.2k|    {
  504|  23.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  23.2k|                                  std::forward<Args>(args)...);
  506|  23.2k|        m_has_value = false;
  507|  23.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.2k|    {
  473|  23.2k|        return m_unexpected;
  474|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  23.2k|    {
  481|  23.2k|        return std::move(m_unexpected);
  482|  23.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  18.3k|    {
 6445|  18.3k|        m_range = std::forward<Other>(r);
 6446|  18.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  18.3k|    {
 1795|  18.3k|        return value();
 1796|  18.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  18.3k|    {
 1769|  18.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  18.3k|        return this->get_value();
 1771|  18.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  18.3k|    {
  456|  18.3k|        return m_value;
  457|  18.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  41.7k|{
 9398|  41.7k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  41.7k|    auto result = vscan_impl(buffer, format, args);
 9401|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 9.16k]
  |  |  ------------------
  ------------------
 9402|  32.5k|        return unexpected(result.error());
 9403|  32.5k|    }
 9404|  9.16k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  9.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  41.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  88.0k|{
 5381|  88.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  88.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  88.0k|                  "\n"
 5385|  88.0k|                  "Unsupported range type given as input to a scanning "
 5386|  88.0k|                  "function.\n"
 5387|  88.0k|                  "A range needs to have a character type (value type) "
 5388|  88.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  88.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  88.0k|                  "to be included.\n"
 5391|  88.0k|                  "See the scnlib documentation for more details.");
 5392|  88.0k|    static_assert(
 5393|  88.0k|        !std::is_same_v<T, custom_char_traits>,
 5394|  88.0k|        "\n"
 5395|  88.0k|        "Unsupported range type given as input to a scanning "
 5396|  88.0k|        "function.\n"
 5397|  88.0k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  88.0k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  88.0k|        "not supported.");
 5400|  88.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  88.0k|                  "\n"
 5402|  88.0k|                  "Unsupported range type given as input to a scanning "
 5403|  88.0k|                  "function.\n"
 5404|  88.0k|                  "file_marker_found cannot be used as an "
 5405|  88.0k|                  "source range type to scn::scan.\n"
 5406|  88.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  88.0k|                  "and do not provide an explicit source range, "
 5408|  88.0k|                  "or use scn::scan with a FILE* directly.");
 5409|  88.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  88.0k|                  "\n"
 5411|  88.0k|                  "Unsupported range type given as input to a scanning "
 5412|  88.0k|                  "function.\n"
 5413|  88.0k|                  "In order to be scannable, a range needs to satisfy "
 5414|  88.0k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  88.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  88.0k|                  "\n"
 5417|  88.0k|                  "Unsupported range type given as input to a scanning "
 5418|  88.0k|                  "function.\n"
 5419|  88.0k|                  "A range needs to model forward_range and have a valid "
 5420|  88.0k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  88.0k|                  "Examples of scannable ranges are std::string, "
 5422|  88.0k|                  "std::string_view, "
 5423|  88.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  88.0k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  88.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  88.0k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  88.0k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  88.0k|    else {
 5366|  88.0k|        return make_forward_scan_buffer(r);
 5367|  88.0k|    }
 5368|  88.0k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  88.0k|{
 5185|  88.0k|    return basic_scan_forward_buffer_impl(range);
 5186|  88.0k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  88.0k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  88.0k|          m_cursor(ranges::begin(*m_range))
 4766|  88.0k|    {
 4767|  88.0k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  88.0k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  88.0k|    {
 4738|  88.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  88.0k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  88.0k|    {
 4429|  88.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   171k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   106k|    {
 2869|   106k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   106k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   106k|    {
 2850|   106k|        return decay_copy(t.begin());
 2851|   106k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   124k|    {
 3480|   124k|        return m_iterator;
 3481|   124k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   299k|    {
 4771|   299k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 16.5k, False: 283k]
  ------------------
 4772|  16.5k|            return false;
 4773|  16.5k|        }
 4774|   283k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   283k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   283k|        }
 4777|   283k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 199k, False: 83.3k]
  ------------------
 4778|   199k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   199k|                                          this->m_current_view.begin(),
 4780|   199k|                                          this->m_current_view.end());
 4781|   199k|        }
 4782|   283k|        m_latest = *m_cursor;
 4783|   283k|        ++m_cursor;
 4784|   283k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   283k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   283k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   283k|        }
 4788|   283k|        return true;
 4789|   299k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   866k|    {
 2926|   866k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   866k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   866k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   866k|    {
 2908|   866k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   866k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   866k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   884k|    {
 3484|   884k|        return m_sentinel;
 3485|   884k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  88.0k|    {
 4346|  88.0k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  88.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  88.0k|        return true;
 4348|  88.0k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  69.7k|        : base(unexpect, std::move(e.error())),
 1616|  69.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  69.7k|    {
 1618|  69.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  69.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  69.7k|          m_has_value(false)
  451|  69.7k|    {
  452|  69.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  88.0k|    {
 1316|  88.0k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  18.3k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  18.3k|                      ranges::iterator_t<SourceRange>>) {
 6677|  18.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  18.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  18.3k|    {
 2869|  18.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  18.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  18.3k|    {
 2850|  18.3k|        return decay_copy(t.begin());
 2851|  18.3k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  18.3k|{
 6662|  18.3k|    return ranges::end(source);
 6663|  18.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  18.3k|    {
 2926|  18.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  18.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  18.3k|    {
 2908|  18.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  18.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  18.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  18.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  18.3k|    {
 1572|  18.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  18.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  18.3k|    {
  442|  18.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   106k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   106k|    static_cast<    \
  |  |  935|   106k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   106k|    static_cast<    \
  |  |  935|   106k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   106k|    {
 3466|   106k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  18.3k|    {
 6434|  18.3k|        return ranges::begin(m_range);
 6435|  18.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  41.7k|{
 9414|  41.7k|#if !SCN_DISABLE_LOCALE
 9415|  41.7k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  41.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  41.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  41.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  41.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 9.16k]
  |  |  ------------------
  ------------------
 9422|  32.5k|        return unexpected(result.error());
 9423|  32.5k|    }
 9424|  9.16k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  9.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  41.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.65k|{
 9438|  4.65k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.65k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.65k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.65k|        return unexpected(result.error());
 9443|  4.65k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.65k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.3k|    {
  613|  29.3k|        construct();
  614|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.3k|    {
  694|  29.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.3k|        m_has_value = true;
  696|  29.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  29.3k|{
  396|  29.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.3k|        T(std::forward<Args>(args)...);
  398|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   100k|    {
  718|   100k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   100k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   100k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   170k|    {
  687|   170k|        return m_has_value;
  688|   170k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  41.5k|    {
  653|  41.5k|        return *value_ptr();
  654|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.3k|    {
  708|  29.3k|        scn::detail::destroy_at(value_ptr());
  709|  29.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  29.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.3k|    else {
  408|  29.3k|        p->~T();
  409|  29.3k|    }
  410|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  29.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.5k|    {
  712|  46.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  52.6k|    {
  643|  52.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 6.11k, False: 46.5k]
  ------------------
  644|  6.11k|            destroy_value();
  645|  6.11k|        }
  646|  46.5k|        else {
  647|  46.5k|            destroy_unexpected();
  648|  46.5k|        }
  649|  52.6k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  29.3k|{
 9637|  29.3k|    return scan_result_type<Source, Args...>();
 9638|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  29.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  29.3k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  29.3k|    {
  613|  29.3k|        construct();
  614|  29.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  29.3k|    {
  694|  29.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  29.3k|        m_has_value = true;
  696|  29.3k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  29.3k|{
  396|  29.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  29.3k|        T(std::forward<Args>(args)...);
  398|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  29.3k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   100k|    {
  718|   100k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   100k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   100k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  29.3k|{
 9622|  29.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 6.11k]
  |  |  ------------------
  ------------------
 9623|  23.2k|        out = unexpected(in.error());
 9624|  23.2k|    }
 9625|  6.11k|    else {
 9626|  6.11k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  6.11k|    static_cast<    \
  |  |  935|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  6.11k|    }
 9628|  29.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  23.2k|        : base(unexpect, std::move(e.error())),
 1616|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.2k|    {
 1618|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  23.2k|        : m_has_value(false)
  637|  23.2k|    {
  638|  23.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   116k|    {
  730|   116k|        return reinterpret_cast<unexpected<E>*>(
  731|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  23.2k|    {
 1316|  23.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  23.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  23.2k|    {
  903|  23.2k|        assign_common(std::move(other));
  904|  23.2k|        return *this;
  905|  23.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  23.2k|    {
  950|  23.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 23.2k, False: 0]
  ------------------
  951|  23.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 23.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  23.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  23.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   170k|    {
  687|   170k|        return m_has_value;
  688|   170k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  41.5k|    {
  653|  41.5k|        return *value_ptr();
  654|  41.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  23.2k|    {
 1046|  23.2k|        this->destroy_value();
 1047|  23.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  29.3k|    {
  708|  29.3k|        scn::detail::destroy_at(value_ptr());
  709|  29.3k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  29.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  29.3k|    else {
  408|  29.3k|        p->~T();
  409|  29.3k|    }
  410|  29.3k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  29.3k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  23.2k|    {
  701|  23.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  23.2k|                                  std::forward<Args>(args)...);
  703|  23.2k|        m_has_value = false;
  704|  23.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  23.2k|    {
  678|  23.2k|        return std::move(*unexpected_ptr());
  679|  23.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  46.5k|    {
  712|  46.5k|        scn::detail::destroy_at(unexpected_ptr());
  713|  46.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  27.8k|    {
 8768|  27.8k|        return m_str;
 8769|  27.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  27.8k|        : m_str(r.str)
 8763|  27.8k|    {
 8764|  27.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  29.3k|    {
 1740|  29.3k|        return has_value();
 1741|  29.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  41.5k|    {
 1815|  41.5k|        return &value();
 1816|  41.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  41.5k|    {
 1769|  41.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  41.5k|        return this->get_value();
 1771|  41.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  52.6k|    {
  643|  52.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 6.11k, False: 46.5k]
  ------------------
  644|  6.11k|            destroy_value();
  645|  6.11k|        }
  646|  46.5k|        else {
  647|  46.5k|            destroy_unexpected();
  648|  46.5k|        }
  649|  52.6k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.28M|    {
 3480|  1.28M|        return m_iterator;
 3481|  1.28M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   991k|    {
 3480|   991k|        return m_iterator;
 3481|   991k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  11.8M|    {
 4473|  11.8M|        assert(m_begin);
 4474|  11.8M|        return m_end == nullptr;
 4475|  11.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   160k|    {
 4490|   160k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 72.6k, False: 87.5k]
  ------------------
 4491|  72.6k|            return make_string_view_from_pointers(
 4492|  72.6k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  72.6k|                static_cast<const CharT*>(m_end));
 4494|  72.6k|        }
 4495|  87.5k|        return parent()->get_segment_starting_at(position());
 4496|   160k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  6.85M|    {
 4484|  6.85M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  6.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  6.85M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  6.85M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  87.5k|    {
 4377|  87.5k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 4378|  87.5k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  87.5k|        const auto start = pos - m_putback_buffer.size();
 4382|  87.5k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  87.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  87.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  87.5k|        return m_current_view.substr(start);
 4384|  87.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   240k|    {
 4468|   240k|        return m_position;
 4469|   240k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   342k|    {
 4399|   342k|        return m_is_contiguous;
 4400|   342k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  5.87M|    {
 4473|  5.87M|        assert(m_begin);
 4474|  5.87M|        return m_end == nullptr;
 4475|  5.87M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  83.4k|    {
 4490|  83.4k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 83.4k, False: 0]
  ------------------
 4491|  83.4k|            return make_string_view_from_pointers(
 4492|  83.4k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  83.4k|                static_cast<const CharT*>(m_end));
 4494|  83.4k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  83.4k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  3.25M|    {
 4484|  3.25M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  3.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  3.25M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  3.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   120k|    {
 4468|   120k|        return m_position;
 4469|   120k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   347k|    {
 4399|   347k|        return m_is_contiguous;
 4400|   347k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   220k|    {
 3334|   220k|        return static_cast<D&>(*this);
 3335|   220k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   220k|    {
 3375|   220k|        return detail::to_address(ranges::begin(derived()));
 3376|   220k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   171k|    {
 3334|   171k|        return static_cast<D&>(*this);
 3335|   171k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   171k|    {
 3375|   171k|        return detail::to_address(ranges::begin(derived()));
 3376|   171k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   173k|    {
 8965|   173k|        return ranges::subrange{begin(), end()};
 8966|   173k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   173k|    {
 8957|   173k|        return ranges::default_sentinel;
 8958|   173k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   668k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   668k|    static_cast<    \
  |  |  935|   668k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   668k|    static_cast<    \
  |  |  935|   668k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   668k|    {
 3466|   668k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   177k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  87.5k|    {
 1979|  87.5k|        return detail::transform_error_impl(std::move(*this),
 1980|  87.5k|                                            std::forward<F>(f));
 1981|  87.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  87.5k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  87.5k|    else {
 1472|  87.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  87.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  87.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 86.2k, False: 1.30k]
  |  |  ------------------
  ------------------
 1474|  87.5k|                   ? result(*std::forward<Exp>(exp))
 1475|  87.5k|                   : result(unexpect,
 1476|  1.30k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.30k|                                           std::forward<Exp>(exp).error()));
 1478|  87.5k|    }
 1479|  87.5k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   175k|    {
  490|   175k|        return m_has_value;
  491|   175k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  86.2k|    {
 1805|  86.2k|        return std::move(value());
 1806|  86.2k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  86.2k|    {
 1769|  86.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  86.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  86.2k|        return this->get_value();
 1771|  86.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  86.2k|    {
  456|  86.2k|        return m_value;
  457|  86.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   236k|        : base(std::in_place, std::forward<U>(val)),
 1570|   236k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   236k|    {
 1572|   236k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   236k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   236k|    {
  442|   236k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   410k|    {
 1316|   410k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  3.75k|{
 1350|  3.75k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.75k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.30k|    {
 1756|  1.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.30k|        return std::move(this->get_unexpected().error());
 1758|  1.30k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.30k|    {
  473|  1.30k|        return m_unexpected;
  474|  1.30k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  7.50k|    {
  365|  7.50k|        return m_unexpected;
  366|  7.50k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.30k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.30k|    {
 1628|  1.30k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   133k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   133k|          m_has_value(false)
  451|   133k|    {
  452|   133k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   166k|    {
 8965|   166k|        return ranges::subrange{begin(), end()};
 8966|   166k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   166k|    {
 8957|   166k|        return ranges::default_sentinel;
 8958|   166k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   583k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   583k|    static_cast<    \
  |  |  935|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   583k|    static_cast<    \
  |  |  935|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   583k|    {
 3466|   583k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  83.4k|    {
 1979|  83.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  83.4k|                                            std::forward<F>(f));
 1981|  83.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  83.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  83.4k|    else {
 1472|  83.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  83.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  83.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 82.5k, False: 846]
  |  |  ------------------
  ------------------
 1474|  83.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  83.4k|                   : result(unexpect,
 1476|    846|                            trivial_invoke(std::forward<F>(f),
 1477|    846|                                           std::forward<Exp>(exp).error()));
 1478|  83.4k|    }
 1479|  83.4k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   166k|    {
  490|   166k|        return m_has_value;
  491|   166k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  82.5k|    {
 1805|  82.5k|        return std::move(value());
 1806|  82.5k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  82.5k|    {
 1769|  82.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  82.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  82.5k|        return this->get_value();
 1771|  82.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  82.5k|    {
  456|  82.5k|        return m_value;
  457|  82.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   137k|        : base(std::in_place, std::forward<U>(val)),
 1570|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   137k|    {
 1572|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   137k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   137k|    {
  442|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   421k|    {
 1316|   421k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|    846|    {
 1756|    846|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    846|        return std::move(this->get_unexpected().error());
 1758|    846|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    846|    {
  473|    846|        return m_unexpected;
  474|    846|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|    846|        : base(unexpect, std::forward<Args>(args)...),
 1626|    846|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    846|    {
 1628|    846|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   265k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   265k|          m_has_value(false)
  451|   265k|    {
  452|   265k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   209k|        : base(unexpect, std::move(e.error())),
 1616|   209k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   209k|    {
 1618|   209k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   209k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   209k|          m_has_value(false)
  451|   209k|    {
  452|   209k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   341k|    {
 1316|   341k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  34.8k|        : base(unexpect, std::move(e.error())),
 1616|  34.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  34.8k|    {
 1618|  34.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  35.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  35.6k|          m_has_value(false)
  451|  35.6k|    {
  452|  35.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   147k|    {
 1316|   147k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   111k|        : base(std::in_place, std::forward<U>(val)),
 1570|   111k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   111k|    {
 1572|   111k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   111k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   111k|    {
  442|   111k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   147k|    {
 1740|   147k|        return has_value();
 1741|   147k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   295k|    {
  490|   295k|        return m_has_value;
  491|   295k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  35.6k|    {
 1746|  35.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  35.6k|        return this->get_unexpected().error();
 1748|  35.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  35.6k|    {
  473|  35.6k|        return m_unexpected;
  474|  35.6k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   111k|    {
 1805|   111k|        return std::move(value());
 1806|   111k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   111k|    {
 1769|   111k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   111k|        return this->get_value();
 1771|   111k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   111k|    {
  456|   111k|        return m_value;
  457|   111k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  69.7k|        : base(unexpect, std::move(e.error())),
 1616|  69.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  69.7k|    {
 1618|  69.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  70.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  70.5k|          m_has_value(false)
  451|  70.5k|    {
  452|  70.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   171k|    {
 1316|   171k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   100k|        : base(std::in_place, std::forward<U>(val)),
 1570|   100k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   100k|    {
 1572|   100k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   100k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   100k|    {
  442|   100k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   171k|    {
 1740|   171k|        return has_value();
 1741|   171k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   343k|    {
  490|   343k|        return m_has_value;
  491|   343k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  70.5k|    {
 1746|  70.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  70.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  70.5k|        return this->get_unexpected().error();
 1748|  70.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  70.5k|    {
  473|  70.5k|        return m_unexpected;
  474|  70.5k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   100k|    {
 1805|   100k|        return std::move(value());
 1806|   100k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   100k|    {
 1769|   100k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   100k|        return this->get_value();
 1771|   100k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   100k|    {
  456|   100k|        return m_value;
  457|   100k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  72.6k|    {
 1979|  72.6k|        return detail::transform_error_impl(std::move(*this),
 1980|  72.6k|                                            std::forward<F>(f));
 1981|  72.6k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  72.6k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  72.6k|    else {
 1472|  72.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  72.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  72.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 71.8k, False: 750]
  |  |  ------------------
  ------------------
 1474|  72.6k|                   ? result(*std::forward<Exp>(exp))
 1475|  72.6k|                   : result(unexpect,
 1476|    750|                            trivial_invoke(std::forward<F>(f),
 1477|    750|                                           std::forward<Exp>(exp).error()));
 1478|  72.6k|    }
 1479|  72.6k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   145k|    {
  490|   145k|        return m_has_value;
  491|   145k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  71.8k|    {
 1805|  71.8k|        return std::move(value());
 1806|  71.8k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  71.8k|    {
 1769|  71.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  71.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  71.8k|        return this->get_value();
 1771|  71.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  71.8k|    {
  456|  71.8k|        return m_value;
  457|  71.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    750|    {
 1756|    750|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    750|        return std::move(this->get_unexpected().error());
 1758|    750|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    750|    {
  473|    750|        return m_unexpected;
  474|    750|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    750|        : base(unexpect, std::forward<Args>(args)...),
 1626|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    750|    {
 1628|    750|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   684k|    {
 8949|   684k|        return m_current;
 8950|   684k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|   145k|    {
 8837|   145k|        return m_args;
 8838|   145k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   303k|    {
 8842|   303k|        return m_locale;
 8843|   303k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   310k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   310k|    static_cast<    \
  |  |  935|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   310k|    static_cast<    \
  |  |  935|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   310k|    {
 8849|   310k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   145k|    {
 3000|   145k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   145k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   145k|    {
 2981|   145k|        return t.data();
 2982|   145k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  72.6k|    {
 3075|  72.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  72.6k|    {
 3041|  72.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   132k|        : base(unexpect, std::move(e.error())),
 1616|   132k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   132k|    {
 1618|   132k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  40.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  40.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  40.0k|    {
 1572|  40.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  40.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  40.0k|    {
  442|  40.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   573k|    {
 8949|   573k|        return m_current;
 8950|   573k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|   166k|    {
 8837|   166k|        return m_args;
 8838|   166k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   332k|    {
 8842|   332k|        return m_locale;
 8843|   332k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   343k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   343k|    static_cast<    \
  |  |  935|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   343k|    static_cast<    \
  |  |  935|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   343k|    {
 8849|   343k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   166k|    {
 3000|   166k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   166k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   166k|    {
 2981|   166k|        return t.data();
 2982|   166k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  83.4k|    {
 3075|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  83.4k|    {
 3041|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  83.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   265k|        : base(unexpect, std::move(e.error())),
 1616|   265k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   265k|    {
 1618|   265k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  18.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  18.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  18.3k|    {
 1572|  18.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  18.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  18.3k|    {
  442|  18.3k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   467k|    {
 4559|   467k|        return x.is_at_end();
 4560|   467k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.22M|    {
 4603|  1.22M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.22M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.22M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.22M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.22M|        return !read_at_position();
 4610|  1.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  3.53M|    {
 4583|  3.53M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  3.53M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 3.53M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  3.53M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  3.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.82M, False: 711k]
  |  |  ------------------
  ------------------
 4590|  2.82M|            return true;
 4591|  2.82M|        }
 4592|       |
 4593|  1.40M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 711k, False: 698k]
  ------------------
 4594|   711k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 12.7k, False: 698k]
  ------------------
 4595|  12.7k|                return false;
 4596|  12.7k|            }
 4597|   711k|        }
 4598|   698k|        return true;
 4599|   711k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.11M|    {
 4518|  1.11M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.11M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.11M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.11M|        auto res = read_at_position();
 4527|  1.11M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.11M|        return parent()->get_character_at(m_position);
 4529|  1.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.11M|    {
 4388|  1.11M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 355k, False: 757k]
  |  |  ------------------
  ------------------
 4389|  1.11M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   355k|            return m_putback_buffer[pos];
 4391|   355k|        }
 4392|   757k|        const auto start = pos - m_putback_buffer.size();
 4393|   757k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   757k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   757k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   757k|        return m_current_view[start];
 4395|   757k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  86.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  86.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  86.2k|    {
 1572|  86.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  86.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  86.2k|    {
  442|  86.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.30k|        : base(unexpect, std::move(e.error())),
 1616|  1.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.30k|    {
 1618|  1.30k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30k|          m_has_value(false)
  451|  1.30k|    {
  452|  1.30k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.75k|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.75k|    {
  360|  3.75k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.75k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.75k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.19M|    {
 4504|  1.19M|        ++m_position;
 4505|  1.19M|        (void)read_at_position();
 4506|  1.19M|        return *this;
 4507|  1.19M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   543k|    {
 4553|   543k|        return !(lhs == rhs);
 4554|   543k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   543k|    {
 4548|   543k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 543k, False: 0]
  |  Branch (4548:46): [True: 65.2k, False: 478k]
  ------------------
 4549|   543k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  3.75k|        : m_unexpected(std::forward<Err>(e))
  350|  3.75k|    {
  351|  3.75k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.75k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.75k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.55M|    {
 3484|  1.55M|        return m_sentinel;
 3485|  1.55M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   759k|    {
 4570|   759k|        return !x.is_at_end();
 4571|   759k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    750|        : base(unexpect, std::move(e.error())),
 1616|    750|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    750|    {
 1618|    750|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    750|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    750|          m_has_value(false)
  451|    750|    {
  452|    750|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  72.6k|    {
 1316|  72.6k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  71.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  71.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  71.8k|    {
 1572|  71.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  71.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  71.8k|    {
  442|  71.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   217k|    {
 3000|   217k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   217k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   217k|    {
 2981|   217k|        return t.data();
 2982|   217k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   131k|        : base(std::in_place, std::forward<U>(val)),
 1570|   131k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   131k|    {
 1572|   131k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   131k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   131k|    {
  442|   131k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  95.0k|    {
 1795|  95.0k|        return value();
 1796|  95.0k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  86.2k|    {
 2869|  86.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  86.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  86.2k|    {
 2850|  86.2k|        return decay_copy(t.begin());
 2851|  86.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  86.2k|{
 2094|  86.2k|    return SCN_FWD(t);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  86.2k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  72.6k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  72.6k|    {
 3912|  72.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  87.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  87.5k|    {
 3912|  87.5k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   367k|    {
 4559|   367k|        return x.is_at_end();
 4560|   367k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   719k|    {
 4603|   719k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 719k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   719k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 719k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   719k|        return !read_at_position();
 4610|   719k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.73M|    {
 4583|  1.73M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.73M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.73M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.73M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.43M, False: 299k]
  |  |  ------------------
  ------------------
 4590|  1.43M|            return true;
 4591|  1.43M|        }
 4592|       |
 4593|   582k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 299k, False: 283k]
  ------------------
 4594|   299k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 16.5k, False: 283k]
  ------------------
 4595|  16.5k|                return false;
 4596|  16.5k|            }
 4597|   299k|        }
 4598|   283k|        return true;
 4599|   299k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  2.31M|    {
 4357|  2.31M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  2.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   634k|    {
 4518|   634k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   634k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   634k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   634k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 634k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   634k|        auto res = read_at_position();
 4527|   634k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   634k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   634k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   634k|        return parent()->get_character_at(m_position);
 4529|   634k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   634k|    {
 4388|   634k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 345k, False: 288k]
  |  |  ------------------
  ------------------
 4389|   634k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   345k|            return m_putback_buffer[pos];
 4391|   345k|        }
 4392|   288k|        const auto start = pos - m_putback_buffer.size();
 4393|   288k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   288k|        return m_current_view[start];
 4395|   288k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  82.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  82.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  82.5k|    {
 1572|  82.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  82.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  82.5k|    {
  442|  82.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  83.4k|    {
 1316|  83.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|    846|        : base(unexpect, std::move(e.error())),
 1616|    846|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    846|    {
 1618|    846|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|    846|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    846|          m_has_value(false)
  451|    846|    {
  452|    846|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   383k|    {
 4504|   383k|        ++m_position;
 4505|   383k|        (void)read_at_position();
 4506|   383k|        return *this;
 4507|   383k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|   132k|    {
 4553|   132k|        return !(lhs == rhs);
 4554|   132k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|   132k|    {
 4548|   132k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 132k, False: 0]
  |  Branch (4548:46): [True: 18.3k, False: 113k]
  ------------------
 4549|   132k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   965k|    {
 3484|   965k|        return m_sentinel;
 3485|   965k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   352k|    {
 4570|   352k|        return !x.is_at_end();
 4571|   352k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    846|        : base(unexpect, std::move(e.error())),
 1616|    846|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    846|    {
 1618|    846|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    846|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    846|          m_has_value(false)
  451|    846|    {
  452|    846|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  83.4k|    {
 1316|  83.4k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  82.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  82.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  82.5k|    {
 1572|  82.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  82.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  82.5k|    {
  442|  82.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   166k|    {
  490|   166k|        return m_has_value;
  491|   166k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  82.5k|    {
 1769|  82.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  82.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  82.5k|        return this->get_value();
 1771|  82.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  82.5k|    {
  456|  82.5k|        return m_value;
  457|  82.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  83.4k|    {
 1979|  83.4k|        return detail::transform_error_impl(std::move(*this),
 1980|  83.4k|                                            std::forward<F>(f));
 1981|  83.4k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  83.4k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  83.4k|    else {
 1472|  83.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  83.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  83.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 82.5k, False: 846]
  |  |  ------------------
  ------------------
 1474|  83.4k|                   ? result(*std::forward<Exp>(exp))
 1475|  83.4k|                   : result(unexpect,
 1476|    846|                            trivial_invoke(std::forward<F>(f),
 1477|    846|                                           std::forward<Exp>(exp).error()));
 1478|  83.4k|    }
 1479|  83.4k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  82.5k|    {
 1805|  82.5k|        return std::move(value());
 1806|  82.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    846|    {
 1756|    846|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    846|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    846|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    846|        return std::move(this->get_unexpected().error());
 1758|    846|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    846|    {
  473|    846|        return m_unexpected;
  474|    846|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    846|        : base(unexpect, std::forward<Args>(args)...),
 1626|    846|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    846|    {
 1628|    846|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   166k|    {
 3000|   166k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   166k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   166k|    {
 2981|   166k|        return t.data();
 2982|   166k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  36.6k|    {
 1795|  36.6k|        return value();
 1796|  36.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  82.5k|    {
 2869|  82.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  82.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  82.5k|    {
 2850|  82.5k|        return decay_copy(t.begin());
 2851|  82.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  82.5k|{
 2094|  82.5k|    return SCN_FWD(t);
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  82.5k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  83.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  83.4k|    {
 3912|  83.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  83.4k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  83.4k|    {
 3912|  83.4k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  4.94M|    {
 4357|  4.94M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  4.94M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   160k|    {
 6177|   160k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   160k|        return static_cast<std::size_t>(m_desc &
 6182|   160k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   160k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   320k|    {
 6203|   320k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   320k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   160k|    {
 6145|   160k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   160k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   160k|        const auto t = type(id);
 6157|   160k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   160k|        basic_scan_arg<Context> arg;
 6162|   160k|        arg.m_type = t;
 6163|   160k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 160k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   160k|        else {
 6167|   160k|            arg.m_value = m_values[id];
 6168|   160k|        }
 6169|   160k|        return arg;
 6170|   160k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   160k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   160k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   160k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   160k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   160k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   160k|    {
 6207|   160k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   160k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|   325k|    {
 5961|   325k|        return m_type != detail::arg_type::none_type;
 5962|   325k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  2.32k|{
 9300|  2.32k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.32k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.32k|{
 9201|  2.32k|#define SCN_VISIT(Type)                                                \
 9202|  2.32k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.32k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.32k|    }                                                                  \
 9205|  2.32k|    else {                                                             \
 9206|  2.32k|        return vis(monostate_val);                                     \
 9207|  2.32k|    }
 9208|       |
 9209|  2.32k|    monostate monostate_val{};
 9210|       |
 9211|  2.32k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.32k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.32k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.32k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.32k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.32k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.32k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.32k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.32k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.32k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.32k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.32k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.32k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.32k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.32k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.32k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.32k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.32k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.32k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.32k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.32k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.32k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.32k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.32k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.32k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.32k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.32k, False: 0]
  ------------------
 9262|  2.32k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.32k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.32k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.32k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.32k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.32k|            SCN_CLANG_POP
 9279|  2.32k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   325k|{
 6006|   325k|    return arg.m_type;
 6007|   325k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   164k|{
 6018|   164k|    return arg.m_value;
 6019|   164k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   164k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   164k|    {
 6258|   164k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  74.9k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  74.9k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  74.9k|          m_position(pos)
 4463|  74.9k|    {
 4464|  74.9k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   164k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   164k|    static_cast<    \
  |  |  935|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   164k|    {
 8934|   164k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5938|   164k|        {
 5939|   164k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   164k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5943|   164k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   162k|{
 4691|   162k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 72.6k, False: 89.8k]
  ------------------
 4692|  72.6k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  72.6k|                                ranges::default_sentinel};
 4694|  72.6k|    }
 4695|  89.8k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  89.8k|                            ranges::default_sentinel};
 4697|   162k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  89.8k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  89.8k|    {
 4455|  89.8k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  89.8k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  89.8k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  2.32k|{
 9300|  2.32k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.32k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.32k|{
 9201|  2.32k|#define SCN_VISIT(Type)                                                \
 9202|  2.32k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.32k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.32k|    }                                                                  \
 9205|  2.32k|    else {                                                             \
 9206|  2.32k|        return vis(monostate_val);                                     \
 9207|  2.32k|    }
 9208|       |
 9209|  2.32k|    monostate monostate_val{};
 9210|       |
 9211|  2.32k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.32k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.32k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.32k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.32k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.32k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.32k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.32k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.32k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.32k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.32k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.32k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.32k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.32k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.32k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.32k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.32k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.32k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.32k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.32k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.32k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.32k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.32k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.32k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.32k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.32k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.32k, False: 0]
  ------------------
 9262|  2.32k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.32k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.32k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.32k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.32k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.32k|            SCN_CLANG_POP
 9279|  2.32k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  72.6k|    {
 3075|  72.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  72.6k|    {
 3041|  72.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  72.6k|{
 7793|  72.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  72.6k|    handler.check_args_exhausted();
 7795|  72.6k|    return handler.get_error();
 7796|  72.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  72.6k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  72.6k|    auto begin = format.data();
 7761|  72.6k|    auto it = begin;
 7762|  72.6k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   112k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 72.6k, False: 40.0k]
  ------------------
 7765|  72.6k|        const auto ch = *it++;
 7766|  72.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 72.6k, False: 0]
  ------------------
 7767|  72.6k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  72.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  72.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 32.5k, False: 40.0k]
  ------------------
 7771|  32.5k|                return;
 7772|  32.5k|            }
 7773|  72.6k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  72.6k|    }
 7784|       |
 7785|  40.0k|    handler.on_literal_text(begin, end);
 7786|  40.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  72.6k|{
 7690|  72.6k|    struct id_adapter {
 7691|  72.6k|        constexpr void operator()()
 7692|  72.6k|        {
 7693|  72.6k|            arg_id = handler.on_arg_id();
 7694|  72.6k|        }
 7695|  72.6k|        constexpr void operator()(std::size_t id)
 7696|  72.6k|        {
 7697|  72.6k|            arg_id = handler.on_arg_id(id);
 7698|  72.6k|        }
 7699|       |
 7700|  72.6k|        constexpr void on_error(const char* msg)
 7701|  72.6k|        {
 7702|  72.6k|            SCN_UNLIKELY_ATTR
 7703|  72.6k|            handler.on_error(msg);
 7704|  72.6k|        }
 7705|       |
 7706|  72.6k|        Handler& handler;
 7707|  72.6k|        std::size_t arg_id;
 7708|  72.6k|    };
 7709|       |
 7710|  72.6k|    ++begin;
 7711|  72.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  72.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 72.6k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  72.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 72.6k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  72.6k|    else {
 7723|  72.6k|        auto adapter = id_adapter{handler, 0};
 7724|  72.6k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  72.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  72.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 72.6k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  72.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 72.6k, False: 0]
  ------------------
 7735|  72.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  72.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  72.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.6k]
  |  |  |  Branch (865:45): [True: 0, False: 72.6k]
  |  |  |  Branch (865:45): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  72.6k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  72.6k|    }
 7751|  72.6k|    return begin + 1;
 7752|  72.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   160k|    {
 8832|   160k|        return m_args.get(id);
 8833|   160k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   160k|    {
 6286|   160k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   160k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   160k|        do_check_arg_id(id);
 6294|   160k|        return id;
 6295|   160k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   160k|{
 6806|   160k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   160k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   160k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  72.6k|{
 7191|  72.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  72.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  72.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 72.6k, False: 0]
  |  Branch (7192:26): [True: 0, False: 72.6k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  72.6k|    handler();
 7197|  72.6k|    return begin;
 7198|  72.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  72.6k|        {
 7693|  72.6k|            arg_id = handler.on_arg_id();
 7694|  72.6k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   160k|{
 9300|   160k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   160k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   160k|{
 9201|   160k|#define SCN_VISIT(Type)                                                \
 9202|   160k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   160k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   160k|    }                                                                  \
 9205|   160k|    else {                                                             \
 9206|   160k|        return vis(monostate_val);                                     \
 9207|   160k|    }
 9208|       |
 9209|   160k|    monostate monostate_val{};
 9210|       |
 9211|   160k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 160k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 160k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 160k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 160k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 160k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 160k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 160k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 160k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 160k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 160k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 160k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 160k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 160k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 160k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 160k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 160k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 160k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 160k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 160k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 160k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 160k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 160k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 160k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 160k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   160k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 160k, False: 0]
  ------------------
 9262|   160k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   160k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   160k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 160k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 160k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   160k|            SCN_CLANG_POP
 9279|   160k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  72.6k|        : base(typename base::contiguous_tag{}, sv)
 4717|  72.6k|    {
 4718|  72.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  72.6k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  72.6k|    {
 4423|  72.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   145k|    {
 3000|   145k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   145k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   145k|    {
 2991|   145k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   145k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   145k|    {
 2869|   145k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   145k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   145k|    {
 2850|   145k|        return decay_copy(t.begin());
 2851|   145k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  72.6k|    {
 3075|  72.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  72.6k|    {
 3041|  72.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  72.6k|    {
 4540|  72.6k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  72.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  72.6k|        m_position = i;
 4542|  72.6k|        return *this;
 4543|  72.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  87.5k|{
 7793|  87.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  87.5k|    handler.check_args_exhausted();
 7795|  87.5k|    return handler.get_error();
 7796|  87.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  87.5k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  87.5k|    auto begin = format.data();
 7761|  87.5k|    auto it = begin;
 7762|  87.5k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   142k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 87.5k, False: 55.0k]
  ------------------
 7765|  87.5k|        const auto ch = *it++;
 7766|  87.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 87.5k, False: 0]
  ------------------
 7767|  87.5k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  87.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  87.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 32.5k, False: 55.0k]
  ------------------
 7771|  32.5k|                return;
 7772|  32.5k|            }
 7773|  87.5k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  87.5k|    }
 7784|       |
 7785|  55.0k|    handler.on_literal_text(begin, end);
 7786|  55.0k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|  87.5k|{
 7690|  87.5k|    struct id_adapter {
 7691|  87.5k|        constexpr void operator()()
 7692|  87.5k|        {
 7693|  87.5k|            arg_id = handler.on_arg_id();
 7694|  87.5k|        }
 7695|  87.5k|        constexpr void operator()(std::size_t id)
 7696|  87.5k|        {
 7697|  87.5k|            arg_id = handler.on_arg_id(id);
 7698|  87.5k|        }
 7699|       |
 7700|  87.5k|        constexpr void on_error(const char* msg)
 7701|  87.5k|        {
 7702|  87.5k|            SCN_UNLIKELY_ATTR
 7703|  87.5k|            handler.on_error(msg);
 7704|  87.5k|        }
 7705|       |
 7706|  87.5k|        Handler& handler;
 7707|  87.5k|        std::size_t arg_id;
 7708|  87.5k|    };
 7709|       |
 7710|  87.5k|    ++begin;
 7711|  87.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  87.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 87.5k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  87.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 87.5k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  87.5k|    else {
 7723|  87.5k|        auto adapter = id_adapter{handler, 0};
 7724|  87.5k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  87.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  87.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 87.5k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  87.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 87.5k, False: 0]
  ------------------
 7735|  87.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  87.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  87.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  |  Branch (865:45): [True: 0, False: 87.5k]
  |  |  |  Branch (865:45): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  87.5k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  87.5k|    }
 7751|  87.5k|    return begin + 1;
 7752|  87.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  87.5k|{
 7191|  87.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  87.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  87.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  87.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 87.5k, False: 0]
  |  Branch (7192:26): [True: 0, False: 87.5k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  87.5k|    handler();
 7197|  87.5k|    return begin;
 7198|  87.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  87.5k|        {
 7693|  87.5k|            arg_id = handler.on_arg_id();
 7694|  87.5k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  34.8k|    {
 4352|  34.8k|        return sync(0);
 4353|  34.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   166k|    {
 6177|   166k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   166k|        return static_cast<std::size_t>(m_desc &
 6182|   166k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   166k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   333k|    {
 6203|   333k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   333k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   166k|    {
 6145|   166k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   166k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   166k|        const auto t = type(id);
 6157|   166k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   166k|        basic_scan_arg<Context> arg;
 6162|   166k|        arg.m_type = t;
 6163|   166k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 166k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   166k|        else {
 6167|   166k|            arg.m_value = m_values[id];
 6168|   166k|        }
 6169|   166k|        return arg;
 6170|   166k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   166k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   166k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   166k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   166k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   166k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   166k|    {
 6207|   166k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   166k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   343k|    {
 5961|   343k|        return m_type != detail::arg_type::none_type;
 5962|   343k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  4.65k|{
 9300|  4.65k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.65k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.65k|{
 9201|  4.65k|#define SCN_VISIT(Type)                                                \
 9202|  4.65k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.65k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.65k|    }                                                                  \
 9205|  4.65k|    else {                                                             \
 9206|  4.65k|        return vis(monostate_val);                                     \
 9207|  4.65k|    }
 9208|       |
 9209|  4.65k|    monostate monostate_val{};
 9210|       |
 9211|  4.65k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.65k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.65k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.65k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.65k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.65k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.65k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.65k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.65k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.65k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.65k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.65k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.65k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.65k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.65k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.65k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.65k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.65k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.65k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.65k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.65k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.65k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.65k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.65k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.65k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.65k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.65k, False: 0]
  ------------------
 9262|  4.65k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.65k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.65k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.65k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.65k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.65k|            SCN_CLANG_POP
 9279|  4.65k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   343k|{
 6006|   343k|    return arg.m_type;
 6007|   343k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   176k|{
 6018|   176k|    return arg.m_value;
 6019|   176k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   176k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   176k|    {
 6258|   176k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  88.0k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  88.0k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  88.0k|          m_position(pos)
 4463|  88.0k|    {
 4464|  88.0k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   176k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   176k|    static_cast<    \
  |  |  935|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   176k|    {
 8934|   176k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5938|   176k|        {
 5939|   176k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   176k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5943|   176k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  83.4k|    {
 3075|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  83.4k|    {
 3041|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  83.4k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  83.4k|{
 7793|  83.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  83.4k|    handler.check_args_exhausted();
 7795|  83.4k|    return handler.get_error();
 7796|  83.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  83.4k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  83.4k|    auto begin = format.data();
 7761|  83.4k|    auto it = begin;
 7762|  83.4k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   101k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 83.4k, False: 18.3k]
  ------------------
 7765|  83.4k|        const auto ch = *it++;
 7766|  83.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 83.4k, False: 0]
  ------------------
 7767|  83.4k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  83.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  83.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 65.1k, False: 18.3k]
  ------------------
 7771|  65.1k|                return;
 7772|  65.1k|            }
 7773|  83.4k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  83.4k|    }
 7784|       |
 7785|  18.3k|    handler.on_literal_text(begin, end);
 7786|  18.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|  83.4k|{
 7690|  83.4k|    struct id_adapter {
 7691|  83.4k|        constexpr void operator()()
 7692|  83.4k|        {
 7693|  83.4k|            arg_id = handler.on_arg_id();
 7694|  83.4k|        }
 7695|  83.4k|        constexpr void operator()(std::size_t id)
 7696|  83.4k|        {
 7697|  83.4k|            arg_id = handler.on_arg_id(id);
 7698|  83.4k|        }
 7699|       |
 7700|  83.4k|        constexpr void on_error(const char* msg)
 7701|  83.4k|        {
 7702|  83.4k|            SCN_UNLIKELY_ATTR
 7703|  83.4k|            handler.on_error(msg);
 7704|  83.4k|        }
 7705|       |
 7706|  83.4k|        Handler& handler;
 7707|  83.4k|        std::size_t arg_id;
 7708|  83.4k|    };
 7709|       |
 7710|  83.4k|    ++begin;
 7711|  83.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  83.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 83.4k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  83.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 83.4k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  83.4k|    else {
 7723|  83.4k|        auto adapter = id_adapter{handler, 0};
 7724|  83.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  83.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  83.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 83.4k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  83.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 83.4k, False: 0]
  ------------------
 7735|  83.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  83.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  83.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  |  Branch (865:45): [True: 0, False: 83.4k]
  |  |  |  Branch (865:45): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  83.4k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  83.4k|    }
 7751|  83.4k|    return begin + 1;
 7752|  83.4k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   166k|    {
 8832|   166k|        return m_args.get(id);
 8833|   166k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   166k|    {
 6286|   166k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   166k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   166k|        do_check_arg_id(id);
 6294|   166k|        return id;
 6295|   166k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   166k|{
 6806|   166k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   166k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   166k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  83.4k|{
 7191|  83.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  83.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 83.4k, False: 0]
  |  Branch (7192:26): [True: 0, False: 83.4k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  83.4k|    handler();
 7197|  83.4k|    return begin;
 7198|  83.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  83.4k|        {
 7693|  83.4k|            arg_id = handler.on_arg_id();
 7694|  83.4k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   166k|{
 9300|   166k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   166k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   166k|{
 9201|   166k|#define SCN_VISIT(Type)                                                \
 9202|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   166k|    }                                                                  \
 9205|   166k|    else {                                                             \
 9206|   166k|        return vis(monostate_val);                                     \
 9207|   166k|    }
 9208|       |
 9209|   166k|    monostate monostate_val{};
 9210|       |
 9211|   166k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 166k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 166k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 166k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 166k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 166k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 166k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 166k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 166k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 166k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 166k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 166k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 166k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 166k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 166k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 166k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 166k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 166k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 166k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 166k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 166k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 166k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 166k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 166k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 166k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   166k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 166k, False: 0]
  ------------------
 9262|   166k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   166k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   166k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 166k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 166k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   166k|            SCN_CLANG_POP
 9279|   166k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  83.4k|        : base(typename base::contiguous_tag{}, sv)
 4717|  83.4k|    {
 4718|  83.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  83.4k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  83.4k|    {
 4423|  83.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   166k|    {
 3000|   166k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   166k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   166k|    {
 2991|   166k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   166k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   166k|    {
 2869|   166k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   166k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   166k|    {
 2850|   166k|        return decay_copy(t.begin());
 2851|   166k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  83.4k|    {
 3075|  83.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  83.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  83.4k|    {
 3041|  83.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  83.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   171k|{
 4691|   171k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 83.4k, False: 88.0k]
  ------------------
 4692|  83.4k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  83.4k|                                ranges::default_sentinel};
 4694|  83.4k|    }
 4695|  88.0k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  88.0k|                            ranges::default_sentinel};
 4697|   171k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  88.0k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  88.0k|    {
 4455|  88.0k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  88.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  88.0k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  88.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  88.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  83.4k|    {
 4540|  83.4k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  83.4k|        m_position = i;
 4542|  83.4k|        return *this;
 4543|  83.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  4.65k|{
 9300|  4.65k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.65k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.65k|{
 9201|  4.65k|#define SCN_VISIT(Type)                                                \
 9202|  4.65k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.65k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.65k|    }                                                                  \
 9205|  4.65k|    else {                                                             \
 9206|  4.65k|        return vis(monostate_val);                                     \
 9207|  4.65k|    }
 9208|       |
 9209|  4.65k|    monostate monostate_val{};
 9210|       |
 9211|  4.65k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.65k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.65k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.65k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.65k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.65k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.65k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.65k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.65k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.65k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.65k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.65k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.65k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.65k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.65k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.65k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.65k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.65k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.65k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.65k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.65k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.65k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.65k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.65k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.65k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.65k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.65k, False: 0]
  ------------------
 9262|  4.65k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.65k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.65k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.65k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.65k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.65k|            SCN_CLANG_POP
 9279|  4.65k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  83.4k|{
 7793|  83.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  83.4k|    handler.check_args_exhausted();
 7795|  83.4k|    return handler.get_error();
 7796|  83.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  83.4k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  83.4k|    auto begin = format.data();
 7761|  83.4k|    auto it = begin;
 7762|  83.4k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   101k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 83.4k, False: 18.3k]
  ------------------
 7765|  83.4k|        const auto ch = *it++;
 7766|  83.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 83.4k, False: 0]
  ------------------
 7767|  83.4k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  83.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  83.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 65.1k, False: 18.3k]
  ------------------
 7771|  65.1k|                return;
 7772|  65.1k|            }
 7773|  83.4k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  83.4k|    }
 7784|       |
 7785|  18.3k|    handler.on_literal_text(begin, end);
 7786|  18.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|  83.4k|{
 7690|  83.4k|    struct id_adapter {
 7691|  83.4k|        constexpr void operator()()
 7692|  83.4k|        {
 7693|  83.4k|            arg_id = handler.on_arg_id();
 7694|  83.4k|        }
 7695|  83.4k|        constexpr void operator()(std::size_t id)
 7696|  83.4k|        {
 7697|  83.4k|            arg_id = handler.on_arg_id(id);
 7698|  83.4k|        }
 7699|       |
 7700|  83.4k|        constexpr void on_error(const char* msg)
 7701|  83.4k|        {
 7702|  83.4k|            SCN_UNLIKELY_ATTR
 7703|  83.4k|            handler.on_error(msg);
 7704|  83.4k|        }
 7705|       |
 7706|  83.4k|        Handler& handler;
 7707|  83.4k|        std::size_t arg_id;
 7708|  83.4k|    };
 7709|       |
 7710|  83.4k|    ++begin;
 7711|  83.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  83.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 83.4k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  83.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 83.4k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  83.4k|    else {
 7723|  83.4k|        auto adapter = id_adapter{handler, 0};
 7724|  83.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  83.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  83.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 83.4k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  83.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 83.4k, False: 0]
  ------------------
 7735|  83.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  83.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  83.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  |  Branch (865:45): [True: 0, False: 83.4k]
  |  |  |  Branch (865:45): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  83.4k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  83.4k|    }
 7751|  83.4k|    return begin + 1;
 7752|  83.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  83.4k|{
 7191|  83.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  83.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 83.4k, False: 0]
  |  Branch (7192:26): [True: 0, False: 83.4k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  83.4k|    handler();
 7197|  83.4k|    return begin;
 7198|  83.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  83.4k|        {
 7693|  83.4k|            arg_id = handler.on_arg_id();
 7694|  83.4k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  69.7k|    {
 4352|  69.7k|        return sync(0);
 4353|  69.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  4.65k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  9.30k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  97.0k|    {
 2926|  97.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  97.0k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  97.0k|    {
 2908|  97.0k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  97.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   179k|{
 2094|   179k|    return SCN_FWD(t);
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   179k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  40.0k|    {
 4533|  40.0k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  40.0k|        m_position += n;
 4535|  40.0k|        return *this;
 4536|  40.0k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  82.5k|    {
 2926|  82.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  82.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  82.5k|    {
 2908|  82.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  82.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  18.3k|    {
 4533|  18.3k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  18.3k|        m_position += n;
 4535|  18.3k|        return *this;
 4536|  18.3k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  41.7k|{
   44|  41.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  41.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  41.7k|{
   60|  41.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  41.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  4.65k|{
   72|  4.65k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.65k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  41.7k|{
   44|  41.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  41.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  41.7k|{
   60|  41.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  41.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  4.65k|{
   72|  4.65k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.65k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  13.9k|{
   89|  13.9k|    auto result = make_scan_result<Source, Args...>();
   90|  13.9k|    fill_scan_result(result,
   91|  13.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  13.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  13.9k|    return result;
   94|  13.9k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  13.9k|{
  131|  13.9k|    auto result = make_scan_result<Source, Args...>();
  132|  13.9k|    fill_scan_result(result,
  133|  13.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  13.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  13.9k|    return result;
  136|  13.9k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.55k|{
  171|  1.55k|    auto result = make_scan_result<Source, T>();
  172|  1.55k|    fill_scan_result(
  173|  1.55k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.55k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.55k|    return result;
  176|  1.55k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  87.5k|{
  250|  87.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  87.5k|        .transform_error(impl::make_eof_scan_error);
  252|  87.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  83.4k|{
  250|  83.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  83.4k|        .transform_error(impl::make_eof_scan_error);
  252|  83.4k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   163k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   163k|{
  309|   163k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   163k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  36.3k|{
 1903|  36.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  36.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  43.7k|{
 1911|  43.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  43.7k|    return sync_after_vscan(source, n);
 1913|  43.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  41.7k|{
 1921|  41.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  41.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  41.7k|{
 1929|  41.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  41.7k|    return sync_after_vscan(source, n);
 1931|  41.7k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  53.3k|{
 3582|  53.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 29.1k, False: 24.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  29.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  29.1k|    }
 3586|       |
 3587|  24.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.2k|    auto begin = contiguous_ctx.begin();
 3590|  24.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.8k, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.8k|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.2k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  53.3k|{
 3582|  53.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 29.1k, False: 24.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  29.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  29.1k|    }
 3586|       |
 3587|  24.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.2k|    auto begin = contiguous_ctx.begin();
 3590|  24.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.8k, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.8k|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.2k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  53.3k|{
 3582|  53.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 29.1k, False: 24.2k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  29.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  29.1k|    }
 3586|       |
 3587|  24.2k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  24.2k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  24.2k|    auto begin = contiguous_ctx.begin();
 3590|  24.2k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.8k, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.8k|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  24.2k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.6k|{
 3582|  55.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 27.8k, False: 27.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  27.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  27.8k|    }
 3586|       |
 3587|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  27.8k|    auto begin = contiguous_ctx.begin();
 3590|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 6.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  6.11k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  27.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.6k|{
 3582|  55.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 27.8k, False: 27.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  27.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  27.8k|    }
 3586|       |
 3587|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  27.8k|    auto begin = contiguous_ctx.begin();
 3590|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 6.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  6.11k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  27.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.6k|{
 3582|  55.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 27.8k, False: 27.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  27.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  27.8k|    }
 3586|       |
 3587|  27.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  27.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  27.8k|    auto begin = contiguous_ctx.begin();
 3590|  27.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 6.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.7k|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  6.11k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  27.8k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   160k|{
  215|   160k|    return find_classic_impl(
  216|   160k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   160k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   160k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  13.9k|{
  329|  13.9k|    SCN_UNLIKELY_ATTR
  330|  13.9k|    return e;
  331|  13.9k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  36.3k|{
 1872|  36.3k|    return vscan_internal(source, format, args);
 1873|  36.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  43.7k|{
 1878|  43.7k|    auto n = vscan_internal(source, format, args);
 1879|  43.7k|    return sync_after_vscan(source, n);
 1880|  43.7k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  41.7k|{
 1886|  41.7k|    return vscan_internal(source, format, args);
 1887|  41.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  41.7k|{
 1892|  41.7k|    auto n = vscan_internal(source, format, args);
 1893|  41.7k|    return sync_after_vscan(source, n);
 1894|  41.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.32k|{
 1958|  2.32k|    return vscan_value_internal(source, arg);
 1959|  2.32k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.32k|{
 1963|  2.32k|    auto n = vscan_value_internal(source, arg);
 1964|  2.32k|    return sync_after_vscan(source, n);
 1965|  2.32k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  4.65k|{
 1971|  4.65k|    return vscan_value_internal(source, arg);
 1972|  4.65k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  4.65k|{
 1977|  4.65k|    auto n = vscan_value_internal(source, arg);
 1978|  4.65k|    return sync_after_vscan(source, n);
 1979|  4.65k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  78.8k|{
  118|  78.8k|    static_assert(sizeof(*source.data()) == 1);
  119|  78.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  78.8k|    uint64_t word{};
  121|  78.8k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  78.8k|    return has_byte_greater(word, 127) != 0;
  124|  78.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   160k|{
  131|   160k|    auto it = source.begin();
  132|       |
  133|   167k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 78.8k, False: 88.3k]
  ------------------
  134|  78.8k|        auto sv =
  135|  78.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  78.8k|                .substr(0, 8);
  137|       |
  138|  78.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 67.0k, False: 11.8k]
  ------------------
  139|  67.0k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  67.0k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  67.0k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 61.2k, False: 5.73k]
  ------------------
  142|  61.2k|                break;
  143|  61.2k|            }
  144|  5.73k|            continue;
  145|  67.0k|        }
  146|       |
  147|  17.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 16.4k, False: 1.23k]
  ------------------
  148|  16.4k|            auto tmp =
  149|  16.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  16.4k|            auto res = get_next_code_point(tmp);
  151|  16.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.5k, False: 5.88k]
  ------------------
  152|  10.5k|                return it;
  153|  10.5k|            }
  154|  5.88k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  5.88k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  5.88k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  5.88k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  5.88k|        }
  158|  11.8k|    }
  159|       |
  160|   149k|    return detail::make_string_view_iterator(source, it);
  161|   160k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   170k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  16.4k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  87.5k|{
 1769|  87.5k|    const auto argcount = args.size();
 1770|  87.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 87.5k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  87.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 87.5k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  87.5k|    SCN_UNLIKELY_ATTR
 1783|  87.5k|    {
 1784|  87.5k|        auto handler = format_handler<false, CharT>{
 1785|  87.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  87.5k|        return vscan_parse_format_string(format, handler);
 1787|  87.5k|    }
 1788|  87.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   160k|{
 1317|   160k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 160k, False: 0]
  ------------------
 1318|   160k|        return false;
 1319|   160k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   160k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.32k|{
 1350|  2.32k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.32k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.32k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.32k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.32k|    static_cast<    \
  |  |  935|  2.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.32k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.32k|    }                                                  \
  |  |  |  | 3939|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.32k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  72.6k|        : format_handler_base{argcount},
 1593|  72.6k|          parse_ctx{format},
 1594|  72.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  72.6k|    {
 1596|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   327k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   327k|    {
 1412|   327k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   327k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  72.6k|        : contiguous_ctx(source, args, loc)
 1544|  72.6k|    {
 1545|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  72.6k|{
 1734|  72.6k|    const auto beg = handler.get_ctx().begin();
 1735|  72.6k|    detail::parse_format_string<false>(format, handler);
 1736|  72.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 40.0k]
  |  |  ------------------
  ------------------
 1737|  32.5k|        return unexpected(err.error());
 1738|  32.5k|    }
 1739|  40.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  72.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   225k|    {
 1718|   225k|        return ctx.get();
 1719|   225k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   225k|    {
 1549|   225k|        return contiguous_ctx;
 1550|   225k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   112k|    {
 1600|   112k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 112k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   112k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   195k|    {
 1460|   195k|        error = unexpected(err);
 1461|   195k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  72.6k|{
 1372|  72.6k|    auto arg = ctx.arg(id);
 1373|  72.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  72.6k|    return arg;
 1377|  72.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   327k|    {
 1486|   327k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   327k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   327k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 327k, False: 0]
  |  |  ------------------
  ------------------
 1498|   327k|            visited_args_lower64 |= (1ull << id);
 1499|   327k|            return;
 1500|   327k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   327k|    {
 1470|   327k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   327k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 327k, False: 0]
  |  |  ------------------
  ------------------
 1477|   327k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   327k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   327k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  72.6k|    {
 1640|  72.6k|        return parse_ctx.next_arg_id();
 1641|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  72.6k|    {
 1680|  72.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  72.6k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  72.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 72.6k, False: 0]
  ------------------
 1684|  72.6k|            parse_ctx.advance_to(begin);
 1685|  72.6k|            on_visit_scan_arg(
 1686|  72.6k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  72.6k|                    parse_ctx, get_custom_ctx()},
 1688|  72.6k|                arg);
 1689|  72.6k|            return parse_ctx.begin();
 1690|  72.6k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  72.6k|    {
 1651|  72.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 72.6k]
  |  Branch (1651:13): [True: 0, False: 72.6k]
  |  Branch (1651:29): [True: 0, False: 72.6k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  72.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  72.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 40.0k]
  |  |  ------------------
  ------------------
 1658|  32.5k|            on_error(r.error());
 1659|  32.5k|        }
 1660|  40.0k|        else {
 1661|  40.0k|            get_ctx().advance_to(*r);
 1662|  40.0k|        }
 1663|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  72.6k|    {
 1722|  72.6k|        return ctx.get_custom();
 1723|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  72.6k|    {
 1553|  72.6k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 72.6k, False: 0]
  ------------------
 1554|  72.6k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  72.6k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  72.6k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  72.6k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  72.6k|        }
 1559|  72.6k|        auto it = buffer->get().begin();
 1560|  72.6k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  72.6k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  72.6k|        return *custom_ctx;
 1563|  72.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   327k|    {
 1419|   327k|        {
 1420|   327k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 327k]
  ------------------
 1421|   327k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 327k]
  ------------------
 1422|   327k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   327k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   327k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 327k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   327k|        }
 1430|       |
 1431|   327k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 327k, False: 0]
  ------------------
 1432|   327k|            return;
 1433|   327k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.30M|    {
 1465|  1.30M|        return error;
 1466|  1.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  87.5k|        : format_handler_base{argcount},
 1593|  87.5k|          parse_ctx{format},
 1594|  87.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  87.5k|    {
 1596|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  87.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  87.5k|    static_cast<    \
  |  |  935|  87.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  87.5k|    {
 1521|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  87.5k|{
 1734|  87.5k|    const auto beg = handler.get_ctx().begin();
 1735|  87.5k|    detail::parse_format_string<false>(format, handler);
 1736|  87.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 55.0k]
  |  |  ------------------
  ------------------
 1737|  32.5k|        return unexpected(err.error());
 1738|  32.5k|    }
 1739|  55.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  87.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   285k|    {
 1718|   285k|        return ctx.get();
 1719|   285k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   285k|    {
 1525|   285k|        return ctx;
 1526|   285k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   142k|    {
 1600|   142k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 142k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   142k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  87.5k|{
 1372|  87.5k|    auto arg = ctx.arg(id);
 1373|  87.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  87.5k|    return arg;
 1377|  87.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  87.5k|    {
 1640|  87.5k|        return parse_ctx.next_arg_id();
 1641|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  87.5k|    {
 1680|  87.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  87.5k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  87.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 87.5k, False: 0]
  ------------------
 1684|  87.5k|            parse_ctx.advance_to(begin);
 1685|  87.5k|            on_visit_scan_arg(
 1686|  87.5k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  87.5k|                    parse_ctx, get_custom_ctx()},
 1688|  87.5k|                arg);
 1689|  87.5k|            return parse_ctx.begin();
 1690|  87.5k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  87.5k|    {
 1651|  87.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 87.5k]
  |  Branch (1651:13): [True: 0, False: 87.5k]
  |  Branch (1651:29): [True: 0, False: 87.5k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  87.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  87.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 55.0k]
  |  |  ------------------
  ------------------
 1658|  32.5k|            on_error(r.error());
 1659|  32.5k|        }
 1660|  55.0k|        else {
 1661|  55.0k|            get_ctx().advance_to(*r);
 1662|  55.0k|        }
 1663|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  87.5k|    {
 1722|  87.5k|        return ctx.get_custom();
 1723|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  87.5k|    {
 1529|  87.5k|        return ctx;
 1530|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  72.6k|{
 1749|  72.6k|    const auto argcount = args.size();
 1750|  72.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 72.6k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  72.6k|    auto handler = format_handler<true, CharT>{
 1756|  72.6k|        ranges::subrange<const CharT*>{source.data(),
 1757|  72.6k|                                       source.data() + source.size()},
 1758|  72.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  72.6k|    return vscan_parse_format_string(format, handler);
 1760|  72.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.32k|{
 1330|  2.32k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.32k|    auto reader =
 1336|  2.32k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.32k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.32k|                                           source.data() + source.size()},
 1339|  2.32k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.32k|    static_cast<    \
  |  |  935|  2.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.32k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.32k|    }                                                  \
  |  |  |  | 3939|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.32k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  89.8k|{
 1849|  89.8k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  89.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 55.0k, False: 34.8k]
  |  |  ------------------
  ------------------
 1850|  55.0k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.0k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  55.0k|    }
 1856|  34.8k|    else {
 1857|  34.8k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 34.8k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  34.8k|    }
 1863|  89.8k|    return result;
 1864|  89.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  83.4k|{
 1749|  83.4k|    const auto argcount = args.size();
 1750|  83.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 83.4k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  83.4k|    auto handler = format_handler<true, CharT>{
 1756|  83.4k|        ranges::subrange<const CharT*>{source.data(),
 1757|  83.4k|                                       source.data() + source.size()},
 1758|  83.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  83.4k|    return vscan_parse_format_string(format, handler);
 1760|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   166k|{
 1317|   166k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 166k, False: 0]
  ------------------
 1318|   166k|        return false;
 1319|   166k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   166k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  4.65k|{
 1330|  4.65k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.65k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  4.65k|    auto reader =
 1336|  4.65k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  4.65k|            ranges::subrange<const CharT*>{source.data(),
 1338|  4.65k|                                           source.data() + source.size()},
 1339|  4.65k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.65k|    static_cast<    \
  |  |  935|  4.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  4.65k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.65k|    }                                                  \
  |  |  |  | 3939|  4.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  4.65k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  83.4k|        : format_handler_base{argcount},
 1593|  83.4k|          parse_ctx{format},
 1594|  83.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  83.4k|    {
 1596|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  83.4k|        : contiguous_ctx(source, args, loc)
 1544|  83.4k|    {
 1545|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  83.4k|{
 1734|  83.4k|    const auto beg = handler.get_ctx().begin();
 1735|  83.4k|    detail::parse_format_string<false>(format, handler);
 1736|  83.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.1k, False: 18.3k]
  |  |  ------------------
  ------------------
 1737|  65.1k|        return unexpected(err.error());
 1738|  65.1k|    }
 1739|  18.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   203k|    {
 1718|   203k|        return ctx.get();
 1719|   203k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   203k|    {
 1549|   203k|        return contiguous_ctx;
 1550|   203k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   101k|    {
 1600|   101k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 101k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   101k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  83.4k|{
 1372|  83.4k|    auto arg = ctx.arg(id);
 1373|  83.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  83.4k|    return arg;
 1377|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  83.4k|    {
 1640|  83.4k|        return parse_ctx.next_arg_id();
 1641|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  83.4k|    {
 1680|  83.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  83.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  83.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 83.4k, False: 0]
  ------------------
 1684|  83.4k|            parse_ctx.advance_to(begin);
 1685|  83.4k|            on_visit_scan_arg(
 1686|  83.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  83.4k|                    parse_ctx, get_custom_ctx()},
 1688|  83.4k|                arg);
 1689|  83.4k|            return parse_ctx.begin();
 1690|  83.4k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  83.4k|    {
 1651|  83.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 83.4k]
  |  Branch (1651:13): [True: 0, False: 83.4k]
  |  Branch (1651:29): [True: 0, False: 83.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  83.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  83.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.1k, False: 18.3k]
  |  |  ------------------
  ------------------
 1658|  65.1k|            on_error(r.error());
 1659|  65.1k|        }
 1660|  18.3k|        else {
 1661|  18.3k|            get_ctx().advance_to(*r);
 1662|  18.3k|        }
 1663|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  83.4k|    {
 1722|  83.4k|        return ctx.get_custom();
 1723|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  83.4k|    {
 1553|  83.4k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 83.4k, False: 0]
  ------------------
 1554|  83.4k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  83.4k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  83.4k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  83.4k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  83.4k|        }
 1559|  83.4k|        auto it = buffer->get().begin();
 1560|  83.4k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  83.4k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  83.4k|        return *custom_ctx;
 1563|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  83.4k|{
 1769|  83.4k|    const auto argcount = args.size();
 1770|  83.4k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 83.4k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  83.4k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 83.4k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  83.4k|    SCN_UNLIKELY_ATTR
 1783|  83.4k|    {
 1784|  83.4k|        auto handler = format_handler<false, CharT>{
 1785|  83.4k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  83.4k|        return vscan_parse_format_string(format, handler);
 1787|  83.4k|    }
 1788|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  4.65k|{
 1350|  4.65k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.65k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  4.65k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  4.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4.65k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  4.65k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  4.65k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.65k|    static_cast<    \
  |  |  935|  4.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  4.65k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.65k|    }                                                  \
  |  |  |  | 3939|  4.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  4.65k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  83.4k|        : format_handler_base{argcount},
 1593|  83.4k|          parse_ctx{format},
 1594|  83.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  83.4k|    {
 1596|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  83.4k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  83.4k|    {
 1521|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  83.4k|{
 1734|  83.4k|    const auto beg = handler.get_ctx().begin();
 1735|  83.4k|    detail::parse_format_string<false>(format, handler);
 1736|  83.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.1k, False: 18.3k]
  |  |  ------------------
  ------------------
 1737|  65.1k|        return unexpected(err.error());
 1738|  65.1k|    }
 1739|  18.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   203k|    {
 1718|   203k|        return ctx.get();
 1719|   203k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   203k|    {
 1525|   203k|        return ctx;
 1526|   203k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   101k|    {
 1600|   101k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 101k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   101k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  83.4k|{
 1372|  83.4k|    auto arg = ctx.arg(id);
 1373|  83.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 83.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  83.4k|    return arg;
 1377|  83.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  83.4k|    {
 1640|  83.4k|        return parse_ctx.next_arg_id();
 1641|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  83.4k|    {
 1680|  83.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  83.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  83.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 83.4k, False: 0]
  ------------------
 1684|  83.4k|            parse_ctx.advance_to(begin);
 1685|  83.4k|            on_visit_scan_arg(
 1686|  83.4k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  83.4k|                    parse_ctx, get_custom_ctx()},
 1688|  83.4k|                arg);
 1689|  83.4k|            return parse_ctx.begin();
 1690|  83.4k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  83.4k|    {
 1651|  83.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 83.4k]
  |  Branch (1651:13): [True: 0, False: 83.4k]
  |  Branch (1651:29): [True: 0, False: 83.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  83.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  83.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 65.1k, False: 18.3k]
  |  |  ------------------
  ------------------
 1658|  65.1k|            on_error(r.error());
 1659|  65.1k|        }
 1660|  18.3k|        else {
 1661|  18.3k|            get_ctx().advance_to(*r);
 1662|  18.3k|        }
 1663|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  83.4k|    {
 1722|  83.4k|        return ctx.get_custom();
 1723|  83.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  83.4k|    {
 1529|  83.4k|        return ctx;
 1530|  83.4k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  88.0k|{
 1849|  88.0k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  88.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 18.3k, False: 69.7k]
  |  |  ------------------
  ------------------
 1850|  18.3k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18.3k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  18.3k|    }
 1856|  69.7k|    else {
 1857|  69.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 69.7k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  69.7k|    }
 1863|  88.0k|    return result;
 1864|  88.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.32k|{
 1795|  2.32k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.32k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.32k|{
 1795|  2.32k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.32k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  4.65k|{
 1795|  4.65k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.65k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  4.65k|{
 1795|  4.65k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.65k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  29.1k|{
 3563|  29.1k|    {
 3564|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 436, False: 28.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    436|    }                                                  \
  |  |  |  | 3939|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.7k|        ctx.range(), t, ctx.locale());
 3571|  28.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 18.3k]
  |  |  ------------------
  ------------------
 3573|  10.4k|        return unexpected(e.error());
 3574|  10.4k|    }
 3575|  18.3k|    return r.get_iterator();
 3576|  28.7k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.7k|          m_begin(ranges::begin(m_range)),
 2708|  28.7k|          m_tm(t),
 2709|  28.7k|          m_loc(loc)
 2710|  28.7k|    {
 2711|  28.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.63k|    {
 3358|  9.63k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  41.0k|    {
 3363|  41.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.4k, False: 30.6k]
  ------------------
 3364|  10.4k|            m_error = unexpected(e);
 3365|  10.4k|        }
 3366|  41.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 22.5k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 180, False: 32.1k]
  ------------------
 2717|    180|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    180|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.63k, False: 22.5k]
  ------------------
 2720|  9.63k|                return on_error("Invalid literal character");
 2721|  9.63k|            }
 2722|  22.5k|            ++beg;
 2723|  22.5k|            ++m_begin;
 2724|  22.5k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.10k|    {
 2745|  3.10k|#if !SCN_DISABLE_LOCALE
 2746|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.10k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.10k|#endif
 2753|       |
 2754|  3.10k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.10k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.10k|    {
 2218|  3.10k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.10k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.10k|        t.tm_year = y - 1900;
 2223|  3.10k|        st.set_full_year(h);
 2224|  3.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.4k|    {
 3381|  56.4k|        int digits_read = 0;
 3382|  56.4k|        int accumulator = 0;
 3383|  99.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.7k, False: 358]
  ------------------
 3384|  98.7k|            const auto ch = *m_begin;
 3385|  98.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.7k, False: 69.0k]
  |  Branch (3385:36): [True: 18.1k, False: 50.9k]
  ------------------
 3386|  47.8k|                break;
 3387|  47.8k|            }
 3388|  50.9k|            ++m_begin;
 3389|  50.9k|            ++digits_read;
 3390|  50.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  50.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.18k, False: 42.7k]
  ------------------
 3392|  8.18k|                break;
 3393|  8.18k|            }
 3394|  50.9k|        }
 3395|  56.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.3k, False: 41.0k]
  ------------------
 3396|  15.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.3k|                                 "Too few integer digits"});
 3398|  15.3k|            return -1;
 3399|  15.3k|        }
 3400|  41.0k|        return accumulator;
 3401|  56.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.53k|    {
 2759|  5.53k|#if !SCN_DISABLE_LOCALE
 2760|  5.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.53k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.53k|#endif
 2768|       |
 2769|  5.53k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.53k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.53k|    {
 2235|  5.53k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  9.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.47k, False: 4.05k]
  |  |  |  Branch (865:45): [True: 1.47k, False: 4.05k]
  |  |  |  Branch (865:45): [True: 0, False: 4.05k]
  |  |  ------------------
  ------------------
 2236|  1.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.47k|                                "Invalid value for tm_year"});
 2238|  1.47k|        }
 2239|  4.05k|        st.short_year_value = y;
 2240|  4.05k|        st.set_short_year(h);
 2241|  4.05k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.06k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.06k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.06k|            {"Jan", 1},
 2830|  3.06k|            {"Feb", 2},
 2831|  3.06k|            {"Mar", 3},
 2832|  3.06k|            {"Apr", 4},
 2833|  3.06k|            {"Jun", 6},
 2834|  3.06k|            {"Jul", 7},
 2835|  3.06k|            {"Aug", 8},
 2836|  3.06k|            {"Sep", 9},
 2837|  3.06k|            {"Oct", 10},
 2838|  3.06k|            {"Nov", 11},
 2839|  3.06k|            {"Dec", 12},
 2840|  3.06k|        }};
 2841|  3.06k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.58k, False: 1.48k]
  ------------------
 2842|  1.58k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.58k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  8.84k|    {
 2208|  8.84k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 6.36k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 104, False: 6.36k]
  |  |  ------------------
  ------------------
 2209|  2.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.48k|                                "Invalid value for tm_mon"});
 2211|  2.48k|        }
 2212|  6.36k|        t.tm_mon = m - 1;
 2213|  6.36k|        st.set_mon(h);
 2214|  6.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.24k, False: 3.01k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.17k, False: 62]
  ------------------
 3424|  8.17k|            std::size_t i = 0;
 3425|  8.17k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 48, False: 8.13k]
  ------------------
 3426|     48|                options_available = 0;
 3427|     48|                break;
 3428|     48|            }
 3429|  8.13k|            const auto ch = *m_begin;
 3430|  8.13k|            ++m_begin;
 3431|  54.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.9k, False: 8.13k]
  ------------------
 3432|  45.9k|                const auto cmp = static_cast<unsigned>(
 3433|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.9k]
  ------------------
 3435|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 39.0k, False: 6.86k]
  |  Branch (3435:34): [True: 37.3k, False: 1.71k]
  ------------------
 3436|  37.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.3k|                                options.end());
 3438|  37.3k|                    --options_available;
 3439|  37.3k|                    continue;
 3440|  37.3k|                }
 3441|  8.57k|                ++i;
 3442|  8.57k|            }
 3443|  8.13k|            ++chars_consumed;
 3444|  8.13k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.06k, False: 62]
  ------------------
 3446|  3.06k|            m_begin = start_it;
 3447|  3.06k|            return std::nullopt;
 3448|  3.06k|        }
 3449|     62|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.06k|    {
 3419|  3.06k|        auto start_it = m_begin;
 3420|  3.06k|        std::size_t options_available = N;
 3421|  3.06k|        std::size_t chars_consumed = 0;
 3422|  9.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.99k, False: 1.43k]
  ------------------
 3423|  9.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.41k, False: 1.58k]
  ------------------
 3424|  6.41k|            std::size_t i = 0;
 3425|  6.41k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 44, False: 6.36k]
  ------------------
 3426|     44|                options_available = 0;
 3427|     44|                break;
 3428|     44|            }
 3429|  6.36k|            const auto ch = *m_begin;
 3430|  6.36k|            ++m_begin;
 3431|  43.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.0k, False: 6.36k]
  ------------------
 3432|  37.0k|                const auto cmp = static_cast<unsigned>(
 3433|  37.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.0k]
  ------------------
 3435|  37.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.7k, False: 3.33k]
  |  Branch (3435:34): [True: 32.0k, False: 1.64k]
  ------------------
 3436|  32.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.0k|                                options.end());
 3438|  32.0k|                    --options_available;
 3439|  32.0k|                    continue;
 3440|  32.0k|                }
 3441|  4.97k|                ++i;
 3442|  4.97k|            }
 3443|  6.36k|            ++chars_consumed;
 3444|  6.36k|        }
 3445|  3.06k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.58k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.58k|        return options.front().second;
 3450|  3.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.20k|    {
 2848|  7.20k|#if !SCN_DISABLE_LOCALE
 2849|  7.20k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.20k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.20k|#endif
 2856|       |
 2857|  7.20k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.20k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.20k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.18k|    {
 2880|  7.18k|#if !SCN_DISABLE_LOCALE
 2881|  7.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.18k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.18k|#endif
 2888|       |
 2889|  7.18k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.18k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.18k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.18k|    {
 2198|  7.18k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.92k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 2.86k, False: 4.31k]
  |  |  |  Branch (865:45): [True: 64, False: 4.25k]
  |  |  ------------------
  ------------------
 2199|  2.92k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.92k|                                "Invalid value for tm_mday"});
 2201|  2.92k|        }
 2202|  4.25k|        t.tm_mday = d;
 2203|  4.25k|        st.set_mday(h);
 2204|  4.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.57k|    {
 2895|  1.57k|#if !SCN_DISABLE_LOCALE
 2896|  1.57k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.57k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.57k|#endif
 2903|       |
 2904|  1.57k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.57k|            {"Sunday", 0},
 2906|  1.57k|            {"Monday", 1},
 2907|  1.57k|            {"Tuesday", 2},
 2908|  1.57k|            {"Wednesday", 3},
 2909|  1.57k|            {"Thursday", 4},
 2910|  1.57k|            {"Friday", 5},
 2911|  1.57k|            {"Saturday", 6},
 2912|  1.57k|        }};
 2913|  1.57k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.57k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.57k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.57k|            {"Sun", 0},
 2918|  1.57k|            {"Mon", 1},
 2919|  1.57k|            {"Tue", 2},
 2920|  1.57k|            {"Wed", 3},
 2921|  1.57k|            {"Thu", 4},
 2922|  1.57k|            {"Fri", 5},
 2923|  1.57k|            {"Sat", 6},
 2924|  1.57k|        }};
 2925|  1.57k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.50k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.50k|        return set_error(
 2929|  1.50k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|     74|    {
 2245|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|     74|        t.tm_wday = d;
 2250|     74|        st.set_wday(h);
 2251|     74|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.14k|    {
 3419|  3.14k|        auto start_it = m_begin;
 3420|  3.14k|        std::size_t options_available = N;
 3421|  3.14k|        std::size_t chars_consumed = 0;
 3422|  6.98k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.93k, False: 3.04k]
  ------------------
 3423|  6.98k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.86k, False: 74]
  ------------------
 3424|  3.86k|            std::size_t i = 0;
 3425|  3.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 3.83k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  3.83k|            const auto ch = *m_begin;
 3430|  3.83k|            ++m_begin;
 3431|  26.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 22.7k, False: 3.83k]
  ------------------
 3432|  22.7k|                const auto cmp = static_cast<unsigned>(
 3433|  22.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  22.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 22.7k]
  ------------------
 3435|  22.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 21.9k, False: 768]
  |  Branch (3435:34): [True: 21.9k, False: 48]
  ------------------
 3436|  21.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  21.9k|                                options.end());
 3438|  21.9k|                    --options_available;
 3439|  21.9k|                    continue;
 3440|  21.9k|                }
 3441|    816|                ++i;
 3442|    816|            }
 3443|  3.83k|            ++chars_consumed;
 3444|  3.83k|        }
 3445|  3.14k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.07k, False: 74]
  ------------------
 3446|  3.07k|            m_begin = start_it;
 3447|  3.07k|            return std::nullopt;
 3448|  3.07k|        }
 3449|     74|        return options.front().second;
 3450|  3.14k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.11k, False: 13.3k]
  |  |  |  Branch (865:45): [True: 1.94k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 168, False: 13.3k]
  |  |  ------------------
  ------------------
 2179|  2.11k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.11k|                                  "Invalid value for tm_hour"});
 2181|  2.11k|        }
 2182|  13.3k|        t.tm_hour = h;
 2183|  13.3k|        st.set_hour24(hdl);
 2184|  13.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.43k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 32, False: 12.9k]
  |  |  ------------------
  ------------------
 2169|  2.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.43k|                                "Invalid value for tm_min"});
 2171|  2.43k|        }
 2172|  12.9k|        t.tm_min = m;
 2173|  12.9k|        st.set_min(h);
 2174|  12.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.51k|    {
 3011|  2.51k|#if !SCN_DISABLE_LOCALE
 3012|  2.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.51k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.51k|#endif
 3019|       |
 3020|  2.51k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.51k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.51k|    {
 2158|  2.51k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 4, False: 1.05k]
  |  |  ------------------
  ------------------
 2159|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.46k|                                "Invalid value for tm_sec"});
 2161|  1.46k|        }
 2162|  1.05k|        t.tm_sec = s;
 2163|  1.05k|        st.set_sec(h);
 2164|  1.05k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.53k|    {
 3253|       |        // %m/%d/%y
 3254|  5.53k|        constexpr CharT slash = '/';
 3255|  5.53k|        on_dec_month();
 3256|  5.53k|        on_text(&slash, &slash + 1);
 3257|  5.53k|        on_day_of_month();
 3258|  5.53k|        on_text(&slash, &slash + 1);
 3259|  5.53k|        on_short_year();
 3260|  5.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.60k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.60k|        constexpr CharT dash = '-';
 3265|  1.60k|        on_full_year();
 3266|  1.60k|        on_text(&dash, &dash + 1);
 3267|  1.60k|        on_dec_month();
 3268|  1.60k|        on_text(&dash, &dash + 1);
 3269|  1.60k|        on_day_of_month();
 3270|  1.60k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.8k|    {
 3295|       |        // %H:%M
 3296|  12.8k|        constexpr CharT colon = ':';
 3297|  12.8k|        on_24_hour();
 3298|  12.8k|        on_text(&colon, &colon + 1);
 3299|  12.8k|        on_minute();
 3300|  12.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.51k|    {
 3303|       |        // %H:%M:%S
 3304|  2.51k|        constexpr CharT colon = ':';
 3305|  2.51k|        on_24_hour();
 3306|  2.51k|        on_text(&colon, &colon + 1);
 3307|  2.51k|        on_minute();
 3308|  2.51k|        on_text(&colon, &colon + 1);
 3309|  2.51k|        on_second();
 3310|  2.51k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  18.3k|    {
 3342|  18.3k|        m_st.verify(*this);
 3343|  18.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 18.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  18.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.2k, False: 110]
  |  Branch (3346:37): [True: 4.04k, False: 14.1k]
  |  Branch (3346:60): [True: 0, False: 14.1k]
  ------------------
 3347|  4.04k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.04k|        }
 3349|  18.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  8.30k|    {
 2296|  8.30k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  8.30k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  57.6k|    {
 3353|  57.6k|        return m_error;
 3354|  57.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  18.3k|    {
 3370|  18.3k|        return m_begin;
 3371|  18.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.2k|{
 3563|  24.2k|    {
 3564|  24.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 23.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.9k|        ctx.range(), t, ctx.locale());
 3571|  23.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 3573|  10.6k|        return unexpected(e.error());
 3574|  10.6k|    }
 3575|  13.3k|    return r.get_iterator();
 3576|  23.9k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  72.6k|{
  250|  72.6k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  72.6k|        .transform_error(impl::make_eof_scan_error);
  252|  72.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.9k|          m_begin(ranges::begin(m_range)),
 2708|  23.9k|          m_tm(t),
 2709|  23.9k|          m_loc(loc)
 2710|  23.9k|    {
 2711|  23.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.92k|    {
 3358|  9.92k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  42.5k|    {
 3363|  42.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.6k, False: 31.9k]
  ------------------
 3364|  10.6k|            m_error = unexpected(e);
 3365|  10.6k|        }
 3366|  42.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.5k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 138, False: 23.5k]
  ------------------
 2717|    138|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    138|            }
 2719|  23.5k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.92k, False: 13.5k]
  ------------------
 2720|  9.92k|                return on_error("Invalid literal character");
 2721|  9.92k|            }
 2722|  13.5k|            ++beg;
 2723|  13.5k|            ++m_begin;
 2724|  13.5k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.15k|    {
 2745|  3.15k|#if !SCN_DISABLE_LOCALE
 2746|  3.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.15k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.15k|#endif
 2753|       |
 2754|  3.15k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.15k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.15k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.15k|    {
 2218|  3.15k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.15k|        t.tm_year = y - 1900;
 2223|  3.15k|        st.set_full_year(h);
 2224|  3.15k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  42.9k|    {
 3381|  42.9k|        int digits_read = 0;
 3382|  42.9k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.0k, False: 288]
  ------------------
 3384|  71.0k|            const auto ch = *m_begin;
 3385|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.9k, False: 49.0k]
  |  Branch (3385:36): [True: 16.7k, False: 32.3k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.3k|            ++m_begin;
 3389|  32.3k|            ++digits_read;
 3390|  32.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.93k, False: 28.3k]
  ------------------
 3392|  3.93k|                break;
 3393|  3.93k|            }
 3394|  32.3k|        }
 3395|  42.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.0k, False: 26.8k]
  ------------------
 3396|  16.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.0k|                                 "Too few integer digits"});
 3398|  16.0k|            return -1;
 3399|  16.0k|        }
 3400|  26.8k|        return accumulator;
 3401|  42.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.61k|    {
 2759|  1.61k|#if !SCN_DISABLE_LOCALE
 2760|  1.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.61k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.61k|#endif
 2768|       |
 2769|  1.61k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.61k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.61k|    {
 2235|  1.61k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.50k, False: 106]
  |  |  |  Branch (865:45): [True: 1.50k, False: 106]
  |  |  |  Branch (865:45): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 2236|  1.50k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.50k|                                "Invalid value for tm_year"});
 2238|  1.50k|        }
 2239|    106|        st.short_year_value = y;
 2240|    106|        st.set_short_year(h);
 2241|    106|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.10k|    {
 2802|  3.10k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.10k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.10k|#endif
 2810|       |
 2811|  3.10k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.10k|            {"January", 1},
 2813|  3.10k|            {"February", 2},
 2814|  3.10k|            {"March", 3},
 2815|  3.10k|            {"April", 4},
 2816|  3.10k|            {"May", 5},
 2817|  3.10k|            {"June", 6},
 2818|  3.10k|            {"July", 7},
 2819|  3.10k|            {"August", 8},
 2820|  3.10k|            {"September", 9},
 2821|  3.10k|            {"October", 10},
 2822|  3.10k|            {"November", 11},
 2823|  3.10k|            {"December", 12},
 2824|  3.10k|        }};
 2825|  3.10k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.04k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.04k|            {"Jan", 1},
 2830|  3.04k|            {"Feb", 2},
 2831|  3.04k|            {"Mar", 3},
 2832|  3.04k|            {"Apr", 4},
 2833|  3.04k|            {"Jun", 6},
 2834|  3.04k|            {"Jul", 7},
 2835|  3.04k|            {"Aug", 8},
 2836|  3.04k|            {"Sep", 9},
 2837|  3.04k|            {"Oct", 10},
 2838|  3.04k|            {"Nov", 11},
 2839|  3.04k|            {"Dec", 12},
 2840|  3.04k|        }};
 2841|  3.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.53k, False: 1.51k]
  ------------------
 2842|  1.53k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.53k|        }
 2844|  1.51k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.89k|    {
 2208|  4.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.57k, False: 2.31k]
  |  |  |  Branch (865:45): [True: 2.48k, False: 2.40k]
  |  |  |  Branch (865:45): [True: 90, False: 2.31k]
  |  |  ------------------
  ------------------
 2209|  2.57k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.57k|                                "Invalid value for tm_mon"});
 2211|  2.57k|        }
 2212|  2.31k|        t.tm_mon = m - 1;
 2213|  2.31k|        st.set_mon(h);
 2214|  2.31k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.10k|    {
 3419|  3.10k|        auto start_it = m_begin;
 3420|  3.10k|        std::size_t options_available = N;
 3421|  3.10k|        std::size_t chars_consumed = 0;
 3422|  11.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.03k, False: 2.99k]
  ------------------
 3423|  11.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.97k, False: 62]
  ------------------
 3424|  7.97k|            std::size_t i = 0;
 3425|  7.97k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 7.92k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  7.92k|            const auto ch = *m_begin;
 3430|  7.92k|            ++m_begin;
 3431|  53.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.3k, False: 7.92k]
  ------------------
 3432|  45.3k|                const auto cmp = static_cast<unsigned>(
 3433|  45.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.3k]
  ------------------
 3435|  45.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.7k, False: 6.62k]
  |  Branch (3435:34): [True: 37.0k, False: 1.63k]
  ------------------
 3436|  37.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.0k|                                options.end());
 3438|  37.0k|                    --options_available;
 3439|  37.0k|                    continue;
 3440|  37.0k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  7.92k|            ++chars_consumed;
 3444|  7.92k|        }
 3445|  3.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.04k, False: 62]
  ------------------
 3446|  3.04k|            m_begin = start_it;
 3447|  3.04k|            return std::nullopt;
 3448|  3.04k|        }
 3449|     62|        return options.front().second;
 3450|  3.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  9.25k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.78k, False: 1.47k]
  ------------------
 3423|  9.25k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.25k, False: 1.53k]
  ------------------
 3424|  6.25k|            std::size_t i = 0;
 3425|  6.25k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 6.21k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  6.21k|            const auto ch = *m_begin;
 3430|  6.21k|            ++m_begin;
 3431|  42.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.6k, False: 6.21k]
  ------------------
 3432|  36.6k|                const auto cmp = static_cast<unsigned>(
 3433|  36.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.6k]
  ------------------
 3435|  36.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 3.20k]
  |  Branch (3435:34): [True: 31.8k, False: 1.57k]
  ------------------
 3436|  31.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  31.8k|                                options.end());
 3438|  31.8k|                    --options_available;
 3439|  31.8k|                    continue;
 3440|  31.8k|                }
 3441|  4.77k|                ++i;
 3442|  4.77k|            }
 3443|  6.21k|            ++chars_consumed;
 3444|  6.21k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.51k, False: 1.53k]
  ------------------
 3446|  1.51k|            m_begin = start_it;
 3447|  1.51k|            return std::nullopt;
 3448|  1.51k|        }
 3449|  1.53k|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.30k|    {
 2848|  3.30k|#if !SCN_DISABLE_LOCALE
 2849|  3.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.30k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.30k|#endif
 2856|       |
 2857|  3.30k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.30k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.28k|    {
 2880|  3.28k|#if !SCN_DISABLE_LOCALE
 2881|  3.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.28k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.28k|#endif
 2888|       |
 2889|  3.28k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.28k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.28k|    {
 2198|  3.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 288]
  |  |  |  Branch (865:45): [True: 2.93k, False: 348]
  |  |  |  Branch (865:45): [True: 60, False: 288]
  |  |  ------------------
  ------------------
 2199|  2.99k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.99k|                                "Invalid value for tm_mday"});
 2201|  2.99k|        }
 2202|    288|        t.tm_mday = d;
 2203|    288|        st.set_mday(h);
 2204|    288|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.59k|    {
 2895|  1.59k|#if !SCN_DISABLE_LOCALE
 2896|  1.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.59k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.59k|#endif
 2903|       |
 2904|  1.59k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.59k|            {"Sunday", 0},
 2906|  1.59k|            {"Monday", 1},
 2907|  1.59k|            {"Tuesday", 2},
 2908|  1.59k|            {"Wednesday", 3},
 2909|  1.59k|            {"Thursday", 4},
 2910|  1.59k|            {"Friday", 5},
 2911|  1.59k|            {"Saturday", 6},
 2912|  1.59k|        }};
 2913|  1.59k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.59k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.59k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.59k|            {"Sun", 0},
 2918|  1.59k|            {"Mon", 1},
 2919|  1.59k|            {"Tue", 2},
 2920|  1.59k|            {"Wed", 3},
 2921|  1.59k|            {"Thu", 4},
 2922|  1.59k|            {"Fri", 5},
 2923|  1.59k|            {"Sat", 6},
 2924|  1.59k|        }};
 2925|  1.59k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.52k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.52k|        return set_error(
 2929|  1.52k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|     74|    {
 2245|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|     74|        t.tm_wday = d;
 2250|     74|        st.set_wday(h);
 2251|     74|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.19k|    {
 3419|  3.19k|        auto start_it = m_begin;
 3420|  3.19k|        std::size_t options_available = N;
 3421|  3.19k|        std::size_t chars_consumed = 0;
 3422|  7.04k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.95k, False: 3.09k]
  ------------------
 3423|  7.04k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.87k, False: 74]
  ------------------
 3424|  3.87k|            std::size_t i = 0;
 3425|  3.87k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.85k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.85k|            const auto ch = *m_begin;
 3430|  3.85k|            ++m_begin;
 3431|  26.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 23.0k, False: 3.85k]
  ------------------
 3432|  23.0k|                const auto cmp = static_cast<unsigned>(
 3433|  23.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  23.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 23.0k]
  ------------------
 3435|  23.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 22.2k, False: 764]
  |  Branch (3435:34): [True: 22.2k, False: 20]
  ------------------
 3436|  22.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  22.2k|                                options.end());
 3438|  22.2k|                    --options_available;
 3439|  22.2k|                    continue;
 3440|  22.2k|                }
 3441|    784|                ++i;
 3442|    784|            }
 3443|  3.85k|            ++chars_consumed;
 3444|  3.85k|        }
 3445|  3.19k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.11k, False: 74]
  ------------------
 3446|  3.11k|            m_begin = start_it;
 3447|  3.11k|            return std::nullopt;
 3448|  3.11k|        }
 3449|     74|        return options.front().second;
 3450|  3.19k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.5k|    {
 2969|  14.5k|#if !SCN_DISABLE_LOCALE
 2970|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.5k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.5k|#endif
 2977|       |
 2978|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.5k|    {
 2178|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.3k]
  |  |  |  Branch (865:45): [True: 152, False: 12.1k]
  |  |  ------------------
  ------------------
 2179|  2.35k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.35k|                                  "Invalid value for tm_hour"});
 2181|  2.35k|        }
 2182|  12.1k|        t.tm_hour = h;
 2183|  12.1k|        st.set_hour24(hdl);
 2184|  12.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.4k|    {
 2997|  14.4k|#if !SCN_DISABLE_LOCALE
 2998|  14.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.4k|#endif
 3005|       |
 3006|  14.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.4k|    {
 2168|  14.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.49k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 24, False: 11.9k]
  |  |  ------------------
  ------------------
 2169|  2.51k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.51k|                                "Invalid value for tm_min"});
 2171|  2.51k|        }
 2172|  11.9k|        t.tm_min = m;
 2173|  11.9k|        st.set_min(h);
 2174|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.53k|    {
 3011|  2.53k|#if !SCN_DISABLE_LOCALE
 3012|  2.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.53k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.53k|#endif
 3019|       |
 3020|  2.53k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.53k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.53k|    {
 2158|  2.53k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 2, False: 1.04k]
  |  |  ------------------
  ------------------
 2159|  1.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.48k|                                "Invalid value for tm_sec"});
 2161|  1.48k|        }
 2162|  1.04k|        t.tm_sec = s;
 2163|  1.04k|        st.set_sec(h);
 2164|  1.04k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.61k|    {
 3253|       |        // %m/%d/%y
 3254|  1.61k|        constexpr CharT slash = '/';
 3255|  1.61k|        on_dec_month();
 3256|  1.61k|        on_text(&slash, &slash + 1);
 3257|  1.61k|        on_day_of_month();
 3258|  1.61k|        on_text(&slash, &slash + 1);
 3259|  1.61k|        on_short_year();
 3260|  1.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.62k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.62k|        constexpr CharT dash = '-';
 3265|  1.62k|        on_full_year();
 3266|  1.62k|        on_text(&dash, &dash + 1);
 3267|  1.62k|        on_dec_month();
 3268|  1.62k|        on_text(&dash, &dash + 1);
 3269|  1.62k|        on_day_of_month();
 3270|  1.62k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.9k|    {
 3295|       |        // %H:%M
 3296|  11.9k|        constexpr CharT colon = ':';
 3297|  11.9k|        on_24_hour();
 3298|  11.9k|        on_text(&colon, &colon + 1);
 3299|  11.9k|        on_minute();
 3300|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.53k|    {
 3303|       |        // %H:%M:%S
 3304|  2.53k|        constexpr CharT colon = ':';
 3305|  2.53k|        on_24_hour();
 3306|  2.53k|        on_text(&colon, &colon + 1);
 3307|  2.53k|        on_minute();
 3308|  2.53k|        on_text(&colon, &colon + 1);
 3309|  2.53k|        on_second();
 3310|  2.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.3k|    {
 3342|  13.3k|        m_st.verify(*this);
 3343|  13.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.2k, False: 110]
  |  Branch (3346:37): [True: 96, False: 13.1k]
  |  Branch (3346:60): [True: 0, False: 13.1k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  48.0k|    {
 3353|  48.0k|        return m_error;
 3354|  48.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.3k|    {
 3370|  13.3k|        return m_begin;
 3371|  13.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  29.1k|{
 3563|  29.1k|    {
 3564|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 436, False: 28.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    436|    }                                                  \
  |  |  |  | 3939|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.7k|        ctx.range(), t, ctx.locale());
 3571|  28.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 18.3k]
  |  |  ------------------
  ------------------
 3573|  10.4k|        return unexpected(e.error());
 3574|  10.4k|    }
 3575|  18.3k|    return r.get_iterator();
 3576|  28.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.7k|          m_begin(ranges::begin(m_range)),
 2708|  28.7k|          m_tm(t),
 2709|  28.7k|          m_loc(loc)
 2710|  28.7k|    {
 2711|  28.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.63k|    {
 3358|  9.63k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  41.0k|    {
 3363|  41.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.4k, False: 30.6k]
  ------------------
 3364|  10.4k|            m_error = unexpected(e);
 3365|  10.4k|        }
 3366|  41.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 22.5k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 180, False: 32.1k]
  ------------------
 2717|    180|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    180|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.63k, False: 22.5k]
  ------------------
 2720|  9.63k|                return on_error("Invalid literal character");
 2721|  9.63k|            }
 2722|  22.5k|            ++beg;
 2723|  22.5k|            ++m_begin;
 2724|  22.5k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.10k|    {
 2745|  3.10k|#if !SCN_DISABLE_LOCALE
 2746|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.10k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.10k|#endif
 2753|       |
 2754|  3.10k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.10k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.10k|    {
 2218|  3.10k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.10k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.10k|        t.tm_year = y - 1900;
 2223|  3.10k|        st.set_full_year(h);
 2224|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.4k|    {
 3381|  56.4k|        int digits_read = 0;
 3382|  56.4k|        int accumulator = 0;
 3383|  99.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.7k, False: 358]
  ------------------
 3384|  98.7k|            const auto ch = *m_begin;
 3385|  98.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.7k, False: 69.0k]
  |  Branch (3385:36): [True: 18.1k, False: 50.9k]
  ------------------
 3386|  47.8k|                break;
 3387|  47.8k|            }
 3388|  50.9k|            ++m_begin;
 3389|  50.9k|            ++digits_read;
 3390|  50.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  50.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.18k, False: 42.7k]
  ------------------
 3392|  8.18k|                break;
 3393|  8.18k|            }
 3394|  50.9k|        }
 3395|  56.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.3k, False: 41.0k]
  ------------------
 3396|  15.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.3k|                                 "Too few integer digits"});
 3398|  15.3k|            return -1;
 3399|  15.3k|        }
 3400|  41.0k|        return accumulator;
 3401|  56.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.53k|    {
 2759|  5.53k|#if !SCN_DISABLE_LOCALE
 2760|  5.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.53k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.53k|#endif
 2768|       |
 2769|  5.53k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.53k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.53k|    {
 2235|  5.53k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  9.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.47k, False: 4.05k]
  |  |  |  Branch (865:45): [True: 1.47k, False: 4.05k]
  |  |  |  Branch (865:45): [True: 0, False: 4.05k]
  |  |  ------------------
  ------------------
 2236|  1.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.47k|                                "Invalid value for tm_year"});
 2238|  1.47k|        }
 2239|  4.05k|        st.short_year_value = y;
 2240|  4.05k|        st.set_short_year(h);
 2241|  4.05k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.06k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.06k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.06k|            {"Jan", 1},
 2830|  3.06k|            {"Feb", 2},
 2831|  3.06k|            {"Mar", 3},
 2832|  3.06k|            {"Apr", 4},
 2833|  3.06k|            {"Jun", 6},
 2834|  3.06k|            {"Jul", 7},
 2835|  3.06k|            {"Aug", 8},
 2836|  3.06k|            {"Sep", 9},
 2837|  3.06k|            {"Oct", 10},
 2838|  3.06k|            {"Nov", 11},
 2839|  3.06k|            {"Dec", 12},
 2840|  3.06k|        }};
 2841|  3.06k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.58k, False: 1.48k]
  ------------------
 2842|  1.58k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.58k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  8.84k|    {
 2208|  8.84k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 6.36k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 104, False: 6.36k]
  |  |  ------------------
  ------------------
 2209|  2.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.48k|                                "Invalid value for tm_mon"});
 2211|  2.48k|        }
 2212|  6.36k|        t.tm_mon = m - 1;
 2213|  6.36k|        st.set_mon(h);
 2214|  6.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.24k, False: 3.01k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.17k, False: 62]
  ------------------
 3424|  8.17k|            std::size_t i = 0;
 3425|  8.17k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 48, False: 8.13k]
  ------------------
 3426|     48|                options_available = 0;
 3427|     48|                break;
 3428|     48|            }
 3429|  8.13k|            const auto ch = *m_begin;
 3430|  8.13k|            ++m_begin;
 3431|  54.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.9k, False: 8.13k]
  ------------------
 3432|  45.9k|                const auto cmp = static_cast<unsigned>(
 3433|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.9k]
  ------------------
 3435|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 39.0k, False: 6.86k]
  |  Branch (3435:34): [True: 37.3k, False: 1.71k]
  ------------------
 3436|  37.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.3k|                                options.end());
 3438|  37.3k|                    --options_available;
 3439|  37.3k|                    continue;
 3440|  37.3k|                }
 3441|  8.57k|                ++i;
 3442|  8.57k|            }
 3443|  8.13k|            ++chars_consumed;
 3444|  8.13k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.06k, False: 62]
  ------------------
 3446|  3.06k|            m_begin = start_it;
 3447|  3.06k|            return std::nullopt;
 3448|  3.06k|        }
 3449|     62|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.06k|    {
 3419|  3.06k|        auto start_it = m_begin;
 3420|  3.06k|        std::size_t options_available = N;
 3421|  3.06k|        std::size_t chars_consumed = 0;
 3422|  9.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.99k, False: 1.43k]
  ------------------
 3423|  9.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.41k, False: 1.58k]
  ------------------
 3424|  6.41k|            std::size_t i = 0;
 3425|  6.41k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 44, False: 6.36k]
  ------------------
 3426|     44|                options_available = 0;
 3427|     44|                break;
 3428|     44|            }
 3429|  6.36k|            const auto ch = *m_begin;
 3430|  6.36k|            ++m_begin;
 3431|  43.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.0k, False: 6.36k]
  ------------------
 3432|  37.0k|                const auto cmp = static_cast<unsigned>(
 3433|  37.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.0k]
  ------------------
 3435|  37.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.7k, False: 3.33k]
  |  Branch (3435:34): [True: 32.0k, False: 1.64k]
  ------------------
 3436|  32.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.0k|                                options.end());
 3438|  32.0k|                    --options_available;
 3439|  32.0k|                    continue;
 3440|  32.0k|                }
 3441|  4.97k|                ++i;
 3442|  4.97k|            }
 3443|  6.36k|            ++chars_consumed;
 3444|  6.36k|        }
 3445|  3.06k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.58k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.58k|        return options.front().second;
 3450|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.20k|    {
 2848|  7.20k|#if !SCN_DISABLE_LOCALE
 2849|  7.20k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.20k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.20k|#endif
 2856|       |
 2857|  7.20k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.20k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.20k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.18k|    {
 2880|  7.18k|#if !SCN_DISABLE_LOCALE
 2881|  7.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.18k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.18k|#endif
 2888|       |
 2889|  7.18k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.18k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.18k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.18k|    {
 2198|  7.18k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.92k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 2.86k, False: 4.31k]
  |  |  |  Branch (865:45): [True: 64, False: 4.25k]
  |  |  ------------------
  ------------------
 2199|  2.92k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.92k|                                "Invalid value for tm_mday"});
 2201|  2.92k|        }
 2202|  4.25k|        t.tm_mday = d;
 2203|  4.25k|        st.set_mday(h);
 2204|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.57k|    {
 2895|  1.57k|#if !SCN_DISABLE_LOCALE
 2896|  1.57k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.57k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.57k|#endif
 2903|       |
 2904|  1.57k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.57k|            {"Sunday", 0},
 2906|  1.57k|            {"Monday", 1},
 2907|  1.57k|            {"Tuesday", 2},
 2908|  1.57k|            {"Wednesday", 3},
 2909|  1.57k|            {"Thursday", 4},
 2910|  1.57k|            {"Friday", 5},
 2911|  1.57k|            {"Saturday", 6},
 2912|  1.57k|        }};
 2913|  1.57k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.57k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.57k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.57k|            {"Sun", 0},
 2918|  1.57k|            {"Mon", 1},
 2919|  1.57k|            {"Tue", 2},
 2920|  1.57k|            {"Wed", 3},
 2921|  1.57k|            {"Thu", 4},
 2922|  1.57k|            {"Fri", 5},
 2923|  1.57k|            {"Sat", 6},
 2924|  1.57k|        }};
 2925|  1.57k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.50k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.50k|        return set_error(
 2929|  1.50k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|     74|    {
 2245|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|     74|        t.tm_wday = d;
 2250|     74|        st.set_wday(h);
 2251|     74|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.14k|    {
 3419|  3.14k|        auto start_it = m_begin;
 3420|  3.14k|        std::size_t options_available = N;
 3421|  3.14k|        std::size_t chars_consumed = 0;
 3422|  6.98k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.93k, False: 3.04k]
  ------------------
 3423|  6.98k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.86k, False: 74]
  ------------------
 3424|  3.86k|            std::size_t i = 0;
 3425|  3.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 3.83k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  3.83k|            const auto ch = *m_begin;
 3430|  3.83k|            ++m_begin;
 3431|  26.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 22.7k, False: 3.83k]
  ------------------
 3432|  22.7k|                const auto cmp = static_cast<unsigned>(
 3433|  22.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  22.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 22.7k]
  ------------------
 3435|  22.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 21.9k, False: 768]
  |  Branch (3435:34): [True: 21.9k, False: 48]
  ------------------
 3436|  21.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  21.9k|                                options.end());
 3438|  21.9k|                    --options_available;
 3439|  21.9k|                    continue;
 3440|  21.9k|                }
 3441|    816|                ++i;
 3442|    816|            }
 3443|  3.83k|            ++chars_consumed;
 3444|  3.83k|        }
 3445|  3.14k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.07k, False: 74]
  ------------------
 3446|  3.07k|            m_begin = start_it;
 3447|  3.07k|            return std::nullopt;
 3448|  3.07k|        }
 3449|     74|        return options.front().second;
 3450|  3.14k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.11k, False: 13.3k]
  |  |  |  Branch (865:45): [True: 1.94k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 168, False: 13.3k]
  |  |  ------------------
  ------------------
 2179|  2.11k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.11k|                                  "Invalid value for tm_hour"});
 2181|  2.11k|        }
 2182|  13.3k|        t.tm_hour = h;
 2183|  13.3k|        st.set_hour24(hdl);
 2184|  13.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.43k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 32, False: 12.9k]
  |  |  ------------------
  ------------------
 2169|  2.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.43k|                                "Invalid value for tm_min"});
 2171|  2.43k|        }
 2172|  12.9k|        t.tm_min = m;
 2173|  12.9k|        st.set_min(h);
 2174|  12.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.51k|    {
 3011|  2.51k|#if !SCN_DISABLE_LOCALE
 3012|  2.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.51k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.51k|#endif
 3019|       |
 3020|  2.51k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.51k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.51k|    {
 2158|  2.51k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 4, False: 1.05k]
  |  |  ------------------
  ------------------
 2159|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.46k|                                "Invalid value for tm_sec"});
 2161|  1.46k|        }
 2162|  1.05k|        t.tm_sec = s;
 2163|  1.05k|        st.set_sec(h);
 2164|  1.05k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.53k|    {
 3253|       |        // %m/%d/%y
 3254|  5.53k|        constexpr CharT slash = '/';
 3255|  5.53k|        on_dec_month();
 3256|  5.53k|        on_text(&slash, &slash + 1);
 3257|  5.53k|        on_day_of_month();
 3258|  5.53k|        on_text(&slash, &slash + 1);
 3259|  5.53k|        on_short_year();
 3260|  5.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.60k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.60k|        constexpr CharT dash = '-';
 3265|  1.60k|        on_full_year();
 3266|  1.60k|        on_text(&dash, &dash + 1);
 3267|  1.60k|        on_dec_month();
 3268|  1.60k|        on_text(&dash, &dash + 1);
 3269|  1.60k|        on_day_of_month();
 3270|  1.60k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.8k|    {
 3295|       |        // %H:%M
 3296|  12.8k|        constexpr CharT colon = ':';
 3297|  12.8k|        on_24_hour();
 3298|  12.8k|        on_text(&colon, &colon + 1);
 3299|  12.8k|        on_minute();
 3300|  12.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.51k|    {
 3303|       |        // %H:%M:%S
 3304|  2.51k|        constexpr CharT colon = ':';
 3305|  2.51k|        on_24_hour();
 3306|  2.51k|        on_text(&colon, &colon + 1);
 3307|  2.51k|        on_minute();
 3308|  2.51k|        on_text(&colon, &colon + 1);
 3309|  2.51k|        on_second();
 3310|  2.51k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  18.3k|    {
 3342|  18.3k|        m_st.verify(*this);
 3343|  18.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 18.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  18.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.2k, False: 110]
  |  Branch (3346:37): [True: 4.04k, False: 14.1k]
  |  Branch (3346:60): [True: 0, False: 14.1k]
  ------------------
 3347|  4.04k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.04k|        }
 3349|  18.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  57.6k|    {
 3353|  57.6k|        return m_error;
 3354|  57.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  18.3k|    {
 3370|  18.3k|        return m_begin;
 3371|  18.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.2k|{
 3563|  24.2k|    {
 3564|  24.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 23.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.9k|        ctx.range(), t, ctx.locale());
 3571|  23.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 3573|  10.6k|        return unexpected(e.error());
 3574|  10.6k|    }
 3575|  13.3k|    return r.get_iterator();
 3576|  23.9k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.9k|          m_begin(ranges::begin(m_range)),
 2708|  23.9k|          m_tm(t),
 2709|  23.9k|          m_loc(loc)
 2710|  23.9k|    {
 2711|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.92k|    {
 3358|  9.92k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  42.5k|    {
 3363|  42.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.6k, False: 31.9k]
  ------------------
 3364|  10.6k|            m_error = unexpected(e);
 3365|  10.6k|        }
 3366|  42.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.5k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 138, False: 23.5k]
  ------------------
 2717|    138|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    138|            }
 2719|  23.5k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.92k, False: 13.5k]
  ------------------
 2720|  9.92k|                return on_error("Invalid literal character");
 2721|  9.92k|            }
 2722|  13.5k|            ++beg;
 2723|  13.5k|            ++m_begin;
 2724|  13.5k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.15k|    {
 2745|  3.15k|#if !SCN_DISABLE_LOCALE
 2746|  3.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.15k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.15k|#endif
 2753|       |
 2754|  3.15k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.15k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.15k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.15k|    {
 2218|  3.15k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.15k|        t.tm_year = y - 1900;
 2223|  3.15k|        st.set_full_year(h);
 2224|  3.15k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  42.9k|    {
 3381|  42.9k|        int digits_read = 0;
 3382|  42.9k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.0k, False: 288]
  ------------------
 3384|  71.0k|            const auto ch = *m_begin;
 3385|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.9k, False: 49.0k]
  |  Branch (3385:36): [True: 16.7k, False: 32.3k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.3k|            ++m_begin;
 3389|  32.3k|            ++digits_read;
 3390|  32.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.93k, False: 28.3k]
  ------------------
 3392|  3.93k|                break;
 3393|  3.93k|            }
 3394|  32.3k|        }
 3395|  42.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.0k, False: 26.8k]
  ------------------
 3396|  16.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.0k|                                 "Too few integer digits"});
 3398|  16.0k|            return -1;
 3399|  16.0k|        }
 3400|  26.8k|        return accumulator;
 3401|  42.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.61k|    {
 2759|  1.61k|#if !SCN_DISABLE_LOCALE
 2760|  1.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.61k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.61k|#endif
 2768|       |
 2769|  1.61k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.61k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.61k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.61k|    {
 2235|  1.61k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.50k, False: 106]
  |  |  |  Branch (865:45): [True: 1.50k, False: 106]
  |  |  |  Branch (865:45): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 2236|  1.50k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.50k|                                "Invalid value for tm_year"});
 2238|  1.50k|        }
 2239|    106|        st.short_year_value = y;
 2240|    106|        st.set_short_year(h);
 2241|    106|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.10k|    {
 2802|  3.10k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.10k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.10k|#endif
 2810|       |
 2811|  3.10k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.10k|            {"January", 1},
 2813|  3.10k|            {"February", 2},
 2814|  3.10k|            {"March", 3},
 2815|  3.10k|            {"April", 4},
 2816|  3.10k|            {"May", 5},
 2817|  3.10k|            {"June", 6},
 2818|  3.10k|            {"July", 7},
 2819|  3.10k|            {"August", 8},
 2820|  3.10k|            {"September", 9},
 2821|  3.10k|            {"October", 10},
 2822|  3.10k|            {"November", 11},
 2823|  3.10k|            {"December", 12},
 2824|  3.10k|        }};
 2825|  3.10k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.04k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.04k|            {"Jan", 1},
 2830|  3.04k|            {"Feb", 2},
 2831|  3.04k|            {"Mar", 3},
 2832|  3.04k|            {"Apr", 4},
 2833|  3.04k|            {"Jun", 6},
 2834|  3.04k|            {"Jul", 7},
 2835|  3.04k|            {"Aug", 8},
 2836|  3.04k|            {"Sep", 9},
 2837|  3.04k|            {"Oct", 10},
 2838|  3.04k|            {"Nov", 11},
 2839|  3.04k|            {"Dec", 12},
 2840|  3.04k|        }};
 2841|  3.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.53k, False: 1.51k]
  ------------------
 2842|  1.53k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.53k|        }
 2844|  1.51k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.51k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.89k|    {
 2208|  4.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.57k, False: 2.31k]
  |  |  |  Branch (865:45): [True: 2.48k, False: 2.40k]
  |  |  |  Branch (865:45): [True: 90, False: 2.31k]
  |  |  ------------------
  ------------------
 2209|  2.57k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.57k|                                "Invalid value for tm_mon"});
 2211|  2.57k|        }
 2212|  2.31k|        t.tm_mon = m - 1;
 2213|  2.31k|        st.set_mon(h);
 2214|  2.31k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.10k|    {
 3419|  3.10k|        auto start_it = m_begin;
 3420|  3.10k|        std::size_t options_available = N;
 3421|  3.10k|        std::size_t chars_consumed = 0;
 3422|  11.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.03k, False: 2.99k]
  ------------------
 3423|  11.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.97k, False: 62]
  ------------------
 3424|  7.97k|            std::size_t i = 0;
 3425|  7.97k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 7.92k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  7.92k|            const auto ch = *m_begin;
 3430|  7.92k|            ++m_begin;
 3431|  53.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.3k, False: 7.92k]
  ------------------
 3432|  45.3k|                const auto cmp = static_cast<unsigned>(
 3433|  45.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.3k]
  ------------------
 3435|  45.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.7k, False: 6.62k]
  |  Branch (3435:34): [True: 37.0k, False: 1.63k]
  ------------------
 3436|  37.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.0k|                                options.end());
 3438|  37.0k|                    --options_available;
 3439|  37.0k|                    continue;
 3440|  37.0k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  7.92k|            ++chars_consumed;
 3444|  7.92k|        }
 3445|  3.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.04k, False: 62]
  ------------------
 3446|  3.04k|            m_begin = start_it;
 3447|  3.04k|            return std::nullopt;
 3448|  3.04k|        }
 3449|     62|        return options.front().second;
 3450|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  9.25k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.78k, False: 1.47k]
  ------------------
 3423|  9.25k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.25k, False: 1.53k]
  ------------------
 3424|  6.25k|            std::size_t i = 0;
 3425|  6.25k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 6.21k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  6.21k|            const auto ch = *m_begin;
 3430|  6.21k|            ++m_begin;
 3431|  42.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.6k, False: 6.21k]
  ------------------
 3432|  36.6k|                const auto cmp = static_cast<unsigned>(
 3433|  36.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.6k]
  ------------------
 3435|  36.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 3.20k]
  |  Branch (3435:34): [True: 31.8k, False: 1.57k]
  ------------------
 3436|  31.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  31.8k|                                options.end());
 3438|  31.8k|                    --options_available;
 3439|  31.8k|                    continue;
 3440|  31.8k|                }
 3441|  4.77k|                ++i;
 3442|  4.77k|            }
 3443|  6.21k|            ++chars_consumed;
 3444|  6.21k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.51k, False: 1.53k]
  ------------------
 3446|  1.51k|            m_begin = start_it;
 3447|  1.51k|            return std::nullopt;
 3448|  1.51k|        }
 3449|  1.53k|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.30k|    {
 2848|  3.30k|#if !SCN_DISABLE_LOCALE
 2849|  3.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.30k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.30k|#endif
 2856|       |
 2857|  3.30k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.30k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.28k|    {
 2880|  3.28k|#if !SCN_DISABLE_LOCALE
 2881|  3.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.28k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.28k|#endif
 2888|       |
 2889|  3.28k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.28k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.28k|    {
 2198|  3.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 288]
  |  |  |  Branch (865:45): [True: 2.93k, False: 348]
  |  |  |  Branch (865:45): [True: 60, False: 288]
  |  |  ------------------
  ------------------
 2199|  2.99k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.99k|                                "Invalid value for tm_mday"});
 2201|  2.99k|        }
 2202|    288|        t.tm_mday = d;
 2203|    288|        st.set_mday(h);
 2204|    288|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.59k|    {
 2895|  1.59k|#if !SCN_DISABLE_LOCALE
 2896|  1.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.59k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.59k|#endif
 2903|       |
 2904|  1.59k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.59k|            {"Sunday", 0},
 2906|  1.59k|            {"Monday", 1},
 2907|  1.59k|            {"Tuesday", 2},
 2908|  1.59k|            {"Wednesday", 3},
 2909|  1.59k|            {"Thursday", 4},
 2910|  1.59k|            {"Friday", 5},
 2911|  1.59k|            {"Saturday", 6},
 2912|  1.59k|        }};
 2913|  1.59k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.59k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.59k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.59k|            {"Sun", 0},
 2918|  1.59k|            {"Mon", 1},
 2919|  1.59k|            {"Tue", 2},
 2920|  1.59k|            {"Wed", 3},
 2921|  1.59k|            {"Thu", 4},
 2922|  1.59k|            {"Fri", 5},
 2923|  1.59k|            {"Sat", 6},
 2924|  1.59k|        }};
 2925|  1.59k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.52k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.52k|        return set_error(
 2929|  1.52k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.59k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|     74|    {
 2245|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|     74|        t.tm_wday = d;
 2250|     74|        st.set_wday(h);
 2251|     74|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.19k|    {
 3419|  3.19k|        auto start_it = m_begin;
 3420|  3.19k|        std::size_t options_available = N;
 3421|  3.19k|        std::size_t chars_consumed = 0;
 3422|  7.04k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.95k, False: 3.09k]
  ------------------
 3423|  7.04k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.87k, False: 74]
  ------------------
 3424|  3.87k|            std::size_t i = 0;
 3425|  3.87k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.85k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.85k|            const auto ch = *m_begin;
 3430|  3.85k|            ++m_begin;
 3431|  26.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 23.0k, False: 3.85k]
  ------------------
 3432|  23.0k|                const auto cmp = static_cast<unsigned>(
 3433|  23.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  23.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 23.0k]
  ------------------
 3435|  23.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 22.2k, False: 764]
  |  Branch (3435:34): [True: 22.2k, False: 20]
  ------------------
 3436|  22.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  22.2k|                                options.end());
 3438|  22.2k|                    --options_available;
 3439|  22.2k|                    continue;
 3440|  22.2k|                }
 3441|    784|                ++i;
 3442|    784|            }
 3443|  3.85k|            ++chars_consumed;
 3444|  3.85k|        }
 3445|  3.19k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.11k, False: 74]
  ------------------
 3446|  3.11k|            m_begin = start_it;
 3447|  3.11k|            return std::nullopt;
 3448|  3.11k|        }
 3449|     74|        return options.front().second;
 3450|  3.19k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.5k|    {
 2969|  14.5k|#if !SCN_DISABLE_LOCALE
 2970|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.5k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.5k|#endif
 2977|       |
 2978|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.5k|    {
 2178|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.3k]
  |  |  |  Branch (865:45): [True: 152, False: 12.1k]
  |  |  ------------------
  ------------------
 2179|  2.35k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.35k|                                  "Invalid value for tm_hour"});
 2181|  2.35k|        }
 2182|  12.1k|        t.tm_hour = h;
 2183|  12.1k|        st.set_hour24(hdl);
 2184|  12.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.4k|    {
 2997|  14.4k|#if !SCN_DISABLE_LOCALE
 2998|  14.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.4k|#endif
 3005|       |
 3006|  14.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.4k|    {
 2168|  14.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.49k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 24, False: 11.9k]
  |  |  ------------------
  ------------------
 2169|  2.51k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.51k|                                "Invalid value for tm_min"});
 2171|  2.51k|        }
 2172|  11.9k|        t.tm_min = m;
 2173|  11.9k|        st.set_min(h);
 2174|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.53k|    {
 3011|  2.53k|#if !SCN_DISABLE_LOCALE
 3012|  2.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.53k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.53k|#endif
 3019|       |
 3020|  2.53k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.53k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.53k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.53k|    {
 2158|  2.53k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 2, False: 1.04k]
  |  |  ------------------
  ------------------
 2159|  1.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.48k|                                "Invalid value for tm_sec"});
 2161|  1.48k|        }
 2162|  1.04k|        t.tm_sec = s;
 2163|  1.04k|        st.set_sec(h);
 2164|  1.04k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.61k|    {
 3253|       |        // %m/%d/%y
 3254|  1.61k|        constexpr CharT slash = '/';
 3255|  1.61k|        on_dec_month();
 3256|  1.61k|        on_text(&slash, &slash + 1);
 3257|  1.61k|        on_day_of_month();
 3258|  1.61k|        on_text(&slash, &slash + 1);
 3259|  1.61k|        on_short_year();
 3260|  1.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.62k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.62k|        constexpr CharT dash = '-';
 3265|  1.62k|        on_full_year();
 3266|  1.62k|        on_text(&dash, &dash + 1);
 3267|  1.62k|        on_dec_month();
 3268|  1.62k|        on_text(&dash, &dash + 1);
 3269|  1.62k|        on_day_of_month();
 3270|  1.62k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.9k|    {
 3295|       |        // %H:%M
 3296|  11.9k|        constexpr CharT colon = ':';
 3297|  11.9k|        on_24_hour();
 3298|  11.9k|        on_text(&colon, &colon + 1);
 3299|  11.9k|        on_minute();
 3300|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.53k|    {
 3303|       |        // %H:%M:%S
 3304|  2.53k|        constexpr CharT colon = ':';
 3305|  2.53k|        on_24_hour();
 3306|  2.53k|        on_text(&colon, &colon + 1);
 3307|  2.53k|        on_minute();
 3308|  2.53k|        on_text(&colon, &colon + 1);
 3309|  2.53k|        on_second();
 3310|  2.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.3k|    {
 3342|  13.3k|        m_st.verify(*this);
 3343|  13.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.2k, False: 110]
  |  Branch (3346:37): [True: 96, False: 13.1k]
  |  Branch (3346:60): [True: 0, False: 13.1k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  48.0k|    {
 3353|  48.0k|        return m_error;
 3354|  48.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.3k|    {
 3370|  13.3k|        return m_begin;
 3371|  13.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  29.1k|{
 3563|  29.1k|    {
 3564|  29.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 436, False: 28.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    436|    }                                                  \
  |  |  |  | 3939|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.7k|        ctx.range(), t, ctx.locale());
 3571|  28.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 18.3k]
  |  |  ------------------
  ------------------
 3573|  10.4k|        return unexpected(e.error());
 3574|  10.4k|    }
 3575|  18.3k|    return r.get_iterator();
 3576|  28.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.7k|    static_cast<    \
  |  |  935|  28.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.7k|          m_begin(ranges::begin(m_range)),
 2708|  28.7k|          m_tm(t),
 2709|  28.7k|          m_loc(loc)
 2710|  28.7k|    {
 2711|  28.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.63k|    {
 3358|  9.63k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  39.5k|    {
 3363|  39.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.4k, False: 29.1k]
  ------------------
 3364|  10.4k|            m_error = unexpected(e);
 3365|  10.4k|        }
 3366|  39.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.3k|    {
 2715|  54.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.3k, False: 22.5k]
  ------------------
 2716|  32.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 180, False: 32.1k]
  ------------------
 2717|    180|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    180|            }
 2719|  32.1k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.63k, False: 22.5k]
  ------------------
 2720|  9.63k|                return on_error("Invalid literal character");
 2721|  9.63k|            }
 2722|  22.5k|            ++beg;
 2723|  22.5k|            ++m_begin;
 2724|  22.5k|        }
 2725|  32.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.10k|    {
 2745|  3.10k|#if !SCN_DISABLE_LOCALE
 2746|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.10k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.10k|#endif
 2753|       |
 2754|  3.10k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.10k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.10k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.10k|    {
 2396|  3.10k|        t.year = y;
 2397|  3.10k|        st.set_full_year(h);
 2398|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.4k|    {
 3381|  56.4k|        int digits_read = 0;
 3382|  56.4k|        int accumulator = 0;
 3383|  99.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.7k, False: 358]
  ------------------
 3384|  98.7k|            const auto ch = *m_begin;
 3385|  98.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.7k, False: 69.0k]
  |  Branch (3385:36): [True: 18.1k, False: 50.9k]
  ------------------
 3386|  47.8k|                break;
 3387|  47.8k|            }
 3388|  50.9k|            ++m_begin;
 3389|  50.9k|            ++digits_read;
 3390|  50.9k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  50.9k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.18k, False: 42.7k]
  ------------------
 3392|  8.18k|                break;
 3393|  8.18k|            }
 3394|  50.9k|        }
 3395|  56.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.3k, False: 41.0k]
  ------------------
 3396|  15.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.3k|                                 "Too few integer digits"});
 3398|  15.3k|            return -1;
 3399|  15.3k|        }
 3400|  41.0k|        return accumulator;
 3401|  56.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.53k|    {
 2759|  5.53k|#if !SCN_DISABLE_LOCALE
 2760|  5.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.53k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.53k|#endif
 2768|       |
 2769|  5.53k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.53k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.53k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  5.53k|    {
 2419|  5.53k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 5.53k, False: 0]
  ------------------
 2420|  5.53k|            t.year = y;
 2421|  5.53k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  5.53k|        st.set_short_year(h);
 2426|  5.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.06k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.06k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.06k|            {"Jan", 1},
 2830|  3.06k|            {"Feb", 2},
 2831|  3.06k|            {"Mar", 3},
 2832|  3.06k|            {"Apr", 4},
 2833|  3.06k|            {"Jun", 6},
 2834|  3.06k|            {"Jul", 7},
 2835|  3.06k|            {"Aug", 8},
 2836|  3.06k|            {"Sep", 9},
 2837|  3.06k|            {"Oct", 10},
 2838|  3.06k|            {"Nov", 11},
 2839|  3.06k|            {"Dec", 12},
 2840|  3.06k|        }};
 2841|  3.06k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.58k, False: 1.48k]
  ------------------
 2842|  1.58k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.58k|        }
 2844|  1.48k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.48k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  8.84k|    {
 2383|  8.84k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.48k, False: 6.36k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 104, False: 6.36k]
  |  |  ------------------
  ------------------
 2384|  2.48k|            return h.set_error(
 2385|  2.48k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.48k|        }
 2387|  6.36k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  6.36k|        st.set_mon(h);
 2389|  6.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.24k, False: 3.01k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 8.17k, False: 62]
  ------------------
 3424|  8.17k|            std::size_t i = 0;
 3425|  8.17k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 48, False: 8.13k]
  ------------------
 3426|     48|                options_available = 0;
 3427|     48|                break;
 3428|     48|            }
 3429|  8.13k|            const auto ch = *m_begin;
 3430|  8.13k|            ++m_begin;
 3431|  54.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.9k, False: 8.13k]
  ------------------
 3432|  45.9k|                const auto cmp = static_cast<unsigned>(
 3433|  45.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.9k]
  ------------------
 3435|  45.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 39.0k, False: 6.86k]
  |  Branch (3435:34): [True: 37.3k, False: 1.71k]
  ------------------
 3436|  37.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.3k|                                options.end());
 3438|  37.3k|                    --options_available;
 3439|  37.3k|                    continue;
 3440|  37.3k|                }
 3441|  8.57k|                ++i;
 3442|  8.57k|            }
 3443|  8.13k|            ++chars_consumed;
 3444|  8.13k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.06k, False: 62]
  ------------------
 3446|  3.06k|            m_begin = start_it;
 3447|  3.06k|            return std::nullopt;
 3448|  3.06k|        }
 3449|     62|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.06k|    {
 3419|  3.06k|        auto start_it = m_begin;
 3420|  3.06k|        std::size_t options_available = N;
 3421|  3.06k|        std::size_t chars_consumed = 0;
 3422|  9.43k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.99k, False: 1.43k]
  ------------------
 3423|  9.43k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.41k, False: 1.58k]
  ------------------
 3424|  6.41k|            std::size_t i = 0;
 3425|  6.41k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 44, False: 6.36k]
  ------------------
 3426|     44|                options_available = 0;
 3427|     44|                break;
 3428|     44|            }
 3429|  6.36k|            const auto ch = *m_begin;
 3430|  6.36k|            ++m_begin;
 3431|  43.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.0k, False: 6.36k]
  ------------------
 3432|  37.0k|                const auto cmp = static_cast<unsigned>(
 3433|  37.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.0k]
  ------------------
 3435|  37.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.7k, False: 3.33k]
  |  Branch (3435:34): [True: 32.0k, False: 1.64k]
  ------------------
 3436|  32.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.0k|                                options.end());
 3438|  32.0k|                    --options_available;
 3439|  32.0k|                    continue;
 3440|  32.0k|                }
 3441|  4.97k|                ++i;
 3442|  4.97k|            }
 3443|  6.36k|            ++chars_consumed;
 3444|  6.36k|        }
 3445|  3.06k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.48k, False: 1.58k]
  ------------------
 3446|  1.48k|            m_begin = start_it;
 3447|  1.48k|            return std::nullopt;
 3448|  1.48k|        }
 3449|  1.58k|        return options.front().second;
 3450|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.20k|    {
 2848|  7.20k|#if !SCN_DISABLE_LOCALE
 2849|  7.20k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.20k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.20k|#endif
 2856|       |
 2857|  7.20k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.20k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.20k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.18k|    {
 2880|  7.18k|#if !SCN_DISABLE_LOCALE
 2881|  7.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.18k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.18k|#endif
 2888|       |
 2889|  7.18k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.18k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.18k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  7.18k|    {
 2370|  7.18k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.92k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 2.86k, False: 4.31k]
  |  |  |  Branch (865:45): [True: 64, False: 4.25k]
  |  |  ------------------
  ------------------
 2371|  2.92k|            return h.set_error(
 2372|  2.92k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.92k|        }
 2374|  4.25k|        t.mday = d;
 2375|  4.25k|        st.set_mday(h);
 2376|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.57k|    {
 2895|  1.57k|#if !SCN_DISABLE_LOCALE
 2896|  1.57k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.57k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.57k|#endif
 2903|       |
 2904|  1.57k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.57k|            {"Sunday", 0},
 2906|  1.57k|            {"Monday", 1},
 2907|  1.57k|            {"Tuesday", 2},
 2908|  1.57k|            {"Wednesday", 3},
 2909|  1.57k|            {"Thursday", 4},
 2910|  1.57k|            {"Friday", 5},
 2911|  1.57k|            {"Saturday", 6},
 2912|  1.57k|        }};
 2913|  1.57k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.57k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.57k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.57k|            {"Sun", 0},
 2918|  1.57k|            {"Mon", 1},
 2919|  1.57k|            {"Tue", 2},
 2920|  1.57k|            {"Wed", 3},
 2921|  1.57k|            {"Thu", 4},
 2922|  1.57k|            {"Fri", 5},
 2923|  1.57k|            {"Sat", 6},
 2924|  1.57k|        }};
 2925|  1.57k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.50k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.50k|        return set_error(
 2929|  1.50k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.57k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|     74|    {
 2433|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|     74|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|     74|        st.set_wday(h);
 2439|     74|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.14k|    {
 3419|  3.14k|        auto start_it = m_begin;
 3420|  3.14k|        std::size_t options_available = N;
 3421|  3.14k|        std::size_t chars_consumed = 0;
 3422|  6.98k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.93k, False: 3.04k]
  ------------------
 3423|  6.98k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.86k, False: 74]
  ------------------
 3424|  3.86k|            std::size_t i = 0;
 3425|  3.86k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 3.83k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  3.83k|            const auto ch = *m_begin;
 3430|  3.83k|            ++m_begin;
 3431|  26.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 22.7k, False: 3.83k]
  ------------------
 3432|  22.7k|                const auto cmp = static_cast<unsigned>(
 3433|  22.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  22.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 22.7k]
  ------------------
 3435|  22.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 21.9k, False: 768]
  |  Branch (3435:34): [True: 21.9k, False: 48]
  ------------------
 3436|  21.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  21.9k|                                options.end());
 3438|  21.9k|                    --options_available;
 3439|  21.9k|                    continue;
 3440|  21.9k|                }
 3441|    816|                ++i;
 3442|    816|            }
 3443|  3.83k|            ++chars_consumed;
 3444|  3.83k|        }
 3445|  3.14k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.07k, False: 74]
  ------------------
 3446|  3.07k|            m_begin = start_it;
 3447|  3.07k|            return std::nullopt;
 3448|  3.07k|        }
 3449|     74|        return options.front().second;
 3450|  3.14k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  15.4k|    {
 2344|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.11k, False: 13.3k]
  |  |  |  Branch (865:45): [True: 1.94k, False: 13.5k]
  |  |  |  Branch (865:45): [True: 168, False: 13.3k]
  |  |  ------------------
  ------------------
 2345|  2.11k|            return hdl.set_error(
 2346|  2.11k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.11k|        }
 2348|  13.3k|        t.hour = h;
 2349|  13.3k|        st.set_hour24(hdl);
 2350|  13.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  15.4k|    {
 2331|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.43k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.40k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 32, False: 12.9k]
  |  |  ------------------
  ------------------
 2332|  2.43k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.43k|                                "Invalid value for minutes"});
 2334|  2.43k|        }
 2335|  12.9k|        t.min = m;
 2336|  12.9k|        st.set_min(h);
 2337|  12.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.51k|    {
 3011|  2.51k|#if !SCN_DISABLE_LOCALE
 3012|  2.51k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.51k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.51k|#endif
 3019|       |
 3020|  2.51k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.51k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.51k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.51k|    {
 2318|  2.51k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 1.46k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 4, False: 1.05k]
  |  |  ------------------
  ------------------
 2319|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.46k|                                "Invalid value for seconds"});
 2321|  1.46k|        }
 2322|  1.05k|        t.sec = s;
 2323|  1.05k|        st.set_sec(h);
 2324|  1.05k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.53k|    {
 3253|       |        // %m/%d/%y
 3254|  5.53k|        constexpr CharT slash = '/';
 3255|  5.53k|        on_dec_month();
 3256|  5.53k|        on_text(&slash, &slash + 1);
 3257|  5.53k|        on_day_of_month();
 3258|  5.53k|        on_text(&slash, &slash + 1);
 3259|  5.53k|        on_short_year();
 3260|  5.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.60k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.60k|        constexpr CharT dash = '-';
 3265|  1.60k|        on_full_year();
 3266|  1.60k|        on_text(&dash, &dash + 1);
 3267|  1.60k|        on_dec_month();
 3268|  1.60k|        on_text(&dash, &dash + 1);
 3269|  1.60k|        on_day_of_month();
 3270|  1.60k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.8k|    {
 3295|       |        // %H:%M
 3296|  12.8k|        constexpr CharT colon = ':';
 3297|  12.8k|        on_24_hour();
 3298|  12.8k|        on_text(&colon, &colon + 1);
 3299|  12.8k|        on_minute();
 3300|  12.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.51k|    {
 3303|       |        // %H:%M:%S
 3304|  2.51k|        constexpr CharT colon = ':';
 3305|  2.51k|        on_24_hour();
 3306|  2.51k|        on_text(&colon, &colon + 1);
 3307|  2.51k|        on_minute();
 3308|  2.51k|        on_text(&colon, &colon + 1);
 3309|  2.51k|        on_second();
 3310|  2.51k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  18.3k|    {
 3342|  18.3k|        m_st.verify(*this);
 3343|  18.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 18.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  18.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 18.2k, False: 110]
  |  Branch (3346:37): [True: 4.04k, False: 14.1k]
  |  Branch (3346:60): [True: 0, False: 14.1k]
  ------------------
 3347|  4.04k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.04k|        }
 3349|  18.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  4.15k|    {
 2483|  4.15k|        assert(t.year);
 2484|  4.15k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  4.15k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  57.6k|    {
 3353|  57.6k|        return m_error;
 3354|  57.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  18.3k|    {
 3370|  18.3k|        return m_begin;
 3371|  18.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  24.2k|{
 3563|  24.2k|    {
 3564|  24.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  24.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  24.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  24.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 23.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|  24.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.9k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.9k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.9k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.9k|        ctx.range(), t, ctx.locale());
 3571|  23.9k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.9k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 13.3k]
  |  |  ------------------
  ------------------
 3573|  10.6k|        return unexpected(e.error());
 3574|  10.6k|    }
 3575|  13.3k|    return r.get_iterator();
 3576|  23.9k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.9k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.9k|    static_cast<    \
  |  |  935|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.9k|          m_begin(ranges::begin(m_range)),
 2708|  23.9k|          m_tm(t),
 2709|  23.9k|          m_loc(loc)
 2710|  23.9k|    {
 2711|  23.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.92k|    {
 3358|  9.92k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  41.0k|    {
 3363|  41.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.6k, False: 30.4k]
  ------------------
 3364|  10.6k|            m_error = unexpected(e);
 3365|  10.6k|        }
 3366|  41.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.6k|    {
 2715|  37.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.6k, False: 13.5k]
  ------------------
 2716|  23.6k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 138, False: 23.5k]
  ------------------
 2717|    138|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    138|            }
 2719|  23.5k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.92k, False: 13.5k]
  ------------------
 2720|  9.92k|                return on_error("Invalid literal character");
 2721|  9.92k|            }
 2722|  13.5k|            ++beg;
 2723|  13.5k|            ++m_begin;
 2724|  13.5k|        }
 2725|  23.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.15k|    {
 2745|  3.15k|#if !SCN_DISABLE_LOCALE
 2746|  3.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.15k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.15k|#endif
 2753|       |
 2754|  3.15k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.15k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.15k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.15k|    {
 2396|  3.15k|        t.year = y;
 2397|  3.15k|        st.set_full_year(h);
 2398|  3.15k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  42.9k|    {
 3381|  42.9k|        int digits_read = 0;
 3382|  42.9k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.0k, False: 288]
  ------------------
 3384|  71.0k|            const auto ch = *m_begin;
 3385|  71.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.9k, False: 49.0k]
  |  Branch (3385:36): [True: 16.7k, False: 32.3k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.3k|            ++m_begin;
 3389|  32.3k|            ++digits_read;
 3390|  32.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.93k, False: 28.3k]
  ------------------
 3392|  3.93k|                break;
 3393|  3.93k|            }
 3394|  32.3k|        }
 3395|  42.9k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.0k, False: 26.8k]
  ------------------
 3396|  16.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.0k|                                 "Too few integer digits"});
 3398|  16.0k|            return -1;
 3399|  16.0k|        }
 3400|  26.8k|        return accumulator;
 3401|  42.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.61k|    {
 2759|  1.61k|#if !SCN_DISABLE_LOCALE
 2760|  1.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.61k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.61k|#endif
 2768|       |
 2769|  1.61k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.61k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.61k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.61k|    {
 2419|  1.61k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.61k, False: 0]
  ------------------
 2420|  1.61k|            t.year = y;
 2421|  1.61k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.61k|        st.set_short_year(h);
 2426|  1.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.10k|    {
 2802|  3.10k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.10k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.10k|#endif
 2810|       |
 2811|  3.10k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.10k|            {"January", 1},
 2813|  3.10k|            {"February", 2},
 2814|  3.10k|            {"March", 3},
 2815|  3.10k|            {"April", 4},
 2816|  3.10k|            {"May", 5},
 2817|  3.10k|            {"June", 6},
 2818|  3.10k|            {"July", 7},
 2819|  3.10k|            {"August", 8},
 2820|  3.10k|            {"September", 9},
 2821|  3.10k|            {"October", 10},
 2822|  3.10k|            {"November", 11},
 2823|  3.10k|            {"December", 12},
 2824|  3.10k|        }};
 2825|  3.10k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 62, False: 3.04k]
  ------------------
 2826|     62|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     62|        }
 2828|  3.04k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.04k|            {"Jan", 1},
 2830|  3.04k|            {"Feb", 2},
 2831|  3.04k|            {"Mar", 3},
 2832|  3.04k|            {"Apr", 4},
 2833|  3.04k|            {"Jun", 6},
 2834|  3.04k|            {"Jul", 7},
 2835|  3.04k|            {"Aug", 8},
 2836|  3.04k|            {"Sep", 9},
 2837|  3.04k|            {"Oct", 10},
 2838|  3.04k|            {"Nov", 11},
 2839|  3.04k|            {"Dec", 12},
 2840|  3.04k|        }};
 2841|  3.04k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.53k, False: 1.51k]
  ------------------
 2842|  1.53k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.53k|        }
 2844|  1.51k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.51k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  4.89k|    {
 2383|  4.89k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.57k, False: 2.31k]
  |  |  |  Branch (865:45): [True: 2.48k, False: 2.40k]
  |  |  |  Branch (865:45): [True: 90, False: 2.31k]
  |  |  ------------------
  ------------------
 2384|  2.57k|            return h.set_error(
 2385|  2.57k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.57k|        }
 2387|  2.31k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  2.31k|        st.set_mon(h);
 2389|  2.31k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.10k|    {
 3419|  3.10k|        auto start_it = m_begin;
 3420|  3.10k|        std::size_t options_available = N;
 3421|  3.10k|        std::size_t chars_consumed = 0;
 3422|  11.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 8.03k, False: 2.99k]
  ------------------
 3423|  11.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.97k, False: 62]
  ------------------
 3424|  7.97k|            std::size_t i = 0;
 3425|  7.97k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 42, False: 7.92k]
  ------------------
 3426|     42|                options_available = 0;
 3427|     42|                break;
 3428|     42|            }
 3429|  7.92k|            const auto ch = *m_begin;
 3430|  7.92k|            ++m_begin;
 3431|  53.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.3k, False: 7.92k]
  ------------------
 3432|  45.3k|                const auto cmp = static_cast<unsigned>(
 3433|  45.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.3k]
  ------------------
 3435|  45.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.7k, False: 6.62k]
  |  Branch (3435:34): [True: 37.0k, False: 1.63k]
  ------------------
 3436|  37.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.0k|                                options.end());
 3438|  37.0k|                    --options_available;
 3439|  37.0k|                    continue;
 3440|  37.0k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  7.92k|            ++chars_consumed;
 3444|  7.92k|        }
 3445|  3.10k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.04k, False: 62]
  ------------------
 3446|  3.04k|            m_begin = start_it;
 3447|  3.04k|            return std::nullopt;
 3448|  3.04k|        }
 3449|     62|        return options.front().second;
 3450|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.04k|    {
 3419|  3.04k|        auto start_it = m_begin;
 3420|  3.04k|        std::size_t options_available = N;
 3421|  3.04k|        std::size_t chars_consumed = 0;
 3422|  9.25k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 7.78k, False: 1.47k]
  ------------------
 3423|  9.25k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.25k, False: 1.53k]
  ------------------
 3424|  6.25k|            std::size_t i = 0;
 3425|  6.25k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 6.21k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  6.21k|            const auto ch = *m_begin;
 3430|  6.21k|            ++m_begin;
 3431|  42.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 36.6k, False: 6.21k]
  ------------------
 3432|  36.6k|                const auto cmp = static_cast<unsigned>(
 3433|  36.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  36.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 36.6k]
  ------------------
 3435|  36.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.4k, False: 3.20k]
  |  Branch (3435:34): [True: 31.8k, False: 1.57k]
  ------------------
 3436|  31.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  31.8k|                                options.end());
 3438|  31.8k|                    --options_available;
 3439|  31.8k|                    continue;
 3440|  31.8k|                }
 3441|  4.77k|                ++i;
 3442|  4.77k|            }
 3443|  6.21k|            ++chars_consumed;
 3444|  6.21k|        }
 3445|  3.04k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.51k, False: 1.53k]
  ------------------
 3446|  1.51k|            m_begin = start_it;
 3447|  1.51k|            return std::nullopt;
 3448|  1.51k|        }
 3449|  1.53k|        return options.front().second;
 3450|  3.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.30k|    {
 2848|  3.30k|#if !SCN_DISABLE_LOCALE
 2849|  3.30k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.30k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.30k|#endif
 2856|       |
 2857|  3.30k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.30k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.30k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.28k|    {
 2880|  3.28k|#if !SCN_DISABLE_LOCALE
 2881|  3.28k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.28k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.28k|#endif
 2888|       |
 2889|  3.28k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.28k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.28k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.28k|    {
 2370|  3.28k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 288]
  |  |  |  Branch (865:45): [True: 2.93k, False: 348]
  |  |  |  Branch (865:45): [True: 60, False: 288]
  |  |  ------------------
  ------------------
 2371|  2.99k|            return h.set_error(
 2372|  2.99k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.99k|        }
 2374|    288|        t.mday = d;
 2375|    288|        st.set_mday(h);
 2376|    288|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.59k|    {
 2895|  1.59k|#if !SCN_DISABLE_LOCALE
 2896|  1.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.59k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.59k|#endif
 2903|       |
 2904|  1.59k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.59k|            {"Sunday", 0},
 2906|  1.59k|            {"Monday", 1},
 2907|  1.59k|            {"Tuesday", 2},
 2908|  1.59k|            {"Wednesday", 3},
 2909|  1.59k|            {"Thursday", 4},
 2910|  1.59k|            {"Friday", 5},
 2911|  1.59k|            {"Saturday", 6},
 2912|  1.59k|        }};
 2913|  1.59k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.59k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.59k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.59k|            {"Sun", 0},
 2918|  1.59k|            {"Mon", 1},
 2919|  1.59k|            {"Tue", 2},
 2920|  1.59k|            {"Wed", 3},
 2921|  1.59k|            {"Thu", 4},
 2922|  1.59k|            {"Fri", 5},
 2923|  1.59k|            {"Sat", 6},
 2924|  1.59k|        }};
 2925|  1.59k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 74, False: 1.52k]
  ------------------
 2926|     74|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|     74|        }
 2928|  1.52k|        return set_error(
 2929|  1.52k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.59k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|     74|    {
 2433|     74|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  |  Branch (865:45): [True: 0, False: 74]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|     74|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|     74|        st.set_wday(h);
 2439|     74|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.19k|    {
 3419|  3.19k|        auto start_it = m_begin;
 3420|  3.19k|        std::size_t options_available = N;
 3421|  3.19k|        std::size_t chars_consumed = 0;
 3422|  7.04k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.95k, False: 3.09k]
  ------------------
 3423|  7.04k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.87k, False: 74]
  ------------------
 3424|  3.87k|            std::size_t i = 0;
 3425|  3.87k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.85k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.85k|            const auto ch = *m_begin;
 3430|  3.85k|            ++m_begin;
 3431|  26.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 23.0k, False: 3.85k]
  ------------------
 3432|  23.0k|                const auto cmp = static_cast<unsigned>(
 3433|  23.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  23.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 23.0k]
  ------------------
 3435|  23.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 22.2k, False: 764]
  |  Branch (3435:34): [True: 22.2k, False: 20]
  ------------------
 3436|  22.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  22.2k|                                options.end());
 3438|  22.2k|                    --options_available;
 3439|  22.2k|                    continue;
 3440|  22.2k|                }
 3441|    784|                ++i;
 3442|    784|            }
 3443|  3.85k|            ++chars_consumed;
 3444|  3.85k|        }
 3445|  3.19k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.11k, False: 74]
  ------------------
 3446|  3.11k|            m_begin = start_it;
 3447|  3.11k|            return std::nullopt;
 3448|  3.11k|        }
 3449|     74|        return options.front().second;
 3450|  3.19k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.5k|    {
 2969|  14.5k|#if !SCN_DISABLE_LOCALE
 2970|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.5k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.5k|#endif
 2977|       |
 2978|  14.5k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.5k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  14.5k|    {
 2344|  14.5k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 2.20k, False: 12.3k]
  |  |  |  Branch (865:45): [True: 152, False: 12.1k]
  |  |  ------------------
  ------------------
 2345|  2.35k|            return hdl.set_error(
 2346|  2.35k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.35k|        }
 2348|  12.1k|        t.hour = h;
 2349|  12.1k|        st.set_hour24(hdl);
 2350|  12.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.4k|    {
 2997|  14.4k|#if !SCN_DISABLE_LOCALE
 2998|  14.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.4k|#endif
 3005|       |
 3006|  14.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  14.4k|    {
 2331|  14.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.49k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 24, False: 11.9k]
  |  |  ------------------
  ------------------
 2332|  2.51k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.51k|                                "Invalid value for minutes"});
 2334|  2.51k|        }
 2335|  11.9k|        t.min = m;
 2336|  11.9k|        st.set_min(h);
 2337|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.53k|    {
 3011|  2.53k|#if !SCN_DISABLE_LOCALE
 3012|  2.53k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.53k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.53k|#endif
 3019|       |
 3020|  2.53k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.53k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.53k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.53k|    {
 2318|  2.53k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 1.48k, False: 1.04k]
  |  |  |  Branch (865:45): [True: 2, False: 1.04k]
  |  |  ------------------
  ------------------
 2319|  1.48k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.48k|                                "Invalid value for seconds"});
 2321|  1.48k|        }
 2322|  1.04k|        t.sec = s;
 2323|  1.04k|        st.set_sec(h);
 2324|  1.04k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.61k|    {
 3253|       |        // %m/%d/%y
 3254|  1.61k|        constexpr CharT slash = '/';
 3255|  1.61k|        on_dec_month();
 3256|  1.61k|        on_text(&slash, &slash + 1);
 3257|  1.61k|        on_day_of_month();
 3258|  1.61k|        on_text(&slash, &slash + 1);
 3259|  1.61k|        on_short_year();
 3260|  1.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.62k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.62k|        constexpr CharT dash = '-';
 3265|  1.62k|        on_full_year();
 3266|  1.62k|        on_text(&dash, &dash + 1);
 3267|  1.62k|        on_dec_month();
 3268|  1.62k|        on_text(&dash, &dash + 1);
 3269|  1.62k|        on_day_of_month();
 3270|  1.62k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.9k|    {
 3295|       |        // %H:%M
 3296|  11.9k|        constexpr CharT colon = ':';
 3297|  11.9k|        on_24_hour();
 3298|  11.9k|        on_text(&colon, &colon + 1);
 3299|  11.9k|        on_minute();
 3300|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.53k|    {
 3303|       |        // %H:%M:%S
 3304|  2.53k|        constexpr CharT colon = ':';
 3305|  2.53k|        on_24_hour();
 3306|  2.53k|        on_text(&colon, &colon + 1);
 3307|  2.53k|        on_minute();
 3308|  2.53k|        on_text(&colon, &colon + 1);
 3309|  2.53k|        on_second();
 3310|  2.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.3k|    {
 3342|  13.3k|        m_st.verify(*this);
 3343|  13.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.3k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.2k, False: 110]
  |  Branch (3346:37): [True: 96, False: 13.1k]
  |  Branch (3346:60): [True: 0, False: 13.1k]
  ------------------
 3347|     96|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     96|        }
 3349|  13.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  48.0k|    {
 3353|  48.0k|        return m_error;
 3354|  48.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.3k|    {
 3370|  13.3k|        return m_begin;
 3371|  13.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  92.0k|    {
 3363|  92.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 70.6k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  92.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.13k|    {
 2218|  6.13k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.13k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.13k|        t.tm_year = y - 1900;
 2223|  6.13k|        st.set_full_year(h);
 2224|  6.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.07k|    {
 2235|  3.07k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.05k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.05k|                                "Invalid value for tm_year"});
 2238|  3.05k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.21k|    {
 2208|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2209|  5.80k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.80k|                                "Invalid value for tm_mon"});
 2211|  5.80k|        }
 2212|    408|        t.tm_mon = m - 1;
 2213|    408|        st.set_mon(h);
 2214|    408|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.13k|    {
 2198|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.10k|                                "Invalid value for tm_mday"});
 2201|  6.10k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.1k|    {
 2178|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2179|  5.67k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.67k|                                  "Invalid value for tm_hour"});
 2181|  5.67k|        }
 2182|  6.46k|        t.tm_hour = h;
 2183|  6.46k|        st.set_hour24(hdl);
 2184|  6.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.1k|    {
 2168|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2169|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.76k|                                "Invalid value for tm_min"});
 2171|  5.76k|        }
 2172|  6.37k|        t.tm_min = m;
 2173|  6.37k|        st.set_min(h);
 2174|  6.37k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.10k|    {
 2158|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2159|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.04k|                                "Invalid value for tm_sec"});
 2161|  3.04k|        }
 2162|     64|        t.tm_sec = s;
 2163|     64|        st.set_sec(h);
 2164|     64|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  83.4k|{
  250|  83.4k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  83.4k|        .transform_error(impl::make_eof_scan_error);
  252|  83.4k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  92.0k|    {
 3363|  92.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 70.6k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  92.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.13k|    {
 2218|  6.13k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.13k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.13k|        t.tm_year = y - 1900;
 2223|  6.13k|        st.set_full_year(h);
 2224|  6.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.07k|    {
 2235|  3.07k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.05k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.05k|                                "Invalid value for tm_year"});
 2238|  3.05k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.21k|    {
 2208|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2209|  5.80k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.80k|                                "Invalid value for tm_mon"});
 2211|  5.80k|        }
 2212|    408|        t.tm_mon = m - 1;
 2213|    408|        st.set_mon(h);
 2214|    408|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.13k|    {
 2198|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.10k|                                "Invalid value for tm_mday"});
 2201|  6.10k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.1k|    {
 2178|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2179|  5.67k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.67k|                                  "Invalid value for tm_hour"});
 2181|  5.67k|        }
 2182|  6.46k|        t.tm_hour = h;
 2183|  6.46k|        st.set_hour24(hdl);
 2184|  6.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.1k|    {
 2168|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2169|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.76k|                                "Invalid value for tm_min"});
 2171|  5.76k|        }
 2172|  6.37k|        t.tm_min = m;
 2173|  6.37k|        st.set_min(h);
 2174|  6.37k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.10k|    {
 2158|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2159|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.04k|                                "Invalid value for tm_sec"});
 2161|  3.04k|        }
 2162|     64|        t.tm_sec = s;
 2163|     64|        st.set_sec(h);
 2164|     64|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  92.0k|    {
 3363|  92.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 70.6k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  92.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.13k|    {
 2218|  6.13k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.13k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.13k|        t.tm_year = y - 1900;
 2223|  6.13k|        st.set_full_year(h);
 2224|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.07k|    {
 2235|  3.07k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.05k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.05k|                                "Invalid value for tm_year"});
 2238|  3.05k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.21k|    {
 2208|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2209|  5.80k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.80k|                                "Invalid value for tm_mon"});
 2211|  5.80k|        }
 2212|    408|        t.tm_mon = m - 1;
 2213|    408|        st.set_mon(h);
 2214|    408|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.13k|    {
 2198|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.10k|                                "Invalid value for tm_mday"});
 2201|  6.10k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.1k|    {
 2178|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2179|  5.67k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.67k|                                  "Invalid value for tm_hour"});
 2181|  5.67k|        }
 2182|  6.46k|        t.tm_hour = h;
 2183|  6.46k|        st.set_hour24(hdl);
 2184|  6.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.1k|    {
 2168|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2169|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.76k|                                "Invalid value for tm_min"});
 2171|  5.76k|        }
 2172|  6.37k|        t.tm_min = m;
 2173|  6.37k|        st.set_min(h);
 2174|  6.37k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.10k|    {
 2158|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2159|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.04k|                                "Invalid value for tm_sec"});
 2161|  3.04k|        }
 2162|     64|        t.tm_sec = s;
 2163|     64|        st.set_sec(h);
 2164|     64|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  92.0k|    {
 3363|  92.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 70.6k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  92.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.13k|    {
 2218|  6.13k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.13k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.13k|        t.tm_year = y - 1900;
 2223|  6.13k|        st.set_full_year(h);
 2224|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.07k|    {
 2235|  3.07k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 3.05k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  3.05k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.05k|                                "Invalid value for tm_year"});
 2238|  3.05k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.21k|    {
 2208|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2209|  5.80k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.80k|                                "Invalid value for tm_mon"});
 2211|  5.80k|        }
 2212|    408|        t.tm_mon = m - 1;
 2213|    408|        st.set_mon(h);
 2214|    408|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.13k|    {
 2198|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.10k|                                "Invalid value for tm_mday"});
 2201|  6.10k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.1k|    {
 2178|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2179|  5.67k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.67k|                                  "Invalid value for tm_hour"});
 2181|  5.67k|        }
 2182|  6.46k|        t.tm_hour = h;
 2183|  6.46k|        st.set_hour24(hdl);
 2184|  6.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.1k|    {
 2168|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2169|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.76k|                                "Invalid value for tm_min"});
 2171|  5.76k|        }
 2172|  6.37k|        t.tm_min = m;
 2173|  6.37k|        st.set_min(h);
 2174|  6.37k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.10k|    {
 2158|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2159|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.04k|                                "Invalid value for tm_sec"});
 2161|  3.04k|        }
 2162|     64|        t.tm_sec = s;
 2163|     64|        st.set_sec(h);
 2164|     64|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  88.9k|    {
 3363|  88.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 67.5k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  88.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.13k|    {
 2396|  6.13k|        t.year = y;
 2397|  6.13k|        st.set_full_year(h);
 2398|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.07k|    {
 2419|  3.07k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.07k, False: 0]
  ------------------
 2420|  3.07k|            t.year = y;
 2421|  3.07k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.07k|        st.set_short_year(h);
 2426|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.21k|    {
 2383|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2384|  5.80k|            return h.set_error(
 2385|  5.80k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.80k|        }
 2387|    408|        t.mon = month{static_cast<unsigned>(m)};
 2388|    408|        st.set_mon(h);
 2389|    408|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.13k|    {
 2370|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2371|  6.10k|            return h.set_error(
 2372|  6.10k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.10k|        }
 2374|     30|        t.mday = d;
 2375|     30|        st.set_mday(h);
 2376|     30|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  12.1k|    {
 2344|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2345|  5.67k|            return hdl.set_error(
 2346|  5.67k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.67k|        }
 2348|  6.46k|        t.hour = h;
 2349|  6.46k|        st.set_hour24(hdl);
 2350|  6.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  12.1k|    {
 2331|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2332|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.76k|                                "Invalid value for minutes"});
 2334|  5.76k|        }
 2335|  6.37k|        t.min = m;
 2336|  6.37k|        st.set_min(h);
 2337|  6.37k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.10k|    {
 2318|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2319|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.04k|                                "Invalid value for seconds"});
 2321|  3.04k|        }
 2322|     64|        t.sec = s;
 2323|     64|        st.set_sec(h);
 2324|     64|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  27.8k|{
 3563|  27.8k|    {
 3564|  27.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 282, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    282|    }                                                  \
  |  |  |  | 3939|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  27.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  27.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  27.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  27.5k|        ctx.range(), t, ctx.locale());
 3571|  27.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  27.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 6.11k]
  |  |  ------------------
  ------------------
 3573|  21.4k|        return unexpected(e.error());
 3574|  21.4k|    }
 3575|  6.11k|    return r.get_iterator();
 3576|  27.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  27.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  27.5k|    static_cast<    \
  |  |  935|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  27.5k|          m_begin(ranges::begin(m_range)),
 2708|  27.5k|          m_tm(t),
 2709|  27.5k|          m_loc(loc)
 2710|  27.5k|    {
 2711|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.8k|    {
 3358|  20.8k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  88.9k|    {
 3363|  88.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 21.4k, False: 67.5k]
  ------------------
 3364|  21.4k|            m_error = unexpected(e);
 3365|  21.4k|        }
 3366|  88.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  27.5k|    {
 2715|  34.0k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 27.5k, False: 6.53k]
  ------------------
 2716|  27.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 106, False: 27.4k]
  ------------------
 2717|    106|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    106|            }
 2719|  27.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.8k, False: 6.53k]
  ------------------
 2720|  20.8k|                return on_error("Invalid literal character");
 2721|  20.8k|            }
 2722|  6.53k|            ++beg;
 2723|  6.53k|            ++m_begin;
 2724|  6.53k|        }
 2725|  27.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.13k|    {
 2745|  6.13k|#if !SCN_DISABLE_LOCALE
 2746|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.13k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.13k|#endif
 2753|       |
 2754|  6.13k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.13k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.13k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.13k|    {
 2396|  6.13k|        t.year = y;
 2397|  6.13k|        st.set_full_year(h);
 2398|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  48.8k|    {
 3381|  48.8k|        int digits_read = 0;
 3382|  48.8k|        int accumulator = 0;
 3383|  63.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 62.8k, False: 214]
  ------------------
 3384|  62.8k|            const auto ch = *m_begin;
 3385|  62.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 27.5k, False: 35.2k]
  |  Branch (3385:36): [True: 18.9k, False: 16.3k]
  ------------------
 3386|  46.5k|                break;
 3387|  46.5k|            }
 3388|  16.3k|            ++m_begin;
 3389|  16.3k|            ++digits_read;
 3390|  16.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  16.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.14k, False: 14.1k]
  ------------------
 3392|  2.14k|                break;
 3393|  2.14k|            }
 3394|  16.3k|        }
 3395|  48.8k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 35.4k, False: 13.4k]
  ------------------
 3396|  35.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  35.4k|                                 "Too few integer digits"});
 3398|  35.4k|            return -1;
 3399|  35.4k|        }
 3400|  13.4k|        return accumulator;
 3401|  48.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.07k|    {
 2759|  3.07k|#if !SCN_DISABLE_LOCALE
 2760|  3.07k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.07k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.07k|#endif
 2768|       |
 2769|  3.07k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.07k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.07k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.07k|    {
 2419|  3.07k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.07k, False: 0]
  ------------------
 2420|  3.07k|            t.year = y;
 2421|  3.07k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.07k|        st.set_short_year(h);
 2426|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.12k|    {
 2802|  3.12k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.12k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.12k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.12k|#endif
 2810|       |
 2811|  3.12k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.12k|            {"January", 1},
 2813|  3.12k|            {"February", 2},
 2814|  3.12k|            {"March", 3},
 2815|  3.12k|            {"April", 4},
 2816|  3.12k|            {"May", 5},
 2817|  3.12k|            {"June", 6},
 2818|  3.12k|            {"July", 7},
 2819|  3.12k|            {"August", 8},
 2820|  3.12k|            {"September", 9},
 2821|  3.12k|            {"October", 10},
 2822|  3.12k|            {"November", 11},
 2823|  3.12k|            {"December", 12},
 2824|  3.12k|        }};
 2825|  3.12k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 2, False: 3.12k]
  ------------------
 2826|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      2|        }
 2828|  3.12k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.12k|            {"Jan", 1},
 2830|  3.12k|            {"Feb", 2},
 2831|  3.12k|            {"Mar", 3},
 2832|  3.12k|            {"Apr", 4},
 2833|  3.12k|            {"Jun", 6},
 2834|  3.12k|            {"Jul", 7},
 2835|  3.12k|            {"Aug", 8},
 2836|  3.12k|            {"Sep", 9},
 2837|  3.12k|            {"Oct", 10},
 2838|  3.12k|            {"Nov", 11},
 2839|  3.12k|            {"Dec", 12},
 2840|  3.12k|        }};
 2841|  3.12k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 64, False: 3.05k]
  ------------------
 2842|     64|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|     64|        }
 2844|  3.05k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.21k|    {
 2383|  6.21k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.80k, False: 408]
  |  |  |  Branch (865:45): [True: 5.78k, False: 432]
  |  |  |  Branch (865:45): [True: 24, False: 408]
  |  |  ------------------
  ------------------
 2384|  5.80k|            return h.set_error(
 2385|  5.80k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.80k|        }
 2387|    408|        t.mon = month{static_cast<unsigned>(m)};
 2388|    408|        st.set_mon(h);
 2389|    408|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.48k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.39k, False: 3.09k]
  ------------------
 3423|  6.48k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.38k, False: 2]
  ------------------
 3424|  3.38k|            std::size_t i = 0;
 3425|  3.38k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 32, False: 3.35k]
  ------------------
 3426|     32|                options_available = 0;
 3427|     32|                break;
 3428|     32|            }
 3429|  3.35k|            const auto ch = *m_begin;
 3430|  3.35k|            ++m_begin;
 3431|  41.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 37.8k, False: 3.35k]
  ------------------
 3432|  37.8k|                const auto cmp = static_cast<unsigned>(
 3433|  37.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  37.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 37.8k]
  ------------------
 3435|  37.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 37.5k, False: 326]
  |  Branch (3435:34): [True: 37.4k, False: 114]
  ------------------
 3436|  37.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  37.4k|                                options.end());
 3438|  37.4k|                    --options_available;
 3439|  37.4k|                    continue;
 3440|  37.4k|                }
 3441|    440|                ++i;
 3442|    440|            }
 3443|  3.35k|            ++chars_consumed;
 3444|  3.35k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.12k, False: 2]
  ------------------
 3446|  3.12k|            m_begin = start_it;
 3447|  3.12k|            return std::nullopt;
 3448|  3.12k|        }
 3449|      2|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.12k|    {
 3419|  3.12k|        auto start_it = m_begin;
 3420|  3.12k|        std::size_t options_available = N;
 3421|  3.12k|        std::size_t chars_consumed = 0;
 3422|  6.41k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.38k, False: 3.03k]
  ------------------
 3423|  6.41k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.31k, False: 64]
  ------------------
 3424|  3.31k|            std::size_t i = 0;
 3425|  3.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 3.29k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  3.29k|            const auto ch = *m_begin;
 3430|  3.29k|            ++m_begin;
 3431|  37.8k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 34.5k, False: 3.29k]
  ------------------
 3432|  34.5k|                const auto cmp = static_cast<unsigned>(
 3433|  34.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  34.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 34.5k]
  ------------------
 3435|  34.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.3k, False: 182]
  |  Branch (3435:34): [True: 34.2k, False: 110]
  ------------------
 3436|  34.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  34.2k|                                options.end());
 3438|  34.2k|                    --options_available;
 3439|  34.2k|                    continue;
 3440|  34.2k|                }
 3441|    292|                ++i;
 3442|    292|            }
 3443|  3.29k|            ++chars_consumed;
 3444|  3.29k|        }
 3445|  3.12k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.05k, False: 64]
  ------------------
 3446|  3.05k|            m_begin = start_it;
 3447|  3.05k|            return std::nullopt;
 3448|  3.05k|        }
 3449|     64|        return options.front().second;
 3450|  3.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.15k|    {
 2848|  6.15k|#if !SCN_DISABLE_LOCALE
 2849|  6.15k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.15k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.15k|#endif
 2856|       |
 2857|  6.15k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.15k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.15k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.13k|    {
 2880|  6.13k|#if !SCN_DISABLE_LOCALE
 2881|  6.13k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.13k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.13k|#endif
 2888|       |
 2889|  6.13k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.13k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.13k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.13k|    {
 2370|  6.13k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.10k, False: 30]
  |  |  |  Branch (865:45): [True: 6.09k, False: 40]
  |  |  |  Branch (865:45): [True: 10, False: 30]
  |  |  ------------------
  ------------------
 2371|  6.10k|            return h.set_error(
 2372|  6.10k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.10k|        }
 2374|     30|        t.mday = d;
 2375|     30|        st.set_mday(h);
 2376|     30|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.06k|    {
 2895|  3.06k|#if !SCN_DISABLE_LOCALE
 2896|  3.06k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.06k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.06k|#endif
 2903|       |
 2904|  3.06k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.06k|            {"Sunday", 0},
 2906|  3.06k|            {"Monday", 1},
 2907|  3.06k|            {"Tuesday", 2},
 2908|  3.06k|            {"Wednesday", 3},
 2909|  3.06k|            {"Thursday", 4},
 2910|  3.06k|            {"Friday", 5},
 2911|  3.06k|            {"Saturday", 6},
 2912|  3.06k|        }};
 2913|  3.06k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.06k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.06k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.06k|            {"Sun", 0},
 2918|  3.06k|            {"Mon", 1},
 2919|  3.06k|            {"Tue", 2},
 2920|  3.06k|            {"Wed", 3},
 2921|  3.06k|            {"Thu", 4},
 2922|  3.06k|            {"Fri", 5},
 2923|  3.06k|            {"Sat", 6},
 2924|  3.06k|        }};
 2925|  3.06k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.06k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.06k|        return set_error(
 2929|  3.06k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.13k|    {
 3419|  6.13k|        auto start_it = m_begin;
 3420|  6.13k|        std::size_t options_available = N;
 3421|  6.13k|        std::size_t chars_consumed = 0;
 3422|  12.3k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.24k, False: 6.10k]
  ------------------
 3423|  12.3k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.24k, False: 0]
  ------------------
 3424|  6.24k|            std::size_t i = 0;
 3425|  6.24k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 24, False: 6.22k]
  ------------------
 3426|     24|                options_available = 0;
 3427|     24|                break;
 3428|     24|            }
 3429|  6.22k|            const auto ch = *m_begin;
 3430|  6.22k|            ++m_begin;
 3431|  49.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 6.22k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.9k, False: 132]
  |  Branch (3435:34): [True: 42.8k, False: 16]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|    148|                ++i;
 3442|    148|            }
 3443|  6.22k|            ++chars_consumed;
 3444|  6.22k|        }
 3445|  6.13k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.13k, False: 0]
  ------------------
 3446|  6.13k|            m_begin = start_it;
 3447|  6.13k|            return std::nullopt;
 3448|  6.13k|        }
 3449|      0|        return options.front().second;
 3450|  6.13k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.1k|    {
 2969|  12.1k|#if !SCN_DISABLE_LOCALE
 2970|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.1k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.1k|#endif
 2977|       |
 2978|  12.1k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  12.1k|    {
 2344|  12.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.67k, False: 6.46k]
  |  |  |  Branch (865:45): [True: 5.63k, False: 6.50k]
  |  |  |  Branch (865:45): [True: 32, False: 6.46k]
  |  |  ------------------
  ------------------
 2345|  5.67k|            return hdl.set_error(
 2346|  5.67k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.67k|        }
 2348|  6.46k|        t.hour = h;
 2349|  6.46k|        st.set_hour24(hdl);
 2350|  6.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.1k|    {
 2997|  12.1k|#if !SCN_DISABLE_LOCALE
 2998|  12.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.1k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.1k|#endif
 3005|       |
 3006|  12.1k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.1k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  12.1k|    {
 2331|  12.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.76k, False: 6.37k]
  |  |  |  Branch (865:45): [True: 5.75k, False: 6.38k]
  |  |  |  Branch (865:45): [True: 12, False: 6.37k]
  |  |  ------------------
  ------------------
 2332|  5.76k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.76k|                                "Invalid value for minutes"});
 2334|  5.76k|        }
 2335|  6.37k|        t.min = m;
 2336|  6.37k|        st.set_min(h);
 2337|  6.37k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.10k|    {
 3011|  3.10k|#if !SCN_DISABLE_LOCALE
 3012|  3.10k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.10k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.10k|#endif
 3019|       |
 3020|  3.10k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.10k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.10k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.10k|    {
 2318|  3.10k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 64]
  |  |  |  Branch (865:45): [True: 3.04k, False: 66]
  |  |  |  Branch (865:45): [True: 2, False: 64]
  |  |  ------------------
  ------------------
 2319|  3.04k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.04k|                                "Invalid value for seconds"});
 2321|  3.04k|        }
 2322|     64|        t.sec = s;
 2323|     64|        st.set_sec(h);
 2324|     64|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.07k|    {
 3253|       |        // %m/%d/%y
 3254|  3.07k|        constexpr CharT slash = '/';
 3255|  3.07k|        on_dec_month();
 3256|  3.07k|        on_text(&slash, &slash + 1);
 3257|  3.07k|        on_day_of_month();
 3258|  3.07k|        on_text(&slash, &slash + 1);
 3259|  3.07k|        on_short_year();
 3260|  3.07k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.06k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.06k|        constexpr CharT dash = '-';
 3265|  3.06k|        on_full_year();
 3266|  3.06k|        on_text(&dash, &dash + 1);
 3267|  3.06k|        on_dec_month();
 3268|  3.06k|        on_text(&dash, &dash + 1);
 3269|  3.06k|        on_day_of_month();
 3270|  3.06k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.03k|    {
 3295|       |        // %H:%M
 3296|  9.03k|        constexpr CharT colon = ':';
 3297|  9.03k|        on_24_hour();
 3298|  9.03k|        on_text(&colon, &colon + 1);
 3299|  9.03k|        on_minute();
 3300|  9.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.10k|    {
 3303|       |        // %H:%M:%S
 3304|  3.10k|        constexpr CharT colon = ':';
 3305|  3.10k|        on_24_hour();
 3306|  3.10k|        on_text(&colon, &colon + 1);
 3307|  3.10k|        on_minute();
 3308|  3.10k|        on_text(&colon, &colon + 1);
 3309|  3.10k|        on_second();
 3310|  3.10k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  6.11k|    {
 3342|  6.11k|        m_st.verify(*this);
 3343|  6.11k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 6.11k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  6.11k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 6.11k, False: 0]
  |  Branch (3346:37): [True: 8, False: 6.10k]
  |  Branch (3346:60): [True: 0, False: 6.10k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  6.11k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  55.0k|    {
 3353|  55.0k|        return m_error;
 3354|  55.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  6.11k|    {
 3370|  6.11k|        return m_begin;
 3371|  6.11k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    775|{
 1462|    775|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    775|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    775|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    775|            return transcode_to_string_impl_to32(src, dest);
 1473|    775|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    775|    SCN_EXPECT(false);
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    775|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    775|{
 1355|    775|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    775|    auto it = src.begin();
 1358|   193k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 192k, False: 775]
  ------------------
 1359|   192k|        auto res = get_next_code_point(
 1360|   192k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   192k|                                                                 src.end()));
 1362|   192k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.11k, False: 186k]
  |  |  ------------------
  ------------------
 1363|  6.11k|            dest.push_back(DestCharT{0xfffd});
 1364|  6.11k|        }
 1365|   186k|        else {
 1366|   186k|            dest.push_back(res.value);
 1367|   186k|        }
 1368|   192k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   192k|    }
 1370|    775|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   209k|{
 1279|   209k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   209k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   209k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.90k, False: 200k]
  |  |  ------------------
  ------------------
 1283|  8.90k|        return {get_start_for_next_code_point(input),
 1284|  8.90k|                detail::invalid_code_point};
 1285|  8.90k|    }
 1286|   200k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 251, False: 200k]
  |  |  ------------------
  ------------------
 1287|    251|        return {input.end(), detail::invalid_code_point};
 1288|    251|    }
 1289|       |
 1290|   200k|    return {input.begin() + len,
 1291|   200k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   200k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  8.90k|{
 1265|  8.90k|    auto it = input.begin();
 1266|   122k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 122k, False: 461]
  ------------------
 1267|   122k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.44k, False: 113k]
  ------------------
 1268|  8.44k|            break;
 1269|  8.44k|        }
 1270|   122k|    }
 1271|  8.90k|    return it;
 1272|  8.90k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   170k|{
  458|   170k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   170k|        static_cast<unsigned char>(ch))];
  460|   170k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  78.8k|{
  539|  78.8k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  78.8k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   327k|{
  784|   327k|    return e != eof_error::good;
  785|   327k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  3.75k|{
  798|  3.75k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  3.75k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  3.75k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  72.6k|    {
  304|  72.6k|        ranges::advance(x, n);
  305|  72.6k|        return x;
  306|  72.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  72.6k|    {
  268|  72.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  72.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  72.6k|    {
  151|  72.6k|        i += n;
  152|  72.6k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   191k|    {
  108|   191k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   191k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   191k|    {
   87|   191k|        return s - i;
   88|   191k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   101k|    {
  108|   101k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   101k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   101k|    {
   87|   101k|        return s - i;
   88|   101k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  72.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  72.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  72.6k|          m_current(m_range.begin())
 2988|  72.6k|    {
 2989|  72.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   402k|    {
 2993|   402k|        return m_current;
 2994|   402k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  83.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  83.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  83.4k|          m_current(m_range.begin())
 2988|  83.4k|    {
 2989|  83.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   434k|    {
 2993|   434k|        return m_current;
 2994|   434k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.07M|    {
  763|  1.07M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.07M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   254k|        : m_fptr([](storage fn,
  743|   254k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   254k|              cvref<T> obj = *get<T>(fn);
  745|   254k|              if constexpr (std::is_void_v<R>) {
  746|   254k|                  obj(static_cast<decltype(args)>(args)...);
  747|   254k|              }
  748|   254k|              else {
  749|   254k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   254k|              }
  751|   254k|          }),
  752|   254k|          m_storage(std::addressof(f))
  753|   254k|    {
  754|   254k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   535k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   535k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   535k|              else {
  749|   535k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   535k|              }
  751|   535k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   535k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   535k|        else if constexpr (std::is_object_v<T>) {
  688|   535k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   535k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   254k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   254k|        {
  662|   254k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  55.0k|    {
  108|  55.0k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  55.0k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  55.0k|    {
   94|  55.0k|        iter_difference_t<I> counter{0};
   95|   511k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 456k, False: 55.0k]
  ------------------
   96|   456k|            ++i;
   97|   456k|            ++counter;
   98|   456k|        }
   99|  55.0k|        return counter;
  100|  55.0k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  87.5k|{
  951|  87.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.30k, False: 86.2k]
  |  |  ------------------
  ------------------
  952|  1.30k|        return eof_error::eof;
  953|  1.30k|    }
  954|  86.2k|    return eof_error::good;
  955|  87.5k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   315k|{
  945|   315k|    return is_range_eof(r.begin(), r.end());
  946|   315k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   315k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   315k|    {
  938|   315k|        return begin == end;
  939|   315k|    }
  940|   315k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  72.6k|{
  951|  72.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 750, False: 71.8k]
  |  |  ------------------
  ------------------
  952|    750|        return eof_error::eof;
  953|    750|    }
  954|  71.8k|    return eof_error::good;
  955|  72.6k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  72.6k|{
  945|  72.6k|    return is_range_eof(r.begin(), r.end());
  946|  72.6k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  72.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  72.6k|    {
  938|  72.6k|        return begin == end;
  939|  72.6k|    }
  940|  72.6k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   145k|    {
 1602|   145k|        return sv;
 1603|   145k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  72.6k|{
 3066|  72.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 72.6k, False: 0]
  ------------------
 3067|  72.6k|        auto it = read_while_classic_space(range);
 3068|  72.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  72.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 750, False: 71.8k]
  |  |  ------------------
  ------------------
 3070|    750|            return unexpected(e);
 3071|    750|        }
 3072|       |
 3073|  71.8k|        return it;
 3074|  72.6k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  72.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  72.6k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  72.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  72.6k|        auto buf = make_contiguous_buffer(range);
 2220|  72.6k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  72.6k|        return ranges::next(range.begin(),
 2222|  72.6k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  72.6k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  72.6k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  72.6k|                  ranges::sized_range<Range>) {
 1785|  72.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  72.6k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  72.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  72.6k|    {
 1589|  72.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  87.5k|    {
  268|  87.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  87.5k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  87.5k|    {
  181|  87.5k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 87.5k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  87.5k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  87.5k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  87.5k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  87.5k|        else {
 1055|  87.5k|            return r.begin().contiguous_segment();
 1056|  87.5k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  87.5k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  87.5k|{
 2160|  87.5k|    auto it = range.begin();
 2161|   228k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 227k, False: 1.30k]
  ------------------
 2162|   227k|        const auto val =
 2163|   227k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   227k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   227k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 210k, False: 17.1k]
  |  |  ------------------
  ------------------
 2165|   210k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   210k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   210k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 86.2k, False: 124k]
  ------------------
 2168|  86.2k|                return it;
 2169|  86.2k|            }
 2170|   210k|        }
 2171|   141k|        it = val.iterator;
 2172|   141k|    }
 2173|       |
 2174|  1.30k|    return it;
 2175|  87.5k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   227k|{
 1998|   227k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   227k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   227k|    auto it = range.begin();
 2002|   227k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   227k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.1k, False: 210k]
  |  |  ------------------
  ------------------
 2005|  17.1k|        ++it;
 2006|  17.1k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  17.1k|        return {it, {}};
 2008|  17.1k|    }
 2009|       |
 2010|   210k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 205k, False: 5.12k]
  ------------------
 2011|   205k|        ++it;
 2012|   205k|        return {it, string_type(1, *range.begin())};
 2013|   205k|    }
 2014|       |
 2015|  5.12k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.12k|    return {it, string_type{range.begin(), it}};
 2017|   210k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  17.1k|{
 1265|  17.1k|    auto it = input.begin();
 1266|   221k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 221k, False: 414]
  ------------------
 1267|   221k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 16.7k, False: 204k]
  ------------------
 1268|  16.7k|            break;
 1269|  16.7k|        }
 1270|   221k|    }
 1271|  17.1k|    return it;
 1272|  17.1k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.12k|    {
  283|  5.12k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.12k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.12k|    {
  252|  5.12k|        constexpr iter_difference_t<I> zero{0};
  253|  5.12k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.2k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 11.3k, False: 4.89k]
  |  Branch (255:30): [True: 11.1k, False: 234]
  ------------------
  256|  11.1k|            ++i;
  257|  11.1k|            ++counter;
  258|  11.1k|        }
  259|       |
  260|  5.12k|        return counter;
  261|  5.12k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   227k|    {
 1989|   227k|        return !codepoint.empty();
 1990|   227k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  87.5k|{
 2181|  87.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  87.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  87.5k|{
 3066|  87.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 87.5k, False: 0]
  ------------------
 3067|  87.5k|        auto it = read_while_classic_space(range);
 3068|  87.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  87.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.30k, False: 86.2k]
  |  |  ------------------
  ------------------
 3070|  1.30k|            return unexpected(e);
 3071|  1.30k|        }
 3072|       |
 3073|  86.2k|        return it;
 3074|  87.5k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  87.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  87.5k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  87.5k|    else {
 2225|  87.5k|        auto it = range.begin();
 2226|       |
 2227|  87.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  87.5k|            auto seg = get_contiguous_beginning(range);
 2229|  87.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  87.5k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 87.5k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  87.5k|            ranges::advance(it, seg.size());
 2234|  87.5k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  87.5k|            return detail::is_cp_space(cp);
 2238|  87.5k|        });
 2239|  87.5k|    }
 2240|  87.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  87.5k|        : m_fptr([](storage fn,
  743|  87.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.5k|              cvref<T> obj = *get<T>(fn);
  745|  87.5k|              if constexpr (std::is_void_v<R>) {
  746|  87.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.5k|              }
  748|  87.5k|              else {
  749|  87.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.5k|              }
  751|  87.5k|          }),
  752|  87.5k|          m_storage(std::addressof(f))
  753|  87.5k|    {
  754|  87.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   210k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   210k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   210k|              else {
  749|   210k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   210k|              }
  751|   210k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   210k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   210k|        else if constexpr (std::is_object_v<T>) {
  688|   210k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   210k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   210k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   210k|            return detail::is_cp_space(cp);
 2238|   210k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  87.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  87.5k|        {
  662|  87.5k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  18.3k|    {
  108|  18.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  18.3k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  18.3k|    {
   94|  18.3k|        iter_difference_t<I> counter{0};
   95|   132k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 113k, False: 18.3k]
  ------------------
   96|   113k|            ++i;
   97|   113k|            ++counter;
   98|   113k|        }
   99|  18.3k|        return counter;
  100|  18.3k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  83.4k|{
  951|  83.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846, False: 82.5k]
  |  |  ------------------
  ------------------
  952|    846|        return eof_error::eof;
  953|    846|    }
  954|  82.5k|    return eof_error::good;
  955|  83.4k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   245k|{
  945|   245k|    return is_range_eof(r.begin(), r.end());
  946|   245k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   245k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   245k|    {
  938|   245k|        return begin == end;
  939|   245k|    }
  940|   245k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   162k|{
 1998|   162k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   162k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   162k|    auto it = range.begin();
 2002|   162k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   162k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   162k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 162k, False: 0]
  ------------------
 2011|   162k|        ++it;
 2012|   162k|        return {it, string_type(1, *range.begin())};
 2013|   162k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   162k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   245k|{
  945|   245k|    return is_range_eof(r.begin(), r.end());
  946|   245k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   245k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   245k|    {
  938|   245k|        return begin == end;
  939|   245k|    }
  940|   245k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   162k|    {
 1989|   162k|        return !codepoint.empty();
 1990|   162k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  83.4k|{
  951|  83.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846, False: 82.5k]
  |  |  ------------------
  ------------------
  952|    846|        return eof_error::eof;
  953|    846|    }
  954|  82.5k|    return eof_error::good;
  955|  83.4k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  83.4k|{
 3066|  83.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 83.4k, False: 0]
  ------------------
 3067|  83.4k|        auto it = read_while_classic_space(range);
 3068|  83.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  83.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846, False: 82.5k]
  |  |  ------------------
  ------------------
 3070|    846|            return unexpected(e);
 3071|    846|        }
 3072|       |
 3073|  82.5k|        return it;
 3074|  83.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  83.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  83.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  83.4k|    else {
 2225|  83.4k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  83.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  83.4k|            return detail::is_cp_space(cp);
 2238|  83.4k|        });
 2239|  83.4k|    }
 2240|  83.4k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  83.4k|{
 2181|  83.4k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  83.4k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  83.4k|{
 2160|  83.4k|    auto it = range.begin();
 2161|   163k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 162k, False: 846]
  ------------------
 2162|   162k|        const auto val =
 2163|   162k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   162k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   162k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 162k, False: 0]
  |  |  ------------------
  ------------------
 2165|   162k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   162k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   162k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 82.5k, False: 79.7k]
  ------------------
 2168|  82.5k|                return it;
 2169|  82.5k|            }
 2170|   162k|        }
 2171|  79.7k|        it = val.iterator;
 2172|  79.7k|    }
 2173|       |
 2174|    846|    return it;
 2175|  83.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  83.4k|        : m_fptr([](storage fn,
  743|  83.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.4k|              cvref<T> obj = *get<T>(fn);
  745|  83.4k|              if constexpr (std::is_void_v<R>) {
  746|  83.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.4k|              }
  748|  83.4k|              else {
  749|  83.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.4k|              }
  751|  83.4k|          }),
  752|  83.4k|          m_storage(std::addressof(f))
  753|  83.4k|    {
  754|  83.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   162k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  688|   162k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   162k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   162k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   162k|            return detail::is_cp_space(cp);
 2238|   162k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  83.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.4k|        {
  662|  83.4k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  83.4k|{
 2160|  83.4k|    auto it = range.begin();
 2161|   163k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 162k, False: 846]
  ------------------
 2162|   162k|        const auto val =
 2163|   162k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   162k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   162k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 162k, False: 0]
  |  |  ------------------
  ------------------
 2165|   162k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   162k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   162k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 82.5k, False: 79.7k]
  ------------------
 2168|  82.5k|                return it;
 2169|  82.5k|            }
 2170|   162k|        }
 2171|  79.7k|        it = val.iterator;
 2172|  79.7k|    }
 2173|       |
 2174|    846|    return it;
 2175|  83.4k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   162k|{
 1998|   162k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   162k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   162k|    auto it = range.begin();
 2002|   162k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   162k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   162k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 162k, False: 0]
  ------------------
 2011|   162k|        ++it;
 2012|   162k|        return {it, string_type(1, *range.begin())};
 2013|   162k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   162k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   162k|    {
 1989|   162k|        return !codepoint.empty();
 1990|   162k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  83.4k|{
 2181|  83.4k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  83.4k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  83.4k|{
 3066|  83.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 83.4k, False: 0]
  ------------------
 3067|  83.4k|        auto it = read_while_classic_space(range);
 3068|  83.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  83.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846, False: 82.5k]
  |  |  ------------------
  ------------------
 3070|    846|            return unexpected(e);
 3071|    846|        }
 3072|       |
 3073|  82.5k|        return it;
 3074|  83.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  83.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  83.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  83.4k|    else {
 2225|  83.4k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  83.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  83.4k|            return detail::is_cp_space(cp);
 2238|  83.4k|        });
 2239|  83.4k|    }
 2240|  83.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  83.4k|        : m_fptr([](storage fn,
  743|  83.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.4k|              cvref<T> obj = *get<T>(fn);
  745|  83.4k|              if constexpr (std::is_void_v<R>) {
  746|  83.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.4k|              }
  748|  83.4k|              else {
  749|  83.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.4k|              }
  751|  83.4k|          }),
  752|  83.4k|          m_storage(std::addressof(f))
  753|  83.4k|    {
  754|  83.4k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   162k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  688|   162k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   162k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   162k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   162k|            return detail::is_cp_space(cp);
 2238|   162k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  83.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.4k|        {
  662|  83.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.32k|    {
 5954|  2.32k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.32k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.32k|            auto ctx = make_custom_ctx();
 5957|  2.32k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.32k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.32k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.32k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.32k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.32k|            auto it =
 5940|  2.32k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.32k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.32k|                                                      range.size()),
 5943|  2.32k|                    0};
 5944|  2.32k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.32k|    {
 5954|  2.32k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.32k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.32k|            auto ctx = make_custom_ctx();
 5957|  2.32k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.32k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.32k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.32k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.32k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.32k|        else {
 5947|  2.32k|            return {range.begin(), args, loc};
 5948|  2.32k|        }
 5949|  2.32k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  72.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  72.6k|    static_cast<    \
  |  |  935|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  72.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  72.6k|          m_current(m_range.begin())
 2988|  72.6k|    {
 2989|  72.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   216k|    {
 2998|   216k|        return m_range.end();
 2999|   216k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  71.8k|    {
 3013|  71.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  71.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  71.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  71.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 71.8k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  71.8k|        }
 3019|  71.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  71.8k|    static_cast<    \
  |  |  935|  71.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  71.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   144k|    {
 3003|   144k|        return ranges::subrange{begin(), end()};
 3004|   144k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   160k|    {
 6285|   160k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   160k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 65.1k, False: 95.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  65.1k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  65.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  65.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  65.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  65.1k|    }
  ------------------
 6286|  95.0k|        return {ctx.begin()};
 6287|   160k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  40.0k|    {
 3024|  40.0k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  40.0k|        m_current = m_range.begin() + it.position();
 3026|  40.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   217k|    {
 3008|   217k|        return m_range;
 3009|   217k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  72.6k|    {
 3030|  72.6k|        return ranges::distance(m_range.begin(), begin());
 3031|  72.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  4.65k|    {
 5954|  4.65k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.65k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.65k|            auto ctx = make_custom_ctx();
 5957|  4.65k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.65k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.65k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.65k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  4.65k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  4.65k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  4.65k|            auto it =
 5940|  4.65k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  4.65k|                    std::basic_string_view<char_type>(range.data(),
 5942|  4.65k|                                                      range.size()),
 5943|  4.65k|                    0};
 5944|  4.65k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  4.65k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  83.4k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  83.4k|    static_cast<    \
  |  |  935|  83.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  83.4k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  83.4k|          m_current(m_range.begin())
 2988|  83.4k|    {
 2989|  83.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   248k|    {
 2998|   248k|        return m_range.end();
 2999|   248k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  82.5k|    {
 3013|  82.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  82.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  82.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  82.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 82.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  82.5k|        }
 3019|  82.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  82.5k|    static_cast<    \
  |  |  935|  82.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  82.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   166k|    {
 3003|   166k|        return ranges::subrange{begin(), end()};
 3004|   166k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   166k|    {
 6285|   166k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   166k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 130k, False: 36.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   130k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   130k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   130k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   130k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   130k|    }
  ------------------
 6286|  36.6k|        return {ctx.begin()};
 6287|   166k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  18.3k|    {
 3024|  18.3k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  18.3k|        m_current = m_range.begin() + it.position();
 3026|  18.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   250k|    {
 3008|   250k|        return m_range;
 3009|   250k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  83.4k|    {
 3030|  83.4k|        return ranges::distance(m_range.begin(), begin());
 3031|  83.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  4.65k|    {
 5954|  4.65k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.65k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.65k|            auto ctx = make_custom_ctx();
 5957|  4.65k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.65k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.65k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.65k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.65k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  4.65k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  4.65k|        else {
 5947|  4.65k|            return {range.begin(), args, loc};
 5948|  4.65k|        }
 5949|  4.65k|    }

LLVMFuzzerTestOneInput:
   58|    775|{
   59|    775|    scn::fuzz::run(data, size);
   60|    775|    return 0;
   61|    775|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    775|{
   35|    775|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 775]
  |  Branch (35:35): [True: 0, False: 775]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    775|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    775|    const auto& f =
   42|    775|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    775|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    775|    do_basic_run(sv, f);
   45|       |
   46|    775|    const auto& wf = get_format_strings<wchar_t>(
   47|    775|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    775|        L"{:%a}", L"{:%b}");
   49|    775|    do_basic_run(wsv_reinterpret, wf);
   50|    775|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 775, False: 0]
  ------------------
   51|    775|        do_basic_run(wsv_transcode, wf);
   52|    775|    }
   53|    775|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    775|{
   27|    775|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    775|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    775|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    775|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    775|{
   27|    775|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    775|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    775|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    775|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.55k|{
   27|  1.55k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.55k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.55k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.55k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.55k|{
   27|  1.55k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.55k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.55k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.55k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    775|{
   53|    775|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    775|    string_buffer.resize(size);
   57|    775|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    775|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    775|    const auto wsv_reinterpret_size =
   62|    775|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 74, False: 701]
  ------------------
   63|    775|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    775|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    775|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    775|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    775|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    775|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    775|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    775|{
  123|    775|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    775|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    775|    buf.resize(sizeof...(Args));
  126|    775|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    775|    return buf;
  128|    775|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    775|{
  109|    775|    if constexpr (std::is_same_v<CharT, char>) {
  110|    775|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    775|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    775|{
  186|    775|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    775|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    775|                                   format_strings);
  189|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  12.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.1k|            auto result = scn::scan<T>(
  140|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.1k|                scn::runtime_format(f));
  142|  12.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 6.67k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  6.67k|            it = result->begin();
  146|  6.67k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  12.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.1k|            auto result = scn::scan<T>(
  155|  12.1k|                global_locale,
  156|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.1k|                scn::runtime_format(f));
  158|  12.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 6.67k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  6.67k|            it = result->begin();
  162|  6.67k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  12.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.1k|            auto result = scn::scan<T>(
  140|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.1k|                scn::runtime_format(f));
  142|  12.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 6.67k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  6.67k|            it = result->begin();
  146|  6.67k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  12.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.1k|            auto result = scn::scan<T>(
  155|  12.1k|                global_locale,
  156|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.1k|                scn::runtime_format(f));
  158|  12.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 6.67k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  6.67k|            it = result->begin();
  162|  6.67k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  12.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  12.1k|            auto result = scn::scan<T>(
  140|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  12.1k|                scn::runtime_format(f));
  142|  12.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 6.67k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  6.67k|            it = result->begin();
  146|  6.67k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  12.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  12.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  12.1k|            auto result = scn::scan<T>(
  155|  12.1k|                global_locale,
  156|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  12.1k|                scn::runtime_format(f));
  158|  12.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 6.67k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  6.67k|            it = result->begin();
  162|  6.67k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 9.16k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  9.16k|            it = result->begin();
  146|  9.16k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 9.16k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  9.16k|            it = result->begin();
  162|  9.16k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 9.16k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  9.16k|            it = result->begin();
  146|  9.16k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 9.16k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  9.16k|            it = result->begin();
  162|  9.16k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    775|{
  134|       |    // Regular scan
  135|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.42k, False: 775]
  ------------------
  136|  5.42k|        auto it = scn::ranges::begin(source);
  137|  14.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.5k|            auto result = scn::scan<T>(
  140|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.5k|                scn::runtime_format(f));
  142|  14.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.42k, False: 9.16k]
  ------------------
  143|  5.42k|                break;
  144|  5.42k|            }
  145|  9.16k|            it = result->begin();
  146|  9.16k|        }
  147|  5.42k|    }
  148|       |
  149|       |    // scan localized
  150|  5.42k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.42k, False: 775]
  ------------------
  151|  5.42k|        auto it = scn::ranges::begin(source);
  152|  14.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.5k|            auto result = scn::scan<T>(
  155|  14.5k|                global_locale,
  156|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.5k|                scn::runtime_format(f));
  158|  14.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.42k, False: 9.16k]
  ------------------
  159|  5.42k|                break;
  160|  5.42k|            }
  161|  9.16k|            it = result->begin();
  162|  9.16k|        }
  163|  5.42k|    }
  164|       |
  165|       |    // scan_value
  166|    775|    {
  167|    775|        auto it = scn::ranges::begin(source);
  168|    775|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    775|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    775|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    775|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    775|            auto result = scn::scan_value<T>(
  171|    775|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    775|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 775, False: 0]
  ------------------
  173|    775|                break;
  174|    775|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    775|    }
  178|    775|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    775|{
   91|    775|    using char_type = ranges::range_value_t<Source>;
   92|    775|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    775|    deque.clear();
   94|    775|    std::copy(ranges::begin(source), ranges::end(source),
   95|    775|              std::back_inserter(deque));
   96|    775|    return deque;
   97|    775|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    775|{
   80|    775|    if constexpr (std::is_same_v<CharT, char>) {
   81|    775|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    775|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    775|{
  123|    775|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    775|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    775|    buf.resize(sizeof...(Args));
  126|    775|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    775|    return buf;
  128|    775|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    775|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    775|    else {
  113|    775|        return wformat_string_view_buffer;
  114|    775|    }
  115|    775|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.55k|{
  186|  1.55k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.55k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.55k|                                   format_strings);
  189|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.55k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.55k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|  13.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.9k|            auto result = scn::scan<T>(
  140|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.9k|                scn::runtime_format(f));
  142|  13.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 3.05k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|  3.05k|            it = result->begin();
  146|  3.05k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.55k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|  13.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.9k|            auto result = scn::scan<T>(
  155|  13.9k|                global_locale,
  156|  13.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.9k|                scn::runtime_format(f));
  158|  13.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 3.05k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|  3.05k|            it = result->begin();
  162|  3.05k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.55k|    {
  167|  1.55k|        auto it = scn::ranges::begin(source);
  168|  1.55k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.55k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.55k|            auto result = scn::scan_value<T>(
  171|  1.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.55k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.55k, False: 0]
  ------------------
  173|  1.55k|                break;
  174|  1.55k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.55k|    }
  178|  1.55k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.55k|{
   91|  1.55k|    using char_type = ranges::range_value_t<Source>;
   92|  1.55k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.55k|    deque.clear();
   94|  1.55k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.55k|              std::back_inserter(deque));
   96|  1.55k|    return deque;
   97|  1.55k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.55k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.55k|    else {
   84|  1.55k|        return wnoncontiguous_buffer;
   85|  1.55k|    }
   86|  1.55k|}

