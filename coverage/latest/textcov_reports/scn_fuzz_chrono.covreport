_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.3k|    {
 1523|  60.3k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.3k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.3k|{
 1494|  60.3k|    auto it = pctx.begin();
 1495|  60.3k|    auto end = pctx.end();
 1496|  60.3k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.67k, False: 58.6k]
  |  Branch (1496:22): [True: 0, False: 58.6k]
  ------------------
 1497|  1.67k|        pctx.on_error(
 1498|  1.67k|            "Format string without specifiers is not valid for this type");
 1499|  1.67k|        return it;
 1500|  1.67k|    }
 1501|       |
 1502|  58.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  58.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  58.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 58.6k, False: 0]
  ------------------
 1505|  58.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  58.6k|    }
 1507|  58.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  58.6k|    return end;
 1512|  58.6k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   721k|        : localized(0),
  743|   721k|          subsec_set(0),
  744|   721k|          sec_set(0),
  745|   721k|          min_set(0),
  746|   721k|          hour24_set(0),
  747|   721k|          hour12_set(0),
  748|   721k|          mday_set(0),
  749|   721k|          mon_set(0),
  750|   721k|          full_year_set(0),
  751|   721k|          century_set(0),
  752|   721k|          short_year_set(0),
  753|   721k|          wday_set(0),
  754|   721k|          yday_set(0),
  755|   721k|          tzoff_set(0),
  756|   721k|          tzname_set(0),
  757|   721k|          am_pm_set(0),
  758|   721k|          epoch_ticks_set(0),
  759|   721k|          duration_ticks_set(0),
  760|   721k|          duration_suffix_set(0),
  761|   721k|          is_pm(0)
  762|   721k|    {
  763|   721k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  58.6k|{
  377|  58.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 58.6k]
  |  Branch (377:25): [True: 0, False: 58.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  58.6k|    auto p = begin;
  383|  58.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 58.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  58.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 58.6k]
  |  Branch (392:21): [True: 0, False: 58.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   154k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 154k, False: 0]
  ------------------
  399|   154k|        auto ch = *p;
  400|   154k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 58.6k, False: 95.5k]
  ------------------
  401|  58.6k|            break;
  402|  58.6k|        }
  403|  95.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.7k, False: 78.7k]
  ------------------
  404|  16.7k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.7k]
  |  Branch (404:32): [True: 16.7k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.7k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.7k|            const auto cp_len =
  412|  16.7k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.7k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.7k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.7k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.7k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.7k|            ++p;
  439|  16.7k|            continue;
  440|  16.7k|        }
  441|  78.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.7k, False: 61.9k]
  ------------------
  442|  16.7k|            handler.on_text(begin, p);
  443|  16.7k|        }
  444|  78.7k|        ++p;  // Consume '%'
  445|  78.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.7k|        ch = *p;
  451|  78.7k|        ++p;
  452|       |
  453|  78.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 75.4k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.78k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.78k, False: 69.9k]
  ------------------
  479|  8.78k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.7k]
  ------------------
  480|  8.78k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.7k]
  ------------------
  481|  8.78k|                handler.on_month_name();
  482|  8.78k|                break;
  483|  3.35k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.35k, False: 75.4k]
  ------------------
  484|  3.35k|                handler.on_dec_month();
  485|  3.35k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.35k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.35k, False: 75.4k]
  ------------------
  502|  3.35k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.7k]
  ------------------
  503|  3.35k|                handler.on_day_of_month();
  504|  3.35k|                break;
  505|       |            // Day of week
  506|  6.34k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.34k, False: 72.4k]
  ------------------
  507|  6.34k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.7k]
  ------------------
  508|  6.34k|                handler.on_weekday_name();
  509|  6.34k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.35k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.35k, False: 75.4k]
  ------------------
  518|  3.35k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.7k]
  ------------------
  519|  3.35k|                handler.on_24_hour();
  520|  3.35k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.35k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.35k, False: 75.4k]
  ------------------
  527|  3.35k|                handler.on_minute();
  528|  3.35k|                break;
  529|       |            // Second
  530|  3.35k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.35k, False: 75.4k]
  ------------------
  531|  3.35k|                handler.on_second();
  532|  3.35k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.35k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.35k, False: 75.4k]
  ------------------
  563|  3.35k|                handler.on_tz_offset();
  564|  3.35k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.72k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.72k, False: 71.0k]
  ------------------
  579|  7.72k|                handler.on_us_date();
  580|  7.72k|                break;
  581|  4.13k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.13k, False: 74.6k]
  ------------------
  582|  4.13k|                handler.on_iso_date();
  583|  4.13k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.6k, False: 56.0k]
  ------------------
  588|  22.6k|                handler.on_24_hour_time();
  589|  22.6k|                break;
  590|  5.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.59k, False: 73.1k]
  ------------------
  591|  5.59k|                handler.on_iso_time();
  592|  5.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.7k|        }
  704|  78.7k|        begin = p;
  705|       |
  706|  78.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.7k|    }
  710|  58.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 58.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  58.6k|    handler.verify();
  714|  58.6k|    return p;
  715|  58.6k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  16.7k|    {
 1177|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.4k|    {
 1196|  14.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.4k|        st.set_short_year(*this);
 1200|  14.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.4k|    {                                                                \
  769|  14.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.4k|        field##_set = 1;                                             \
  774|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  16.7k|    {
 1232|  16.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.3k|    {
 1238|  35.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.3k|        st.set_mon(*this);
 1242|  35.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.3k|    {
 1266|  35.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.3k|        st.set_mday(*this);
 1270|  35.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  13.0k|    {
 1274|  13.0k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.0k|        st.set_wday(*this);
 1278|  13.0k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  65.8k|    {
 1296|  65.8k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.8k|        st.set_hour24(*this);
 1300|  65.8k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  65.8k|    {
 1310|  65.8k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.8k|        st.set_min(*this);
 1314|  65.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  23.2k|    {
 1317|  23.2k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.2k|        st.set_sec(*this);
 1321|  23.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  23.2k|    {                                                                \
  769|  23.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.2k|        field##_set = 1;                                             \
  774|  23.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.0k|    {
 1336|  10.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.0k|        st.set_tzoff(*this);
 1340|  10.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.4k|    {
 1369|  14.4k|        on_dec_month();
 1370|  14.4k|        on_day_of_month();
 1371|  14.4k|        on_short_year();
 1372|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  42.6k|    {
 1387|  42.6k|        on_24_hour();
 1388|  42.6k|        on_minute();
 1389|  42.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.8k, False: 55.1k]
  |  Branch (800:27): [True: 0, False: 65.8k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.0k, False: 110k]
  |  Branch (824:26): [True: 0, False: 10.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.0k, False: 107k]
  |  Branch (829:26): [True: 35.3k, False: 72.5k]
  |  Branch (829:38): [True: 0, False: 72.5k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 48.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   302k|    {
 1467|   302k|        return err;
 1468|   302k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  58.6k|    {
 1530|  58.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  58.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.3k|    {
 1523|  60.3k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.3k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.3k|{
 1494|  60.3k|    auto it = pctx.begin();
 1495|  60.3k|    auto end = pctx.end();
 1496|  60.3k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.67k, False: 58.6k]
  |  Branch (1496:22): [True: 0, False: 58.6k]
  ------------------
 1497|  1.67k|        pctx.on_error(
 1498|  1.67k|            "Format string without specifiers is not valid for this type");
 1499|  1.67k|        return it;
 1500|  1.67k|    }
 1501|       |
 1502|  58.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  58.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  58.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 58.6k, False: 0]
  ------------------
 1505|  58.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  58.6k|    }
 1507|  58.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  58.6k|    return end;
 1512|  58.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  58.6k|{
  377|  58.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 58.6k]
  |  Branch (377:25): [True: 0, False: 58.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  58.6k|    auto p = begin;
  383|  58.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 58.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  58.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 58.6k]
  |  Branch (392:21): [True: 0, False: 58.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   154k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 154k, False: 0]
  ------------------
  399|   154k|        auto ch = *p;
  400|   154k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 58.6k, False: 95.5k]
  ------------------
  401|  58.6k|            break;
  402|  58.6k|        }
  403|  95.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.7k, False: 78.7k]
  ------------------
  404|  16.7k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.7k]
  |  Branch (404:32): [True: 16.7k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.7k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.7k|            const auto cp_len =
  412|  16.7k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.7k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.7k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.7k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.7k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.7k|            ++p;
  439|  16.7k|            continue;
  440|  16.7k|        }
  441|  78.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.7k, False: 61.9k]
  ------------------
  442|  16.7k|            handler.on_text(begin, p);
  443|  16.7k|        }
  444|  78.7k|        ++p;  // Consume '%'
  445|  78.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.7k|        ch = *p;
  451|  78.7k|        ++p;
  452|       |
  453|  78.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 75.4k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.78k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.78k, False: 69.9k]
  ------------------
  479|  8.78k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.7k]
  ------------------
  480|  8.78k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.7k]
  ------------------
  481|  8.78k|                handler.on_month_name();
  482|  8.78k|                break;
  483|  3.35k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.35k, False: 75.4k]
  ------------------
  484|  3.35k|                handler.on_dec_month();
  485|  3.35k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.35k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.35k, False: 75.4k]
  ------------------
  502|  3.35k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.7k]
  ------------------
  503|  3.35k|                handler.on_day_of_month();
  504|  3.35k|                break;
  505|       |            // Day of week
  506|  6.34k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.34k, False: 72.4k]
  ------------------
  507|  6.34k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.7k]
  ------------------
  508|  6.34k|                handler.on_weekday_name();
  509|  6.34k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.35k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.35k, False: 75.4k]
  ------------------
  518|  3.35k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.7k]
  ------------------
  519|  3.35k|                handler.on_24_hour();
  520|  3.35k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.35k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.35k, False: 75.4k]
  ------------------
  527|  3.35k|                handler.on_minute();
  528|  3.35k|                break;
  529|       |            // Second
  530|  3.35k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.35k, False: 75.4k]
  ------------------
  531|  3.35k|                handler.on_second();
  532|  3.35k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.35k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.35k, False: 75.4k]
  ------------------
  563|  3.35k|                handler.on_tz_offset();
  564|  3.35k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.72k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.72k, False: 71.0k]
  ------------------
  579|  7.72k|                handler.on_us_date();
  580|  7.72k|                break;
  581|  4.13k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.13k, False: 74.6k]
  ------------------
  582|  4.13k|                handler.on_iso_date();
  583|  4.13k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.6k, False: 56.0k]
  ------------------
  588|  22.6k|                handler.on_24_hour_time();
  589|  22.6k|                break;
  590|  5.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.59k, False: 73.1k]
  ------------------
  591|  5.59k|                handler.on_iso_time();
  592|  5.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.7k|        }
  704|  78.7k|        begin = p;
  705|       |
  706|  78.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.7k|    }
  710|  58.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 58.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  58.6k|    handler.verify();
  714|  58.6k|    return p;
  715|  58.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  16.7k|    {
 1177|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.4k|    {
 1196|  14.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.4k|        st.set_short_year(*this);
 1200|  14.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.4k|    {                                                                \
  769|  14.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.4k|        field##_set = 1;                                             \
  774|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  16.7k|    {
 1232|  16.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.3k|    {
 1238|  35.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.3k|        st.set_mon(*this);
 1242|  35.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.3k|    {
 1266|  35.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.3k|        st.set_mday(*this);
 1270|  35.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  13.0k|    {
 1274|  13.0k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.0k|        st.set_wday(*this);
 1278|  13.0k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.8k|    {
 1296|  65.8k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.8k|        st.set_hour24(*this);
 1300|  65.8k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  65.8k|    {
 1310|  65.8k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.8k|        st.set_min(*this);
 1314|  65.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  23.2k|    {
 1317|  23.2k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.2k|        st.set_sec(*this);
 1321|  23.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  23.2k|    {                                                                \
  769|  23.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.2k|        field##_set = 1;                                             \
  774|  23.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.0k|    {
 1336|  10.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.0k|        st.set_tzoff(*this);
 1340|  10.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.4k|    {
 1369|  14.4k|        on_dec_month();
 1370|  14.4k|        on_day_of_month();
 1371|  14.4k|        on_short_year();
 1372|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  42.6k|    {
 1387|  42.6k|        on_24_hour();
 1388|  42.6k|        on_minute();
 1389|  42.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.8k, False: 55.1k]
  |  Branch (800:27): [True: 0, False: 65.8k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.0k, False: 110k]
  |  Branch (824:26): [True: 0, False: 10.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.0k, False: 107k]
  |  Branch (829:26): [True: 35.3k, False: 72.5k]
  |  Branch (829:38): [True: 0, False: 72.5k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 48.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   302k|    {
 1467|   302k|        return err;
 1468|   302k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  58.6k|    {
 1530|  58.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  58.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  60.3k|    {
 1523|  60.3k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  60.3k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  60.3k|{
 1494|  60.3k|    auto it = pctx.begin();
 1495|  60.3k|    auto end = pctx.end();
 1496|  60.3k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.67k, False: 58.6k]
  |  Branch (1496:22): [True: 0, False: 58.6k]
  ------------------
 1497|  1.67k|        pctx.on_error(
 1498|  1.67k|            "Format string without specifiers is not valid for this type");
 1499|  1.67k|        return it;
 1500|  1.67k|    }
 1501|       |
 1502|  58.6k|    auto checker = detail::tm_format_checker<T>{};
 1503|  58.6k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  58.6k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 58.6k, False: 0]
  ------------------
 1505|  58.6k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  58.6k|    }
 1507|  58.6k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.6k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  58.6k|    return end;
 1512|  58.6k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  58.6k|{
  377|  58.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 58.6k]
  |  Branch (377:25): [True: 0, False: 58.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  58.6k|    auto p = begin;
  383|  58.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 58.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  58.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 58.6k]
  |  Branch (392:21): [True: 0, False: 58.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   154k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 154k, False: 0]
  ------------------
  399|   154k|        auto ch = *p;
  400|   154k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 58.6k, False: 95.5k]
  ------------------
  401|  58.6k|            break;
  402|  58.6k|        }
  403|  95.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.7k, False: 78.7k]
  ------------------
  404|  16.7k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.7k]
  |  Branch (404:32): [True: 16.7k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.7k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.7k|            const auto cp_len =
  412|  16.7k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.7k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.7k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.7k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.7k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.7k|            ++p;
  439|  16.7k|            continue;
  440|  16.7k|        }
  441|  78.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.7k, False: 61.9k]
  ------------------
  442|  16.7k|            handler.on_text(begin, p);
  443|  16.7k|        }
  444|  78.7k|        ++p;  // Consume '%'
  445|  78.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.7k|        ch = *p;
  451|  78.7k|        ++p;
  452|       |
  453|  78.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.35k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.35k, False: 75.4k]
  ------------------
  463|  3.35k|                handler.on_full_year();
  464|  3.35k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.78k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.78k, False: 69.9k]
  ------------------
  479|  8.78k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.7k]
  ------------------
  480|  8.78k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.7k]
  ------------------
  481|  8.78k|                handler.on_month_name();
  482|  8.78k|                break;
  483|  3.35k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.35k, False: 75.4k]
  ------------------
  484|  3.35k|                handler.on_dec_month();
  485|  3.35k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.35k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.35k, False: 75.4k]
  ------------------
  502|  3.35k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.7k]
  ------------------
  503|  3.35k|                handler.on_day_of_month();
  504|  3.35k|                break;
  505|       |            // Day of week
  506|  6.34k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.34k, False: 72.4k]
  ------------------
  507|  6.34k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.7k]
  ------------------
  508|  6.34k|                handler.on_weekday_name();
  509|  6.34k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.35k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.35k, False: 75.4k]
  ------------------
  518|  3.35k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.7k]
  ------------------
  519|  3.35k|                handler.on_24_hour();
  520|  3.35k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.35k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.35k, False: 75.4k]
  ------------------
  527|  3.35k|                handler.on_minute();
  528|  3.35k|                break;
  529|       |            // Second
  530|  3.35k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.35k, False: 75.4k]
  ------------------
  531|  3.35k|                handler.on_second();
  532|  3.35k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.35k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.35k, False: 75.4k]
  ------------------
  563|  3.35k|                handler.on_tz_offset();
  564|  3.35k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.72k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.72k, False: 71.0k]
  ------------------
  579|  7.72k|                handler.on_us_date();
  580|  7.72k|                break;
  581|  4.13k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.13k, False: 74.6k]
  ------------------
  582|  4.13k|                handler.on_iso_date();
  583|  4.13k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  22.6k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 22.6k, False: 56.0k]
  ------------------
  588|  22.6k|                handler.on_24_hour_time();
  589|  22.6k|                break;
  590|  5.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.59k, False: 73.1k]
  ------------------
  591|  5.59k|                handler.on_iso_time();
  592|  5.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.7k|        }
  704|  78.7k|        begin = p;
  705|       |
  706|  78.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.7k|    }
  710|  58.6k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 58.6k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  58.6k|    handler.verify();
  714|  58.6k|    return p;
  715|  58.6k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  16.7k|    {
 1177|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.9k|    {
 1189|  20.9k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.9k|        st.set_full_year(*this);
 1193|  20.9k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.9k|    {                                                                \
  769|  20.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.9k|        field##_set = 1;                                             \
  774|  20.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.4k|    {
 1196|  14.4k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.4k|        st.set_short_year(*this);
 1200|  14.4k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.4k|    {                                                                \
  769|  14.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.4k|        field##_set = 1;                                             \
  774|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  16.7k|    {
 1232|  16.7k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  16.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.3k|    {
 1238|  35.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.3k|        st.set_mon(*this);
 1242|  35.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.3k|    {
 1266|  35.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.3k|        st.set_mday(*this);
 1270|  35.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  35.3k|    {                                                                \
  769|  35.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.3k|        field##_set = 1;                                             \
  774|  35.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  13.0k|    {
 1274|  13.0k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.0k|        st.set_wday(*this);
 1278|  13.0k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  13.0k|    {                                                                \
  769|  13.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.0k|        field##_set = 1;                                             \
  774|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  65.8k|    {
 1296|  65.8k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  65.8k|        st.set_hour24(*this);
 1300|  65.8k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  65.8k|    {
 1310|  65.8k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  65.8k|        st.set_min(*this);
 1314|  65.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  65.8k|    {                                                                \
  769|  65.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  65.8k|        field##_set = 1;                                             \
  774|  65.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  23.2k|    {
 1317|  23.2k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.2k|        st.set_sec(*this);
 1321|  23.2k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  23.2k|    {                                                                \
  769|  23.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.2k|        field##_set = 1;                                             \
  774|  23.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.0k|    {
 1336|  10.0k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.0k|        st.set_tzoff(*this);
 1340|  10.0k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.4k|    {
 1369|  14.4k|        on_dec_month();
 1370|  14.4k|        on_day_of_month();
 1371|  14.4k|        on_short_year();
 1372|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.8k|    {
 1375|  10.8k|        on_full_year();
 1376|  10.8k|        on_dec_month();
 1377|  10.8k|        on_day_of_month();
 1378|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  42.6k|    {
 1387|  42.6k|        on_24_hour();
 1388|  42.6k|        on_minute();
 1389|  42.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  13.1k|    {
 1392|  13.1k|        on_24_hour();
 1393|  13.1k|        on_minute();
 1394|  13.1k|        on_second();
 1395|  13.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   121k|    {
 1419|   121k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   121k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   121k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   121k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   121k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   121k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   121k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   121k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   121k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   121k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   121k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   121k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   121k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   121k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   121k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   121k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   121k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   121k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   121k|        st.verify(*this);
 1463|   121k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   121k|    {
  800|   121k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 65.8k, False: 55.1k]
  |  Branch (800:27): [True: 0, False: 65.8k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   121k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 121k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   121k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.9k, False: 100k]
  |  Branch (818:31): [True: 0, False: 20.9k]
  |  Branch (818:46): [True: 0, False: 20.9k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   121k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.0k, False: 110k]
  |  Branch (824:26): [True: 0, False: 10.0k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   121k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.0k, False: 107k]
  |  Branch (829:26): [True: 35.3k, False: 72.5k]
  |  Branch (829:38): [True: 0, False: 72.5k]
  ------------------
  830|   121k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 48.4k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   121k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   302k|    {
 1467|   302k|        return err;
 1468|   302k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  58.6k|    {
 1530|  58.6k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  58.6k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.7k|    {
 1523|  65.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.7k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.7k|{
 1494|  65.7k|    auto it = pctx.begin();
 1495|  65.7k|    auto end = pctx.end();
 1496|  65.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.35k, False: 62.3k]
  |  Branch (1496:22): [True: 0, False: 62.3k]
  ------------------
 1497|  3.35k|        pctx.on_error(
 1498|  3.35k|            "Format string without specifiers is not valid for this type");
 1499|  3.35k|        return it;
 1500|  3.35k|    }
 1501|       |
 1502|  62.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.3k, False: 0]
  ------------------
 1505|  62.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.3k|    }
 1507|  62.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 62.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.3k|    return end;
 1512|  62.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  62.3k|{
  377|  62.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.3k]
  |  Branch (377:25): [True: 0, False: 62.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.3k|    auto p = begin;
  383|  62.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.3k]
  |  Branch (392:21): [True: 0, False: 62.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.3k, False: 136k]
  ------------------
  401|  62.3k|            break;
  402|  62.3k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.5k, False: 102k]
  ------------------
  404|  33.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.5k]
  |  Branch (404:32): [True: 33.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.5k|            const auto cp_len =
  412|  33.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.5k|            ++p;
  439|  33.5k|            continue;
  440|  33.5k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.5k, False: 69.0k]
  ------------------
  442|  33.5k|            handler.on_text(begin, p);
  443|  33.5k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.71k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.71k, False: 95.9k]
  ------------------
  463|  6.71k|                handler.on_full_year();
  464|  6.71k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.98k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.98k, False: 94.6k]
  ------------------
  479|  7.98k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  7.98k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  7.98k|                handler.on_month_name();
  482|  7.98k|                break;
  483|  6.71k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.71k, False: 95.9k]
  ------------------
  484|  6.71k|                handler.on_dec_month();
  485|  6.71k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.71k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.71k, False: 95.9k]
  ------------------
  502|  6.71k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.71k|                handler.on_day_of_month();
  504|  6.71k|                break;
  505|       |            // Day of week
  506|  6.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.71k, False: 95.9k]
  ------------------
  507|  6.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.71k|                handler.on_weekday_name();
  509|  6.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.71k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.71k, False: 95.9k]
  ------------------
  518|  6.71k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.71k|                handler.on_24_hour();
  520|  6.71k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.71k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.71k, False: 95.9k]
  ------------------
  527|  6.71k|                handler.on_minute();
  528|  6.71k|                break;
  529|       |            // Second
  530|  6.71k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.71k, False: 95.9k]
  ------------------
  531|  6.71k|                handler.on_second();
  532|  6.71k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.71k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.71k, False: 95.9k]
  ------------------
  563|  6.71k|                handler.on_tz_offset();
  564|  6.71k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.73k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.73k, False: 95.9k]
  ------------------
  579|  6.73k|                handler.on_us_date();
  580|  6.73k|                break;
  581|  6.72k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.72k, False: 95.9k]
  ------------------
  582|  6.72k|                handler.on_iso_date();
  583|  6.72k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.9k, False: 82.7k]
  ------------------
  588|  19.9k|                handler.on_24_hour_time();
  589|  19.9k|                break;
  590|  7.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.59k, False: 95.0k]
  ------------------
  591|  7.59k|                handler.on_iso_time();
  592|  7.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.3k|    handler.verify();
  714|  62.3k|    return p;
  715|  62.3k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  33.5k|    {
 1177|  33.5k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.3k|    {
 1530|  62.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.7k|    {
 1523|  65.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.7k|{
 1494|  65.7k|    auto it = pctx.begin();
 1495|  65.7k|    auto end = pctx.end();
 1496|  65.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.35k, False: 62.3k]
  |  Branch (1496:22): [True: 0, False: 62.3k]
  ------------------
 1497|  3.35k|        pctx.on_error(
 1498|  3.35k|            "Format string without specifiers is not valid for this type");
 1499|  3.35k|        return it;
 1500|  3.35k|    }
 1501|       |
 1502|  62.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.3k, False: 0]
  ------------------
 1505|  62.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.3k|    }
 1507|  62.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 62.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.3k|    return end;
 1512|  62.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  62.3k|{
  377|  62.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.3k]
  |  Branch (377:25): [True: 0, False: 62.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.3k|    auto p = begin;
  383|  62.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.3k]
  |  Branch (392:21): [True: 0, False: 62.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.3k, False: 136k]
  ------------------
  401|  62.3k|            break;
  402|  62.3k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.5k, False: 102k]
  ------------------
  404|  33.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.5k]
  |  Branch (404:32): [True: 33.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.5k|            const auto cp_len =
  412|  33.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.5k|            ++p;
  439|  33.5k|            continue;
  440|  33.5k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.5k, False: 69.0k]
  ------------------
  442|  33.5k|            handler.on_text(begin, p);
  443|  33.5k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.71k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.71k, False: 95.9k]
  ------------------
  463|  6.71k|                handler.on_full_year();
  464|  6.71k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.98k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.98k, False: 94.6k]
  ------------------
  479|  7.98k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  7.98k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  7.98k|                handler.on_month_name();
  482|  7.98k|                break;
  483|  6.71k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.71k, False: 95.9k]
  ------------------
  484|  6.71k|                handler.on_dec_month();
  485|  6.71k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.71k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.71k, False: 95.9k]
  ------------------
  502|  6.71k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.71k|                handler.on_day_of_month();
  504|  6.71k|                break;
  505|       |            // Day of week
  506|  6.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.71k, False: 95.9k]
  ------------------
  507|  6.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.71k|                handler.on_weekday_name();
  509|  6.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.71k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.71k, False: 95.9k]
  ------------------
  518|  6.71k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.71k|                handler.on_24_hour();
  520|  6.71k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.71k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.71k, False: 95.9k]
  ------------------
  527|  6.71k|                handler.on_minute();
  528|  6.71k|                break;
  529|       |            // Second
  530|  6.71k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.71k, False: 95.9k]
  ------------------
  531|  6.71k|                handler.on_second();
  532|  6.71k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.71k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.71k, False: 95.9k]
  ------------------
  563|  6.71k|                handler.on_tz_offset();
  564|  6.71k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.73k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.73k, False: 95.9k]
  ------------------
  579|  6.73k|                handler.on_us_date();
  580|  6.73k|                break;
  581|  6.72k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.72k, False: 95.9k]
  ------------------
  582|  6.72k|                handler.on_iso_date();
  583|  6.72k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.9k, False: 82.7k]
  ------------------
  588|  19.9k|                handler.on_24_hour_time();
  589|  19.9k|                break;
  590|  7.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.59k, False: 95.0k]
  ------------------
  591|  7.59k|                handler.on_iso_time();
  592|  7.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.3k|    handler.verify();
  714|  62.3k|    return p;
  715|  62.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  33.5k|    {
 1177|  33.5k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.3k|    {
 1530|  62.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.7k|    {
 1523|  65.7k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.7k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.7k|{
 1494|  65.7k|    auto it = pctx.begin();
 1495|  65.7k|    auto end = pctx.end();
 1496|  65.7k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.35k, False: 62.3k]
  |  Branch (1496:22): [True: 0, False: 62.3k]
  ------------------
 1497|  3.35k|        pctx.on_error(
 1498|  3.35k|            "Format string without specifiers is not valid for this type");
 1499|  3.35k|        return it;
 1500|  3.35k|    }
 1501|       |
 1502|  62.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.3k, False: 0]
  ------------------
 1505|  62.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.3k|    }
 1507|  62.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 62.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.3k|    return end;
 1512|  62.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  62.3k|{
  377|  62.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.3k]
  |  Branch (377:25): [True: 0, False: 62.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.3k|    auto p = begin;
  383|  62.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.3k]
  |  Branch (392:21): [True: 0, False: 62.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   198k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 198k, False: 0]
  ------------------
  399|   198k|        auto ch = *p;
  400|   198k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.3k, False: 136k]
  ------------------
  401|  62.3k|            break;
  402|  62.3k|        }
  403|   136k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 33.5k, False: 102k]
  ------------------
  404|  33.5k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 33.5k]
  |  Branch (404:32): [True: 33.5k, False: 0]
  |  Branch (404:46): [True: 0, False: 33.5k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  33.5k|            const auto cp_len =
  412|  33.5k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  33.5k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 33.5k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  33.5k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 33.5k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  33.5k|            ++p;
  439|  33.5k|            continue;
  440|  33.5k|        }
  441|   102k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 33.5k, False: 69.0k]
  ------------------
  442|  33.5k|            handler.on_text(begin, p);
  443|  33.5k|        }
  444|   102k|        ++p;  // Consume '%'
  445|   102k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 102k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   102k|        ch = *p;
  451|   102k|        ++p;
  452|       |
  453|   102k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 102k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 102k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 102k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.71k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.71k, False: 95.9k]
  ------------------
  463|  6.71k|                handler.on_full_year();
  464|  6.71k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 102k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 102k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 102k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 102k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.98k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.98k, False: 94.6k]
  ------------------
  479|  7.98k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 102k]
  ------------------
  480|  7.98k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 102k]
  ------------------
  481|  7.98k|                handler.on_month_name();
  482|  7.98k|                break;
  483|  6.71k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.71k, False: 95.9k]
  ------------------
  484|  6.71k|                handler.on_dec_month();
  485|  6.71k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 102k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 102k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 102k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 102k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.71k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.71k, False: 95.9k]
  ------------------
  502|  6.71k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 102k]
  ------------------
  503|  6.71k|                handler.on_day_of_month();
  504|  6.71k|                break;
  505|       |            // Day of week
  506|  6.71k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.71k, False: 95.9k]
  ------------------
  507|  6.71k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 102k]
  ------------------
  508|  6.71k|                handler.on_weekday_name();
  509|  6.71k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 102k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 102k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.71k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.71k, False: 95.9k]
  ------------------
  518|  6.71k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 102k]
  ------------------
  519|  6.71k|                handler.on_24_hour();
  520|  6.71k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 102k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 102k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.71k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.71k, False: 95.9k]
  ------------------
  527|  6.71k|                handler.on_minute();
  528|  6.71k|                break;
  529|       |            // Second
  530|  6.71k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.71k, False: 95.9k]
  ------------------
  531|  6.71k|                handler.on_second();
  532|  6.71k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 102k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.71k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.71k, False: 95.9k]
  ------------------
  563|  6.71k|                handler.on_tz_offset();
  564|  6.71k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 102k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 102k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 102k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 102k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.73k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.73k, False: 95.9k]
  ------------------
  579|  6.73k|                handler.on_us_date();
  580|  6.73k|                break;
  581|  6.72k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.72k, False: 95.9k]
  ------------------
  582|  6.72k|                handler.on_iso_date();
  583|  6.72k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 102k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.9k, False: 82.7k]
  ------------------
  588|  19.9k|                handler.on_24_hour_time();
  589|  19.9k|                break;
  590|  7.59k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.59k, False: 95.0k]
  ------------------
  591|  7.59k|                handler.on_iso_time();
  592|  7.59k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 102k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 102k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 102k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 102k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 102k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 102k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 102k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 102k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   102k|        }
  704|   102k|        begin = p;
  705|       |
  706|   102k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 102k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   102k|    }
  710|  62.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.3k|    handler.verify();
  714|  62.3k|    return p;
  715|  62.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  33.5k|    {
 1177|  33.5k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.3k|    {
 1530|  62.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.3k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  2.98k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 2.98k, False: 0]
  ------------------
   72|  2.98k|    {
   73|  2.98k|    }
_ZN3scn2v45monthC2Ej:
  119|  13.7k|        : m_value(static_cast<unsigned char>(d))
  120|  13.7k|    {
  121|  13.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.2k|{
  377|  31.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.2k]
  |  Branch (377:25): [True: 0, False: 31.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.2k|    auto p = begin;
  383|  31.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.2k]
  |  Branch (392:21): [True: 0, False: 31.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  51.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 19.9k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.4k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.2k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.4k|        ++p;  // Consume '%'
  445|  31.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.4k|        ch = *p;
  451|  31.4k|        ++p;
  452|       |
  453|  31.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 29.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.32k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.32k, False: 27.1k]
  ------------------
  479|  4.32k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.4k]
  ------------------
  480|  4.32k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.4k]
  ------------------
  481|  4.32k|                handler.on_month_name();
  482|  4.32k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.3k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.3k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.4k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.14k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.14k, False: 28.2k]
  ------------------
  507|  3.14k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.4k]
  ------------------
  508|  3.14k|                handler.on_weekday_name();
  509|  3.14k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.3k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.4k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.84k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.84k, False: 25.5k]
  ------------------
  579|  5.84k|                handler.on_us_date();
  580|  5.84k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 29.4k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 19.8k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  2.74k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.74k, False: 28.6k]
  ------------------
  591|  2.74k|                handler.on_iso_time();
  592|  2.74k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.4k|        }
  704|  31.4k|        begin = p;
  705|       |
  706|  31.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 20.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  31.4k|    }
  710|  19.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.9k|    handler.verify();
  714|  19.9k|    return p;
  715|  31.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.25k|    {                                                                \
  769|  4.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.25k|        field##_set = 1;                                             \
  774|  4.25k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.93k|    {                                                                \
  769|  7.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.93k|        field##_set = 1;                                             \
  774|  7.93k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.72k|    {                                                                \
  769|  4.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.72k|        field##_set = 1;                                             \
  774|  4.72k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.52k|    {                                                                \
  769|  1.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.52k|        field##_set = 1;                                             \
  774|  1.52k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.16k|    {                                                                \
  769|  1.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.16k|        field##_set = 1;                                             \
  774|  1.16k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.9k|    {
  800|  19.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.1k, False: 8.87k]
  |  Branch (800:27): [True: 0, False: 11.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 19.6k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.52k, False: 18.4k]
  |  Branch (829:26): [True: 4.62k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  19.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.9k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  13.1k|    {
  867|  13.1k|        assert(!full_year_set);
  868|  13.1k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 13.1k, False: 0]
  |  Branch (868:31): [True: 0, False: 13.1k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  13.1k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 13.1k, False: 0]
  ------------------
  872|  13.1k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 156, False: 13.0k]
  ------------------
  873|    156|                year = 1900 + short_year_value - offset;
  874|    156|            }
  875|  13.0k|            else {
  876|  13.0k|                year = 2000 + short_year_value - offset;
  877|  13.0k|            }
  878|  13.1k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  13.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.6k|{
  377|  26.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.6k]
  |  Branch (377:25): [True: 0, False: 26.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.6k|    auto p = begin;
  383|  26.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.6k]
  |  Branch (392:21): [True: 0, False: 26.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.9k, False: 15.1k]
  ------------------
  399|  26.9k|        auto ch = *p;
  400|  26.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.7k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.6k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.7k|        ++p;  // Consume '%'
  445|  26.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.7k|        ch = *p;
  451|  26.7k|        ++p;
  452|       |
  453|  26.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.65k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.65k, False: 25.1k]
  ------------------
  463|  1.65k|                handler.on_full_year();
  464|  1.65k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 22.4k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.7k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.7k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.7k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.10k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.10k, False: 23.6k]
  ------------------
  507|  3.10k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.7k]
  ------------------
  508|  3.10k|                handler.on_weekday_name();
  509|  3.10k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.77k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.77k, False: 25.0k]
  ------------------
  579|  1.77k|                handler.on_us_date();
  580|  1.77k|                break;
  581|  2.03k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.03k, False: 24.7k]
  ------------------
  582|  2.03k|                handler.on_iso_date();
  583|  2.03k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 15.8k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.76k, False: 24.0k]
  ------------------
  591|  2.76k|                handler.on_iso_time();
  592|  2.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.7k|        }
  704|  26.7k|        begin = p;
  705|       |
  706|  26.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.4k, False: 15.3k]
  ------------------
  707|  11.4k|            return p;
  708|  11.4k|        }
  709|  26.7k|    }
  710|  15.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.1k|    handler.verify();
  714|  15.1k|    return p;
  715|  26.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.68k|    {                                                                \
  769|  3.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.68k|        field##_set = 1;                                             \
  774|  3.68k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    138|    {                                                                \
  769|    138|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    138|        field##_set = 1;                                             \
  774|    138|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.78k|    {                                                                \
  769|  3.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.78k|        field##_set = 1;                                             \
  774|  3.78k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.45k|    {                                                                \
  769|  1.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.45k|        field##_set = 1;                                             \
  774|  1.45k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.14k|    {                                                                \
  769|  1.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.14k|        field##_set = 1;                                             \
  774|  1.14k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.1k|    {
  800|  15.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.69k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 14.7k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.45k, False: 13.6k]
  |  Branch (829:26): [True: 518, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.97k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.2k|{
  377|  31.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.2k]
  |  Branch (377:25): [True: 0, False: 31.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.2k|    auto p = begin;
  383|  31.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.2k]
  |  Branch (392:21): [True: 0, False: 31.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  51.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 19.9k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.4k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.2k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.4k|        ++p;  // Consume '%'
  445|  31.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.4k|        ch = *p;
  451|  31.4k|        ++p;
  452|       |
  453|  31.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 29.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.32k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.32k, False: 27.1k]
  ------------------
  479|  4.32k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.4k]
  ------------------
  480|  4.32k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.4k]
  ------------------
  481|  4.32k|                handler.on_month_name();
  482|  4.32k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.3k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.3k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.4k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.14k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.14k, False: 28.2k]
  ------------------
  507|  3.14k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.4k]
  ------------------
  508|  3.14k|                handler.on_weekday_name();
  509|  3.14k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.3k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.4k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.84k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.84k, False: 25.5k]
  ------------------
  579|  5.84k|                handler.on_us_date();
  580|  5.84k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 29.4k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 19.8k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  2.74k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.74k, False: 28.6k]
  ------------------
  591|  2.74k|                handler.on_iso_time();
  592|  2.74k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.4k|        }
  704|  31.4k|        begin = p;
  705|       |
  706|  31.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 20.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  31.4k|    }
  710|  19.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.9k|    handler.verify();
  714|  19.9k|    return p;
  715|  31.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.25k|    {                                                                \
  769|  4.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.25k|        field##_set = 1;                                             \
  774|  4.25k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.93k|    {                                                                \
  769|  7.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.93k|        field##_set = 1;                                             \
  774|  7.93k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.72k|    {                                                                \
  769|  4.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.72k|        field##_set = 1;                                             \
  774|  4.72k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.52k|    {                                                                \
  769|  1.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.52k|        field##_set = 1;                                             \
  774|  1.52k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.16k|    {                                                                \
  769|  1.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.16k|        field##_set = 1;                                             \
  774|  1.16k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.9k|    {
  800|  19.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.1k, False: 8.87k]
  |  Branch (800:27): [True: 0, False: 11.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 19.6k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.52k, False: 18.4k]
  |  Branch (829:26): [True: 4.62k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  19.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.6k|{
  377|  26.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.6k]
  |  Branch (377:25): [True: 0, False: 26.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.6k|    auto p = begin;
  383|  26.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.6k]
  |  Branch (392:21): [True: 0, False: 26.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.9k, False: 15.1k]
  ------------------
  399|  26.9k|        auto ch = *p;
  400|  26.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.7k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.6k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.7k|        ++p;  // Consume '%'
  445|  26.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.7k|        ch = *p;
  451|  26.7k|        ++p;
  452|       |
  453|  26.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.65k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.65k, False: 25.1k]
  ------------------
  463|  1.65k|                handler.on_full_year();
  464|  1.65k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 22.4k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.7k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.7k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.7k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.10k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.10k, False: 23.6k]
  ------------------
  507|  3.10k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.7k]
  ------------------
  508|  3.10k|                handler.on_weekday_name();
  509|  3.10k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.77k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.77k, False: 25.0k]
  ------------------
  579|  1.77k|                handler.on_us_date();
  580|  1.77k|                break;
  581|  2.03k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.03k, False: 24.7k]
  ------------------
  582|  2.03k|                handler.on_iso_date();
  583|  2.03k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 15.8k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.76k, False: 24.0k]
  ------------------
  591|  2.76k|                handler.on_iso_time();
  592|  2.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.7k|        }
  704|  26.7k|        begin = p;
  705|       |
  706|  26.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.4k, False: 15.3k]
  ------------------
  707|  11.4k|            return p;
  708|  11.4k|        }
  709|  26.7k|    }
  710|  15.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.1k|    handler.verify();
  714|  15.1k|    return p;
  715|  26.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.68k|    {                                                                \
  769|  3.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.68k|        field##_set = 1;                                             \
  774|  3.68k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    138|    {                                                                \
  769|    138|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    138|        field##_set = 1;                                             \
  774|    138|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.78k|    {                                                                \
  769|  3.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.78k|        field##_set = 1;                                             \
  774|  3.78k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.45k|    {                                                                \
  769|  1.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.45k|        field##_set = 1;                                             \
  774|  1.45k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.14k|    {                                                                \
  769|  1.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.14k|        field##_set = 1;                                             \
  774|  1.14k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.1k|    {
  800|  15.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.69k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 14.7k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.45k, False: 13.6k]
  |  Branch (829:26): [True: 518, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.97k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.2k|{
  377|  31.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.2k]
  |  Branch (377:25): [True: 0, False: 31.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.2k|    auto p = begin;
  383|  31.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.2k]
  |  Branch (392:21): [True: 0, False: 31.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  51.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.6k, False: 19.9k]
  ------------------
  399|  31.6k|        auto ch = *p;
  400|  31.6k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.6k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.6k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 188, False: 31.4k]
  ------------------
  404|    188|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 188]
  |  Branch (404:32): [True: 188, False: 0]
  |  Branch (404:46): [True: 0, False: 188]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    188|            const auto cp_len =
  412|    188|                detail::code_point_length_by_starting_code_unit(ch);
  413|    188|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 188]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    188|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 188]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    188|            ++p;
  439|    188|            continue;
  440|    188|        }
  441|  31.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 188, False: 31.2k]
  ------------------
  442|    188|            handler.on_text(begin, p);
  443|    188|        }
  444|  31.4k|        ++p;  // Consume '%'
  445|  31.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.4k|        ch = *p;
  451|  31.4k|        ++p;
  452|       |
  453|  31.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 29.8k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.32k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.32k, False: 27.1k]
  ------------------
  479|  4.32k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.4k]
  ------------------
  480|  4.32k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.4k]
  ------------------
  481|  4.32k|                handler.on_month_name();
  482|  4.32k|                break;
  483|     80|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 80, False: 31.3k]
  ------------------
  484|     80|                handler.on_dec_month();
  485|     80|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 31.3k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.4k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.14k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.14k, False: 28.2k]
  ------------------
  507|  3.14k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.4k]
  ------------------
  508|  3.14k|                handler.on_weekday_name();
  509|  3.14k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 31.3k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.4k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.4k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.4k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.4k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.84k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.84k, False: 25.5k]
  ------------------
  579|  5.84k|                handler.on_us_date();
  580|  5.84k|                break;
  581|  2.00k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.00k, False: 29.4k]
  ------------------
  582|  2.00k|                handler.on_iso_date();
  583|  2.00k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 19.8k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  2.74k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.74k, False: 28.6k]
  ------------------
  591|  2.74k|                handler.on_iso_time();
  592|  2.74k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.4k|        }
  704|  31.4k|        begin = p;
  705|       |
  706|  31.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 20.1k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  31.4k|    }
  710|  19.9k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.9k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.9k|    handler.verify();
  714|  19.9k|    return p;
  715|  31.2k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.63k|    {                                                                \
  769|  3.63k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.63k|        field##_set = 1;                                             \
  774|  3.63k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.84k|    {                                                                \
  769|  5.84k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.84k|        field##_set = 1;                                             \
  774|  5.84k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.93k|    {                                                                \
  769|  7.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.93k|        field##_set = 1;                                             \
  774|  7.93k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.72k|    {                                                                \
  769|  4.72k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.72k|        field##_set = 1;                                             \
  774|  4.72k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.52k|    {                                                                \
  769|  1.52k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.52k|        field##_set = 1;                                             \
  774|  1.52k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.16k|    {                                                                \
  769|  1.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.16k|        field##_set = 1;                                             \
  774|  1.16k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.9k|    {
  800|  19.9k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.1k, False: 8.87k]
  |  Branch (800:27): [True: 0, False: 11.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.9k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.9k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.9k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 19.6k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.9k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.9k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.9k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.52k, False: 18.4k]
  |  Branch (829:26): [True: 4.62k, False: 13.8k]
  |  Branch (829:38): [True: 0, False: 13.8k]
  ------------------
  830|  19.9k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.15k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.9k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.6k|{
  377|  26.6k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.6k]
  |  Branch (377:25): [True: 0, False: 26.6k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.6k|    auto p = begin;
  383|  26.6k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.6k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.6k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.6k]
  |  Branch (392:21): [True: 0, False: 26.6k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  42.1k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.9k, False: 15.1k]
  ------------------
  399|  26.9k|        auto ch = *p;
  400|  26.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 182, False: 26.7k]
  ------------------
  404|    182|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 182]
  |  Branch (404:32): [True: 182, False: 0]
  |  Branch (404:46): [True: 0, False: 182]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    182|            const auto cp_len =
  412|    182|                detail::code_point_length_by_starting_code_unit(ch);
  413|    182|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 182]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    182|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 182]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    182|            ++p;
  439|    182|            continue;
  440|    182|        }
  441|  26.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 182, False: 26.6k]
  ------------------
  442|    182|            handler.on_text(begin, p);
  443|    182|        }
  444|  26.7k|        ++p;  // Consume '%'
  445|  26.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.7k|        ch = *p;
  451|  26.7k|        ++p;
  452|       |
  453|  26.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.65k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.65k, False: 25.1k]
  ------------------
  463|  1.65k|                handler.on_full_year();
  464|  1.65k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.35k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.35k, False: 22.4k]
  ------------------
  479|  4.35k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.7k]
  ------------------
  480|  4.35k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.7k]
  ------------------
  481|  4.35k|                handler.on_month_name();
  482|  4.35k|                break;
  483|     74|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 74, False: 26.7k]
  ------------------
  484|     74|                handler.on_dec_month();
  485|     74|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     58|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 58, False: 26.7k]
  ------------------
  502|     58|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.7k]
  ------------------
  503|     58|                handler.on_day_of_month();
  504|     58|                break;
  505|       |            // Day of week
  506|  3.10k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.10k, False: 23.6k]
  ------------------
  507|  3.10k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.7k]
  ------------------
  508|  3.10k|                handler.on_weekday_name();
  509|  3.10k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.7k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.7k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.77k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.77k, False: 25.0k]
  ------------------
  579|  1.77k|                handler.on_us_date();
  580|  1.77k|                break;
  581|  2.03k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.03k, False: 24.7k]
  ------------------
  582|  2.03k|                handler.on_iso_date();
  583|  2.03k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.9k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.9k, False: 15.8k]
  ------------------
  588|  10.9k|                handler.on_24_hour_time();
  589|  10.9k|                break;
  590|  2.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.76k, False: 24.0k]
  ------------------
  591|  2.76k|                handler.on_iso_time();
  592|  2.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.7k|        }
  704|  26.7k|        begin = p;
  705|       |
  706|  26.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.4k, False: 15.3k]
  ------------------
  707|  11.4k|            return p;
  708|  11.4k|        }
  709|  26.7k|    }
  710|  15.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 15.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  15.1k|    handler.verify();
  714|  15.1k|    return p;
  715|  26.6k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.68k|    {                                                                \
  769|  3.68k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.68k|        field##_set = 1;                                             \
  774|  3.68k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.77k|    {                                                                \
  769|  1.77k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.77k|        field##_set = 1;                                             \
  774|  1.77k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.78k|    {                                                                \
  769|  3.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.78k|        field##_set = 1;                                             \
  774|  3.78k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.45k|    {                                                                \
  769|  1.45k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.45k|        field##_set = 1;                                             \
  774|  1.45k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.1k|    {                                                                \
  769|  11.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.1k|        field##_set = 1;                                             \
  774|  11.1k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.9k|    {                                                                \
  769|  10.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.9k|        field##_set = 1;                                             \
  774|  10.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.14k|    {                                                                \
  769|  1.14k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.14k|        field##_set = 1;                                             \
  774|  1.14k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  15.1k|    {
  800|  15.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.4k, False: 4.69k]
  |  Branch (800:27): [True: 0, False: 10.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  15.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 15.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  15.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 388, False: 14.7k]
  |  Branch (818:31): [True: 0, False: 388]
  |  Branch (818:46): [True: 0, False: 388]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  15.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 15.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  15.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.45k, False: 13.6k]
  |  Branch (829:26): [True: 518, False: 13.1k]
  |  Branch (829:38): [True: 0, False: 13.1k]
  ------------------
  830|  15.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.97k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  15.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.32k|    {                                                                \
  769|  3.32k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.32k|        field##_set = 1;                                             \
  774|  3.32k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.8k|{
  377|  30.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.8k]
  |  Branch (377:25): [True: 0, False: 30.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.8k|    auto p = begin;
  383|  30.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.8k]
  |  Branch (392:21): [True: 0, False: 30.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.6k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.70k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 56, False: 30.9k]
  ------------------
  404|     56|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 56]
  |  Branch (404:32): [True: 56, False: 0]
  |  Branch (404:46): [True: 0, False: 56]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     56|            const auto cp_len =
  412|     56|                detail::code_point_length_by_starting_code_unit(ch);
  413|     56|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 56]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     56|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 56]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     56|            ++p;
  439|     56|            continue;
  440|     56|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 56, False: 30.8k]
  ------------------
  442|     56|            handler.on_text(begin, p);
  443|     56|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.31k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.31k, False: 27.6k]
  ------------------
  463|  3.31k|                handler.on_full_year();
  464|  3.31k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.93k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.93k, False: 26.9k]
  ------------------
  479|  3.93k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.93k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.93k|                handler.on_month_name();
  482|  3.93k|                break;
  483|     32|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 32, False: 30.8k]
  ------------------
  484|     32|                handler.on_dec_month();
  485|     32|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     16|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 16, False: 30.9k]
  ------------------
  502|     16|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     16|                handler.on_day_of_month();
  504|     16|                break;
  505|       |            // Day of week
  506|  3.31k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.31k, False: 27.6k]
  ------------------
  507|  3.31k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.31k|                handler.on_weekday_name();
  509|  3.31k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      8|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 8, False: 30.9k]
  ------------------
  518|      8|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|      8|                handler.on_24_hour();
  520|      8|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.32k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.32k, False: 27.5k]
  ------------------
  579|  3.32k|                handler.on_us_date();
  580|  3.32k|                break;
  581|  3.32k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.32k, False: 27.5k]
  ------------------
  582|  3.32k|                handler.on_iso_date();
  583|  3.32k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.88k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.88k, False: 21.0k]
  ------------------
  588|  9.88k|                handler.on_24_hour_time();
  589|  9.88k|                break;
  590|  3.76k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.76k, False: 27.1k]
  ------------------
  591|  3.76k|                handler.on_iso_time();
  592|  3.76k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.1k, False: 7.75k]
  ------------------
  707|  23.1k|            return p;
  708|  23.1k|        }
  709|  30.9k|    }
  710|  7.70k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.70k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.70k|    handler.verify();
  714|  7.70k|    return p;
  715|  30.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.64k|    {                                                                \
  769|  6.64k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.64k|        field##_set = 1;                                             \
  774|  6.64k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.32k|    {                                                                \
  769|  3.32k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.32k|        field##_set = 1;                                             \
  774|  3.32k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.01k|    {                                                                \
  769|  1.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.01k|        field##_set = 1;                                             \
  774|  1.01k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     66|    {                                                                \
  769|     66|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     66|        field##_set = 1;                                             \
  774|     66|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.46k|    {                                                                \
  769|  7.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.46k|        field##_set = 1;                                             \
  774|  7.46k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  7.42k|    {                                                                \
  769|  7.42k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.42k|        field##_set = 1;                                             \
  774|  7.42k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    468|    {                                                                \
  769|    468|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    468|        field##_set = 1;                                             \
  774|    468|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.70k|    {
  800|  7.70k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 7.04k, False: 652]
  |  Branch (800:27): [True: 0, False: 7.04k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.70k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.70k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.70k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 8, False: 7.69k]
  |  Branch (818:31): [True: 0, False: 8]
  |  Branch (818:46): [True: 0, False: 8]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.70k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.70k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.70k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.70k]
  |  Branch (829:26): [True: 18, False: 7.68k]
  |  Branch (829:38): [True: 0, False: 7.68k]
  ------------------
  830|  7.70k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 18]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.70k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   857k|{
 4068|   857k|    if constexpr (sizeof(U) == 1) {
 4069|   857k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   857k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   857k|{
 4032|   857k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   857k|    SCN_GCC_COMPAT_PUSH
 4035|   857k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   857k|    constexpr char lengths[] =
 4037|   857k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   857k|        "\1\1\1\1\1\1\1\1"
 4039|   857k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   857k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   857k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   857k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   857k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   857k|    SCN_GCC_COMPAT_POP
 4046|   857k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   434k|{
 4274|   434k|    if constexpr (sizeof(CharT) == 1) {
 4275|   434k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   434k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   434k|{
 4087|   434k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   434k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   434k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   434k|    };
 4092|       |
 4093|   434k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 423k, False: 10.0k]
  ------------------
 4094|   423k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 174, False: 423k]
  ------------------
 4095|    174|            SCN_UNLIKELY_ATTR
 4096|    174|            return invalid_code_point;
 4097|    174|        }
 4098|   423k|        return static_cast<char32_t>(input[0]);
 4099|   423k|    }
 4100|       |
 4101|  10.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 8.30k, False: 1.78k]
  ------------------
 4102|  8.30k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 54, False: 8.24k]
  ------------------
 4103|     54|            SCN_UNLIKELY_ATTR
 4104|     54|            return invalid_code_point;
 4105|     54|        }
 4106|  8.24k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 2.09k, False: 6.15k]
  ------------------
 4107|  2.09k|            SCN_UNLIKELY_ATTR
 4108|  2.09k|            return invalid_code_point;
 4109|  2.09k|        }
 4110|       |
 4111|  6.15k|        char32_t cp{};
 4112|  6.15k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  6.15k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  6.15k|        return cp;
 4115|  8.24k|    }
 4116|       |
 4117|  1.78k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 670, False: 1.11k]
  ------------------
 4118|    670|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 48, False: 622]
  ------------------
 4119|     48|            SCN_UNLIKELY_ATTR
 4120|     48|            return invalid_code_point;
 4121|     48|        }
 4122|    622|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 280, False: 342]
  ------------------
 4123|    622|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 221, False: 121]
  ------------------
 4124|    501|            SCN_UNLIKELY_ATTR
 4125|    501|            return invalid_code_point;
 4126|    501|        }
 4127|       |
 4128|    121|        char32_t cp{};
 4129|    121|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    121|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    121|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    121|        return cp;
 4133|    622|    }
 4134|       |
 4135|  1.11k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.11k, False: 0]
  ------------------
 4136|  1.11k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.11k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.11k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 410, False: 701]
  ------------------
 4141|    410|            SCN_UNLIKELY_ATTR
 4142|    410|            return invalid_code_point;
 4143|    410|        }
 4144|    701|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 323, False: 378]
  ------------------
 4145|    701|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 122, False: 256]
  ------------------
 4146|    701|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 129, False: 127]
  ------------------
 4147|    574|            SCN_UNLIKELY_ATTR
 4148|    574|            return invalid_code_point;
 4149|    574|        }
 4150|       |
 4151|    127|        char32_t cp{};
 4152|    127|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    127|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    127|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    127|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    127|        return cp;
 4157|    701|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  10.5k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  10.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  10.5k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   327k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   327k|    else {
 3966|   327k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   327k|                                       to_address(first), to_address(last)))};
 3968|   327k|    }
 3969|   327k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   990k|{
  316|   990k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   990k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   990k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.31M|{
  294|  1.31M|    return p;
  295|  1.31M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   469k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   469k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   469k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   469k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   469k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   469k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  38.5k|    {
 2869|  38.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  38.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  38.5k|    {
 2850|  38.5k|        return decay_copy(t.begin());
 2851|  38.5k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   983k|{
 2094|   983k|    return SCN_FWD(t);
  ------------------
  |  |  936|   983k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   983k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   167k|    {
 2926|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   167k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   167k|    {
 2908|   167k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   167k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.4k|{
 9705|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.4k|                                   make_scan_args(result->values())));
 9708|  13.4k|    return result;
 9709|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9660|  27.7k|{
 9661|  27.7k|    return scan_result_type<Source, Args...>();
 9662|  27.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  27.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  27.7k|        : m_value(T{}), m_has_value(true)
  427|  27.7k|    {
  428|  27.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6610|  27.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|  83.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  83.1k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6384|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  27.7k|{
 9646|  27.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 15.1k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  15.1k|    else {
 9650|  15.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  15.1k|    static_cast<    \
  |  |  935|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  15.1k|    }
 9652|  27.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  83.1k|    {
 1740|  83.1k|        return has_value();
 1741|  83.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   166k|    {
  490|   166k|        return m_has_value;
  491|   166k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  37.7k|    {
 1746|  37.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.7k|        return this->get_unexpected().error();
 1748|  37.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.7k|    {
  473|  37.7k|        return m_unexpected;
  474|  37.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.55M|    {
  365|  3.55M|        return m_unexpected;
  366|  3.55M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.86M|        : m_unexpected(std::forward<Err>(e))
  350|  1.86M|    {
  351|  1.86M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.86M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.86M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  12.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.5k|          m_has_value(false)
  451|  12.5k|    {
  452|  12.5k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.88M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.88M|    {
  360|  1.88M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.88M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.88M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   110k|    {
  490|   110k|        return m_has_value;
  491|   110k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  57.9k|    {
  456|  57.9k|        return m_value;
  457|  57.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  12.5k|    {
  504|  12.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.5k|                                  std::forward<Args>(args)...);
  506|  12.5k|        m_has_value = false;
  507|  12.5k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   226k|{
  396|   226k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   226k|        T(std::forward<Args>(args)...);
  398|   226k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.5k|    {
  473|  12.5k|        return m_unexpected;
  474|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.5k|    {
  481|  12.5k|        return std::move(m_unexpected);
  482|  12.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|  45.3k|    {
 6485|  45.3k|        m_range = std::forward<Other>(r);
 6486|  45.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  45.3k|    {
 1795|  45.3k|        return value();
 1796|  45.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  45.3k|    {
 1769|  45.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  45.3k|        return this->get_value();
 1771|  45.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  45.3k|    {
  456|  45.3k|        return m_value;
  457|  45.3k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  40.3k|{
 9485|  40.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  40.3k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  40.3k|{
 9422|  40.3k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  40.3k|    auto result = vscan_impl(buffer, format, args);
 9425|  40.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 22.6k]
  |  |  ------------------
  ------------------
 9426|  17.6k|        return unexpected(result.error());
 9427|  17.6k|    }
 9428|  22.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  40.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  83.1k|{
 5381|  83.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  83.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  83.1k|                  "\n"
 5385|  83.1k|                  "Unsupported range type given as input to a scanning "
 5386|  83.1k|                  "function.\n"
 5387|  83.1k|                  "A range needs to have a character type (value type) "
 5388|  83.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  83.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  83.1k|                  "to be included.\n"
 5391|  83.1k|                  "See the scnlib documentation for more details.");
 5392|  83.1k|    static_assert(
 5393|  83.1k|        !std::is_same_v<T, custom_char_traits>,
 5394|  83.1k|        "\n"
 5395|  83.1k|        "Unsupported range type given as input to a scanning "
 5396|  83.1k|        "function.\n"
 5397|  83.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  83.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  83.1k|        "not supported.");
 5400|  83.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  83.1k|                  "\n"
 5402|  83.1k|                  "Unsupported range type given as input to a scanning "
 5403|  83.1k|                  "function.\n"
 5404|  83.1k|                  "file_marker_found cannot be used as an "
 5405|  83.1k|                  "source range type to scn::scan.\n"
 5406|  83.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  83.1k|                  "and do not provide an explicit source range, "
 5408|  83.1k|                  "or use scn::scan with a FILE* directly.");
 5409|  83.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  83.1k|                  "\n"
 5411|  83.1k|                  "Unsupported range type given as input to a scanning "
 5412|  83.1k|                  "function.\n"
 5413|  83.1k|                  "In order to be scannable, a range needs to satisfy "
 5414|  83.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  83.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  83.1k|                  "\n"
 5417|  83.1k|                  "Unsupported range type given as input to a scanning "
 5418|  83.1k|                  "function.\n"
 5419|  83.1k|                  "A range needs to model forward_range and have a valid "
 5420|  83.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  83.1k|                  "Examples of scannable ranges are std::string, "
 5422|  83.1k|                  "std::string_view, "
 5423|  83.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  83.1k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  83.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  83.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  83.1k|{
 5320|  83.1k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  83.1k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  83.1k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  83.1k|    {
 3000|  83.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  83.1k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  83.1k|    {
 2981|  83.1k|        return t.data();
 2982|  83.1k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  83.1k|    {
 3383|  83.1k|        return detail::to_address(ranges::begin(derived()));
 3384|  83.1k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   327k|{
  316|   327k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   327k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   128k|    {
 2869|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   128k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   128k|    {
 2850|   128k|        return decay_copy(t.begin());
 2851|   128k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.10M|    {
 3480|  1.10M|        return m_iterator;
 3481|  1.10M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  83.1k|    {
 3339|  83.1k|        return static_cast<const D&>(*this);
 3340|  83.1k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  83.1k|    {
 3075|  83.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  83.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  83.1k|    {
 3041|  83.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  83.1k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   704k|{
 2094|   704k|    return SCN_FWD(t);
  ------------------
  |  |  936|   704k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   704k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   372k|    {
 3496|   372k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   372k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   574k|    {
 1740|   574k|        return has_value();
 1741|   574k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.03M|    {
  490|  1.03M|        return m_has_value;
  491|  1.03M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   226k|    {
 1746|   226k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   226k|        return this->get_unexpected().error();
 1748|   226k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   226k|    {
  473|   226k|        return m_unexpected;
  474|   226k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  37.7k|        : base(unexpect, std::move(e.error())),
 1616|  37.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.7k|    {
 1618|  37.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  37.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.7k|          m_has_value(false)
  451|  37.7k|    {
  452|  37.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  83.1k|    {
 1316|  83.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  45.3k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  45.3k|                      ranges::iterator_t<SourceRange>>) {
 6717|  45.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  45.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   369k|    {
 2869|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   369k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   369k|    {
 2850|   369k|        return decay_copy(t.begin());
 2851|   369k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|  45.3k|{
 6702|  45.3k|    return ranges::end(source);
 6703|  45.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   118k|    {
 2926|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   118k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   118k|    {
 2908|   118k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   118k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   843k|    {
 3484|   843k|        return m_sentinel;
 3485|   843k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   234k|    {
 1795|   234k|        return value();
 1796|   234k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   234k|    {
 1769|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   234k|        return this->get_value();
 1771|   234k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   234k|    {
  456|   234k|        return m_value;
  457|   234k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  45.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  45.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  45.3k|    {
 1572|  45.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  45.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  45.3k|    {
  442|  45.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.8k|    {
 8783|  26.8k|        return m_str;
 8784|  26.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.6k|{
 6115|  58.6k|    detail::check_scan_arg_types<Args...>();
 6116|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5829|   126k|{
 5830|   126k|    constexpr bool default_constructible_constraint =
 5831|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   126k|    static_assert(default_constructible_constraint,
 5833|   126k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   126k|    constexpr bool destructible_constraint =
 5836|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   126k|    static_assert(destructible_constraint,
 5838|   126k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   126k|    constexpr bool non_reference_constraint =
 5841|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   126k|    static_assert(non_reference_constraint,
 5843|   126k|                  "Scan argument types must not be references");
 5844|       |
 5845|   126k|    constexpr bool movable_constraint =
 5846|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   126k|    static_assert(movable_constraint,
 5848|   126k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.6k|    {
 6092|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  58.6k|    {
 6100|  58.6k|        return {detail::make_arg<
 6101|  58.6k|            kind, Context,
 6102|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  58.6k|{
 5889|  58.6k|    return make_value<Context>(value);
 5890|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5814|  60.3k|{
 5815|  60.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  60.3k|    else {
 5822|  60.3k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  60.3k|            value, context_tag<Context>{}));
 5824|  60.3k|    }
 5825|  60.3k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  60.3k|    {
 5720|  60.3k|        return {};
 5721|  60.3k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  60.3k|{
 5784|  60.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  60.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  60.3k|    constexpr bool scannable_char =
 5788|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  60.3k|    static_assert(scannable_char,
 5790|  60.3k|                  "Cannot scan an argument of an unsupported character "
 5791|  60.3k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  60.3k|    constexpr bool scannable_const =
 5794|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  60.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  60.3k|    constexpr bool scannable_disabled =
 5798|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  60.3k|    static_assert(scannable_disabled,
 5800|  60.3k|                  "Cannot scan an argument that has been disabled by "
 5801|  60.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  60.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  60.3k|    static_assert(
 5805|  60.3k|        scannable,
 5806|  60.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  60.3k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  60.3k|    return arg_value{arg};
 5810|  60.3k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  60.3k|        : custom_value{static_cast<void*>(&val.val),
 5603|  60.3k|                       scan_custom_arg<T, Context>}
 5604|  60.3k|    {
 5605|  60.3k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  60.3k|    {
 5621|  60.3k|        static_assert(!is_type_disabled<T>,
 5622|  60.3k|                      "Scanning of custom types is disabled by "
 5623|  60.3k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  60.3k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  60.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  60.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  60.3k|        using context_type = Context;
 5627|  60.3k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  60.3k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  60.3k|        auto s = scanner_type{};
 5631|       |
 5632|  60.3k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  60.3k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  60.3k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  60.3k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  60.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.67k|    }
  ------------------
 5637|  58.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  35.1k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  35.1k|    static_cast<    \
  |  |  935|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  35.1k|        return {};
 5641|  58.6k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  60.3k|{
 5555|  60.3k|#if SCN_HAS_EXCEPTIONS
 5556|  60.3k|    auto fmt_it = pctx.begin();
 5557|  60.3k|    try {
 5558|  60.3k|        fmt_it = s.parse(pctx);
 5559|  60.3k|    }
 5560|  60.3k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  60.3k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  ------------------
  ------------------
 5580|  1.67k|        return e;
 5581|  1.67k|    }
 5582|  58.6k|    pctx.advance_to(fmt_it);
 5583|  58.6k|    return {};
 5584|  60.3k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   889k|    {
 6299|   889k|        return m_format.data();
 6300|   889k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6303|   180k|    {
 6304|   180k|        return m_format.data() + m_format.size();
 6305|   180k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6344|  5.03k|    {
 6345|  5.03k|        m_error = unexpected(detail::handle_error(
 6346|  5.03k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  5.03k|        return m_error.error();
 6348|  5.03k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   879k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   879k|    {
 3742|   879k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   879k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   879k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  15.1k|        : m_unexpected(std::forward<Err>(e))
  350|  15.1k|    {
  351|  15.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.1k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.38M|    {
  572|  5.38M|        return m_has_value;
  573|  5.38M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   577k|{
 4308|       |    // Pattern_White_Space property
 4309|   577k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 498k, False: 79.4k]
  |  Branch (4309:27): [True: 7.65k, False: 490k]
  ------------------
 4310|   577k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 271k, False: 298k]
  ------------------
 4311|   577k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 6.90k, False: 291k]
  ------------------
 4312|   577k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 291k]
  ------------------
 4313|   577k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 1.00k, False: 290k]
  ------------------
 4314|   577k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 288, False: 289k]
  ------------------
 4315|   577k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 289k]
  ------------------
 4316|   577k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   337k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   337k|    else {
 3981|   337k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   337k|    }
 3983|   337k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6351|   180k|    {
 6352|   180k|        return m_error;
 6353|   180k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   351k|    {
 6310|   351k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   351k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  3.84M|    {
 1740|  3.84M|        return has_value();
 1741|  3.84M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   675k|    {
 1746|   675k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   675k|        return this->get_unexpected().error();
 1748|   675k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   675k|    {
  555|   675k|        return m_unexpected;
  556|   675k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   660k|        : base(unexpect, std::move(e.error())),
 1616|   660k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   660k|    {
 1618|   660k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   660k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   660k|          m_has_value(false)
  550|   660k|    {
  551|   660k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   660k|    {
 1316|   660k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   449k|    {
 1740|   449k|        return has_value();
 1741|   449k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   898k|    {
  490|   898k|        return m_has_value;
  491|   898k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   144k|    {
 1746|   144k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   144k|        return this->get_unexpected().error();
 1748|   144k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   144k|    {
  473|   144k|        return m_unexpected;
  474|   144k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   199k|    {
 1805|   199k|        return std::move(value());
 1806|   199k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   304k|    {
 1769|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   304k|        return this->get_value();
 1771|   304k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   304k|    {
  456|   304k|        return m_value;
  457|   304k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   259k|    {
 8986|   259k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   259k|    static_cast<    \
  |  |  935|   259k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   259k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.97M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.97M|        : m_deferred_init(), m_has_value(true)
  529|  1.97M|    {
  530|  1.97M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  60.3k|    {
 5728|  60.3k|        return {val};
 5729|  60.3k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6393|   121k|    {
 6394|   121k|        return m_values;
 6395|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.6k|    {
 6142|  58.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6197|   175k|        : m_desc(desc), m_values(data)
 6198|   175k|    {
 6199|   175k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   614k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   614k|    static_cast<    \
  |  |  935|   614k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   614k|    static_cast<    \
  |  |  935|   614k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   614k|    {
 3466|   614k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   175k|{
 8444|   175k|    return s;
 8445|   175k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   175k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.8k|        : m_str(r.str)
 8778|  26.8k|    {
 8779|  26.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  27.7k|    {
 1740|  27.7k|        return has_value();
 1741|  27.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  57.9k|    {
 1815|  57.9k|        return &value();
 1816|  57.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.9k|    {
 1769|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.9k|        return this->get_value();
 1771|  57.9k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|  45.3k|    {
 6474|  45.3k|        return ranges::begin(m_range);
 6475|  45.3k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.4k|{
 9774|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.4k|                                   make_scan_args(result->values())));
 9777|  13.4k|    return result;
 9778|  13.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  40.3k|{
 9503|  40.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  40.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  40.3k|{
 9438|  40.3k|#if !SCN_DISABLE_LOCALE
 9439|  40.3k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  40.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  40.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  40.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  40.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 22.6k]
  |  |  ------------------
  ------------------
 9446|  17.6k|        return unexpected(result.error());
 9447|  17.6k|    }
 9448|  22.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  40.3k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  2.51k|{
 9516|  2.51k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.51k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.51k|{
 9462|  2.51k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.51k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.51k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.51k|        return unexpected(result.error());
 9467|  2.51k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.51k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.67k|{
 5865|  1.67k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.67k|    basic_scan_arg<Context> arg;
 5868|  1.67k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.67k|    arg.m_value = make_value<Context>(value);
 5870|  1.67k|    return arg;
 5871|  1.67k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   180k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|   378k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  5.03k|    {
 6416|  5.03k|        return std::get<0>(m_values);
 6417|  5.03k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.4k|{
 9705|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.4k|                                   make_scan_args(result->values())));
 9708|  13.4k|    return result;
 9709|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  27.7k|{
 9661|  27.7k|    return scan_result_type<Source, Args...>();
 9662|  27.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  27.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.7k|    {
  613|  27.7k|        construct();
  614|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.7k|    {
  694|  27.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.7k|        m_has_value = true;
  696|  27.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  27.7k|{
  396|  27.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.7k|        T(std::forward<Args>(args)...);
  398|  27.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  27.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6384|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   113k|    {
  718|   113k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   113k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   113k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  27.7k|{
 9646|  27.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 15.1k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  15.1k|    else {
 9650|  15.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  15.1k|    static_cast<    \
  |  |  935|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  15.1k|    }
 9652|  27.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.5k|        : m_has_value(false)
  637|  12.5k|    {
  638|  12.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   151k|{
  396|   151k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   151k|        T(std::forward<Args>(args)...);
  398|   151k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  62.9k|    {
  730|  62.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  62.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  62.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  62.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   151k|    {
  687|   151k|        return m_has_value;
  688|   151k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.9k|    {
  653|  57.9k|        return *value_ptr();
  654|  57.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.7k|    {
  708|  27.7k|        scn::detail::destroy_at(value_ptr());
  709|  27.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  27.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.7k|    else {
  408|  27.7k|        p->~T();
  409|  27.7k|    }
  410|  27.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  27.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.5k|    {
  678|  12.5k|        return std::move(*unexpected_ptr());
  679|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.1k|    {
  712|  25.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.1k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   302k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   302k|    else {
  408|   302k|        p->~T();
  409|   302k|    }
  410|   302k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.8k|    {
 8783|  26.8k|        return m_str;
 8784|  26.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.6k|{
 6115|  58.6k|    detail::check_scan_arg_types<Args...>();
 6116|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5829|   126k|{
 5830|   126k|    constexpr bool default_constructible_constraint =
 5831|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   126k|    static_assert(default_constructible_constraint,
 5833|   126k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   126k|    constexpr bool destructible_constraint =
 5836|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   126k|    static_assert(destructible_constraint,
 5838|   126k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   126k|    constexpr bool non_reference_constraint =
 5841|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   126k|    static_assert(non_reference_constraint,
 5843|   126k|                  "Scan argument types must not be references");
 5844|       |
 5845|   126k|    constexpr bool movable_constraint =
 5846|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   126k|    static_assert(movable_constraint,
 5848|   126k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.6k|    {
 6092|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  58.6k|    {
 6100|  58.6k|        return {detail::make_arg<
 6101|  58.6k|            kind, Context,
 6102|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  58.6k|{
 5889|  58.6k|    return make_value<Context>(value);
 5890|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5814|  60.3k|{
 5815|  60.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  60.3k|    else {
 5822|  60.3k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  60.3k|            value, context_tag<Context>{}));
 5824|  60.3k|    }
 5825|  60.3k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  60.3k|    {
 5720|  60.3k|        return {};
 5721|  60.3k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  60.3k|{
 5784|  60.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  60.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  60.3k|    constexpr bool scannable_char =
 5788|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  60.3k|    static_assert(scannable_char,
 5790|  60.3k|                  "Cannot scan an argument of an unsupported character "
 5791|  60.3k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  60.3k|    constexpr bool scannable_const =
 5794|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  60.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  60.3k|    constexpr bool scannable_disabled =
 5798|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  60.3k|    static_assert(scannable_disabled,
 5800|  60.3k|                  "Cannot scan an argument that has been disabled by "
 5801|  60.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  60.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  60.3k|    static_assert(
 5805|  60.3k|        scannable,
 5806|  60.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  60.3k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  60.3k|    return arg_value{arg};
 5810|  60.3k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  60.3k|        : custom_value{static_cast<void*>(&val.val),
 5603|  60.3k|                       scan_custom_arg<T, Context>}
 5604|  60.3k|    {
 5605|  60.3k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  60.3k|    {
 5621|  60.3k|        static_assert(!is_type_disabled<T>,
 5622|  60.3k|                      "Scanning of custom types is disabled by "
 5623|  60.3k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  60.3k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  60.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  60.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  60.3k|        using context_type = Context;
 5627|  60.3k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  60.3k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  60.3k|        auto s = scanner_type{};
 5631|       |
 5632|  60.3k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  60.3k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  60.3k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  60.3k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  60.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.67k|    }
  ------------------
 5637|  58.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  35.1k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  35.1k|    static_cast<    \
  |  |  935|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  35.1k|        return {};
 5641|  58.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  60.3k|{
 5555|  60.3k|#if SCN_HAS_EXCEPTIONS
 5556|  60.3k|    auto fmt_it = pctx.begin();
 5557|  60.3k|    try {
 5558|  60.3k|        fmt_it = s.parse(pctx);
 5559|  60.3k|    }
 5560|  60.3k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  60.3k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  ------------------
  ------------------
 5580|  1.67k|        return e;
 5581|  1.67k|    }
 5582|  58.6k|    pctx.advance_to(fmt_it);
 5583|  58.6k|    return {};
 5584|  60.3k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  60.3k|    {
 5728|  60.3k|        return {val};
 5729|  60.3k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6393|   121k|    {
 6394|   121k|        return m_values;
 6395|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.6k|    {
 6142|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.8k|        : m_str(r.str)
 8778|  26.8k|    {
 8779|  26.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  27.7k|    {
 1740|  27.7k|        return has_value();
 1741|  27.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  57.9k|    {
 1815|  57.9k|        return &value();
 1816|  57.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.9k|    {
 1769|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.9k|        return this->get_value();
 1771|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  40.3k|    {
  643|  40.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 15.1k, False: 25.1k]
  ------------------
  644|  15.1k|            destroy_value();
  645|  15.1k|        }
  646|  25.1k|        else {
  647|  25.1k|            destroy_unexpected();
  648|  25.1k|        }
  649|  40.3k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.4k|{
 9774|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.4k|                                   make_scan_args(result->values())));
 9777|  13.4k|    return result;
 9778|  13.4k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.67k|{
 5865|  1.67k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.67k|    basic_scan_arg<Context> arg;
 5868|  1.67k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.67k|    arg.m_value = make_value<Context>(value);
 5870|  1.67k|    return arg;
 5871|  1.67k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  5.03k|    {
 6416|  5.03k|        return std::get<0>(m_values);
 6417|  5.03k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.4k|{
 9705|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.4k|                                   make_scan_args(result->values())));
 9708|  13.4k|    return result;
 9709|  13.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  27.7k|{
 9661|  27.7k|    return scan_result_type<Source, Args...>();
 9662|  27.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  27.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  27.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  27.7k|    {
  613|  27.7k|        construct();
  614|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  27.7k|    {
  694|  27.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  27.7k|        m_has_value = true;
  696|  27.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  27.7k|{
  396|  27.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  27.7k|        T(std::forward<Args>(args)...);
  398|  27.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  27.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6384|   126k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   113k|    {
  718|   113k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   113k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   113k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  27.7k|{
 9646|  27.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 15.1k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  15.1k|    else {
 9650|  15.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  15.1k|    static_cast<    \
  |  |  935|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  15.1k|    }
 9652|  27.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.5k|        : m_has_value(false)
  637|  12.5k|    {
  638|  12.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  62.9k|    {
  730|  62.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  62.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  62.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  62.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   151k|    {
  687|   151k|        return m_has_value;
  688|   151k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.9k|    {
  653|  57.9k|        return *value_ptr();
  654|  57.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  27.7k|    {
  708|  27.7k|        scn::detail::destroy_at(value_ptr());
  709|  27.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  27.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  27.7k|    else {
  408|  27.7k|        p->~T();
  409|  27.7k|    }
  410|  27.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  27.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.5k|    {
  678|  12.5k|        return std::move(*unexpected_ptr());
  679|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.1k|    {
  712|  25.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.8k|    {
 8783|  26.8k|        return m_str;
 8784|  26.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  58.6k|{
 6115|  58.6k|    detail::check_scan_arg_types<Args...>();
 6116|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  58.6k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5829|   126k|{
 5830|   126k|    constexpr bool default_constructible_constraint =
 5831|   126k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   126k|    static_assert(default_constructible_constraint,
 5833|   126k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   126k|    constexpr bool destructible_constraint =
 5836|   126k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   126k|    static_assert(destructible_constraint,
 5838|   126k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   126k|    constexpr bool non_reference_constraint =
 5841|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   126k|    static_assert(non_reference_constraint,
 5843|   126k|                  "Scan argument types must not be references");
 5844|       |
 5845|   126k|    constexpr bool movable_constraint =
 5846|   126k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   126k|    static_assert(movable_constraint,
 5848|   126k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   126k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   126k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   126k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  58.6k|    {
 6092|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  58.6k|    {
 6100|  58.6k|        return {detail::make_arg<
 6101|  58.6k|            kind, Context,
 6102|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6104|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  58.6k|{
 5889|  58.6k|    return make_value<Context>(value);
 5890|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5814|  60.3k|{
 5815|  60.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  60.3k|    else {
 5822|  60.3k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  60.3k|            value, context_tag<Context>{}));
 5824|  60.3k|    }
 5825|  60.3k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  60.3k|    {
 5720|  60.3k|        return {};
 5721|  60.3k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  60.3k|{
 5784|  60.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  60.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  60.3k|    constexpr bool scannable_char =
 5788|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  60.3k|    static_assert(scannable_char,
 5790|  60.3k|                  "Cannot scan an argument of an unsupported character "
 5791|  60.3k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  60.3k|    constexpr bool scannable_const =
 5794|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  60.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  60.3k|    constexpr bool scannable_disabled =
 5798|  60.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  60.3k|    static_assert(scannable_disabled,
 5800|  60.3k|                  "Cannot scan an argument that has been disabled by "
 5801|  60.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  60.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  60.3k|    static_assert(
 5805|  60.3k|        scannable,
 5806|  60.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  60.3k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  60.3k|    return arg_value{arg};
 5810|  60.3k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  60.3k|        : custom_value{static_cast<void*>(&val.val),
 5603|  60.3k|                       scan_custom_arg<T, Context>}
 5604|  60.3k|    {
 5605|  60.3k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  60.3k|    {
 5621|  60.3k|        static_assert(!is_type_disabled<T>,
 5622|  60.3k|                      "Scanning of custom types is disabled by "
 5623|  60.3k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  60.3k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  60.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  60.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  60.3k|        using context_type = Context;
 5627|  60.3k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  60.3k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  60.3k|        auto s = scanner_type{};
 5631|       |
 5632|  60.3k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  60.3k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  60.3k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  60.3k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  60.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.67k|    }
  ------------------
 5637|  58.6k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  35.1k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  35.1k|    static_cast<    \
  |  |  935|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  35.1k|        return {};
 5641|  58.6k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  60.3k|{
 5555|  60.3k|#if SCN_HAS_EXCEPTIONS
 5556|  60.3k|    auto fmt_it = pctx.begin();
 5557|  60.3k|    try {
 5558|  60.3k|        fmt_it = s.parse(pctx);
 5559|  60.3k|    }
 5560|  60.3k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  60.3k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.67k, False: 58.6k]
  |  |  ------------------
  ------------------
 5580|  1.67k|        return e;
 5581|  1.67k|    }
 5582|  58.6k|    pctx.advance_to(fmt_it);
 5583|  58.6k|    return {};
 5584|  60.3k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  60.3k|    {
 5728|  60.3k|        return {val};
 5729|  60.3k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6393|   121k|    {
 6394|   121k|        return m_values;
 6395|   121k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6141|  58.6k|    {
 6142|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.8k|        : m_str(r.str)
 8778|  26.8k|    {
 8779|  26.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  27.7k|    {
 1740|  27.7k|        return has_value();
 1741|  27.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  57.9k|    {
 1815|  57.9k|        return &value();
 1816|  57.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  57.9k|    {
 1769|  57.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  57.9k|        return this->get_value();
 1771|  57.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  40.3k|    {
  643|  40.3k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 15.1k, False: 25.1k]
  ------------------
  644|  15.1k|            destroy_value();
  645|  15.1k|        }
  646|  25.1k|        else {
  647|  25.1k|            destroy_unexpected();
  648|  25.1k|        }
  649|  40.3k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.4k|{
 9774|  13.4k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.4k|                                   make_scan_args(result->values())));
 9777|  13.4k|    return result;
 9778|  13.4k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.67k|{
 5865|  1.67k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.67k|    basic_scan_arg<Context> arg;
 5868|  1.67k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.67k|    arg.m_value = make_value<Context>(value);
 5870|  1.67k|    return arg;
 5871|  1.67k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  5.03k|    {
 6416|  5.03k|        return std::get<0>(m_values);
 6417|  5.03k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  37.7k|    {
 2869|  37.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  37.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  37.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  37.7k|    {
 2850|  37.7k|        return decay_copy(t.begin());
 2851|  37.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  2.70M|{
 2094|  2.70M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.70M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   195k|    {
 2926|   195k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   195k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   195k|    {
 2908|   195k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   195k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.8k|{
 9705|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.8k|                                   make_scan_args(result->values())));
 9708|  15.8k|    return result;
 9709|  15.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9660|  32.5k|{
 9661|  32.5k|    return scan_result_type<Source, Args...>();
 9662|  32.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  32.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.5k|        : m_value(T{}), m_has_value(true)
  427|  32.5k|    {
  428|  32.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6610|  32.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  97.7k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  97.7k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.5k|{
 9646|  32.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 19.9k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  19.9k|    else {
 9650|  19.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.9k|    static_cast<    \
  |  |  935|  19.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.9k|    }
 9652|  32.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  97.7k|    {
 1740|  97.7k|        return has_value();
 1741|  97.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   195k|    {
  490|   195k|        return m_has_value;
  491|   195k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  37.7k|    {
 1746|  37.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.7k|        return this->get_unexpected().error();
 1748|  37.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.7k|    {
  473|  37.7k|        return m_unexpected;
  474|  37.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  12.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.5k|          m_has_value(false)
  451|  12.5k|    {
  452|  12.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   130k|    {
  490|   130k|        return m_has_value;
  491|   130k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  72.5k|    {
  456|  72.5k|        return m_value;
  457|  72.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  12.5k|    {
  504|  12.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.5k|                                  std::forward<Args>(args)...);
  506|  12.5k|        m_has_value = false;
  507|  12.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.5k|    {
  473|  12.5k|        return m_unexpected;
  474|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.5k|    {
  481|  12.5k|        return std::move(m_unexpected);
  482|  12.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  59.9k|    {
 6485|  59.9k|        m_range = std::forward<Other>(r);
 6486|  59.9k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  59.9k|    {
 1795|  59.9k|        return value();
 1796|  59.9k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  59.9k|    {
 1769|  59.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  59.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  59.9k|        return this->get_value();
 1771|  59.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  59.9k|    {
  456|  59.9k|        return m_value;
  457|  59.9k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  47.6k|{
 9485|  47.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  47.6k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  47.6k|{
 9422|  47.6k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  47.6k|    auto result = vscan_impl(buffer, format, args);
 9425|  47.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 29.9k]
  |  |  ------------------
  ------------------
 9426|  17.6k|        return unexpected(result.error());
 9427|  17.6k|    }
 9428|  29.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  47.6k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  97.7k|{
 5381|  97.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  97.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  97.7k|                  "\n"
 5385|  97.7k|                  "Unsupported range type given as input to a scanning "
 5386|  97.7k|                  "function.\n"
 5387|  97.7k|                  "A range needs to have a character type (value type) "
 5388|  97.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  97.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  97.7k|                  "to be included.\n"
 5391|  97.7k|                  "See the scnlib documentation for more details.");
 5392|  97.7k|    static_assert(
 5393|  97.7k|        !std::is_same_v<T, custom_char_traits>,
 5394|  97.7k|        "\n"
 5395|  97.7k|        "Unsupported range type given as input to a scanning "
 5396|  97.7k|        "function.\n"
 5397|  97.7k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  97.7k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  97.7k|        "not supported.");
 5400|  97.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  97.7k|                  "\n"
 5402|  97.7k|                  "Unsupported range type given as input to a scanning "
 5403|  97.7k|                  "function.\n"
 5404|  97.7k|                  "file_marker_found cannot be used as an "
 5405|  97.7k|                  "source range type to scn::scan.\n"
 5406|  97.7k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  97.7k|                  "and do not provide an explicit source range, "
 5408|  97.7k|                  "or use scn::scan with a FILE* directly.");
 5409|  97.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  97.7k|                  "\n"
 5411|  97.7k|                  "Unsupported range type given as input to a scanning "
 5412|  97.7k|                  "function.\n"
 5413|  97.7k|                  "In order to be scannable, a range needs to satisfy "
 5414|  97.7k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  97.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  97.7k|                  "\n"
 5417|  97.7k|                  "Unsupported range type given as input to a scanning "
 5418|  97.7k|                  "function.\n"
 5419|  97.7k|                  "A range needs to model forward_range and have a valid "
 5420|  97.7k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  97.7k|                  "Examples of scannable ranges are std::string, "
 5422|  97.7k|                  "std::string_view, "
 5423|  97.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  97.7k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  97.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  97.7k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  97.7k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  97.7k|    else {
 5366|  97.7k|        return make_forward_scan_buffer(r);
 5367|  97.7k|    }
 5368|  97.7k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  97.7k|{
 5185|  97.7k|    return basic_scan_forward_buffer_impl(range);
 5186|  97.7k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  97.7k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  97.7k|          m_cursor(ranges::begin(*m_range))
 4766|  97.7k|    {
 4767|  97.7k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  97.7k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  97.7k|    {
 4738|  97.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  97.7k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  97.7k|    {
 4429|  97.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   178k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   157k|    {
 2869|   157k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   157k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   157k|    {
 2850|   157k|        return decay_copy(t.begin());
 2851|   157k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   217k|    {
 3480|   217k|        return m_iterator;
 3481|   217k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   741k|    {
 4771|   741k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 14.5k, False: 727k]
  ------------------
 4772|  14.5k|            return false;
 4773|  14.5k|        }
 4774|   727k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   727k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   727k|        }
 4777|   727k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 632k, False: 95.0k]
  ------------------
 4778|   632k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   632k|                                          this->m_current_view.begin(),
 4780|   632k|                                          this->m_current_view.end());
 4781|   632k|        }
 4782|   727k|        m_latest = *m_cursor;
 4783|   727k|        ++m_cursor;
 4784|   727k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   727k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   727k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   727k|        }
 4788|   727k|        return true;
 4789|   741k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.19M|    {
 2926|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.19M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.19M|    {
 2908|  2.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.19M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.25M|    {
 3484|  2.25M|        return m_sentinel;
 3485|  2.25M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  97.7k|    {
 4346|  97.7k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  97.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  97.7k|        return true;
 4348|  97.7k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  37.7k|        : base(unexpect, std::move(e.error())),
 1616|  37.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.7k|    {
 1618|  37.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  37.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.7k|          m_has_value(false)
  451|  37.7k|    {
  452|  37.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  97.7k|    {
 1316|  97.7k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  59.9k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  59.9k|                      ranges::iterator_t<SourceRange>>) {
 6717|  59.9k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  59.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  59.9k|    {
 2869|  59.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  59.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  59.9k|    {
 2850|  59.9k|        return decay_copy(t.begin());
 2851|  59.9k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|  59.9k|{
 6702|  59.9k|    return ranges::end(source);
 6703|  59.9k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  59.9k|    {
 2926|  59.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  59.9k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  59.9k|    {
 2908|  59.9k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  59.9k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  59.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  59.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  59.9k|    {
 1572|  59.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  59.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  59.9k|    {
  442|  59.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.7k|    {
 8783|  31.7k|        return m_str;
 8784|  31.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   157k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   157k|    static_cast<    \
  |  |  935|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   157k|    {
 3466|   157k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.7k|        : m_str(r.str)
 8778|  31.7k|    {
 8779|  31.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  32.5k|    {
 1740|  32.5k|        return has_value();
 1741|  32.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  72.5k|    {
 1815|  72.5k|        return &value();
 1816|  72.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  72.5k|    {
 1769|  72.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  72.5k|        return this->get_value();
 1771|  72.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|  59.9k|    {
 6474|  59.9k|        return ranges::begin(m_range);
 6475|  59.9k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.8k|{
 9774|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.8k|                                   make_scan_args(result->values())));
 9777|  15.8k|    return result;
 9778|  15.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  47.6k|{
 9503|  47.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  47.6k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  47.6k|{
 9438|  47.6k|#if !SCN_DISABLE_LOCALE
 9439|  47.6k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  47.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  47.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  47.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  47.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 29.9k]
  |  |  ------------------
  ------------------
 9446|  17.6k|        return unexpected(result.error());
 9447|  17.6k|    }
 9448|  29.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  47.6k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  2.51k|{
 9516|  2.51k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.51k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.51k|{
 9462|  2.51k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.51k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.51k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.51k|        return unexpected(result.error());
 9467|  2.51k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.51k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.8k|{
 9705|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.8k|                                   make_scan_args(result->values())));
 9708|  15.8k|    return result;
 9709|  15.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  32.5k|{
 9661|  32.5k|    return scan_result_type<Source, Args...>();
 9662|  32.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  32.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.5k|    {
  613|  32.5k|        construct();
  614|  32.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.5k|    {
  694|  32.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.5k|        m_has_value = true;
  696|  32.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  32.5k|{
  396|  32.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.5k|        T(std::forward<Args>(args)...);
  398|  32.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  32.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   137k|    {
  718|   137k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   137k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   137k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.5k|{
 9646|  32.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 19.9k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  19.9k|    else {
 9650|  19.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.9k|    static_cast<    \
  |  |  935|  19.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.9k|    }
 9652|  32.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.5k|        : m_has_value(false)
  637|  12.5k|    {
  638|  12.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  62.9k|    {
  730|  62.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  62.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  62.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  62.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   175k|    {
  687|   175k|        return m_has_value;
  688|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  72.5k|    {
  653|  72.5k|        return *value_ptr();
  654|  72.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.5k|    {
  708|  32.5k|        scn::detail::destroy_at(value_ptr());
  709|  32.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.5k|    else {
  408|  32.5k|        p->~T();
  409|  32.5k|    }
  410|  32.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  32.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.5k|    {
  678|  12.5k|        return std::move(*unexpected_ptr());
  679|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.1k|    {
  712|  25.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.7k|    {
 8783|  31.7k|        return m_str;
 8784|  31.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.7k|        : m_str(r.str)
 8778|  31.7k|    {
 8779|  31.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  32.5k|    {
 1740|  32.5k|        return has_value();
 1741|  32.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  72.5k|    {
 1815|  72.5k|        return &value();
 1816|  72.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  72.5k|    {
 1769|  72.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  72.5k|        return this->get_value();
 1771|  72.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  45.1k|    {
  643|  45.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.9k, False: 25.1k]
  ------------------
  644|  19.9k|            destroy_value();
  645|  19.9k|        }
  646|  25.1k|        else {
  647|  25.1k|            destroy_unexpected();
  648|  25.1k|        }
  649|  45.1k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.8k|{
 9774|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.8k|                                   make_scan_args(result->values())));
 9777|  15.8k|    return result;
 9778|  15.8k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.8k|{
 9705|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.8k|                                   make_scan_args(result->values())));
 9708|  15.8k|    return result;
 9709|  15.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  32.5k|{
 9661|  32.5k|    return scan_result_type<Source, Args...>();
 9662|  32.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  32.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.5k|    {
  613|  32.5k|        construct();
  614|  32.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.5k|    {
  694|  32.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.5k|        m_has_value = true;
  696|  32.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  32.5k|{
  396|  32.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.5k|        T(std::forward<Args>(args)...);
  398|  32.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  32.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   137k|    {
  718|   137k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   137k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   137k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.5k|{
 9646|  32.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 19.9k]
  |  |  ------------------
  ------------------
 9647|  12.5k|        out = unexpected(in.error());
 9648|  12.5k|    }
 9649|  19.9k|    else {
 9650|  19.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.9k|    static_cast<    \
  |  |  935|  19.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.9k|    }
 9652|  32.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.5k|        : base(unexpect, std::move(e.error())),
 1616|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.5k|    {
 1618|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.5k|        : m_has_value(false)
  637|  12.5k|    {
  638|  12.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  62.9k|    {
  730|  62.9k|        return reinterpret_cast<unexpected<E>*>(
  731|  62.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  62.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  62.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.5k|    {
 1316|  12.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.5k|    {
  903|  12.5k|        assign_common(std::move(other));
  904|  12.5k|        return *this;
  905|  12.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.5k|    {
  950|  12.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.5k, False: 0]
  ------------------
  951|  12.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   175k|    {
  687|   175k|        return m_has_value;
  688|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  72.5k|    {
  653|  72.5k|        return *value_ptr();
  654|  72.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.5k|    {
 1046|  12.5k|        this->destroy_value();
 1047|  12.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.5k|    {
  708|  32.5k|        scn::detail::destroy_at(value_ptr());
  709|  32.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.5k|    else {
  408|  32.5k|        p->~T();
  409|  32.5k|    }
  410|  32.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  32.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.5k|    {
  701|  12.5k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.5k|                                  std::forward<Args>(args)...);
  703|  12.5k|        m_has_value = false;
  704|  12.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.5k|    {
  678|  12.5k|        return std::move(*unexpected_ptr());
  679|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  25.1k|    {
  712|  25.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  25.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.7k|    {
 8783|  31.7k|        return m_str;
 8784|  31.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.7k|        : m_str(r.str)
 8778|  31.7k|    {
 8779|  31.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  32.5k|    {
 1740|  32.5k|        return has_value();
 1741|  32.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  72.5k|    {
 1815|  72.5k|        return &value();
 1816|  72.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  72.5k|    {
 1769|  72.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  72.5k|        return this->get_value();
 1771|  72.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  45.1k|    {
  643|  45.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.9k, False: 25.1k]
  ------------------
  644|  19.9k|            destroy_value();
  645|  19.9k|        }
  646|  25.1k|        else {
  647|  25.1k|            destroy_unexpected();
  648|  25.1k|        }
  649|  45.1k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.8k|{
 9774|  15.8k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.8k|                                   make_scan_args(result->values())));
 9777|  15.8k|    return result;
 9778|  15.8k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    839|{
 9815|    839|    auto result = make_scan_result<Source, T>();
 9816|    839|    fill_scan_result(
 9817|    839|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    839|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    839|                            detail::make_arg<scan_context>(result->value())));
 9819|    839|    return result;
 9820|    839|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  77.1k|    {
 2869|  77.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  77.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  77.1k|    {
 2850|  77.1k|        return decay_copy(t.begin());
 2851|  77.1k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  1.00M|{
 2094|  1.00M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.00M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   198k|    {
 2926|   198k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   198k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   198k|    {
 2908|   198k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   198k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.8k|        : m_value(T{}), m_has_value(true)
  427|  32.8k|    {
  428|  32.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  98.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  98.6k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  98.6k|    {
 1740|  98.6k|        return has_value();
 1741|  98.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   197k|    {
  490|   197k|        return m_has_value;
  491|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  75.5k|    {
 1746|  75.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.5k|        return this->get_unexpected().error();
 1748|  75.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.5k|    {
  473|  75.5k|        return m_unexpected;
  474|  75.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  25.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  25.1k|          m_has_value(false)
  451|  25.1k|    {
  452|  25.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   131k|    {
  490|   131k|        return m_has_value;
  491|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  48.2k|    {
  456|  48.2k|        return m_value;
  457|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  25.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  25.1k|    {
  504|  25.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  25.1k|                                  std::forward<Args>(args)...);
  506|  25.1k|        m_has_value = false;
  507|  25.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  25.1k|    {
  473|  25.1k|        return m_unexpected;
  474|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  25.1k|    {
  481|  25.1k|        return std::move(m_unexpected);
  482|  25.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  23.1k|    {
 6485|  23.1k|        m_range = std::forward<Other>(r);
 6486|  23.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  23.1k|    {
 1795|  23.1k|        return value();
 1796|  23.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  23.1k|    {
 1769|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  23.1k|        return this->get_value();
 1771|  23.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.1k|    {
  456|  23.1k|        return m_value;
  457|  23.1k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  46.7k|{
 9422|  46.7k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  46.7k|    auto result = vscan_impl(buffer, format, args);
 9425|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 11.5k]
  |  |  ------------------
  ------------------
 9426|  35.2k|        return unexpected(result.error());
 9427|  35.2k|    }
 9428|  11.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  46.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  98.6k|{
 5381|  98.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  98.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  98.6k|                  "\n"
 5385|  98.6k|                  "Unsupported range type given as input to a scanning "
 5386|  98.6k|                  "function.\n"
 5387|  98.6k|                  "A range needs to have a character type (value type) "
 5388|  98.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  98.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  98.6k|                  "to be included.\n"
 5391|  98.6k|                  "See the scnlib documentation for more details.");
 5392|  98.6k|    static_assert(
 5393|  98.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  98.6k|        "\n"
 5395|  98.6k|        "Unsupported range type given as input to a scanning "
 5396|  98.6k|        "function.\n"
 5397|  98.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  98.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  98.6k|        "not supported.");
 5400|  98.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  98.6k|                  "\n"
 5402|  98.6k|                  "Unsupported range type given as input to a scanning "
 5403|  98.6k|                  "function.\n"
 5404|  98.6k|                  "file_marker_found cannot be used as an "
 5405|  98.6k|                  "source range type to scn::scan.\n"
 5406|  98.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  98.6k|                  "and do not provide an explicit source range, "
 5408|  98.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  98.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  98.6k|                  "\n"
 5411|  98.6k|                  "Unsupported range type given as input to a scanning "
 5412|  98.6k|                  "function.\n"
 5413|  98.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  98.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  98.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  98.6k|                  "\n"
 5417|  98.6k|                  "Unsupported range type given as input to a scanning "
 5418|  98.6k|                  "function.\n"
 5419|  98.6k|                  "A range needs to model forward_range and have a valid "
 5420|  98.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  98.6k|                  "Examples of scannable ranges are std::string, "
 5422|  98.6k|                  "std::string_view, "
 5423|  98.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  98.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  98.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  98.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  98.6k|{
 5320|  98.6k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  98.6k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  98.6k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  98.6k|    {
 3000|  98.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  98.6k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  98.6k|    {
 2981|  98.6k|        return t.data();
 2982|  98.6k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  98.6k|    {
 3383|  98.6k|        return detail::to_address(ranges::begin(derived()));
 3384|  98.6k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   290k|{
  316|   290k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   290k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   290k|{
  294|   290k|    return p;
  295|   290k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   121k|    {
 2869|   121k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   121k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   121k|    {
 2850|   121k|        return decay_copy(t.begin());
 2851|   121k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.74M|    {
 3480|  1.74M|        return m_iterator;
 3481|  1.74M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  98.6k|    {
 3339|  98.6k|        return static_cast<const D&>(*this);
 3340|  98.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  98.6k|    {
 3075|  98.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  98.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  98.6k|    {
 3041|  98.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  98.6k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   313k|    {
 3496|   313k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   313k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  75.5k|        : base(unexpect, std::move(e.error())),
 1616|  75.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  75.5k|    {
 1618|  75.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  75.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.5k|          m_has_value(false)
  451|  75.5k|    {
  452|  75.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  98.6k|    {
 1316|  98.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  23.1k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  23.1k|                      ranges::iterator_t<SourceRange>>) {
 6717|  23.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  23.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   307k|    {
 2869|   307k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   307k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   307k|    {
 2850|   307k|        return decay_copy(t.begin());
 2851|   307k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  23.1k|{
 6702|  23.1k|    return ranges::end(source);
 6703|  23.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   115k|    {
 2926|   115k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   115k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   115k|    {
 2908|   115k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   115k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  1.38M|    {
 3484|  1.38M|        return m_sentinel;
 3485|  1.38M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  23.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  23.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  23.1k|    {
 1572|  23.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  23.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.1k|    {
  442|  23.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  62.3k|{
 6115|  62.3k|    detail::check_scan_arg_types<Args...>();
 6116|  62.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  62.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  62.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  62.3k|    {
 6092|  62.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  62.3k|    {
 6100|  62.3k|        return {detail::make_arg<
 6101|  62.3k|            kind, Context,
 6102|  62.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  62.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  62.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  62.3k|{
 5889|  62.3k|    return make_value<Context>(value);
 5890|  62.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5814|  65.7k|{
 5815|  65.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  65.7k|    else {
 5822|  65.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  65.7k|            value, context_tag<Context>{}));
 5824|  65.7k|    }
 5825|  65.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  65.7k|    {
 5720|  65.7k|        return {};
 5721|  65.7k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  65.7k|{
 5784|  65.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  65.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  65.7k|    constexpr bool scannable_char =
 5788|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  65.7k|    static_assert(scannable_char,
 5790|  65.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  65.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  65.7k|    constexpr bool scannable_const =
 5794|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  65.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  65.7k|    constexpr bool scannable_disabled =
 5798|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  65.7k|    static_assert(scannable_disabled,
 5800|  65.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  65.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  65.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  65.7k|    static_assert(
 5805|  65.7k|        scannable,
 5806|  65.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  65.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  65.7k|    return arg_value{arg};
 5810|  65.7k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  65.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  65.7k|                       scan_custom_arg<T, Context>}
 5604|  65.7k|    {
 5605|  65.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  65.7k|    {
 5621|  65.7k|        static_assert(!is_type_disabled<T>,
 5622|  65.7k|                      "Scanning of custom types is disabled by "
 5623|  65.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  65.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  65.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  65.7k|        using context_type = Context;
 5627|  65.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  65.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  65.7k|        auto s = scanner_type{};
 5631|       |
 5632|  65.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  65.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  65.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  65.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  65.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.35k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.35k|    }
  ------------------
 5637|  62.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.9k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.9k|    }                                                  \
  |  |  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  15.4k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  15.4k|    static_cast<    \
  |  |  935|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  15.4k|        return {};
 5641|  62.3k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  65.7k|{
 5555|  65.7k|#if SCN_HAS_EXCEPTIONS
 5556|  65.7k|    auto fmt_it = pctx.begin();
 5557|  65.7k|    try {
 5558|  65.7k|        fmt_it = s.parse(pctx);
 5559|  65.7k|    }
 5560|  65.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  65.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  ------------------
  ------------------
 5580|  3.35k|        return e;
 5581|  3.35k|    }
 5582|  62.3k|    pctx.advance_to(fmt_it);
 5583|  62.3k|    return {};
 5584|  65.7k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|   955k|    {
 6299|   955k|        return m_format.data();
 6300|   955k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6303|   197k|    {
 6304|   197k|        return m_format.data() + m_format.size();
 6305|   197k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6344|  10.0k|    {
 6345|  10.0k|        m_error = unexpected(detail::handle_error(
 6346|  10.0k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  10.0k|        return m_error.error();
 6348|  10.0k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   461k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   461k|    else {
 4075|       |        // utf-32
 4076|   461k|        static_assert(sizeof(U) == 4);
 4077|   461k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   461k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   461k|        return 1;
 4079|   461k|    }
 4080|   461k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   360k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   360k|    else {
 4281|   360k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   360k|        auto cp = static_cast<char32_t>(input.front());
 4283|   360k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44.1k, False: 315k]
  |  |  ------------------
  ------------------
 4284|  44.1k|            return invalid_code_point;
 4285|  44.1k|        }
 4286|   315k|        return cp;
 4287|   360k|    }
 4288|   360k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   374k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   374k|    else {
 3981|   374k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   374k|    }
 3983|   374k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6351|   197k|    {
 6352|   197k|        return m_error;
 6353|   197k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   374k|    {
 6310|   374k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   374k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   472k|    {
 1740|   472k|        return has_value();
 1741|   472k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   945k|    {
  490|   945k|        return m_has_value;
  491|   945k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   287k|    {
 1746|   287k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   287k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   287k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   287k|        return this->get_unexpected().error();
 1748|   287k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   287k|    {
  473|   287k|        return m_unexpected;
  474|   287k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   138k|    {
 1805|   138k|        return std::move(value());
 1806|   138k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   161k|    {
 8986|   161k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   161k|    static_cast<    \
  |  |  935|   161k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   161k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  65.7k|    {
 5728|  65.7k|        return {val};
 5729|  65.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  62.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  62.3k|    {
 6142|  62.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6197|   187k|        : m_desc(desc), m_values(data)
 6198|   187k|    {
 6199|   187k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   867k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   867k|    static_cast<    \
  |  |  935|   867k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   867k|    static_cast<    \
  |  |  935|   867k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   867k|    {
 3466|   867k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|   187k|{
 8449|   187k|    return s;
 8450|   187k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|   187k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  23.1k|    {
 6474|  23.1k|        return ranges::begin(m_range);
 6475|  23.1k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  46.7k|{
 9438|  46.7k|#if !SCN_DISABLE_LOCALE
 9439|  46.7k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  46.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  46.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  46.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 11.5k]
  |  |  ------------------
  ------------------
 9446|  35.2k|        return unexpected(result.error());
 9447|  35.2k|    }
 9448|  11.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  46.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  5.03k|{
 9462|  5.03k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  5.03k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  5.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  ------------------
  ------------------
 9466|  5.03k|        return unexpected(result.error());
 9467|  5.03k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  5.03k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.35k|{
 5865|  3.35k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.35k|    basic_scan_arg<Context> arg;
 5868|  3.35k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.35k|    arg.m_value = make_value<Context>(value);
 5870|  3.35k|    return arg;
 5871|  3.35k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|   197k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.8k|    {
  613|  32.8k|        construct();
  614|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.8k|    {
  694|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.8k|        m_has_value = true;
  696|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  32.8k|{
  396|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.8k|        T(std::forward<Args>(args)...);
  398|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   114k|    {
  718|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  25.1k|        : m_has_value(false)
  637|  25.1k|    {
  638|  25.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   125k|    {
  730|   125k|        return reinterpret_cast<unexpected<E>*>(
  731|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   189k|    {
  687|   189k|        return m_has_value;
  688|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  48.2k|    {
  653|  48.2k|        return *value_ptr();
  654|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.8k|    {
  708|  32.8k|        scn::detail::destroy_at(value_ptr());
  709|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.8k|    else {
  408|  32.8k|        p->~T();
  409|  32.8k|    }
  410|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.1k|    {
  678|  25.1k|        return std::move(*unexpected_ptr());
  679|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  50.3k|    {
  712|  50.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  50.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  62.3k|{
 6115|  62.3k|    detail::check_scan_arg_types<Args...>();
 6116|  62.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  62.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  62.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  62.3k|    {
 6092|  62.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  62.3k|    {
 6100|  62.3k|        return {detail::make_arg<
 6101|  62.3k|            kind, Context,
 6102|  62.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  62.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  62.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  62.3k|{
 5889|  62.3k|    return make_value<Context>(value);
 5890|  62.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5814|  65.7k|{
 5815|  65.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  65.7k|    else {
 5822|  65.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  65.7k|            value, context_tag<Context>{}));
 5824|  65.7k|    }
 5825|  65.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  65.7k|    {
 5720|  65.7k|        return {};
 5721|  65.7k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  65.7k|{
 5784|  65.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  65.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  65.7k|    constexpr bool scannable_char =
 5788|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  65.7k|    static_assert(scannable_char,
 5790|  65.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  65.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  65.7k|    constexpr bool scannable_const =
 5794|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  65.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  65.7k|    constexpr bool scannable_disabled =
 5798|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  65.7k|    static_assert(scannable_disabled,
 5800|  65.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  65.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  65.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  65.7k|    static_assert(
 5805|  65.7k|        scannable,
 5806|  65.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  65.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  65.7k|    return arg_value{arg};
 5810|  65.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  65.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  65.7k|                       scan_custom_arg<T, Context>}
 5604|  65.7k|    {
 5605|  65.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  65.7k|    {
 5621|  65.7k|        static_assert(!is_type_disabled<T>,
 5622|  65.7k|                      "Scanning of custom types is disabled by "
 5623|  65.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  65.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  65.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  65.7k|        using context_type = Context;
 5627|  65.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  65.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  65.7k|        auto s = scanner_type{};
 5631|       |
 5632|  65.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  65.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  65.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  65.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  65.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.35k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.35k|    }
  ------------------
 5637|  62.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.9k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.9k|    }                                                  \
  |  |  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  15.4k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  15.4k|    static_cast<    \
  |  |  935|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  15.4k|        return {};
 5641|  62.3k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  65.7k|{
 5555|  65.7k|#if SCN_HAS_EXCEPTIONS
 5556|  65.7k|    auto fmt_it = pctx.begin();
 5557|  65.7k|    try {
 5558|  65.7k|        fmt_it = s.parse(pctx);
 5559|  65.7k|    }
 5560|  65.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  65.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  ------------------
  ------------------
 5580|  3.35k|        return e;
 5581|  3.35k|    }
 5582|  62.3k|    pctx.advance_to(fmt_it);
 5583|  62.3k|    return {};
 5584|  65.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  65.7k|    {
 5728|  65.7k|        return {val};
 5729|  65.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  62.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  62.3k|    {
 6142|  62.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  58.0k|    {
  643|  58.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.70k, False: 50.3k]
  ------------------
  644|  7.70k|            destroy_value();
  645|  7.70k|        }
  646|  50.3k|        else {
  647|  50.3k|            destroy_unexpected();
  648|  50.3k|        }
  649|  58.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.35k|{
 5865|  3.35k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.35k|    basic_scan_arg<Context> arg;
 5868|  3.35k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.35k|    arg.m_value = make_value<Context>(value);
 5870|  3.35k|    return arg;
 5871|  3.35k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.8k|    {
  613|  32.8k|        construct();
  614|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.8k|    {
  694|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.8k|        m_has_value = true;
  696|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  32.8k|{
  396|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.8k|        T(std::forward<Args>(args)...);
  398|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   114k|    {
  718|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  25.1k|        : m_has_value(false)
  637|  25.1k|    {
  638|  25.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   125k|    {
  730|   125k|        return reinterpret_cast<unexpected<E>*>(
  731|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   189k|    {
  687|   189k|        return m_has_value;
  688|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  48.2k|    {
  653|  48.2k|        return *value_ptr();
  654|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.8k|    {
  708|  32.8k|        scn::detail::destroy_at(value_ptr());
  709|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.8k|    else {
  408|  32.8k|        p->~T();
  409|  32.8k|    }
  410|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.1k|    {
  678|  25.1k|        return std::move(*unexpected_ptr());
  679|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  50.3k|    {
  712|  50.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  50.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  62.3k|{
 6115|  62.3k|    detail::check_scan_arg_types<Args...>();
 6116|  62.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  62.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  62.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  62.3k|    {
 6092|  62.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  62.3k|    {
 6100|  62.3k|        return {detail::make_arg<
 6101|  62.3k|            kind, Context,
 6102|  62.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  62.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  62.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  62.3k|{
 5889|  62.3k|    return make_value<Context>(value);
 5890|  62.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5814|  65.7k|{
 5815|  65.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  65.7k|    else {
 5822|  65.7k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  65.7k|            value, context_tag<Context>{}));
 5824|  65.7k|    }
 5825|  65.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  65.7k|    {
 5720|  65.7k|        return {};
 5721|  65.7k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  65.7k|{
 5784|  65.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  65.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  65.7k|    constexpr bool scannable_char =
 5788|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  65.7k|    static_assert(scannable_char,
 5790|  65.7k|                  "Cannot scan an argument of an unsupported character "
 5791|  65.7k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  65.7k|    constexpr bool scannable_const =
 5794|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  65.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  65.7k|    constexpr bool scannable_disabled =
 5798|  65.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  65.7k|    static_assert(scannable_disabled,
 5800|  65.7k|                  "Cannot scan an argument that has been disabled by "
 5801|  65.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  65.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  65.7k|    static_assert(
 5805|  65.7k|        scannable,
 5806|  65.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  65.7k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  65.7k|    return arg_value{arg};
 5810|  65.7k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  65.7k|        : custom_value{static_cast<void*>(&val.val),
 5603|  65.7k|                       scan_custom_arg<T, Context>}
 5604|  65.7k|    {
 5605|  65.7k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  65.7k|    {
 5621|  65.7k|        static_assert(!is_type_disabled<T>,
 5622|  65.7k|                      "Scanning of custom types is disabled by "
 5623|  65.7k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  65.7k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  65.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  65.7k|        using context_type = Context;
 5627|  65.7k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  65.7k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  65.7k|        auto s = scanner_type{};
 5631|       |
 5632|  65.7k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  65.7k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  65.7k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  65.7k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  65.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.35k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.35k|    }
  ------------------
 5637|  62.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.9k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.9k|    }                                                  \
  |  |  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  15.4k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  15.4k|    static_cast<    \
  |  |  935|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  15.4k|        return {};
 5641|  62.3k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  65.7k|{
 5555|  65.7k|#if SCN_HAS_EXCEPTIONS
 5556|  65.7k|    auto fmt_it = pctx.begin();
 5557|  65.7k|    try {
 5558|  65.7k|        fmt_it = s.parse(pctx);
 5559|  65.7k|    }
 5560|  65.7k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  65.7k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.35k, False: 62.3k]
  |  |  ------------------
  ------------------
 5580|  3.35k|        return e;
 5581|  3.35k|    }
 5582|  62.3k|    pctx.advance_to(fmt_it);
 5583|  62.3k|    return {};
 5584|  65.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  65.7k|    {
 5728|  65.7k|        return {val};
 5729|  65.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  62.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  62.3k|    {
 6142|  62.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  58.0k|    {
  643|  58.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.70k, False: 50.3k]
  ------------------
  644|  7.70k|            destroy_value();
  645|  7.70k|        }
  646|  50.3k|        else {
  647|  50.3k|            destroy_unexpected();
  648|  50.3k|        }
  649|  58.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.35k|{
 5865|  3.35k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.35k|    basic_scan_arg<Context> arg;
 5868|  3.35k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.35k|    arg.m_value = make_value<Context>(value);
 5870|  3.35k|    return arg;
 5871|  3.35k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  75.5k|    {
 2869|  75.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  75.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  75.5k|    {
 2850|  75.5k|        return decay_copy(t.begin());
 2851|  75.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  1.43M|{
 2094|  1.43M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.43M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   197k|    {
 2926|   197k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   197k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   197k|    {
 2908|   197k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   197k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.8k|        : m_value(T{}), m_has_value(true)
  427|  32.8k|    {
  428|  32.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|  98.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  98.6k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  98.6k|    {
 1740|  98.6k|        return has_value();
 1741|  98.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   197k|    {
  490|   197k|        return m_has_value;
  491|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  75.5k|    {
 1746|  75.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.5k|        return this->get_unexpected().error();
 1748|  75.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.5k|    {
  473|  75.5k|        return m_unexpected;
  474|  75.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  25.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  25.1k|          m_has_value(false)
  451|  25.1k|    {
  452|  25.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   131k|    {
  490|   131k|        return m_has_value;
  491|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  48.2k|    {
  456|  48.2k|        return m_value;
  457|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  25.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  25.1k|    {
  504|  25.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  25.1k|                                  std::forward<Args>(args)...);
  506|  25.1k|        m_has_value = false;
  507|  25.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  25.1k|    {
  473|  25.1k|        return m_unexpected;
  474|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  25.1k|    {
  481|  25.1k|        return std::move(m_unexpected);
  482|  25.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  23.1k|    {
 6485|  23.1k|        m_range = std::forward<Other>(r);
 6486|  23.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  23.1k|    {
 1795|  23.1k|        return value();
 1796|  23.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  23.1k|    {
 1769|  23.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  23.1k|        return this->get_value();
 1771|  23.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  23.1k|    {
  456|  23.1k|        return m_value;
  457|  23.1k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  46.7k|{
 9422|  46.7k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  46.7k|    auto result = vscan_impl(buffer, format, args);
 9425|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 11.5k]
  |  |  ------------------
  ------------------
 9426|  35.2k|        return unexpected(result.error());
 9427|  35.2k|    }
 9428|  11.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  46.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  98.6k|{
 5381|  98.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  98.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  98.6k|                  "\n"
 5385|  98.6k|                  "Unsupported range type given as input to a scanning "
 5386|  98.6k|                  "function.\n"
 5387|  98.6k|                  "A range needs to have a character type (value type) "
 5388|  98.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  98.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  98.6k|                  "to be included.\n"
 5391|  98.6k|                  "See the scnlib documentation for more details.");
 5392|  98.6k|    static_assert(
 5393|  98.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  98.6k|        "\n"
 5395|  98.6k|        "Unsupported range type given as input to a scanning "
 5396|  98.6k|        "function.\n"
 5397|  98.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  98.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  98.6k|        "not supported.");
 5400|  98.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  98.6k|                  "\n"
 5402|  98.6k|                  "Unsupported range type given as input to a scanning "
 5403|  98.6k|                  "function.\n"
 5404|  98.6k|                  "file_marker_found cannot be used as an "
 5405|  98.6k|                  "source range type to scn::scan.\n"
 5406|  98.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  98.6k|                  "and do not provide an explicit source range, "
 5408|  98.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  98.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  98.6k|                  "\n"
 5411|  98.6k|                  "Unsupported range type given as input to a scanning "
 5412|  98.6k|                  "function.\n"
 5413|  98.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  98.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  98.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  98.6k|                  "\n"
 5417|  98.6k|                  "Unsupported range type given as input to a scanning "
 5418|  98.6k|                  "function.\n"
 5419|  98.6k|                  "A range needs to model forward_range and have a valid "
 5420|  98.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  98.6k|                  "Examples of scannable ranges are std::string, "
 5422|  98.6k|                  "std::string_view, "
 5423|  98.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  98.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  98.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  98.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  98.6k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  98.6k|    else {
 5366|  98.6k|        return make_forward_scan_buffer(r);
 5367|  98.6k|    }
 5368|  98.6k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  98.6k|{
 5185|  98.6k|    return basic_scan_forward_buffer_impl(range);
 5186|  98.6k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  98.6k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  98.6k|          m_cursor(ranges::begin(*m_range))
 4766|  98.6k|    {
 4767|  98.6k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  98.6k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  98.6k|    {
 4738|  98.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  98.6k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  98.6k|    {
 4429|  98.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   192k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   121k|    {
 2869|   121k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   121k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   121k|    {
 2850|   121k|        return decay_copy(t.begin());
 2851|   121k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   144k|    {
 3480|   144k|        return m_iterator;
 3481|   144k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   343k|    {
 4771|   343k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 17.8k, False: 325k]
  ------------------
 4772|  17.8k|            return false;
 4773|  17.8k|        }
 4774|   325k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   325k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   325k|        }
 4777|   325k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 232k, False: 93.4k]
  ------------------
 4778|   232k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   232k|                                          this->m_current_view.begin(),
 4780|   232k|                                          this->m_current_view.end());
 4781|   232k|        }
 4782|   325k|        m_latest = *m_cursor;
 4783|   325k|        ++m_cursor;
 4784|   325k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   325k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   325k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   325k|        }
 4788|   325k|        return true;
 4789|   343k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   995k|    {
 2926|   995k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   995k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   995k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   995k|    {
 2908|   995k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   995k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   995k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  1.01M|    {
 3484|  1.01M|        return m_sentinel;
 3485|  1.01M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  98.6k|    {
 4346|  98.6k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  98.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  98.6k|        return true;
 4348|  98.6k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  75.5k|        : base(unexpect, std::move(e.error())),
 1616|  75.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  75.5k|    {
 1618|  75.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  75.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.5k|          m_has_value(false)
  451|  75.5k|    {
  452|  75.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  98.6k|    {
 1316|  98.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  23.1k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  23.1k|                      ranges::iterator_t<SourceRange>>) {
 6717|  23.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  23.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  23.1k|    {
 2869|  23.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  23.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  23.1k|    {
 2850|  23.1k|        return decay_copy(t.begin());
 2851|  23.1k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|  23.1k|{
 6702|  23.1k|    return ranges::end(source);
 6703|  23.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  23.1k|    {
 2926|  23.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  23.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  23.1k|    {
 2908|  23.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  23.1k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  23.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  23.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  23.1k|    {
 1572|  23.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  23.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.1k|    {
  442|  23.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   121k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   121k|    static_cast<    \
  |  |  935|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   121k|    static_cast<    \
  |  |  935|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   121k|    {
 3466|   121k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|  23.1k|    {
 6474|  23.1k|        return ranges::begin(m_range);
 6475|  23.1k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  46.7k|{
 9438|  46.7k|#if !SCN_DISABLE_LOCALE
 9439|  46.7k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  46.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  46.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  46.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 11.5k]
  |  |  ------------------
  ------------------
 9446|  35.2k|        return unexpected(result.error());
 9447|  35.2k|    }
 9448|  11.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  46.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  5.03k|{
 9462|  5.03k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  5.03k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  5.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  ------------------
  ------------------
 9466|  5.03k|        return unexpected(result.error());
 9467|  5.03k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  5.03k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.8k|    {
  613|  32.8k|        construct();
  614|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.8k|    {
  694|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.8k|        m_has_value = true;
  696|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  32.8k|{
  396|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.8k|        T(std::forward<Args>(args)...);
  398|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   114k|    {
  718|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  25.1k|        : m_has_value(false)
  637|  25.1k|    {
  638|  25.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   125k|    {
  730|   125k|        return reinterpret_cast<unexpected<E>*>(
  731|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   189k|    {
  687|   189k|        return m_has_value;
  688|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  48.2k|    {
  653|  48.2k|        return *value_ptr();
  654|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.8k|    {
  708|  32.8k|        scn::detail::destroy_at(value_ptr());
  709|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.8k|    else {
  408|  32.8k|        p->~T();
  409|  32.8k|    }
  410|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.1k|    {
  678|  25.1k|        return std::move(*unexpected_ptr());
  679|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  50.3k|    {
  712|  50.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  50.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  58.0k|    {
  643|  58.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.70k, False: 50.3k]
  ------------------
  644|  7.70k|            destroy_value();
  645|  7.70k|        }
  646|  50.3k|        else {
  647|  50.3k|            destroy_unexpected();
  648|  50.3k|        }
  649|  58.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  32.8k|{
 9661|  32.8k|    return scan_result_type<Source, Args...>();
 9662|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.8k|    {
  613|  32.8k|        construct();
  614|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.8k|    {
  694|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.8k|        m_has_value = true;
  696|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  32.8k|{
  396|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.8k|        T(std::forward<Args>(args)...);
  398|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   114k|    {
  718|   114k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   114k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.8k|{
 9646|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 9647|  25.1k|        out = unexpected(in.error());
 9648|  25.1k|    }
 9649|  7.70k|    else {
 9650|  7.70k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  7.70k|    static_cast<    \
  |  |  935|  7.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  7.70k|    }
 9652|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  25.1k|        : base(unexpect, std::move(e.error())),
 1616|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.1k|    {
 1618|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  25.1k|        : m_has_value(false)
  637|  25.1k|    {
  638|  25.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   125k|    {
  730|   125k|        return reinterpret_cast<unexpected<E>*>(
  731|   125k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   125k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   125k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  25.1k|    {
 1316|  25.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  25.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  25.1k|    {
  903|  25.1k|        assign_common(std::move(other));
  904|  25.1k|        return *this;
  905|  25.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  25.1k|    {
  950|  25.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 25.1k, False: 0]
  ------------------
  951|  25.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 25.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  25.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  25.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   189k|    {
  687|   189k|        return m_has_value;
  688|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  48.2k|    {
  653|  48.2k|        return *value_ptr();
  654|  48.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  25.1k|    {
 1046|  25.1k|        this->destroy_value();
 1047|  25.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.8k|    {
  708|  32.8k|        scn::detail::destroy_at(value_ptr());
  709|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.8k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.8k|    else {
  408|  32.8k|        p->~T();
  409|  32.8k|    }
  410|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  25.1k|    {
  701|  25.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  25.1k|                                  std::forward<Args>(args)...);
  703|  25.1k|        m_has_value = false;
  704|  25.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  25.1k|    {
  678|  25.1k|        return std::move(*unexpected_ptr());
  679|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  50.3k|    {
  712|  50.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  50.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  31.1k|    {
 8783|  31.1k|        return m_str;
 8784|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  31.1k|        : m_str(r.str)
 8778|  31.1k|    {
 8779|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  32.8k|    {
 1740|  32.8k|        return has_value();
 1741|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  48.2k|    {
 1815|  48.2k|        return &value();
 1816|  48.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  48.2k|    {
 1769|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  48.2k|        return this->get_value();
 1771|  48.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  58.0k|    {
  643|  58.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 7.70k, False: 50.3k]
  ------------------
  644|  7.70k|            destroy_value();
  645|  7.70k|        }
  646|  50.3k|        else {
  647|  50.3k|            destroy_unexpected();
  648|  50.3k|        }
  649|  58.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.30M|    {
 3480|  1.30M|        return m_iterator;
 3481|  1.30M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.10M|    {
 3480|  1.10M|        return m_iterator;
 3481|  1.10M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  12.3M|    {
 4473|  12.3M|        assert(m_begin);
 4474|  12.3M|        return m_end == nullptr;
 4475|  12.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   175k|    {
 4490|   175k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 80.6k, False: 95.2k]
  ------------------
 4491|  80.6k|            return make_string_view_from_pointers(
 4492|  80.6k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  80.6k|                static_cast<const CharT*>(m_end));
 4494|  80.6k|        }
 4495|  95.2k|        return parent()->get_segment_starting_at(position());
 4496|   175k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  7.16M|    {
 4484|  7.16M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  7.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  7.16M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  7.16M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  95.2k|    {
 4377|  95.2k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 4378|  95.2k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  95.2k|        const auto start = pos - m_putback_buffer.size();
 4382|  95.2k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  95.2k|        return m_current_view.substr(start);
 4384|  95.2k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   266k|    {
 4468|   266k|        return m_position;
 4469|   266k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   373k|    {
 4399|   373k|        return m_is_contiguous;
 4400|   373k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  6.70M|    {
 4473|  6.70M|        assert(m_begin);
 4474|  6.70M|        return m_end == nullptr;
 4475|  6.70M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  93.5k|    {
 4490|  93.5k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 93.5k, False: 0]
  ------------------
 4491|  93.5k|            return make_string_view_from_pointers(
 4492|  93.5k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  93.5k|                static_cast<const CharT*>(m_end));
 4494|  93.5k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  93.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  3.71M|    {
 4484|  3.71M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  3.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  3.71M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  3.71M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   139k|    {
 4468|   139k|        return m_position;
 4469|   139k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   389k|    {
 4399|   389k|        return m_is_contiguous;
 4400|   389k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   244k|    {
 3334|   244k|        return static_cast<D&>(*this);
 3335|   244k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   244k|    {
 3375|   244k|        return detail::to_address(ranges::begin(derived()));
 3376|   244k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   192k|    {
 3334|   192k|        return static_cast<D&>(*this);
 3335|   192k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   192k|    {
 3375|   192k|        return detail::to_address(ranges::begin(derived()));
 3376|   192k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   188k|    {
 8980|   188k|        return ranges::subrange{begin(), end()};
 8981|   188k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   188k|    {
 8972|   188k|        return ranges::default_sentinel;
 8973|   188k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   698k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   698k|    static_cast<    \
  |  |  935|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   698k|    static_cast<    \
  |  |  935|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   698k|    {
 3466|   698k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|   196k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  95.2k|    {
 1979|  95.2k|        return detail::transform_error_impl(std::move(*this),
 1980|  95.2k|                                            std::forward<F>(f));
 1981|  95.2k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  95.2k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  95.2k|    else {
 1472|  95.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  95.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  95.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 93.7k, False: 1.51k]
  |  |  ------------------
  ------------------
 1474|  95.2k|                   ? result(*std::forward<Exp>(exp))
 1475|  95.2k|                   : result(unexpect,
 1476|  1.51k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.51k|                                           std::forward<Exp>(exp).error()));
 1478|  95.2k|    }
 1479|  95.2k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   190k|    {
  490|   190k|        return m_has_value;
  491|   190k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  93.7k|    {
 1805|  93.7k|        return std::move(value());
 1806|  93.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  93.7k|    {
 1769|  93.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  93.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  93.7k|        return this->get_value();
 1771|  93.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  93.7k|    {
  456|  93.7k|        return m_value;
  457|  93.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   259k|        : base(std::in_place, std::forward<U>(val)),
 1570|   259k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   259k|    {
 1572|   259k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   259k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   259k|    {
  442|   259k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   449k|    {
 1316|   449k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  4.30k|{
 1350|  4.30k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  4.30k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.51k|    {
 1756|  1.51k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.51k|        return std::move(this->get_unexpected().error());
 1758|  1.51k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.51k|    {
  473|  1.51k|        return m_unexpected;
  474|  1.51k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  8.60k|    {
  365|  8.60k|        return m_unexpected;
  366|  8.60k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.51k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.51k|    {
 1628|  1.51k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   144k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   144k|          m_has_value(false)
  451|   144k|    {
  452|   144k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   186k|    {
 8980|   186k|        return ranges::subrange{begin(), end()};
 8981|   186k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   186k|    {
 8972|   186k|        return ranges::default_sentinel;
 8973|   186k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   651k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   651k|    static_cast<    \
  |  |  935|   651k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   651k|    static_cast<    \
  |  |  935|   651k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   651k|    {
 3466|   651k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  93.5k|    {
 1979|  93.5k|        return detail::transform_error_impl(std::move(*this),
 1980|  93.5k|                                            std::forward<F>(f));
 1981|  93.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  93.5k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  93.5k|    else {
 1472|  93.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  93.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  93.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 92.5k, False: 990]
  |  |  ------------------
  ------------------
 1474|  93.5k|                   ? result(*std::forward<Exp>(exp))
 1475|  93.5k|                   : result(unexpect,
 1476|    990|                            trivial_invoke(std::forward<F>(f),
 1477|    990|                                           std::forward<Exp>(exp).error()));
 1478|  93.5k|    }
 1479|  93.5k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   187k|    {
  490|   187k|        return m_has_value;
  491|   187k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  92.5k|    {
 1805|  92.5k|        return std::move(value());
 1806|  92.5k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  92.5k|    {
 1769|  92.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  92.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  92.5k|        return this->get_value();
 1771|  92.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  92.5k|    {
  456|  92.5k|        return m_value;
  457|  92.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   161k|        : base(std::in_place, std::forward<U>(val)),
 1570|   161k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   161k|    {
 1572|   161k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   161k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   161k|    {
  442|   161k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   472k|    {
 1316|   472k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|    990|    {
 1756|    990|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    990|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    990|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    990|        return std::move(this->get_unexpected().error());
 1758|    990|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    990|    {
  473|    990|        return m_unexpected;
  474|    990|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|    990|        : base(unexpect, std::forward<Args>(args)...),
 1626|    990|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    990|    {
 1628|    990|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   287k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   287k|          m_has_value(false)
  451|   287k|    {
  452|   287k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   226k|        : base(unexpect, std::move(e.error())),
 1616|   226k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   226k|    {
 1618|   226k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   226k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   226k|          m_has_value(false)
  451|   226k|    {
  452|   226k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   378k|    {
 1316|   378k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  37.7k|        : base(unexpect, std::move(e.error())),
 1616|  37.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  37.7k|    {
 1618|  37.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  38.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.5k|          m_has_value(false)
  451|  38.5k|    {
  452|  38.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   163k|    {
 1316|   163k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   125k|        : base(std::in_place, std::forward<U>(val)),
 1570|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   125k|    {
 1572|   125k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   125k|    {
  442|   125k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   163k|    {
 1740|   163k|        return has_value();
 1741|   163k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   327k|    {
  490|   327k|        return m_has_value;
  491|   327k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  38.5k|    {
 1746|  38.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  38.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  38.5k|        return this->get_unexpected().error();
 1748|  38.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  38.5k|    {
  473|  38.5k|        return m_unexpected;
  474|  38.5k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   125k|    {
 1805|   125k|        return std::move(value());
 1806|   125k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   125k|    {
 1769|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   125k|        return this->get_value();
 1771|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   125k|    {
  456|   125k|        return m_value;
  457|   125k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  75.5k|        : base(unexpect, std::move(e.error())),
 1616|  75.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  75.5k|    {
 1618|  75.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  76.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  76.5k|          m_has_value(false)
  451|  76.5k|    {
  452|  76.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   192k|    {
 1316|   192k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   115k|        : base(std::in_place, std::forward<U>(val)),
 1570|   115k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   115k|    {
 1572|   115k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   115k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   115k|    {
  442|   115k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   192k|    {
 1740|   192k|        return has_value();
 1741|   192k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   384k|    {
  490|   384k|        return m_has_value;
  491|   384k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  76.5k|    {
 1746|  76.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  76.5k|        return this->get_unexpected().error();
 1748|  76.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  76.5k|    {
  473|  76.5k|        return m_unexpected;
  474|  76.5k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   115k|    {
 1805|   115k|        return std::move(value());
 1806|   115k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   115k|    {
 1769|   115k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   115k|        return this->get_value();
 1771|   115k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   115k|    {
  456|   115k|        return m_value;
  457|   115k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  80.6k|    {
 1979|  80.6k|        return detail::transform_error_impl(std::move(*this),
 1980|  80.6k|                                            std::forward<F>(f));
 1981|  80.6k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  80.6k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  80.6k|    else {
 1472|  80.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  80.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  80.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 79.8k, False: 810]
  |  |  ------------------
  ------------------
 1474|  80.6k|                   ? result(*std::forward<Exp>(exp))
 1475|  80.6k|                   : result(unexpect,
 1476|    810|                            trivial_invoke(std::forward<F>(f),
 1477|    810|                                           std::forward<Exp>(exp).error()));
 1478|  80.6k|    }
 1479|  80.6k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   161k|    {
  490|   161k|        return m_has_value;
  491|   161k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  79.8k|    {
 1805|  79.8k|        return std::move(value());
 1806|  79.8k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  79.8k|    {
 1769|  79.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  79.8k|        return this->get_value();
 1771|  79.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  79.8k|    {
  456|  79.8k|        return m_value;
  457|  79.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    810|    {
 1756|    810|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    810|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    810|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    810|        return std::move(this->get_unexpected().error());
 1758|    810|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    810|    {
  473|    810|        return m_unexpected;
  474|    810|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    810|        : base(unexpect, std::forward<Args>(args)...),
 1626|    810|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    810|    {
 1628|    810|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   751k|    {
 8964|   751k|        return m_current;
 8965|   751k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8851|   161k|    {
 8852|   161k|        return m_args;
 8853|   161k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   334k|    {
 8857|   334k|        return m_locale;
 8858|   334k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   342k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   342k|    static_cast<    \
  |  |  935|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   342k|    static_cast<    \
  |  |  935|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   342k|    {
 8864|   342k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   161k|    {
 3000|   161k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   161k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   161k|    {
 2981|   161k|        return t.data();
 2982|   161k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  80.6k|    {
 3075|  80.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  80.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  80.6k|    {
 3041|  80.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  80.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   143k|        : base(unexpect, std::move(e.error())),
 1616|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   143k|    {
 1618|   143k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  45.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  45.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  45.3k|    {
 1572|  45.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  45.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  45.3k|    {
  442|  45.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   652k|    {
 8964|   652k|        return m_current;
 8965|   652k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8851|   187k|    {
 8852|   187k|        return m_args;
 8853|   187k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   372k|    {
 8857|   372k|        return m_locale;
 8858|   372k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   384k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   384k|    static_cast<    \
  |  |  935|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   384k|    static_cast<    \
  |  |  935|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   384k|    {
 8864|   384k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   187k|    {
 3000|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   187k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   187k|    {
 2981|   187k|        return t.data();
 2982|   187k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  93.5k|    {
 3075|  93.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  93.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  93.5k|    {
 3041|  93.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  93.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   286k|        : base(unexpect, std::move(e.error())),
 1616|   286k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   286k|    {
 1618|   286k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  23.1k|        : base(std::in_place, std::forward<U>(val)),
 1570|  23.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  23.1k|    {
 1572|  23.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  23.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  23.1k|    {
  442|  23.1k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   523k|    {
 4559|   523k|        return x.is_at_end();
 4560|   523k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.27M|    {
 4603|  1.27M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.27M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.27M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.27M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.27M|        return !read_at_position();
 4610|  1.27M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  3.70M|    {
 4583|  3.70M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  3.70M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 3.70M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  3.70M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  3.70M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.95M, False: 741k]
  |  |  ------------------
  ------------------
 4590|  2.95M|            return true;
 4591|  2.95M|        }
 4592|       |
 4593|  1.46M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 741k, False: 727k]
  ------------------
 4594|   741k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 14.5k, False: 727k]
  ------------------
 4595|  14.5k|                return false;
 4596|  14.5k|            }
 4597|   741k|        }
 4598|   727k|        return true;
 4599|   741k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.15M|    {
 4518|  1.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.15M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.15M|        auto res = read_at_position();
 4527|  1.15M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.15M|        return parent()->get_character_at(m_position);
 4529|  1.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.15M|    {
 4388|  1.15M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 380k, False: 776k]
  |  |  ------------------
  ------------------
 4389|  1.15M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   380k|            return m_putback_buffer[pos];
 4391|   380k|        }
 4392|   776k|        const auto start = pos - m_putback_buffer.size();
 4393|   776k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   776k|        return m_current_view[start];
 4395|   776k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  93.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  93.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  93.7k|    {
 1572|  93.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  93.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  93.7k|    {
  442|  93.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  95.2k|    {
 1316|  95.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.51k|        : base(unexpect, std::move(e.error())),
 1616|  1.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.51k|    {
 1618|  1.51k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.51k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.51k|          m_has_value(false)
  451|  1.51k|    {
  452|  1.51k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.30k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.30k|    {
  360|  4.30k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.30k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.26M|    {
 4504|  1.26M|        ++m_position;
 4505|  1.26M|        (void)read_at_position();
 4506|  1.26M|        return *this;
 4507|  1.26M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   568k|    {
 4553|   568k|        return !(lhs == rhs);
 4554|   568k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   568k|    {
 4548|   568k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 568k, False: 0]
  |  Branch (4548:46): [True: 69.8k, False: 499k]
  ------------------
 4549|   568k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  4.30k|        : m_unexpected(std::forward<Err>(e))
  350|  4.30k|    {
  351|  4.30k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  4.30k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.60M|    {
 3484|  1.60M|        return m_sentinel;
 3485|  1.60M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   755k|    {
 4570|   755k|        return !x.is_at_end();
 4571|   755k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    810|        : base(unexpect, std::move(e.error())),
 1616|    810|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    810|    {
 1618|    810|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    810|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    810|          m_has_value(false)
  451|    810|    {
  452|    810|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  80.6k|    {
 1316|  80.6k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  79.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  79.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  79.8k|    {
 1572|  79.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  79.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  79.8k|    {
  442|  79.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   241k|    {
 3000|   241k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   241k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   241k|    {
 2981|   241k|        return t.data();
 2982|   241k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   151k|        : base(std::in_place, std::forward<U>(val)),
 1570|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   151k|    {
 1572|   151k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   151k|    {
  442|   151k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   105k|    {
 1795|   105k|        return value();
 1796|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  93.7k|    {
 2869|  93.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  93.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  93.7k|    {
 2850|  93.7k|        return decay_copy(t.begin());
 2851|  93.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  93.7k|{
 2094|  93.7k|    return SCN_FWD(t);
  ------------------
  |  |  936|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  93.7k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  80.6k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  80.6k|    {
 3912|  80.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  95.2k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  95.2k|    {
 3912|  95.2k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   419k|    {
 4559|   419k|        return x.is_at_end();
 4560|   419k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   814k|    {
 4603|   814k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 814k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   814k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 814k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   814k|        return !read_at_position();
 4610|   814k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.98M|    {
 4583|  1.98M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.98M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.98M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.98M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.64M, False: 343k]
  |  |  ------------------
  ------------------
 4590|  1.64M|            return true;
 4591|  1.64M|        }
 4592|       |
 4593|   669k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 343k, False: 325k]
  ------------------
 4594|   343k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 17.8k, False: 325k]
  ------------------
 4595|  17.8k|                return false;
 4596|  17.8k|            }
 4597|   343k|        }
 4598|   325k|        return true;
 4599|   343k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  2.65M|    {
 4357|  2.65M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  2.65M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   718k|    {
 4518|   718k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   718k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 718k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   718k|        auto res = read_at_position();
 4527|   718k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   718k|        return parent()->get_character_at(m_position);
 4529|   718k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   718k|    {
 4388|   718k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 387k, False: 330k]
  |  |  ------------------
  ------------------
 4389|   718k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   387k|            return m_putback_buffer[pos];
 4391|   387k|        }
 4392|   330k|        const auto start = pos - m_putback_buffer.size();
 4393|   330k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   330k|        return m_current_view[start];
 4395|   330k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  92.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  92.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  92.5k|    {
 1572|  92.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  92.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  92.5k|    {
  442|  92.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  93.5k|    {
 1316|  93.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|    990|        : base(unexpect, std::move(e.error())),
 1616|    990|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    990|    {
 1618|    990|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|    990|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    990|          m_has_value(false)
  451|    990|    {
  452|    990|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   455k|    {
 4504|   455k|        ++m_position;
 4505|   455k|        (void)read_at_position();
 4506|   455k|        return *this;
 4507|   455k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|   162k|    {
 4553|   162k|        return !(lhs == rhs);
 4554|   162k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|   162k|    {
 4548|   162k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 162k, False: 0]
  |  Branch (4548:46): [True: 23.1k, False: 139k]
  ------------------
 4549|   162k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.08M|    {
 3484|  1.08M|        return m_sentinel;
 3485|  1.08M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   394k|    {
 4570|   394k|        return !x.is_at_end();
 4571|   394k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    990|        : base(unexpect, std::move(e.error())),
 1616|    990|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    990|    {
 1618|    990|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    990|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    990|          m_has_value(false)
  451|    990|    {
  452|    990|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  93.5k|    {
 1316|  93.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  92.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  92.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  92.5k|    {
 1572|  92.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  92.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  92.5k|    {
  442|  92.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   187k|    {
  490|   187k|        return m_has_value;
  491|   187k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  92.5k|    {
 1769|  92.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  92.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  92.5k|        return this->get_value();
 1771|  92.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  92.5k|    {
  456|  92.5k|        return m_value;
  457|  92.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  93.5k|    {
 1979|  93.5k|        return detail::transform_error_impl(std::move(*this),
 1980|  93.5k|                                            std::forward<F>(f));
 1981|  93.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  93.5k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  93.5k|    else {
 1472|  93.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  93.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  93.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 92.5k, False: 990]
  |  |  ------------------
  ------------------
 1474|  93.5k|                   ? result(*std::forward<Exp>(exp))
 1475|  93.5k|                   : result(unexpect,
 1476|    990|                            trivial_invoke(std::forward<F>(f),
 1477|    990|                                           std::forward<Exp>(exp).error()));
 1478|  93.5k|    }
 1479|  93.5k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  92.5k|    {
 1805|  92.5k|        return std::move(value());
 1806|  92.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    990|    {
 1756|    990|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    990|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    990|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    990|        return std::move(this->get_unexpected().error());
 1758|    990|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    990|    {
  473|    990|        return m_unexpected;
  474|    990|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    990|        : base(unexpect, std::forward<Args>(args)...),
 1626|    990|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    990|    {
 1628|    990|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   187k|    {
 3000|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   187k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   187k|    {
 2981|   187k|        return t.data();
 2982|   187k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  46.2k|    {
 1795|  46.2k|        return value();
 1796|  46.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  92.5k|    {
 2869|  92.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  92.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  92.5k|    {
 2850|  92.5k|        return decay_copy(t.begin());
 2851|  92.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  92.5k|{
 2094|  92.5k|    return SCN_FWD(t);
  ------------------
  |  |  936|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  92.5k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  93.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  93.5k|    {
 3912|  93.5k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  93.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  93.5k|    {
 3912|  93.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  5.16M|    {
 4357|  5.16M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  5.16M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   175k|    {
 6182|   175k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   175k|        return static_cast<std::size_t>(m_desc &
 6187|   175k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   175k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   351k|    {
 6208|   351k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   351k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   175k|    {
 6150|   175k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   175k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   175k|        const auto t = type(id);
 6162|   175k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   175k|        basic_scan_arg<Context> arg;
 6167|   175k|        arg.m_type = t;
 6168|   175k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 175k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   175k|        else {
 6172|   175k|            arg.m_value = m_values[id];
 6173|   175k|        }
 6174|   175k|        return arg;
 6175|   175k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   175k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   175k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   175k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   175k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   175k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   175k|    {
 6212|   175k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   175k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   356k|    {
 5966|   356k|        return m_type != detail::arg_type::none_type;
 5967|   356k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  2.51k|{
 9324|  2.51k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.51k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.51k|{
 9225|  2.51k|#define SCN_VISIT(Type)                                                \
 9226|  2.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.51k|    }                                                                  \
 9229|  2.51k|    else {                                                             \
 9230|  2.51k|        return vis(monostate_val);                                     \
 9231|  2.51k|    }
 9232|       |
 9233|  2.51k|    monostate monostate_val{};
 9234|       |
 9235|  2.51k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.51k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.51k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.51k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.51k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.51k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.51k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.51k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.51k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.51k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.51k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.51k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.51k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.51k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.51k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.51k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.51k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.51k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.51k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.51k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.51k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.51k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.51k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.51k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.51k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.51k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.51k, False: 0]
  ------------------
 9286|  2.51k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.51k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.51k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.51k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.51k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.51k|            SCN_CLANG_POP
 9303|  2.51k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   356k|{
 6011|   356k|    return arg.m_type;
 6012|   356k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   180k|{
 6023|   180k|    return arg.m_value;
 6024|   180k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6279|  2.51k|        : m_format{format},
 6280|  2.51k|          m_next_arg_id{next_arg_id},
 6281|  2.51k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.51k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.51k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.51k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.51k|    {
 6287|  2.51k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  83.1k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  83.1k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  83.1k|          m_position(pos)
 4463|  83.1k|    {
 4464|  83.1k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   180k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   180k|    static_cast<    \
  |  |  935|   180k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   180k|    {
 8949|   180k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5943|   180k|        {
 5944|   180k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   180k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5948|   180k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   178k|{
 4691|   178k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 80.6k, False: 97.7k]
  ------------------
 4692|  80.6k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  80.6k|                                ranges::default_sentinel};
 4694|  80.6k|    }
 4695|  97.7k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  97.7k|                            ranges::default_sentinel};
 4697|   178k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  97.7k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  97.7k|    {
 4455|  97.7k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  97.7k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  97.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  97.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  2.51k|{
 9324|  2.51k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.51k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.51k|{
 9225|  2.51k|#define SCN_VISIT(Type)                                                \
 9226|  2.51k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.51k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.51k|    }                                                                  \
 9229|  2.51k|    else {                                                             \
 9230|  2.51k|        return vis(monostate_val);                                     \
 9231|  2.51k|    }
 9232|       |
 9233|  2.51k|    monostate monostate_val{};
 9234|       |
 9235|  2.51k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.51k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.51k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.51k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.51k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.51k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.51k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.51k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.51k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.51k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.51k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.51k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.51k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.51k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.51k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.51k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.51k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.51k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.51k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.51k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.51k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.51k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.51k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.51k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.51k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.51k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.51k, False: 0]
  ------------------
 9286|  2.51k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.51k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.51k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.51k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.51k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.51k|            SCN_CLANG_POP
 9303|  2.51k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6279|  2.51k|        : m_format{format},
 6280|  2.51k|          m_next_arg_id{next_arg_id},
 6281|  2.51k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.51k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.51k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.51k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.51k|    {
 6287|  2.51k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  80.6k|        : m_format{format},
 6280|  80.6k|          m_next_arg_id{next_arg_id},
 6281|  80.6k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  80.6k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  80.6k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  80.6k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  80.6k|    {
 6287|  80.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  80.6k|    {
 3075|  80.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  80.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  80.6k|    {
 3041|  80.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  80.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  80.6k|{
 7796|  80.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  80.6k|    handler.check_args_exhausted();
 7798|  80.6k|    return handler.get_error();
 7799|  80.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  80.6k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  80.6k|    auto begin = format.data();
 7764|  80.6k|    auto it = begin;
 7765|  80.6k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   126k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 80.6k, False: 45.3k]
  ------------------
 7768|  80.6k|        const auto ch = *it++;
 7769|  80.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 80.6k, False: 0]
  ------------------
 7770|  80.6k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  80.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  80.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 35.2k, False: 45.3k]
  ------------------
 7774|  35.2k|                return;
 7775|  35.2k|            }
 7776|  80.6k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  80.6k|    }
 7787|       |
 7788|  45.3k|    handler.on_literal_text(begin, end);
 7789|  45.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  80.6k|{
 7693|  80.6k|    struct id_adapter {
 7694|  80.6k|        constexpr void operator()()
 7695|  80.6k|        {
 7696|  80.6k|            arg_id = handler.on_arg_id();
 7697|  80.6k|        }
 7698|  80.6k|        constexpr void operator()(std::size_t id)
 7699|  80.6k|        {
 7700|  80.6k|            arg_id = handler.on_arg_id(id);
 7701|  80.6k|        }
 7702|       |
 7703|  80.6k|        constexpr void on_error(const char* msg)
 7704|  80.6k|        {
 7705|  80.6k|            SCN_UNLIKELY_ATTR
 7706|  80.6k|            handler.on_error(msg);
 7707|  80.6k|        }
 7708|       |
 7709|  80.6k|        Handler& handler;
 7710|  80.6k|        std::size_t arg_id;
 7711|  80.6k|    };
 7712|       |
 7713|  80.6k|    ++begin;
 7714|  80.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  80.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 80.6k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  80.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 80.6k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  80.6k|    else {
 7726|  80.6k|        auto adapter = id_adapter{handler, 0};
 7727|  80.6k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  80.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  80.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 80.6k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  80.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 80.6k, False: 0]
  ------------------
 7738|  80.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  80.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  80.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80.6k]
  |  |  |  Branch (865:45): [True: 0, False: 80.6k]
  |  |  |  Branch (865:45): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  80.6k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  80.6k|    }
 7754|  80.6k|    return begin + 1;
 7755|  80.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   175k|    {
 8847|   175k|        return m_args.get(id);
 8848|   175k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   175k|    {
 6315|   175k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   175k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   175k|        do_check_arg_id(id);
 6323|   175k|        return id;
 6324|   175k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   175k|{
 6809|   175k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   175k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   175k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  80.6k|{
 7194|  80.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  80.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 80.6k, False: 0]
  |  Branch (7195:26): [True: 0, False: 80.6k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  80.6k|    handler();
 7200|  80.6k|    return begin;
 7201|  80.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  80.6k|        {
 7696|  80.6k|            arg_id = handler.on_arg_id();
 7697|  80.6k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   175k|{
 9324|   175k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   175k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   175k|{
 9225|   175k|#define SCN_VISIT(Type)                                                \
 9226|   175k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   175k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   175k|    }                                                                  \
 9229|   175k|    else {                                                             \
 9230|   175k|        return vis(monostate_val);                                     \
 9231|   175k|    }
 9232|       |
 9233|   175k|    monostate monostate_val{};
 9234|       |
 9235|   175k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 175k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 175k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 175k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 175k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 175k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 175k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 175k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 175k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 175k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 175k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 175k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 175k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 175k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 175k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 175k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 175k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 175k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 175k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 175k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 175k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 175k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 175k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 175k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 175k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   175k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 175k, False: 0]
  ------------------
 9286|   175k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   175k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   175k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 175k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 175k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   175k|            SCN_CLANG_POP
 9303|   175k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  80.6k|        : base(typename base::contiguous_tag{}, sv)
 4717|  80.6k|    {
 4718|  80.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  80.6k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  80.6k|    {
 4423|  80.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   161k|    {
 3000|   161k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   161k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   161k|    {
 2991|   161k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   161k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   161k|    {
 2869|   161k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   161k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   161k|    {
 2850|   161k|        return decay_copy(t.begin());
 2851|   161k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  80.6k|    {
 3075|  80.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  80.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  80.6k|    {
 3041|  80.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  80.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  80.6k|    {
 4540|  80.6k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  80.6k|        m_position = i;
 4542|  80.6k|        return *this;
 4543|  80.6k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  95.2k|        : m_format{format},
 6280|  95.2k|          m_next_arg_id{next_arg_id},
 6281|  95.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  95.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  95.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  95.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  95.2k|    {
 6287|  95.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  95.2k|{
 7796|  95.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  95.2k|    handler.check_args_exhausted();
 7798|  95.2k|    return handler.get_error();
 7799|  95.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  95.2k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  95.2k|    auto begin = format.data();
 7764|  95.2k|    auto it = begin;
 7765|  95.2k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   155k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 95.2k, False: 59.9k]
  ------------------
 7768|  95.2k|        const auto ch = *it++;
 7769|  95.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 95.2k, False: 0]
  ------------------
 7770|  95.2k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  95.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  95.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 35.2k, False: 59.9k]
  ------------------
 7774|  35.2k|                return;
 7775|  35.2k|            }
 7776|  95.2k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  95.2k|    }
 7787|       |
 7788|  59.9k|    handler.on_literal_text(begin, end);
 7789|  59.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  95.2k|{
 7693|  95.2k|    struct id_adapter {
 7694|  95.2k|        constexpr void operator()()
 7695|  95.2k|        {
 7696|  95.2k|            arg_id = handler.on_arg_id();
 7697|  95.2k|        }
 7698|  95.2k|        constexpr void operator()(std::size_t id)
 7699|  95.2k|        {
 7700|  95.2k|            arg_id = handler.on_arg_id(id);
 7701|  95.2k|        }
 7702|       |
 7703|  95.2k|        constexpr void on_error(const char* msg)
 7704|  95.2k|        {
 7705|  95.2k|            SCN_UNLIKELY_ATTR
 7706|  95.2k|            handler.on_error(msg);
 7707|  95.2k|        }
 7708|       |
 7709|  95.2k|        Handler& handler;
 7710|  95.2k|        std::size_t arg_id;
 7711|  95.2k|    };
 7712|       |
 7713|  95.2k|    ++begin;
 7714|  95.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  95.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 95.2k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  95.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 95.2k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  95.2k|    else {
 7726|  95.2k|        auto adapter = id_adapter{handler, 0};
 7727|  95.2k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  95.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  95.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 95.2k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  95.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 95.2k, False: 0]
  ------------------
 7738|  95.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  95.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  95.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  |  Branch (865:45): [True: 0, False: 95.2k]
  |  |  |  Branch (865:45): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  95.2k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  95.2k|    }
 7754|  95.2k|    return begin + 1;
 7755|  95.2k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  95.2k|{
 7194|  95.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  95.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 95.2k, False: 0]
  |  Branch (7195:26): [True: 0, False: 95.2k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  95.2k|    handler();
 7200|  95.2k|    return begin;
 7201|  95.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  95.2k|        {
 7696|  95.2k|            arg_id = handler.on_arg_id();
 7697|  95.2k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  37.7k|    {
 4352|  37.7k|        return sync(0);
 4353|  37.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|   187k|    {
 6182|   187k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   187k|        return static_cast<std::size_t>(m_desc &
 6187|   187k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   187k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|   374k|    {
 6208|   374k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   374k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|   187k|    {
 6150|   187k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   187k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   187k|        const auto t = type(id);
 6162|   187k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   187k|        basic_scan_arg<Context> arg;
 6167|   187k|        arg.m_type = t;
 6168|   187k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 187k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   187k|        else {
 6172|   187k|            arg.m_value = m_values[id];
 6173|   187k|        }
 6174|   187k|        return arg;
 6175|   187k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|   187k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   187k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   187k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   187k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   187k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|   187k|    {
 6212|   187k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   187k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|   384k|    {
 5966|   384k|        return m_type != detail::arg_type::none_type;
 5967|   384k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  5.03k|{
 9324|  5.03k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  5.03k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  5.03k|{
 9225|  5.03k|#define SCN_VISIT(Type)                                                \
 9226|  5.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  5.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  5.03k|    }                                                                  \
 9229|  5.03k|    else {                                                             \
 9230|  5.03k|        return vis(monostate_val);                                     \
 9231|  5.03k|    }
 9232|       |
 9233|  5.03k|    monostate monostate_val{};
 9234|       |
 9235|  5.03k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 5.03k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.03k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 5.03k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.03k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 5.03k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.03k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 5.03k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 5.03k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.03k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 5.03k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 5.03k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 5.03k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 5.03k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.03k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.03k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.03k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.03k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.03k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.03k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 5.03k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 5.03k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.03k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.03k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.03k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  5.03k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 5.03k, False: 0]
  ------------------
 9286|  5.03k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  5.03k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  5.03k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 5.03k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.03k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  5.03k|            SCN_CLANG_POP
 9303|  5.03k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   384k|{
 6011|   384k|    return arg.m_type;
 6012|   384k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   197k|{
 6023|   197k|    return arg.m_value;
 6024|   197k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6279|  5.03k|        : m_format{format},
 6280|  5.03k|          m_next_arg_id{next_arg_id},
 6281|  5.03k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  5.03k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  5.03k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  5.03k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  5.03k|    {
 6287|  5.03k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  98.6k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  98.6k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  98.6k|          m_position(pos)
 4463|  98.6k|    {
 4464|  98.6k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   197k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   197k|    static_cast<    \
  |  |  935|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   197k|    {
 8949|   197k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5943|   197k|        {
 5944|   197k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   197k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5948|   197k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|  93.5k|        : m_format{format},
 6280|  93.5k|          m_next_arg_id{next_arg_id},
 6281|  93.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  93.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  93.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  93.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  93.5k|    {
 6287|  93.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  93.5k|    {
 3075|  93.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  93.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  93.5k|    {
 3041|  93.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  93.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  93.5k|{
 7796|  93.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  93.5k|    handler.check_args_exhausted();
 7798|  93.5k|    return handler.get_error();
 7799|  93.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  93.5k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  93.5k|    auto begin = format.data();
 7764|  93.5k|    auto it = begin;
 7765|  93.5k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   116k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 93.5k, False: 23.1k]
  ------------------
 7768|  93.5k|        const auto ch = *it++;
 7769|  93.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 93.5k, False: 0]
  ------------------
 7770|  93.5k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  93.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  93.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.4k, False: 23.1k]
  ------------------
 7774|  70.4k|                return;
 7775|  70.4k|            }
 7776|  93.5k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  93.5k|    }
 7787|       |
 7788|  23.1k|    handler.on_literal_text(begin, end);
 7789|  23.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|  93.5k|{
 7693|  93.5k|    struct id_adapter {
 7694|  93.5k|        constexpr void operator()()
 7695|  93.5k|        {
 7696|  93.5k|            arg_id = handler.on_arg_id();
 7697|  93.5k|        }
 7698|  93.5k|        constexpr void operator()(std::size_t id)
 7699|  93.5k|        {
 7700|  93.5k|            arg_id = handler.on_arg_id(id);
 7701|  93.5k|        }
 7702|       |
 7703|  93.5k|        constexpr void on_error(const char* msg)
 7704|  93.5k|        {
 7705|  93.5k|            SCN_UNLIKELY_ATTR
 7706|  93.5k|            handler.on_error(msg);
 7707|  93.5k|        }
 7708|       |
 7709|  93.5k|        Handler& handler;
 7710|  93.5k|        std::size_t arg_id;
 7711|  93.5k|    };
 7712|       |
 7713|  93.5k|    ++begin;
 7714|  93.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  93.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 93.5k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  93.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 93.5k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  93.5k|    else {
 7726|  93.5k|        auto adapter = id_adapter{handler, 0};
 7727|  93.5k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  93.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  93.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 93.5k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  93.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 93.5k, False: 0]
  ------------------
 7738|  93.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  93.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  93.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  |  Branch (865:45): [True: 0, False: 93.5k]
  |  |  |  Branch (865:45): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  93.5k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  93.5k|    }
 7754|  93.5k|    return begin + 1;
 7755|  93.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   187k|    {
 8847|   187k|        return m_args.get(id);
 8848|   187k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   187k|    {
 6315|   187k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   187k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   187k|        do_check_arg_id(id);
 6323|   187k|        return id;
 6324|   187k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   187k|{
 6809|   187k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   187k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   187k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  93.5k|{
 7194|  93.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  93.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 93.5k, False: 0]
  |  Branch (7195:26): [True: 0, False: 93.5k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  93.5k|    handler();
 7200|  93.5k|    return begin;
 7201|  93.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  93.5k|        {
 7696|  93.5k|            arg_id = handler.on_arg_id();
 7697|  93.5k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   187k|{
 9324|   187k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   187k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   187k|{
 9225|   187k|#define SCN_VISIT(Type)                                                \
 9226|   187k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   187k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   187k|    }                                                                  \
 9229|   187k|    else {                                                             \
 9230|   187k|        return vis(monostate_val);                                     \
 9231|   187k|    }
 9232|       |
 9233|   187k|    monostate monostate_val{};
 9234|       |
 9235|   187k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 187k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 187k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 187k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 187k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 187k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 187k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 187k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 187k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 187k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 187k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 187k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 187k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 187k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 187k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 187k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 187k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 187k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 187k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 187k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 187k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 187k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 187k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 187k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 187k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   187k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 187k, False: 0]
  ------------------
 9286|   187k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   187k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   187k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 187k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 187k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   187k|            SCN_CLANG_POP
 9303|   187k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  93.5k|        : base(typename base::contiguous_tag{}, sv)
 4717|  93.5k|    {
 4718|  93.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  93.5k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  93.5k|    {
 4423|  93.5k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   187k|    {
 3000|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   187k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   187k|    {
 2991|   187k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   187k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   187k|    {
 2869|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   187k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   187k|    {
 2850|   187k|        return decay_copy(t.begin());
 2851|   187k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  93.5k|    {
 3075|  93.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  93.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  93.5k|    {
 3041|  93.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  93.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   192k|{
 4691|   192k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 93.5k, False: 98.6k]
  ------------------
 4692|  93.5k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  93.5k|                                ranges::default_sentinel};
 4694|  93.5k|    }
 4695|  98.6k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  98.6k|                            ranges::default_sentinel};
 4697|   192k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  98.6k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  98.6k|    {
 4455|  98.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  98.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  98.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  93.5k|    {
 4540|  93.5k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  93.5k|        m_position = i;
 4542|  93.5k|        return *this;
 4543|  93.5k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  5.03k|{
 9324|  5.03k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  5.03k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  5.03k|{
 9225|  5.03k|#define SCN_VISIT(Type)                                                \
 9226|  5.03k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  5.03k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  5.03k|    }                                                                  \
 9229|  5.03k|    else {                                                             \
 9230|  5.03k|        return vis(monostate_val);                                     \
 9231|  5.03k|    }
 9232|       |
 9233|  5.03k|    monostate monostate_val{};
 9234|       |
 9235|  5.03k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 5.03k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 5.03k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 5.03k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 5.03k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 5.03k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 5.03k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 5.03k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 5.03k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 5.03k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 5.03k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 5.03k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 5.03k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 5.03k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 5.03k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 5.03k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 5.03k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 5.03k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 5.03k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 5.03k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 5.03k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 5.03k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 5.03k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 5.03k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 5.03k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  5.03k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 5.03k, False: 0]
  ------------------
 9286|  5.03k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  5.03k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  5.03k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 5.03k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 5.03k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  5.03k|            SCN_CLANG_POP
 9303|  5.03k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6279|  5.03k|        : m_format{format},
 6280|  5.03k|          m_next_arg_id{next_arg_id},
 6281|  5.03k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  5.03k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  5.03k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  5.03k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  5.03k|    {
 6287|  5.03k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|  93.5k|        : m_format{format},
 6280|  93.5k|          m_next_arg_id{next_arg_id},
 6281|  93.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  93.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  93.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  93.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  93.5k|    {
 6287|  93.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  93.5k|{
 7796|  93.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  93.5k|    handler.check_args_exhausted();
 7798|  93.5k|    return handler.get_error();
 7799|  93.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  93.5k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  93.5k|    auto begin = format.data();
 7764|  93.5k|    auto it = begin;
 7765|  93.5k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   116k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 93.5k, False: 23.1k]
  ------------------
 7768|  93.5k|        const auto ch = *it++;
 7769|  93.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 93.5k, False: 0]
  ------------------
 7770|  93.5k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  93.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  93.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.4k, False: 23.1k]
  ------------------
 7774|  70.4k|                return;
 7775|  70.4k|            }
 7776|  93.5k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  93.5k|    }
 7787|       |
 7788|  23.1k|    handler.on_literal_text(begin, end);
 7789|  23.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|  93.5k|{
 7693|  93.5k|    struct id_adapter {
 7694|  93.5k|        constexpr void operator()()
 7695|  93.5k|        {
 7696|  93.5k|            arg_id = handler.on_arg_id();
 7697|  93.5k|        }
 7698|  93.5k|        constexpr void operator()(std::size_t id)
 7699|  93.5k|        {
 7700|  93.5k|            arg_id = handler.on_arg_id(id);
 7701|  93.5k|        }
 7702|       |
 7703|  93.5k|        constexpr void on_error(const char* msg)
 7704|  93.5k|        {
 7705|  93.5k|            SCN_UNLIKELY_ATTR
 7706|  93.5k|            handler.on_error(msg);
 7707|  93.5k|        }
 7708|       |
 7709|  93.5k|        Handler& handler;
 7710|  93.5k|        std::size_t arg_id;
 7711|  93.5k|    };
 7712|       |
 7713|  93.5k|    ++begin;
 7714|  93.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  93.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 93.5k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  93.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 93.5k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  93.5k|    else {
 7726|  93.5k|        auto adapter = id_adapter{handler, 0};
 7727|  93.5k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  93.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  93.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 93.5k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  93.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 93.5k, False: 0]
  ------------------
 7738|  93.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  93.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  93.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  |  Branch (865:45): [True: 0, False: 93.5k]
  |  |  |  Branch (865:45): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  93.5k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  93.5k|    }
 7754|  93.5k|    return begin + 1;
 7755|  93.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  93.5k|{
 7194|  93.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  93.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 93.5k, False: 0]
  |  Branch (7195:26): [True: 0, False: 93.5k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  93.5k|    handler();
 7200|  93.5k|    return begin;
 7201|  93.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  93.5k|        {
 7696|  93.5k|            arg_id = handler.on_arg_id();
 7697|  93.5k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  75.5k|    {
 4352|  75.5k|        return sync(0);
 4353|  75.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  5.03k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|  10.0k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  98.7k|    {
 2926|  98.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  98.7k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  98.7k|    {
 2908|  98.7k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  98.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   191k|{
 2094|   191k|    return SCN_FWD(t);
  ------------------
  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   191k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  45.3k|    {
 4533|  45.3k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  45.3k|        m_position += n;
 4535|  45.3k|        return *this;
 4536|  45.3k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  92.2k|    {
 2926|  92.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  92.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  92.2k|    {
 2908|  92.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  92.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  23.1k|    {
 4533|  23.1k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  23.1k|        m_position += n;
 4535|  23.1k|        return *this;
 4536|  23.1k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  46.7k|{
   44|  46.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  46.7k|{
   60|  46.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.03k|{
   72|  5.03k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.03k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  46.7k|{
   44|  46.7k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.7k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  46.7k|{
   60|  46.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.03k|{
   72|  5.03k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.03k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.67k|{
  171|  1.67k|    auto result = make_scan_result<Source, T>();
  172|  1.67k|    fill_scan_result(
  173|  1.67k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.67k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.67k|    return result;
  176|  1.67k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  95.2k|{
  250|  95.2k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  95.2k|        .transform_error(impl::make_eof_scan_error);
  252|  95.2k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  93.5k|{
  250|  93.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.5k|        .transform_error(impl::make_eof_scan_error);
  252|  93.5k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   181k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   181k|{
  309|   181k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   181k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  40.3k|{
 1903|  40.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  40.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  47.6k|{
 1911|  47.6k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  47.6k|    return sync_after_vscan(source, n);
 1913|  47.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  46.7k|{
 1921|  46.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  46.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  46.7k|{
 1929|  46.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  46.7k|    return sync_after_vscan(source, n);
 1931|  46.7k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  58.6k|{
 3582|  58.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.7k, False: 26.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.7k|    }
 3586|       |
 3587|  26.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.8k|    auto begin = contiguous_ctx.begin();
 3590|  26.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.7k, False: 15.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.7k|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  15.1k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.8k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  58.6k|{
 3582|  58.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.7k, False: 26.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.7k|    }
 3586|       |
 3587|  26.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.8k|    auto begin = contiguous_ctx.begin();
 3590|  26.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.7k, False: 15.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.7k|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  15.1k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.8k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  58.6k|{
 3582|  58.6k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.7k, False: 26.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.7k|    }
 3586|       |
 3587|  26.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.8k|    auto begin = contiguous_ctx.begin();
 3590|  26.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.7k, False: 15.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.7k|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  15.1k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.8k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  62.3k|{
 3582|  62.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.1k, False: 31.1k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.1k|    }
 3586|       |
 3587|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  31.1k|    auto begin = contiguous_ctx.begin();
 3590|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 7.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.70k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  31.1k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  62.3k|{
 3582|  62.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.1k, False: 31.1k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.1k|    }
 3586|       |
 3587|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  31.1k|    auto begin = contiguous_ctx.begin();
 3590|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 7.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.70k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  31.1k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  62.3k|{
 3582|  62.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.1k, False: 31.1k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.1k|    }
 3586|       |
 3587|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  31.1k|    auto begin = contiguous_ctx.begin();
 3590|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.4k, False: 7.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.4k|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  7.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  7.70k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  31.1k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   175k|{
  215|   175k|    return find_classic_impl(
  216|   175k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   175k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   175k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  15.1k|{
  329|  15.1k|    SCN_UNLIKELY_ATTR
  330|  15.1k|    return e;
  331|  15.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  40.3k|{
 1872|  40.3k|    return vscan_internal(source, format, args);
 1873|  40.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  47.6k|{
 1878|  47.6k|    auto n = vscan_internal(source, format, args);
 1879|  47.6k|    return sync_after_vscan(source, n);
 1880|  47.6k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  46.7k|{
 1886|  46.7k|    return vscan_internal(source, format, args);
 1887|  46.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  46.7k|{
 1892|  46.7k|    auto n = vscan_internal(source, format, args);
 1893|  46.7k|    return sync_after_vscan(source, n);
 1894|  46.7k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.51k|{
 1958|  2.51k|    return vscan_value_internal(source, arg);
 1959|  2.51k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.51k|{
 1963|  2.51k|    auto n = vscan_value_internal(source, arg);
 1964|  2.51k|    return sync_after_vscan(source, n);
 1965|  2.51k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  5.03k|{
 1971|  5.03k|    return vscan_value_internal(source, arg);
 1972|  5.03k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  5.03k|{
 1977|  5.03k|    auto n = vscan_value_internal(source, arg);
 1978|  5.03k|    return sync_after_vscan(source, n);
 1979|  5.03k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  85.5k|{
  118|  85.5k|    static_assert(sizeof(*source.data()) == 1);
  119|  85.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  85.5k|    uint64_t word{};
  121|  85.5k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  85.5k|    return has_byte_greater(word, 127) != 0;
  124|  85.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   175k|{
  131|   175k|    auto it = source.begin();
  132|       |
  133|   181k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 85.5k, False: 96.0k]
  ------------------
  134|  85.5k|        auto sv =
  135|  85.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  85.5k|                .substr(0, 8);
  137|       |
  138|  85.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 73.3k, False: 12.2k]
  ------------------
  139|  73.3k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  73.3k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  73.3k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 68.9k, False: 4.38k]
  ------------------
  142|  68.9k|                break;
  143|  68.9k|            }
  144|  4.38k|            continue;
  145|  73.3k|        }
  146|       |
  147|  18.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.0k, False: 1.36k]
  ------------------
  148|  17.0k|            auto tmp =
  149|  17.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.0k|            auto res = get_next_code_point(tmp);
  151|  17.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.8k, False: 6.21k]
  ------------------
  152|  10.8k|                return it;
  153|  10.8k|            }
  154|  6.21k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.21k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.21k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  6.21k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.21k|        }
  158|  12.2k|    }
  159|       |
  160|   165k|    return detail::make_string_view_iterator(source, it);
  161|   175k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   161k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  95.2k|{
 1769|  95.2k|    const auto argcount = args.size();
 1770|  95.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 95.2k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  95.2k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 95.2k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  95.2k|    SCN_UNLIKELY_ATTR
 1783|  95.2k|    {
 1784|  95.2k|        auto handler = format_handler<false, CharT>{
 1785|  95.2k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  95.2k|        return vscan_parse_format_string(format, handler);
 1787|  95.2k|    }
 1788|  95.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   175k|{
 1317|   175k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 175k, False: 0]
  ------------------
 1318|   175k|        return false;
 1319|   175k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   175k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.51k|{
 1350|  2.51k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.51k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.51k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.51k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.51k|    static_cast<    \
  |  |  935|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.51k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.51k|    }                                                  \
  |  |  |  | 3939|  2.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.51k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  80.6k|        : format_handler_base{argcount},
 1593|  80.6k|          parse_ctx{source_tag<Source&&>, format},
 1594|  80.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  80.6k|    {
 1596|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   363k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   363k|    {
 1412|   363k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 363k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   363k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  80.6k|        : contiguous_ctx(source, args, loc)
 1544|  80.6k|    {
 1545|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  80.6k|{
 1734|  80.6k|    const auto beg = handler.get_ctx().begin();
 1735|  80.6k|    detail::parse_format_string<false>(format, handler);
 1736|  80.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 45.3k]
  |  |  ------------------
  ------------------
 1737|  35.2k|        return unexpected(err.error());
 1738|  35.2k|    }
 1739|  45.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  80.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   252k|    {
 1718|   252k|        return ctx.get();
 1719|   252k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   252k|    {
 1549|   252k|        return contiguous_ctx;
 1550|   252k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   126k|    {
 1600|   126k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 126k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   211k|    {
 1460|   211k|        error = unexpected(err);
 1461|   211k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  80.6k|{
 1372|  80.6k|    auto arg = ctx.arg(id);
 1373|  80.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  80.6k|    return arg;
 1377|  80.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   363k|    {
 1486|   363k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 363k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   363k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 363k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   363k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   363k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 363k, False: 0]
  |  |  ------------------
  ------------------
 1498|   363k|            visited_args_lower64 |= (1ull << id);
 1499|   363k|            return;
 1500|   363k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   363k|    {
 1470|   363k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 363k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   363k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   363k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 363k, False: 0]
  |  |  ------------------
  ------------------
 1477|   363k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   363k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   363k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  80.6k|    {
 1640|  80.6k|        return parse_ctx.next_arg_id();
 1641|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  80.6k|    {
 1680|  80.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  80.6k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  80.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 80.6k, False: 0]
  ------------------
 1684|  80.6k|            parse_ctx.advance_to(begin);
 1685|  80.6k|            on_visit_scan_arg(
 1686|  80.6k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  80.6k|                    parse_ctx, get_custom_ctx()},
 1688|  80.6k|                arg);
 1689|  80.6k|            return parse_ctx.begin();
 1690|  80.6k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  80.6k|    {
 1651|  80.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 80.6k]
  |  Branch (1651:13): [True: 0, False: 80.6k]
  |  Branch (1651:29): [True: 0, False: 80.6k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  80.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  80.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 45.3k]
  |  |  ------------------
  ------------------
 1658|  35.2k|            on_error(r.error());
 1659|  35.2k|        }
 1660|  45.3k|        else {
 1661|  45.3k|            get_ctx().advance_to(*r);
 1662|  45.3k|        }
 1663|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  80.6k|    {
 1722|  80.6k|        return ctx.get_custom();
 1723|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  80.6k|    {
 1553|  80.6k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 80.6k, False: 0]
  ------------------
 1554|  80.6k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  80.6k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  80.6k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  80.6k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  80.6k|        }
 1559|  80.6k|        auto it = buffer->get().begin();
 1560|  80.6k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  80.6k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  80.6k|        return *custom_ctx;
 1563|  80.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   363k|    {
 1419|   363k|        {
 1420|   363k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 363k]
  ------------------
 1421|   363k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 363k]
  ------------------
 1422|   363k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   363k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   363k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 363k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   363k|        }
 1430|       |
 1431|   363k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 363k, False: 0]
  ------------------
 1432|   363k|            return;
 1433|   363k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.45M|    {
 1465|  1.45M|        return error;
 1466|  1.45M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  95.2k|        : format_handler_base{argcount},
 1593|  95.2k|          parse_ctx{source_tag<Source&&>, format},
 1594|  95.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  95.2k|    {
 1596|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  95.2k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  95.2k|    static_cast<    \
  |  |  935|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  95.2k|    {
 1521|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  95.2k|{
 1734|  95.2k|    const auto beg = handler.get_ctx().begin();
 1735|  95.2k|    detail::parse_format_string<false>(format, handler);
 1736|  95.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 59.9k]
  |  |  ------------------
  ------------------
 1737|  35.2k|        return unexpected(err.error());
 1738|  35.2k|    }
 1739|  59.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  95.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   310k|    {
 1718|   310k|        return ctx.get();
 1719|   310k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   310k|    {
 1525|   310k|        return ctx;
 1526|   310k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   155k|    {
 1600|   155k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 155k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  95.2k|{
 1372|  95.2k|    auto arg = ctx.arg(id);
 1373|  95.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.2k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  95.2k|    return arg;
 1377|  95.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  95.2k|    {
 1640|  95.2k|        return parse_ctx.next_arg_id();
 1641|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  95.2k|    {
 1680|  95.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  95.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  95.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 95.2k, False: 0]
  ------------------
 1684|  95.2k|            parse_ctx.advance_to(begin);
 1685|  95.2k|            on_visit_scan_arg(
 1686|  95.2k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  95.2k|                    parse_ctx, get_custom_ctx()},
 1688|  95.2k|                arg);
 1689|  95.2k|            return parse_ctx.begin();
 1690|  95.2k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  95.2k|    {
 1651|  95.2k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 95.2k]
  |  Branch (1651:13): [True: 0, False: 95.2k]
  |  Branch (1651:29): [True: 0, False: 95.2k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  95.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  95.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.2k, False: 59.9k]
  |  |  ------------------
  ------------------
 1658|  35.2k|            on_error(r.error());
 1659|  35.2k|        }
 1660|  59.9k|        else {
 1661|  59.9k|            get_ctx().advance_to(*r);
 1662|  59.9k|        }
 1663|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  95.2k|    {
 1722|  95.2k|        return ctx.get_custom();
 1723|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  95.2k|    {
 1529|  95.2k|        return ctx;
 1530|  95.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  80.6k|{
 1749|  80.6k|    const auto argcount = args.size();
 1750|  80.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 80.6k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  80.6k|    auto handler = format_handler<true, CharT>{
 1756|  80.6k|        ranges::subrange<const CharT*>{source.data(),
 1757|  80.6k|                                       source.data() + source.size()},
 1758|  80.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  80.6k|    return vscan_parse_format_string(format, handler);
 1760|  80.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.51k|{
 1330|  2.51k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.51k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.51k|    auto reader =
 1336|  2.51k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.51k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.51k|                                           source.data() + source.size()},
 1339|  2.51k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.51k|    static_cast<    \
  |  |  935|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.51k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.51k|    }                                                  \
  |  |  |  | 3939|  2.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.51k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  97.7k|{
 1849|  97.7k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  97.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 59.9k, False: 37.7k]
  |  |  ------------------
  ------------------
 1850|  59.9k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 59.9k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  59.9k|    }
 1856|  37.7k|    else {
 1857|  37.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 37.7k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  37.7k|    }
 1863|  97.7k|    return result;
 1864|  97.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  93.5k|{
 1749|  93.5k|    const auto argcount = args.size();
 1750|  93.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 93.5k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  93.5k|    auto handler = format_handler<true, CharT>{
 1756|  93.5k|        ranges::subrange<const CharT*>{source.data(),
 1757|  93.5k|                                       source.data() + source.size()},
 1758|  93.5k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  93.5k|    return vscan_parse_format_string(format, handler);
 1760|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   187k|{
 1317|   187k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 187k, False: 0]
  ------------------
 1318|   187k|        return false;
 1319|   187k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   187k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  5.03k|{
 1330|  5.03k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.03k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  5.03k|    auto reader =
 1336|  5.03k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  5.03k|            ranges::subrange<const CharT*>{source.data(),
 1338|  5.03k|                                           source.data() + source.size()},
 1339|  5.03k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  5.03k|    static_cast<    \
  |  |  935|  5.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  5.03k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  5.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  5.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  5.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.03k|    }                                                  \
  |  |  |  | 3939|  5.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  5.03k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  93.5k|        : format_handler_base{argcount},
 1593|  93.5k|          parse_ctx{source_tag<Source&&>, format},
 1594|  93.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  93.5k|    {
 1596|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  93.5k|        : contiguous_ctx(source, args, loc)
 1544|  93.5k|    {
 1545|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  93.5k|{
 1734|  93.5k|    const auto beg = handler.get_ctx().begin();
 1735|  93.5k|    detail::parse_format_string<false>(format, handler);
 1736|  93.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.4k, False: 23.1k]
  |  |  ------------------
  ------------------
 1737|  70.4k|        return unexpected(err.error());
 1738|  70.4k|    }
 1739|  23.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   233k|    {
 1718|   233k|        return ctx.get();
 1719|   233k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   233k|    {
 1549|   233k|        return contiguous_ctx;
 1550|   233k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   116k|    {
 1600|   116k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 116k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   116k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  93.5k|{
 1372|  93.5k|    auto arg = ctx.arg(id);
 1373|  93.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  93.5k|    return arg;
 1377|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  93.5k|    {
 1640|  93.5k|        return parse_ctx.next_arg_id();
 1641|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  93.5k|    {
 1680|  93.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  93.5k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  93.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 93.5k, False: 0]
  ------------------
 1684|  93.5k|            parse_ctx.advance_to(begin);
 1685|  93.5k|            on_visit_scan_arg(
 1686|  93.5k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  93.5k|                    parse_ctx, get_custom_ctx()},
 1688|  93.5k|                arg);
 1689|  93.5k|            return parse_ctx.begin();
 1690|  93.5k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  93.5k|    {
 1651|  93.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 93.5k]
  |  Branch (1651:13): [True: 0, False: 93.5k]
  |  Branch (1651:29): [True: 0, False: 93.5k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  93.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  93.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.4k, False: 23.1k]
  |  |  ------------------
  ------------------
 1658|  70.4k|            on_error(r.error());
 1659|  70.4k|        }
 1660|  23.1k|        else {
 1661|  23.1k|            get_ctx().advance_to(*r);
 1662|  23.1k|        }
 1663|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  93.5k|    {
 1722|  93.5k|        return ctx.get_custom();
 1723|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  93.5k|    {
 1553|  93.5k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 93.5k, False: 0]
  ------------------
 1554|  93.5k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  93.5k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  93.5k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  93.5k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  93.5k|        }
 1559|  93.5k|        auto it = buffer->get().begin();
 1560|  93.5k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  93.5k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  93.5k|        return *custom_ctx;
 1563|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  93.5k|{
 1769|  93.5k|    const auto argcount = args.size();
 1770|  93.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 93.5k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  93.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 93.5k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  93.5k|    SCN_UNLIKELY_ATTR
 1783|  93.5k|    {
 1784|  93.5k|        auto handler = format_handler<false, CharT>{
 1785|  93.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  93.5k|        return vscan_parse_format_string(format, handler);
 1787|  93.5k|    }
 1788|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  5.03k|{
 1350|  5.03k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.03k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  5.03k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  5.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 5.03k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  5.03k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  5.03k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  5.03k|    static_cast<    \
  |  |  935|  5.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  5.03k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  5.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  5.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  5.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.03k|    }                                                  \
  |  |  |  | 3939|  5.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  5.03k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  93.5k|        : format_handler_base{argcount},
 1593|  93.5k|          parse_ctx{source_tag<Source&&>, format},
 1594|  93.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  93.5k|    {
 1596|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  93.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  93.5k|    {
 1521|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  93.5k|{
 1734|  93.5k|    const auto beg = handler.get_ctx().begin();
 1735|  93.5k|    detail::parse_format_string<false>(format, handler);
 1736|  93.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.4k, False: 23.1k]
  |  |  ------------------
  ------------------
 1737|  70.4k|        return unexpected(err.error());
 1738|  70.4k|    }
 1739|  23.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   233k|    {
 1718|   233k|        return ctx.get();
 1719|   233k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   233k|    {
 1525|   233k|        return ctx;
 1526|   233k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   116k|    {
 1600|   116k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 116k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   116k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  93.5k|{
 1372|  93.5k|    auto arg = ctx.arg(id);
 1373|  93.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  93.5k|    return arg;
 1377|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  93.5k|    {
 1640|  93.5k|        return parse_ctx.next_arg_id();
 1641|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  93.5k|    {
 1680|  93.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  93.5k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  93.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 93.5k, False: 0]
  ------------------
 1684|  93.5k|            parse_ctx.advance_to(begin);
 1685|  93.5k|            on_visit_scan_arg(
 1686|  93.5k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  93.5k|                    parse_ctx, get_custom_ctx()},
 1688|  93.5k|                arg);
 1689|  93.5k|            return parse_ctx.begin();
 1690|  93.5k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  93.5k|    {
 1651|  93.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 93.5k]
  |  Branch (1651:13): [True: 0, False: 93.5k]
  |  Branch (1651:29): [True: 0, False: 93.5k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  93.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  93.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 70.4k, False: 23.1k]
  |  |  ------------------
  ------------------
 1658|  70.4k|            on_error(r.error());
 1659|  70.4k|        }
 1660|  23.1k|        else {
 1661|  23.1k|            get_ctx().advance_to(*r);
 1662|  23.1k|        }
 1663|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  93.5k|    {
 1722|  93.5k|        return ctx.get_custom();
 1723|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  93.5k|    {
 1529|  93.5k|        return ctx;
 1530|  93.5k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  98.6k|{
 1849|  98.6k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  98.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 23.1k, False: 75.5k]
  |  |  ------------------
  ------------------
 1850|  23.1k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 23.1k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  23.1k|    }
 1856|  75.5k|    else {
 1857|  75.5k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  75.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.5k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  75.5k|    }
 1863|  98.6k|    return result;
 1864|  98.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.51k|{
 1795|  2.51k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.51k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.51k|{
 1795|  2.51k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.51k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  5.03k|{
 1795|  5.03k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  5.03k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  5.03k|{
 1795|  5.03k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  5.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  5.03k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.7k|{
 3563|  31.7k|    {
 3564|  31.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 504, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    504|    }                                                  \
  |  |  |  | 3939|  31.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.2k|        ctx.range(), t, ctx.locale());
 3571|  31.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 19.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  19.9k|    return r.get_iterator();
 3576|  31.2k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.2k|          m_begin(ranges::begin(m_range)),
 2708|  31.2k|          m_tm(t),
 2709|  31.2k|          m_loc(loc)
 2710|  31.2k|    {
 2711|  31.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.4k|    {
 3358|  10.4k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  44.5k|    {
 3363|  44.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 33.3k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  44.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.9k|    {
 2715|  55.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.9k, False: 22.2k]
  ------------------
 2716|  32.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 194, False: 32.7k]
  ------------------
 2717|    194|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    194|            }
 2719|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.4k, False: 22.2k]
  ------------------
 2720|  10.4k|                return on_error("Invalid literal character");
 2721|  10.4k|            }
 2722|  22.2k|            ++beg;
 2723|  22.2k|            ++m_begin;
 2724|  22.2k|        }
 2725|  32.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.63k|    {
 2745|  3.63k|#if !SCN_DISABLE_LOCALE
 2746|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.63k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.63k|#endif
 2753|       |
 2754|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.63k|    {
 2218|  3.63k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.63k|        t.tm_year = y - 1900;
 2223|  3.63k|        st.set_full_year(h);
 2224|  3.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.6k|    {
 3381|  56.6k|        int digits_read = 0;
 3382|  56.6k|        int accumulator = 0;
 3383|  99.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.6k, False: 398]
  ------------------
 3384|  98.6k|            const auto ch = *m_begin;
 3385|  98.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.7k, False: 69.8k]
  |  Branch (3385:36): [True: 18.7k, False: 51.1k]
  ------------------
 3386|  47.5k|                break;
 3387|  47.5k|            }
 3388|  51.1k|            ++m_begin;
 3389|  51.1k|            ++digits_read;
 3390|  51.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  51.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.77k, False: 42.3k]
  ------------------
 3392|  8.77k|                break;
 3393|  8.77k|            }
 3394|  51.1k|        }
 3395|  56.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.6k, False: 40.0k]
  ------------------
 3396|  16.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.6k|                                 "Too few integer digits"});
 3398|  16.6k|            return -1;
 3399|  16.6k|        }
 3400|  40.0k|        return accumulator;
 3401|  56.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.84k|    {
 2759|  5.84k|#if !SCN_DISABLE_LOCALE
 2760|  5.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.84k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.84k|#endif
 2768|       |
 2769|  5.84k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.84k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.84k|    {
 2235|  5.84k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 1.58k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 0, False: 4.25k]
  |  |  ------------------
  ------------------
 2236|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.58k|                                "Invalid value for tm_year"});
 2238|  1.58k|        }
 2239|  4.25k|        st.short_year_value = y;
 2240|  4.25k|        st.set_short_year(h);
 2241|  4.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  4.32k|    {
 2802|  4.32k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.32k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.32k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.32k|#endif
 2810|       |
 2811|  4.32k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.32k|            {"January", 1},
 2813|  4.32k|            {"February", 2},
 2814|  4.32k|            {"March", 3},
 2815|  4.32k|            {"April", 4},
 2816|  4.32k|            {"May", 5},
 2817|  4.32k|            {"June", 6},
 2818|  4.32k|            {"July", 7},
 2819|  4.32k|            {"August", 8},
 2820|  4.32k|            {"September", 9},
 2821|  4.32k|            {"October", 10},
 2822|  4.32k|            {"November", 11},
 2823|  4.32k|            {"December", 12},
 2824|  4.32k|        }};
 2825|  4.32k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.24k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.24k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.24k|            {"Jan", 1},
 2830|  4.24k|            {"Feb", 2},
 2831|  4.24k|            {"Mar", 3},
 2832|  4.24k|            {"Apr", 4},
 2833|  4.24k|            {"Jun", 6},
 2834|  4.24k|            {"Jul", 7},
 2835|  4.24k|            {"Aug", 8},
 2836|  4.24k|            {"Sep", 9},
 2837|  4.24k|            {"Oct", 10},
 2838|  4.24k|            {"Nov", 11},
 2839|  4.24k|            {"Dec", 12},
 2840|  4.24k|        }};
 2841|  4.24k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.60k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.6k|    {
 2208|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.71k, False: 7.93k]
  |  |  |  Branch (865:45): [True: 2.60k, False: 8.04k]
  |  |  |  Branch (865:45): [True: 114, False: 7.93k]
  |  |  ------------------
  ------------------
 2209|  2.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.71k|                                "Invalid value for tm_mon"});
 2211|  2.71k|        }
 2212|  7.93k|        t.tm_mon = m - 1;
 2213|  7.93k|        st.set_mon(h);
 2214|  7.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.32k|    {
 3419|  4.32k|        auto start_it = m_begin;
 3420|  4.32k|        std::size_t options_available = N;
 3421|  4.32k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.17k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.7k, False: 82]
  ------------------
 3424|  12.7k|            std::size_t i = 0;
 3425|  12.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 64, False: 12.6k]
  ------------------
 3426|     64|                options_available = 0;
 3427|     64|                break;
 3428|     64|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 65.8k, False: 12.6k]
  ------------------
 3432|  65.8k|                const auto cmp = static_cast<unsigned>(
 3433|  65.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  65.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 65.8k]
  ------------------
 3435|  65.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.4k, False: 11.3k]
  |  Branch (3435:34): [True: 51.6k, False: 2.79k]
  ------------------
 3436|  51.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  51.6k|                                options.end());
 3438|  51.6k|                    --options_available;
 3439|  51.6k|                    continue;
 3440|  51.6k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.24k, False: 82]
  ------------------
 3446|  4.24k|            m_begin = start_it;
 3447|  4.24k|            return std::nullopt;
 3448|  4.24k|        }
 3449|     82|        return options.front().second;
 3450|  4.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.24k|    {
 3419|  4.24k|        auto start_it = m_begin;
 3420|  4.24k|        std::size_t options_available = N;
 3421|  4.24k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.54k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 2.63k]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 9.76k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  61.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.1k, False: 9.76k]
  ------------------
 3432|  52.1k|                const auto cmp = static_cast<unsigned>(
 3433|  52.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.1k]
  ------------------
 3435|  52.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.6k, False: 5.55k]
  |  Branch (3435:34): [True: 43.9k, False: 2.70k]
  ------------------
 3436|  43.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.9k|                                options.end());
 3438|  43.9k|                    --options_available;
 3439|  43.9k|                    continue;
 3440|  43.9k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.24k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 2.63k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.24k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.92k|    {
 2848|  7.92k|#if !SCN_DISABLE_LOCALE
 2849|  7.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.92k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.92k|#endif
 2856|       |
 2857|  7.92k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.92k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.90k|    {
 2880|  7.90k|#if !SCN_DISABLE_LOCALE
 2881|  7.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.90k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.90k|#endif
 2888|       |
 2889|  7.90k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.90k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.90k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.90k|    {
 2198|  7.90k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 4.72k]
  |  |  |  Branch (865:45): [True: 3.10k, False: 4.80k]
  |  |  |  Branch (865:45): [True: 80, False: 4.72k]
  |  |  ------------------
  ------------------
 2199|  3.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.18k|                                "Invalid value for tm_mday"});
 2201|  3.18k|        }
 2202|  4.72k|        t.tm_mday = d;
 2203|  4.72k|        st.set_mday(h);
 2204|  4.72k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.14k|    {
 2895|  3.14k|#if !SCN_DISABLE_LOCALE
 2896|  3.14k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.14k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.14k|#endif
 2903|       |
 2904|  3.14k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.14k|            {"Sunday", 0},
 2906|  3.14k|            {"Monday", 1},
 2907|  3.14k|            {"Tuesday", 2},
 2908|  3.14k|            {"Wednesday", 3},
 2909|  3.14k|            {"Thursday", 4},
 2910|  3.14k|            {"Friday", 5},
 2911|  3.14k|            {"Saturday", 6},
 2912|  3.14k|        }};
 2913|  3.14k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.14k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.14k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.14k|            {"Sun", 0},
 2918|  3.14k|            {"Mon", 1},
 2919|  3.14k|            {"Tue", 2},
 2920|  3.14k|            {"Wed", 3},
 2921|  3.14k|            {"Thu", 4},
 2922|  3.14k|            {"Fri", 5},
 2923|  3.14k|            {"Sat", 6},
 2924|  3.14k|        }};
 2925|  3.14k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.52k, False: 1.62k]
  ------------------
 2926|  1.52k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.52k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.14k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.52k|    {
 2245|  1.52k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.52k|        t.tm_wday = d;
 2250|  1.52k|        st.set_wday(h);
 2251|  1.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.29k|    {
 3419|  6.29k|        auto start_it = m_begin;
 3420|  6.29k|        std::size_t options_available = N;
 3421|  6.29k|        std::size_t chars_consumed = 0;
 3422|  20.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 16.0k, False: 4.71k]
  ------------------
 3423|  20.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.5k, False: 1.52k]
  ------------------
 3424|  14.5k|            std::size_t i = 0;
 3425|  14.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.4k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.4k|            const auto ch = *m_begin;
 3430|  14.4k|            ++m_begin;
 3431|  66.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.2k, False: 14.4k]
  ------------------
 3432|  52.2k|                const auto cmp = static_cast<unsigned>(
 3433|  52.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.2k]
  ------------------
 3435|  52.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 9.74k]
  |  Branch (3435:34): [True: 42.4k, False: 56]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  9.79k|                ++i;
 3442|  9.79k|            }
 3443|  14.4k|            ++chars_consumed;
 3444|  14.4k|        }
 3445|  6.29k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.76k, False: 1.52k]
  ------------------
 3446|  4.76k|            m_begin = start_it;
 3447|  4.76k|            return std::nullopt;
 3448|  4.76k|        }
 3449|  1.52k|        return options.front().second;
 3450|  6.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.3k|    {
 2969|  14.3k|#if !SCN_DISABLE_LOCALE
 2970|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.3k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.3k|#endif
 2977|       |
 2978|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.3k|    {
 2178|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 202, False: 11.9k]
  |  |  ------------------
  ------------------
 2179|  2.35k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.35k|                                  "Invalid value for tm_hour"});
 2181|  2.35k|        }
 2182|  11.9k|        t.tm_hour = h;
 2183|  11.9k|        st.set_hour24(hdl);
 2184|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.2k|    {
 2997|  14.2k|#if !SCN_DISABLE_LOCALE
 2998|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.2k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.2k|#endif
 3005|       |
 3006|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.2k|    {
 2168|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.62k, False: 11.6k]
  |  |  |  Branch (865:45): [True: 2.59k, False: 11.7k]
  |  |  |  Branch (865:45): [True: 26, False: 11.6k]
  |  |  ------------------
  ------------------
 2169|  2.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.62k|                                "Invalid value for tm_min"});
 2171|  2.62k|        }
 2172|  11.6k|        t.tm_min = m;
 2173|  11.6k|        st.set_min(h);
 2174|  11.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.74k|    {
 3011|  2.74k|#if !SCN_DISABLE_LOCALE
 3012|  2.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.74k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.74k|#endif
 3019|       |
 3020|  2.74k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.74k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.74k|    {
 2158|  2.74k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 4, False: 1.16k]
  |  |  ------------------
  ------------------
 2159|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.58k|                                "Invalid value for tm_sec"});
 2161|  1.58k|        }
 2162|  1.16k|        t.tm_sec = s;
 2163|  1.16k|        st.set_sec(h);
 2164|  1.16k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.84k|    {
 3253|       |        // %m/%d/%y
 3254|  5.84k|        constexpr CharT slash = '/';
 3255|  5.84k|        on_dec_month();
 3256|  5.84k|        on_text(&slash, &slash + 1);
 3257|  5.84k|        on_day_of_month();
 3258|  5.84k|        on_text(&slash, &slash + 1);
 3259|  5.84k|        on_short_year();
 3260|  5.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  2.00k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.00k|        constexpr CharT dash = '-';
 3265|  2.00k|        on_full_year();
 3266|  2.00k|        on_text(&dash, &dash + 1);
 3267|  2.00k|        on_dec_month();
 3268|  2.00k|        on_text(&dash, &dash + 1);
 3269|  2.00k|        on_day_of_month();
 3270|  2.00k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.74k|    {
 3303|       |        // %H:%M:%S
 3304|  2.74k|        constexpr CharT colon = ':';
 3305|  2.74k|        on_24_hour();
 3306|  2.74k|        on_text(&colon, &colon + 1);
 3307|  2.74k|        on_minute();
 3308|  2.74k|        on_text(&colon, &colon + 1);
 3309|  2.74k|        on_second();
 3310|  2.74k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.9k|    {
 3342|  19.9k|        m_st.verify(*this);
 3343|  19.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.6k, False: 388]
  |  Branch (3346:37): [True: 4.24k, False: 15.3k]
  |  Branch (3346:60): [True: 0, False: 15.3k]
  ------------------
 3347|  4.24k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.24k|        }
 3349|  19.9k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  8.78k|    {
 2296|  8.78k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  8.78k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  62.6k|    {
 3353|  62.6k|        return m_error;
 3354|  62.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.9k|    {
 3370|  19.9k|        return m_begin;
 3371|  19.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.8k|{
 3563|  26.8k|    {
 3564|  26.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 270, False: 26.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    270|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  26.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  26.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  26.6k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  26.6k|        ctx.range(), t, ctx.locale());
 3571|  26.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  26.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  26.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 15.1k]
  |  |  ------------------
  ------------------
 3573|  11.4k|        return unexpected(e.error());
 3574|  11.4k|    }
 3575|  15.1k|    return r.get_iterator();
 3576|  26.6k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  80.6k|{
  250|  80.6k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  80.6k|        .transform_error(impl::make_eof_scan_error);
  252|  80.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  26.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  26.6k|          m_begin(ranges::begin(m_range)),
 2708|  26.6k|          m_tm(t),
 2709|  26.6k|          m_loc(loc)
 2710|  26.6k|    {
 2711|  26.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.7k|    {
 3358|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  46.2k|    {
 3363|  46.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.4k, False: 34.8k]
  ------------------
 3364|  11.4k|            m_error = unexpected(e);
 3365|  11.4k|        }
 3366|  46.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.2k|    {
 2715|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.2k, False: 13.3k]
  ------------------
 2716|  24.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 150, False: 24.0k]
  ------------------
 2717|    150|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    150|            }
 2719|  24.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.7k, False: 13.3k]
  ------------------
 2720|  10.7k|                return on_error("Invalid literal character");
 2721|  10.7k|            }
 2722|  13.3k|            ++beg;
 2723|  13.3k|            ++m_begin;
 2724|  13.3k|        }
 2725|  24.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.68k|    {
 2745|  3.68k|#if !SCN_DISABLE_LOCALE
 2746|  3.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.68k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.68k|#endif
 2753|       |
 2754|  3.68k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.68k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.68k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.68k|    {
 2218|  3.68k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.68k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.68k|        t.tm_year = y - 1900;
 2223|  3.68k|        st.set_full_year(h);
 2224|  3.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.3k|    {
 3381|  43.3k|        int digits_read = 0;
 3382|  43.3k|        int accumulator = 0;
 3383|  71.4k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.1k, False: 324]
  ------------------
 3384|  71.1k|            const auto ch = *m_begin;
 3385|  71.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.1k, False: 50.0k]
  |  Branch (3385:36): [True: 17.5k, False: 32.4k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.40k, False: 28.0k]
  ------------------
 3392|  4.40k|                break;
 3393|  4.40k|            }
 3394|  32.4k|        }
 3395|  43.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.4k, False: 25.9k]
  ------------------
 3396|  17.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.4k|                                 "Too few integer digits"});
 3398|  17.4k|            return -1;
 3399|  17.4k|        }
 3400|  25.9k|        return accumulator;
 3401|  43.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.77k|    {
 2759|  1.77k|#if !SCN_DISABLE_LOCALE
 2760|  1.77k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.77k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.77k|#endif
 2768|       |
 2769|  1.77k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.77k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.77k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.77k|    {
 2235|  1.77k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.63k, False: 138]
  |  |  |  Branch (865:45): [True: 1.63k, False: 138]
  |  |  |  Branch (865:45): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 2236|  1.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.63k|                                "Invalid value for tm_year"});
 2238|  1.63k|        }
 2239|    138|        st.short_year_value = y;
 2240|    138|        st.set_short_year(h);
 2241|    138|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  4.35k|    {
 2802|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.35k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.35k|#endif
 2810|       |
 2811|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.35k|            {"January", 1},
 2813|  4.35k|            {"February", 2},
 2814|  4.35k|            {"March", 3},
 2815|  4.35k|            {"April", 4},
 2816|  4.35k|            {"May", 5},
 2817|  4.35k|            {"June", 6},
 2818|  4.35k|            {"July", 7},
 2819|  4.35k|            {"August", 8},
 2820|  4.35k|            {"September", 9},
 2821|  4.35k|            {"October", 10},
 2822|  4.35k|            {"November", 11},
 2823|  4.35k|            {"December", 12},
 2824|  4.35k|        }};
 2825|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.26k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.26k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.26k|            {"Jan", 1},
 2830|  4.26k|            {"Feb", 2},
 2831|  4.26k|            {"Mar", 3},
 2832|  4.26k|            {"Apr", 4},
 2833|  4.26k|            {"Jun", 6},
 2834|  4.26k|            {"Jul", 7},
 2835|  4.26k|            {"Aug", 8},
 2836|  4.26k|            {"Sep", 9},
 2837|  4.26k|            {"Oct", 10},
 2838|  4.26k|            {"Nov", 11},
 2839|  4.26k|            {"Dec", 12},
 2840|  4.26k|        }};
 2841|  4.26k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.63k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.63k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.59k|    {
 2208|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.81k, False: 3.78k]
  |  |  |  Branch (865:45): [True: 2.71k, False: 3.87k]
  |  |  |  Branch (865:45): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 2209|  2.81k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.81k|                                "Invalid value for tm_mon"});
 2211|  2.81k|        }
 2212|  3.78k|        t.tm_mon = m - 1;
 2213|  3.78k|        st.set_mon(h);
 2214|  3.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.35k|    {
 3419|  4.35k|        auto start_it = m_begin;
 3420|  4.35k|        std::size_t options_available = N;
 3421|  4.35k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.21k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.6k, False: 82]
  ------------------
 3424|  12.6k|            std::size_t i = 0;
 3425|  12.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 12.6k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 66.1k, False: 12.6k]
  ------------------
 3432|  66.1k|                const auto cmp = static_cast<unsigned>(
 3433|  66.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  66.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 66.1k]
  ------------------
 3435|  66.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.7k, False: 11.3k]
  |  Branch (3435:34): [True: 52.0k, False: 2.76k]
  ------------------
 3436|  52.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  52.0k|                                options.end());
 3438|  52.0k|                    --options_available;
 3439|  52.0k|                    continue;
 3440|  52.0k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.26k, False: 82]
  ------------------
 3446|  4.26k|            m_begin = start_it;
 3447|  4.26k|            return std::nullopt;
 3448|  4.26k|        }
 3449|     82|        return options.front().second;
 3450|  4.35k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.26k|    {
 3419|  4.26k|        auto start_it = m_begin;
 3420|  4.26k|        std::size_t options_available = N;
 3421|  4.26k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.58k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.80k, False: 2.63k]
  ------------------
 3424|  9.80k|            std::size_t i = 0;
 3425|  9.80k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 9.75k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  9.75k|            const auto ch = *m_begin;
 3430|  9.75k|            ++m_begin;
 3431|  62.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.4k, False: 9.75k]
  ------------------
 3432|  52.4k|                const auto cmp = static_cast<unsigned>(
 3433|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.4k]
  ------------------
 3435|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.9k, False: 5.53k]
  |  Branch (3435:34): [True: 44.2k, False: 2.67k]
  ------------------
 3436|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  44.2k|                                options.end());
 3438|  44.2k|                    --options_available;
 3439|  44.2k|                    continue;
 3440|  44.2k|                }
 3441|  8.20k|                ++i;
 3442|  8.20k|            }
 3443|  9.75k|            ++chars_consumed;
 3444|  9.75k|        }
 3445|  4.26k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.63k, False: 2.63k]
  ------------------
 3446|  1.63k|            m_begin = start_it;
 3447|  1.63k|            return std::nullopt;
 3448|  1.63k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.26k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.87k|    {
 2848|  3.87k|#if !SCN_DISABLE_LOCALE
 2849|  3.87k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.87k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.87k|#endif
 2856|       |
 2857|  3.87k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.87k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.86k|    {
 2880|  3.86k|#if !SCN_DISABLE_LOCALE
 2881|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.86k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.86k|#endif
 2888|       |
 2889|  3.86k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.86k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.86k|    {
 2198|  3.86k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.26k, False: 602]
  |  |  |  Branch (865:45): [True: 3.18k, False: 674]
  |  |  |  Branch (865:45): [True: 72, False: 602]
  |  |  ------------------
  ------------------
 2199|  3.26k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.26k|                                "Invalid value for tm_mday"});
 2201|  3.26k|        }
 2202|    602|        t.tm_mday = d;
 2203|    602|        st.set_mday(h);
 2204|    602|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.10k|    {
 2895|  3.10k|#if !SCN_DISABLE_LOCALE
 2896|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.10k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.10k|#endif
 2903|       |
 2904|  3.10k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.10k|            {"Sunday", 0},
 2906|  3.10k|            {"Monday", 1},
 2907|  3.10k|            {"Tuesday", 2},
 2908|  3.10k|            {"Wednesday", 3},
 2909|  3.10k|            {"Thursday", 4},
 2910|  3.10k|            {"Friday", 5},
 2911|  3.10k|            {"Saturday", 6},
 2912|  3.10k|        }};
 2913|  3.10k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.10k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.10k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.10k|            {"Sun", 0},
 2918|  3.10k|            {"Mon", 1},
 2919|  3.10k|            {"Tue", 2},
 2920|  3.10k|            {"Wed", 3},
 2921|  3.10k|            {"Thu", 4},
 2922|  3.10k|            {"Fri", 5},
 2923|  3.10k|            {"Sat", 6},
 2924|  3.10k|        }};
 2925|  3.10k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.45k, False: 1.64k]
  ------------------
 2926|  1.45k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.45k|        }
 2928|  1.64k|        return set_error(
 2929|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.45k|    {
 2245|  1.45k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.45k|        t.tm_wday = d;
 2250|  1.45k|        st.set_wday(h);
 2251|  1.45k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.21k|    {
 3419|  6.21k|        auto start_it = m_begin;
 3420|  6.21k|        std::size_t options_available = N;
 3421|  6.21k|        std::size_t chars_consumed = 0;
 3422|  20.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.5k, False: 4.71k]
  ------------------
 3423|  20.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.0k, False: 1.45k]
  ------------------
 3424|  14.0k|            std::size_t i = 0;
 3425|  14.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 14.0k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  14.0k|            const auto ch = *m_begin;
 3430|  14.0k|            ++m_begin;
 3431|  65.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.0k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.0k, False: 9.28k]
  |  Branch (3435:34): [True: 41.9k, False: 28]
  ------------------
 3436|  41.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.9k|                                options.end());
 3438|  41.9k|                    --options_available;
 3439|  41.9k|                    continue;
 3440|  41.9k|                }
 3441|  9.31k|                ++i;
 3442|  9.31k|            }
 3443|  14.0k|            ++chars_consumed;
 3444|  14.0k|        }
 3445|  6.21k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.75k, False: 1.45k]
  ------------------
 3446|  4.75k|            m_begin = start_it;
 3447|  4.75k|            return std::nullopt;
 3448|  4.75k|        }
 3449|  1.45k|        return options.front().second;
 3450|  6.21k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.7k|    {
 2969|  13.7k|#if !SCN_DISABLE_LOCALE
 2970|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.7k|#endif
 2977|       |
 2978|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.7k|    {
 2178|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.60k, False: 11.1k]
  |  |  |  Branch (865:45): [True: 2.42k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 180, False: 11.1k]
  |  |  ------------------
  ------------------
 2179|  2.60k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.60k|                                  "Invalid value for tm_hour"});
 2181|  2.60k|        }
 2182|  11.1k|        t.tm_hour = h;
 2183|  11.1k|        st.set_hour24(hdl);
 2184|  11.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 2.70k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 2169|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.72k|                                "Invalid value for tm_min"});
 2171|  2.72k|        }
 2172|  10.9k|        t.tm_min = m;
 2173|  10.9k|        st.set_min(h);
 2174|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.76k|    {
 3011|  2.76k|#if !SCN_DISABLE_LOCALE
 3012|  2.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.76k|#endif
 3019|       |
 3020|  2.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.76k|    {
 2158|  2.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 2, False: 1.14k]
  |  |  ------------------
  ------------------
 2159|  1.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.61k|                                "Invalid value for tm_sec"});
 2161|  1.61k|        }
 2162|  1.14k|        t.tm_sec = s;
 2163|  1.14k|        st.set_sec(h);
 2164|  1.14k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.77k|    {
 3253|       |        // %m/%d/%y
 3254|  1.77k|        constexpr CharT slash = '/';
 3255|  1.77k|        on_dec_month();
 3256|  1.77k|        on_text(&slash, &slash + 1);
 3257|  1.77k|        on_day_of_month();
 3258|  1.77k|        on_text(&slash, &slash + 1);
 3259|  1.77k|        on_short_year();
 3260|  1.77k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  2.03k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.03k|        constexpr CharT dash = '-';
 3265|  2.03k|        on_full_year();
 3266|  2.03k|        on_text(&dash, &dash + 1);
 3267|  2.03k|        on_dec_month();
 3268|  2.03k|        on_text(&dash, &dash + 1);
 3269|  2.03k|        on_day_of_month();
 3270|  2.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.76k|    {
 3303|       |        // %H:%M:%S
 3304|  2.76k|        constexpr CharT colon = ':';
 3305|  2.76k|        on_24_hour();
 3306|  2.76k|        on_text(&colon, &colon + 1);
 3307|  2.76k|        on_minute();
 3308|  2.76k|        on_text(&colon, &colon + 1);
 3309|  2.76k|        on_second();
 3310|  2.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  15.1k|    {
 3342|  15.1k|        m_st.verify(*this);
 3343|  15.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 15.1k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  15.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.7k, False: 388]
  |  Branch (3346:37): [True: 130, False: 14.6k]
  |  Branch (3346:60): [True: 0, False: 14.6k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  15.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  53.3k|    {
 3353|  53.3k|        return m_error;
 3354|  53.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  15.1k|    {
 3370|  15.1k|        return m_begin;
 3371|  15.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.7k|{
 3563|  31.7k|    {
 3564|  31.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 504, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    504|    }                                                  \
  |  |  |  | 3939|  31.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.2k|        ctx.range(), t, ctx.locale());
 3571|  31.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 19.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  19.9k|    return r.get_iterator();
 3576|  31.2k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.2k|          m_begin(ranges::begin(m_range)),
 2708|  31.2k|          m_tm(t),
 2709|  31.2k|          m_loc(loc)
 2710|  31.2k|    {
 2711|  31.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.4k|    {
 3358|  10.4k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  44.5k|    {
 3363|  44.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 33.3k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  44.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.9k|    {
 2715|  55.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.9k, False: 22.2k]
  ------------------
 2716|  32.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 194, False: 32.7k]
  ------------------
 2717|    194|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    194|            }
 2719|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.4k, False: 22.2k]
  ------------------
 2720|  10.4k|                return on_error("Invalid literal character");
 2721|  10.4k|            }
 2722|  22.2k|            ++beg;
 2723|  22.2k|            ++m_begin;
 2724|  22.2k|        }
 2725|  32.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.63k|    {
 2745|  3.63k|#if !SCN_DISABLE_LOCALE
 2746|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.63k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.63k|#endif
 2753|       |
 2754|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.63k|    {
 2218|  3.63k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.63k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.63k|        t.tm_year = y - 1900;
 2223|  3.63k|        st.set_full_year(h);
 2224|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.6k|    {
 3381|  56.6k|        int digits_read = 0;
 3382|  56.6k|        int accumulator = 0;
 3383|  99.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.6k, False: 398]
  ------------------
 3384|  98.6k|            const auto ch = *m_begin;
 3385|  98.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.7k, False: 69.8k]
  |  Branch (3385:36): [True: 18.7k, False: 51.1k]
  ------------------
 3386|  47.5k|                break;
 3387|  47.5k|            }
 3388|  51.1k|            ++m_begin;
 3389|  51.1k|            ++digits_read;
 3390|  51.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  51.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.77k, False: 42.3k]
  ------------------
 3392|  8.77k|                break;
 3393|  8.77k|            }
 3394|  51.1k|        }
 3395|  56.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.6k, False: 40.0k]
  ------------------
 3396|  16.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.6k|                                 "Too few integer digits"});
 3398|  16.6k|            return -1;
 3399|  16.6k|        }
 3400|  40.0k|        return accumulator;
 3401|  56.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.84k|    {
 2759|  5.84k|#if !SCN_DISABLE_LOCALE
 2760|  5.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.84k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.84k|#endif
 2768|       |
 2769|  5.84k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.84k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.84k|    {
 2235|  5.84k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 1.58k, False: 4.25k]
  |  |  |  Branch (865:45): [True: 0, False: 4.25k]
  |  |  ------------------
  ------------------
 2236|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.58k|                                "Invalid value for tm_year"});
 2238|  1.58k|        }
 2239|  4.25k|        st.short_year_value = y;
 2240|  4.25k|        st.set_short_year(h);
 2241|  4.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  4.32k|    {
 2802|  4.32k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.32k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.32k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.32k|#endif
 2810|       |
 2811|  4.32k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.32k|            {"January", 1},
 2813|  4.32k|            {"February", 2},
 2814|  4.32k|            {"March", 3},
 2815|  4.32k|            {"April", 4},
 2816|  4.32k|            {"May", 5},
 2817|  4.32k|            {"June", 6},
 2818|  4.32k|            {"July", 7},
 2819|  4.32k|            {"August", 8},
 2820|  4.32k|            {"September", 9},
 2821|  4.32k|            {"October", 10},
 2822|  4.32k|            {"November", 11},
 2823|  4.32k|            {"December", 12},
 2824|  4.32k|        }};
 2825|  4.32k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.24k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.24k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.24k|            {"Jan", 1},
 2830|  4.24k|            {"Feb", 2},
 2831|  4.24k|            {"Mar", 3},
 2832|  4.24k|            {"Apr", 4},
 2833|  4.24k|            {"Jun", 6},
 2834|  4.24k|            {"Jul", 7},
 2835|  4.24k|            {"Aug", 8},
 2836|  4.24k|            {"Sep", 9},
 2837|  4.24k|            {"Oct", 10},
 2838|  4.24k|            {"Nov", 11},
 2839|  4.24k|            {"Dec", 12},
 2840|  4.24k|        }};
 2841|  4.24k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.60k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  10.6k|    {
 2208|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.71k, False: 7.93k]
  |  |  |  Branch (865:45): [True: 2.60k, False: 8.04k]
  |  |  |  Branch (865:45): [True: 114, False: 7.93k]
  |  |  ------------------
  ------------------
 2209|  2.71k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.71k|                                "Invalid value for tm_mon"});
 2211|  2.71k|        }
 2212|  7.93k|        t.tm_mon = m - 1;
 2213|  7.93k|        st.set_mon(h);
 2214|  7.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.32k|    {
 3419|  4.32k|        auto start_it = m_begin;
 3420|  4.32k|        std::size_t options_available = N;
 3421|  4.32k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.17k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.7k, False: 82]
  ------------------
 3424|  12.7k|            std::size_t i = 0;
 3425|  12.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 64, False: 12.6k]
  ------------------
 3426|     64|                options_available = 0;
 3427|     64|                break;
 3428|     64|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 65.8k, False: 12.6k]
  ------------------
 3432|  65.8k|                const auto cmp = static_cast<unsigned>(
 3433|  65.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  65.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 65.8k]
  ------------------
 3435|  65.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.4k, False: 11.3k]
  |  Branch (3435:34): [True: 51.6k, False: 2.79k]
  ------------------
 3436|  51.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  51.6k|                                options.end());
 3438|  51.6k|                    --options_available;
 3439|  51.6k|                    continue;
 3440|  51.6k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.24k, False: 82]
  ------------------
 3446|  4.24k|            m_begin = start_it;
 3447|  4.24k|            return std::nullopt;
 3448|  4.24k|        }
 3449|     82|        return options.front().second;
 3450|  4.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.24k|    {
 3419|  4.24k|        auto start_it = m_begin;
 3420|  4.24k|        std::size_t options_available = N;
 3421|  4.24k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.54k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 2.63k]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 9.76k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  61.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.1k, False: 9.76k]
  ------------------
 3432|  52.1k|                const auto cmp = static_cast<unsigned>(
 3433|  52.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.1k]
  ------------------
 3435|  52.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.6k, False: 5.55k]
  |  Branch (3435:34): [True: 43.9k, False: 2.70k]
  ------------------
 3436|  43.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.9k|                                options.end());
 3438|  43.9k|                    --options_available;
 3439|  43.9k|                    continue;
 3440|  43.9k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.24k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 2.63k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.24k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.92k|    {
 2848|  7.92k|#if !SCN_DISABLE_LOCALE
 2849|  7.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.92k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.92k|#endif
 2856|       |
 2857|  7.92k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.92k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.90k|    {
 2880|  7.90k|#if !SCN_DISABLE_LOCALE
 2881|  7.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.90k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.90k|#endif
 2888|       |
 2889|  7.90k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.90k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.90k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.90k|    {
 2198|  7.90k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 4.72k]
  |  |  |  Branch (865:45): [True: 3.10k, False: 4.80k]
  |  |  |  Branch (865:45): [True: 80, False: 4.72k]
  |  |  ------------------
  ------------------
 2199|  3.18k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.18k|                                "Invalid value for tm_mday"});
 2201|  3.18k|        }
 2202|  4.72k|        t.tm_mday = d;
 2203|  4.72k|        st.set_mday(h);
 2204|  4.72k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.14k|    {
 2895|  3.14k|#if !SCN_DISABLE_LOCALE
 2896|  3.14k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.14k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.14k|#endif
 2903|       |
 2904|  3.14k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.14k|            {"Sunday", 0},
 2906|  3.14k|            {"Monday", 1},
 2907|  3.14k|            {"Tuesday", 2},
 2908|  3.14k|            {"Wednesday", 3},
 2909|  3.14k|            {"Thursday", 4},
 2910|  3.14k|            {"Friday", 5},
 2911|  3.14k|            {"Saturday", 6},
 2912|  3.14k|        }};
 2913|  3.14k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.14k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.14k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.14k|            {"Sun", 0},
 2918|  3.14k|            {"Mon", 1},
 2919|  3.14k|            {"Tue", 2},
 2920|  3.14k|            {"Wed", 3},
 2921|  3.14k|            {"Thu", 4},
 2922|  3.14k|            {"Fri", 5},
 2923|  3.14k|            {"Sat", 6},
 2924|  3.14k|        }};
 2925|  3.14k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.52k, False: 1.62k]
  ------------------
 2926|  1.52k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.52k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.14k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.52k|    {
 2245|  1.52k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.52k|        t.tm_wday = d;
 2250|  1.52k|        st.set_wday(h);
 2251|  1.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.29k|    {
 3419|  6.29k|        auto start_it = m_begin;
 3420|  6.29k|        std::size_t options_available = N;
 3421|  6.29k|        std::size_t chars_consumed = 0;
 3422|  20.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 16.0k, False: 4.71k]
  ------------------
 3423|  20.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.5k, False: 1.52k]
  ------------------
 3424|  14.5k|            std::size_t i = 0;
 3425|  14.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.4k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.4k|            const auto ch = *m_begin;
 3430|  14.4k|            ++m_begin;
 3431|  66.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.2k, False: 14.4k]
  ------------------
 3432|  52.2k|                const auto cmp = static_cast<unsigned>(
 3433|  52.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.2k]
  ------------------
 3435|  52.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 9.74k]
  |  Branch (3435:34): [True: 42.4k, False: 56]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  9.79k|                ++i;
 3442|  9.79k|            }
 3443|  14.4k|            ++chars_consumed;
 3444|  14.4k|        }
 3445|  6.29k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.76k, False: 1.52k]
  ------------------
 3446|  4.76k|            m_begin = start_it;
 3447|  4.76k|            return std::nullopt;
 3448|  4.76k|        }
 3449|  1.52k|        return options.front().second;
 3450|  6.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.3k|    {
 2969|  14.3k|#if !SCN_DISABLE_LOCALE
 2970|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.3k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.3k|#endif
 2977|       |
 2978|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.3k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.3k|    {
 2178|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 202, False: 11.9k]
  |  |  ------------------
  ------------------
 2179|  2.35k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.35k|                                  "Invalid value for tm_hour"});
 2181|  2.35k|        }
 2182|  11.9k|        t.tm_hour = h;
 2183|  11.9k|        st.set_hour24(hdl);
 2184|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.2k|    {
 2997|  14.2k|#if !SCN_DISABLE_LOCALE
 2998|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.2k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.2k|#endif
 3005|       |
 3006|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.2k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.2k|    {
 2168|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.62k, False: 11.6k]
  |  |  |  Branch (865:45): [True: 2.59k, False: 11.7k]
  |  |  |  Branch (865:45): [True: 26, False: 11.6k]
  |  |  ------------------
  ------------------
 2169|  2.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.62k|                                "Invalid value for tm_min"});
 2171|  2.62k|        }
 2172|  11.6k|        t.tm_min = m;
 2173|  11.6k|        st.set_min(h);
 2174|  11.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.74k|    {
 3011|  2.74k|#if !SCN_DISABLE_LOCALE
 3012|  2.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.74k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.74k|#endif
 3019|       |
 3020|  2.74k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.74k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.74k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.74k|    {
 2158|  2.74k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 4, False: 1.16k]
  |  |  ------------------
  ------------------
 2159|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.58k|                                "Invalid value for tm_sec"});
 2161|  1.58k|        }
 2162|  1.16k|        t.tm_sec = s;
 2163|  1.16k|        st.set_sec(h);
 2164|  1.16k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.84k|    {
 3253|       |        // %m/%d/%y
 3254|  5.84k|        constexpr CharT slash = '/';
 3255|  5.84k|        on_dec_month();
 3256|  5.84k|        on_text(&slash, &slash + 1);
 3257|  5.84k|        on_day_of_month();
 3258|  5.84k|        on_text(&slash, &slash + 1);
 3259|  5.84k|        on_short_year();
 3260|  5.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  2.00k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.00k|        constexpr CharT dash = '-';
 3265|  2.00k|        on_full_year();
 3266|  2.00k|        on_text(&dash, &dash + 1);
 3267|  2.00k|        on_dec_month();
 3268|  2.00k|        on_text(&dash, &dash + 1);
 3269|  2.00k|        on_day_of_month();
 3270|  2.00k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.74k|    {
 3303|       |        // %H:%M:%S
 3304|  2.74k|        constexpr CharT colon = ':';
 3305|  2.74k|        on_24_hour();
 3306|  2.74k|        on_text(&colon, &colon + 1);
 3307|  2.74k|        on_minute();
 3308|  2.74k|        on_text(&colon, &colon + 1);
 3309|  2.74k|        on_second();
 3310|  2.74k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.9k|    {
 3342|  19.9k|        m_st.verify(*this);
 3343|  19.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.6k, False: 388]
  |  Branch (3346:37): [True: 4.24k, False: 15.3k]
  |  Branch (3346:60): [True: 0, False: 15.3k]
  ------------------
 3347|  4.24k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.24k|        }
 3349|  19.9k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  62.6k|    {
 3353|  62.6k|        return m_error;
 3354|  62.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.9k|    {
 3370|  19.9k|        return m_begin;
 3371|  19.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.8k|{
 3563|  26.8k|    {
 3564|  26.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 270, False: 26.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    270|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  26.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  26.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  26.6k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  26.6k|        ctx.range(), t, ctx.locale());
 3571|  26.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  26.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  26.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 15.1k]
  |  |  ------------------
  ------------------
 3573|  11.4k|        return unexpected(e.error());
 3574|  11.4k|    }
 3575|  15.1k|    return r.get_iterator();
 3576|  26.6k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  26.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  26.6k|          m_begin(ranges::begin(m_range)),
 2708|  26.6k|          m_tm(t),
 2709|  26.6k|          m_loc(loc)
 2710|  26.6k|    {
 2711|  26.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.7k|    {
 3358|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  46.2k|    {
 3363|  46.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.4k, False: 34.8k]
  ------------------
 3364|  11.4k|            m_error = unexpected(e);
 3365|  11.4k|        }
 3366|  46.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.2k|    {
 2715|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.2k, False: 13.3k]
  ------------------
 2716|  24.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 150, False: 24.0k]
  ------------------
 2717|    150|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    150|            }
 2719|  24.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.7k, False: 13.3k]
  ------------------
 2720|  10.7k|                return on_error("Invalid literal character");
 2721|  10.7k|            }
 2722|  13.3k|            ++beg;
 2723|  13.3k|            ++m_begin;
 2724|  13.3k|        }
 2725|  24.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.68k|    {
 2745|  3.68k|#if !SCN_DISABLE_LOCALE
 2746|  3.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.68k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.68k|#endif
 2753|       |
 2754|  3.68k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.68k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.68k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.68k|    {
 2218|  3.68k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.68k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.68k|        t.tm_year = y - 1900;
 2223|  3.68k|        st.set_full_year(h);
 2224|  3.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.3k|    {
 3381|  43.3k|        int digits_read = 0;
 3382|  43.3k|        int accumulator = 0;
 3383|  71.4k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.1k, False: 324]
  ------------------
 3384|  71.1k|            const auto ch = *m_begin;
 3385|  71.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.1k, False: 50.0k]
  |  Branch (3385:36): [True: 17.5k, False: 32.4k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.40k, False: 28.0k]
  ------------------
 3392|  4.40k|                break;
 3393|  4.40k|            }
 3394|  32.4k|        }
 3395|  43.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.4k, False: 25.9k]
  ------------------
 3396|  17.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.4k|                                 "Too few integer digits"});
 3398|  17.4k|            return -1;
 3399|  17.4k|        }
 3400|  25.9k|        return accumulator;
 3401|  43.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.77k|    {
 2759|  1.77k|#if !SCN_DISABLE_LOCALE
 2760|  1.77k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.77k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.77k|#endif
 2768|       |
 2769|  1.77k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.77k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.77k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.77k|    {
 2235|  1.77k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.63k, False: 138]
  |  |  |  Branch (865:45): [True: 1.63k, False: 138]
  |  |  |  Branch (865:45): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 2236|  1.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.63k|                                "Invalid value for tm_year"});
 2238|  1.63k|        }
 2239|    138|        st.short_year_value = y;
 2240|    138|        st.set_short_year(h);
 2241|    138|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  4.35k|    {
 2802|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.35k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.35k|#endif
 2810|       |
 2811|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.35k|            {"January", 1},
 2813|  4.35k|            {"February", 2},
 2814|  4.35k|            {"March", 3},
 2815|  4.35k|            {"April", 4},
 2816|  4.35k|            {"May", 5},
 2817|  4.35k|            {"June", 6},
 2818|  4.35k|            {"July", 7},
 2819|  4.35k|            {"August", 8},
 2820|  4.35k|            {"September", 9},
 2821|  4.35k|            {"October", 10},
 2822|  4.35k|            {"November", 11},
 2823|  4.35k|            {"December", 12},
 2824|  4.35k|        }};
 2825|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.26k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.26k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.26k|            {"Jan", 1},
 2830|  4.26k|            {"Feb", 2},
 2831|  4.26k|            {"Mar", 3},
 2832|  4.26k|            {"Apr", 4},
 2833|  4.26k|            {"Jun", 6},
 2834|  4.26k|            {"Jul", 7},
 2835|  4.26k|            {"Aug", 8},
 2836|  4.26k|            {"Sep", 9},
 2837|  4.26k|            {"Oct", 10},
 2838|  4.26k|            {"Nov", 11},
 2839|  4.26k|            {"Dec", 12},
 2840|  4.26k|        }};
 2841|  4.26k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.63k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.63k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.63k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.59k|    {
 2208|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.81k, False: 3.78k]
  |  |  |  Branch (865:45): [True: 2.71k, False: 3.87k]
  |  |  |  Branch (865:45): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 2209|  2.81k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.81k|                                "Invalid value for tm_mon"});
 2211|  2.81k|        }
 2212|  3.78k|        t.tm_mon = m - 1;
 2213|  3.78k|        st.set_mon(h);
 2214|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.35k|    {
 3419|  4.35k|        auto start_it = m_begin;
 3420|  4.35k|        std::size_t options_available = N;
 3421|  4.35k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.21k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.6k, False: 82]
  ------------------
 3424|  12.6k|            std::size_t i = 0;
 3425|  12.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 12.6k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 66.1k, False: 12.6k]
  ------------------
 3432|  66.1k|                const auto cmp = static_cast<unsigned>(
 3433|  66.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  66.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 66.1k]
  ------------------
 3435|  66.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.7k, False: 11.3k]
  |  Branch (3435:34): [True: 52.0k, False: 2.76k]
  ------------------
 3436|  52.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  52.0k|                                options.end());
 3438|  52.0k|                    --options_available;
 3439|  52.0k|                    continue;
 3440|  52.0k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.26k, False: 82]
  ------------------
 3446|  4.26k|            m_begin = start_it;
 3447|  4.26k|            return std::nullopt;
 3448|  4.26k|        }
 3449|     82|        return options.front().second;
 3450|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.26k|    {
 3419|  4.26k|        auto start_it = m_begin;
 3420|  4.26k|        std::size_t options_available = N;
 3421|  4.26k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.58k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.80k, False: 2.63k]
  ------------------
 3424|  9.80k|            std::size_t i = 0;
 3425|  9.80k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 9.75k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  9.75k|            const auto ch = *m_begin;
 3430|  9.75k|            ++m_begin;
 3431|  62.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.4k, False: 9.75k]
  ------------------
 3432|  52.4k|                const auto cmp = static_cast<unsigned>(
 3433|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.4k]
  ------------------
 3435|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.9k, False: 5.53k]
  |  Branch (3435:34): [True: 44.2k, False: 2.67k]
  ------------------
 3436|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  44.2k|                                options.end());
 3438|  44.2k|                    --options_available;
 3439|  44.2k|                    continue;
 3440|  44.2k|                }
 3441|  8.20k|                ++i;
 3442|  8.20k|            }
 3443|  9.75k|            ++chars_consumed;
 3444|  9.75k|        }
 3445|  4.26k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.63k, False: 2.63k]
  ------------------
 3446|  1.63k|            m_begin = start_it;
 3447|  1.63k|            return std::nullopt;
 3448|  1.63k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.26k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.87k|    {
 2848|  3.87k|#if !SCN_DISABLE_LOCALE
 2849|  3.87k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.87k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.87k|#endif
 2856|       |
 2857|  3.87k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.87k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.86k|    {
 2880|  3.86k|#if !SCN_DISABLE_LOCALE
 2881|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.86k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.86k|#endif
 2888|       |
 2889|  3.86k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.86k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.86k|    {
 2198|  3.86k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.26k, False: 602]
  |  |  |  Branch (865:45): [True: 3.18k, False: 674]
  |  |  |  Branch (865:45): [True: 72, False: 602]
  |  |  ------------------
  ------------------
 2199|  3.26k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.26k|                                "Invalid value for tm_mday"});
 2201|  3.26k|        }
 2202|    602|        t.tm_mday = d;
 2203|    602|        st.set_mday(h);
 2204|    602|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.10k|    {
 2895|  3.10k|#if !SCN_DISABLE_LOCALE
 2896|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.10k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.10k|#endif
 2903|       |
 2904|  3.10k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.10k|            {"Sunday", 0},
 2906|  3.10k|            {"Monday", 1},
 2907|  3.10k|            {"Tuesday", 2},
 2908|  3.10k|            {"Wednesday", 3},
 2909|  3.10k|            {"Thursday", 4},
 2910|  3.10k|            {"Friday", 5},
 2911|  3.10k|            {"Saturday", 6},
 2912|  3.10k|        }};
 2913|  3.10k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.10k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.10k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.10k|            {"Sun", 0},
 2918|  3.10k|            {"Mon", 1},
 2919|  3.10k|            {"Tue", 2},
 2920|  3.10k|            {"Wed", 3},
 2921|  3.10k|            {"Thu", 4},
 2922|  3.10k|            {"Fri", 5},
 2923|  3.10k|            {"Sat", 6},
 2924|  3.10k|        }};
 2925|  3.10k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.45k, False: 1.64k]
  ------------------
 2926|  1.45k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.45k|        }
 2928|  1.64k|        return set_error(
 2929|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.10k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|  1.45k|    {
 2245|  1.45k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|  1.45k|        t.tm_wday = d;
 2250|  1.45k|        st.set_wday(h);
 2251|  1.45k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.21k|    {
 3419|  6.21k|        auto start_it = m_begin;
 3420|  6.21k|        std::size_t options_available = N;
 3421|  6.21k|        std::size_t chars_consumed = 0;
 3422|  20.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.5k, False: 4.71k]
  ------------------
 3423|  20.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.0k, False: 1.45k]
  ------------------
 3424|  14.0k|            std::size_t i = 0;
 3425|  14.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 14.0k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  14.0k|            const auto ch = *m_begin;
 3430|  14.0k|            ++m_begin;
 3431|  65.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.0k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.0k, False: 9.28k]
  |  Branch (3435:34): [True: 41.9k, False: 28]
  ------------------
 3436|  41.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.9k|                                options.end());
 3438|  41.9k|                    --options_available;
 3439|  41.9k|                    continue;
 3440|  41.9k|                }
 3441|  9.31k|                ++i;
 3442|  9.31k|            }
 3443|  14.0k|            ++chars_consumed;
 3444|  14.0k|        }
 3445|  6.21k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.75k, False: 1.45k]
  ------------------
 3446|  4.75k|            m_begin = start_it;
 3447|  4.75k|            return std::nullopt;
 3448|  4.75k|        }
 3449|  1.45k|        return options.front().second;
 3450|  6.21k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.7k|    {
 2969|  13.7k|#if !SCN_DISABLE_LOCALE
 2970|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.7k|#endif
 2977|       |
 2978|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.7k|    {
 2178|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.60k, False: 11.1k]
  |  |  |  Branch (865:45): [True: 2.42k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 180, False: 11.1k]
  |  |  ------------------
  ------------------
 2179|  2.60k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.60k|                                  "Invalid value for tm_hour"});
 2181|  2.60k|        }
 2182|  11.1k|        t.tm_hour = h;
 2183|  11.1k|        st.set_hour24(hdl);
 2184|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 2.70k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 2169|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.72k|                                "Invalid value for tm_min"});
 2171|  2.72k|        }
 2172|  10.9k|        t.tm_min = m;
 2173|  10.9k|        st.set_min(h);
 2174|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.76k|    {
 3011|  2.76k|#if !SCN_DISABLE_LOCALE
 3012|  2.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.76k|#endif
 3019|       |
 3020|  2.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.76k|    {
 2158|  2.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 2, False: 1.14k]
  |  |  ------------------
  ------------------
 2159|  1.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.61k|                                "Invalid value for tm_sec"});
 2161|  1.61k|        }
 2162|  1.14k|        t.tm_sec = s;
 2163|  1.14k|        st.set_sec(h);
 2164|  1.14k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.77k|    {
 3253|       |        // %m/%d/%y
 3254|  1.77k|        constexpr CharT slash = '/';
 3255|  1.77k|        on_dec_month();
 3256|  1.77k|        on_text(&slash, &slash + 1);
 3257|  1.77k|        on_day_of_month();
 3258|  1.77k|        on_text(&slash, &slash + 1);
 3259|  1.77k|        on_short_year();
 3260|  1.77k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  2.03k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.03k|        constexpr CharT dash = '-';
 3265|  2.03k|        on_full_year();
 3266|  2.03k|        on_text(&dash, &dash + 1);
 3267|  2.03k|        on_dec_month();
 3268|  2.03k|        on_text(&dash, &dash + 1);
 3269|  2.03k|        on_day_of_month();
 3270|  2.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.76k|    {
 3303|       |        // %H:%M:%S
 3304|  2.76k|        constexpr CharT colon = ':';
 3305|  2.76k|        on_24_hour();
 3306|  2.76k|        on_text(&colon, &colon + 1);
 3307|  2.76k|        on_minute();
 3308|  2.76k|        on_text(&colon, &colon + 1);
 3309|  2.76k|        on_second();
 3310|  2.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  15.1k|    {
 3342|  15.1k|        m_st.verify(*this);
 3343|  15.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 15.1k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  15.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.7k, False: 388]
  |  Branch (3346:37): [True: 130, False: 14.6k]
  |  Branch (3346:60): [True: 0, False: 14.6k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  15.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  53.3k|    {
 3353|  53.3k|        return m_error;
 3354|  53.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  15.1k|    {
 3370|  15.1k|        return m_begin;
 3371|  15.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.7k|{
 3563|  31.7k|    {
 3564|  31.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 504, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    504|    }                                                  \
  |  |  |  | 3939|  31.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.2k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.2k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.2k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.2k|        ctx.range(), t, ctx.locale());
 3571|  31.2k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.2k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 19.9k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  19.9k|    return r.get_iterator();
 3576|  31.2k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.2k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.2k|    static_cast<    \
  |  |  935|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.2k|          m_begin(ranges::begin(m_range)),
 2708|  31.2k|          m_tm(t),
 2709|  31.2k|          m_loc(loc)
 2710|  31.2k|    {
 2711|  31.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.4k|    {
 3358|  10.4k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  42.9k|    {
 3363|  42.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 31.7k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  42.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  32.9k|    {
 2715|  55.2k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 32.9k, False: 22.2k]
  ------------------
 2716|  32.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 194, False: 32.7k]
  ------------------
 2717|    194|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    194|            }
 2719|  32.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.4k, False: 22.2k]
  ------------------
 2720|  10.4k|                return on_error("Invalid literal character");
 2721|  10.4k|            }
 2722|  22.2k|            ++beg;
 2723|  22.2k|            ++m_begin;
 2724|  22.2k|        }
 2725|  32.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.63k|    {
 2745|  3.63k|#if !SCN_DISABLE_LOCALE
 2746|  3.63k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.63k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.63k|#endif
 2753|       |
 2754|  3.63k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.63k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.63k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.63k|    {
 2396|  3.63k|        t.year = y;
 2397|  3.63k|        st.set_full_year(h);
 2398|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  56.6k|    {
 3381|  56.6k|        int digits_read = 0;
 3382|  56.6k|        int accumulator = 0;
 3383|  99.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 98.6k, False: 398]
  ------------------
 3384|  98.6k|            const auto ch = *m_begin;
 3385|  98.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.7k, False: 69.8k]
  |  Branch (3385:36): [True: 18.7k, False: 51.1k]
  ------------------
 3386|  47.5k|                break;
 3387|  47.5k|            }
 3388|  51.1k|            ++m_begin;
 3389|  51.1k|            ++digits_read;
 3390|  51.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  51.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.77k, False: 42.3k]
  ------------------
 3392|  8.77k|                break;
 3393|  8.77k|            }
 3394|  51.1k|        }
 3395|  56.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.6k, False: 40.0k]
  ------------------
 3396|  16.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.6k|                                 "Too few integer digits"});
 3398|  16.6k|            return -1;
 3399|  16.6k|        }
 3400|  40.0k|        return accumulator;
 3401|  56.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.84k|    {
 2759|  5.84k|#if !SCN_DISABLE_LOCALE
 2760|  5.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.84k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.84k|#endif
 2768|       |
 2769|  5.84k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.84k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.84k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  5.84k|    {
 2419|  5.84k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 5.84k, False: 0]
  ------------------
 2420|  5.84k|            t.year = y;
 2421|  5.84k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  5.84k|        st.set_short_year(h);
 2426|  5.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  4.32k|    {
 2802|  4.32k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.32k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.32k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.32k|#endif
 2810|       |
 2811|  4.32k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.32k|            {"January", 1},
 2813|  4.32k|            {"February", 2},
 2814|  4.32k|            {"March", 3},
 2815|  4.32k|            {"April", 4},
 2816|  4.32k|            {"May", 5},
 2817|  4.32k|            {"June", 6},
 2818|  4.32k|            {"July", 7},
 2819|  4.32k|            {"August", 8},
 2820|  4.32k|            {"September", 9},
 2821|  4.32k|            {"October", 10},
 2822|  4.32k|            {"November", 11},
 2823|  4.32k|            {"December", 12},
 2824|  4.32k|        }};
 2825|  4.32k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.24k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.24k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.24k|            {"Jan", 1},
 2830|  4.24k|            {"Feb", 2},
 2831|  4.24k|            {"Mar", 3},
 2832|  4.24k|            {"Apr", 4},
 2833|  4.24k|            {"Jun", 6},
 2834|  4.24k|            {"Jul", 7},
 2835|  4.24k|            {"Aug", 8},
 2836|  4.24k|            {"Sep", 9},
 2837|  4.24k|            {"Oct", 10},
 2838|  4.24k|            {"Nov", 11},
 2839|  4.24k|            {"Dec", 12},
 2840|  4.24k|        }};
 2841|  4.24k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.60k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  10.6k|    {
 2383|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.71k, False: 7.93k]
  |  |  |  Branch (865:45): [True: 2.60k, False: 8.04k]
  |  |  |  Branch (865:45): [True: 114, False: 7.93k]
  |  |  ------------------
  ------------------
 2384|  2.71k|            return h.set_error(
 2385|  2.71k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.71k|        }
 2387|  7.93k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  7.93k|        st.set_mon(h);
 2389|  7.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.32k|    {
 3419|  4.32k|        auto start_it = m_begin;
 3420|  4.32k|        std::size_t options_available = N;
 3421|  4.32k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.17k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.7k, False: 82]
  ------------------
 3424|  12.7k|            std::size_t i = 0;
 3425|  12.7k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 64, False: 12.6k]
  ------------------
 3426|     64|                options_available = 0;
 3427|     64|                break;
 3428|     64|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 65.8k, False: 12.6k]
  ------------------
 3432|  65.8k|                const auto cmp = static_cast<unsigned>(
 3433|  65.8k|                    ch ^ options[i].first[chars_consumed]);
 3434|  65.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 65.8k]
  ------------------
 3435|  65.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.4k, False: 11.3k]
  |  Branch (3435:34): [True: 51.6k, False: 2.79k]
  ------------------
 3436|  51.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  51.6k|                                options.end());
 3438|  51.6k|                    --options_available;
 3439|  51.6k|                    continue;
 3440|  51.6k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.32k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.24k, False: 82]
  ------------------
 3446|  4.24k|            m_begin = start_it;
 3447|  4.24k|            return std::nullopt;
 3448|  4.24k|        }
 3449|     82|        return options.front().second;
 3450|  4.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.24k|    {
 3419|  4.24k|        auto start_it = m_begin;
 3420|  4.24k|        std::size_t options_available = N;
 3421|  4.24k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.54k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 2.63k]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 9.76k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  61.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.1k, False: 9.76k]
  ------------------
 3432|  52.1k|                const auto cmp = static_cast<unsigned>(
 3433|  52.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.1k]
  ------------------
 3435|  52.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.6k, False: 5.55k]
  |  Branch (3435:34): [True: 43.9k, False: 2.70k]
  ------------------
 3436|  43.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.9k|                                options.end());
 3438|  43.9k|                    --options_available;
 3439|  43.9k|                    continue;
 3440|  43.9k|                }
 3441|  8.26k|                ++i;
 3442|  8.26k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.24k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 2.63k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.24k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.92k|    {
 2848|  7.92k|#if !SCN_DISABLE_LOCALE
 2849|  7.92k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.92k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.92k|#endif
 2856|       |
 2857|  7.92k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.92k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.90k|    {
 2880|  7.90k|#if !SCN_DISABLE_LOCALE
 2881|  7.90k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.90k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.90k|#endif
 2888|       |
 2889|  7.90k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.90k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.90k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  7.90k|    {
 2370|  7.90k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.18k, False: 4.72k]
  |  |  |  Branch (865:45): [True: 3.10k, False: 4.80k]
  |  |  |  Branch (865:45): [True: 80, False: 4.72k]
  |  |  ------------------
  ------------------
 2371|  3.18k|            return h.set_error(
 2372|  3.18k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.18k|        }
 2374|  4.72k|        t.mday = d;
 2375|  4.72k|        st.set_mday(h);
 2376|  4.72k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  3.14k|    {
 2895|  3.14k|#if !SCN_DISABLE_LOCALE
 2896|  3.14k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.14k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.14k|#endif
 2903|       |
 2904|  3.14k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.14k|            {"Sunday", 0},
 2906|  3.14k|            {"Monday", 1},
 2907|  3.14k|            {"Tuesday", 2},
 2908|  3.14k|            {"Wednesday", 3},
 2909|  3.14k|            {"Thursday", 4},
 2910|  3.14k|            {"Friday", 5},
 2911|  3.14k|            {"Saturday", 6},
 2912|  3.14k|        }};
 2913|  3.14k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.14k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.14k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.14k|            {"Sun", 0},
 2918|  3.14k|            {"Mon", 1},
 2919|  3.14k|            {"Tue", 2},
 2920|  3.14k|            {"Wed", 3},
 2921|  3.14k|            {"Thu", 4},
 2922|  3.14k|            {"Fri", 5},
 2923|  3.14k|            {"Sat", 6},
 2924|  3.14k|        }};
 2925|  3.14k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.52k, False: 1.62k]
  ------------------
 2926|  1.52k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.52k|        }
 2928|  1.62k|        return set_error(
 2929|  1.62k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.14k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|  1.52k|    {
 2433|  1.52k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  |  Branch (865:45): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|  1.52k|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|  1.52k|        st.set_wday(h);
 2439|  1.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.29k|    {
 3419|  6.29k|        auto start_it = m_begin;
 3420|  6.29k|        std::size_t options_available = N;
 3421|  6.29k|        std::size_t chars_consumed = 0;
 3422|  20.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 16.0k, False: 4.71k]
  ------------------
 3423|  20.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.5k, False: 1.52k]
  ------------------
 3424|  14.5k|            std::size_t i = 0;
 3425|  14.5k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 54, False: 14.4k]
  ------------------
 3426|     54|                options_available = 0;
 3427|     54|                break;
 3428|     54|            }
 3429|  14.4k|            const auto ch = *m_begin;
 3430|  14.4k|            ++m_begin;
 3431|  66.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.2k, False: 14.4k]
  ------------------
 3432|  52.2k|                const auto cmp = static_cast<unsigned>(
 3433|  52.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.2k]
  ------------------
 3435|  52.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 9.74k]
  |  Branch (3435:34): [True: 42.4k, False: 56]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  9.79k|                ++i;
 3442|  9.79k|            }
 3443|  14.4k|            ++chars_consumed;
 3444|  14.4k|        }
 3445|  6.29k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.76k, False: 1.52k]
  ------------------
 3446|  4.76k|            m_begin = start_it;
 3447|  4.76k|            return std::nullopt;
 3448|  4.76k|        }
 3449|  1.52k|        return options.front().second;
 3450|  6.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.3k|    {
 2969|  14.3k|#if !SCN_DISABLE_LOCALE
 2970|  14.3k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.3k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.3k|#endif
 2977|       |
 2978|  14.3k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.3k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.3k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  14.3k|    {
 2344|  14.3k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.15k, False: 12.1k]
  |  |  |  Branch (865:45): [True: 202, False: 11.9k]
  |  |  ------------------
  ------------------
 2345|  2.35k|            return hdl.set_error(
 2346|  2.35k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.35k|        }
 2348|  11.9k|        t.hour = h;
 2349|  11.9k|        st.set_hour24(hdl);
 2350|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.2k|    {
 2997|  14.2k|#if !SCN_DISABLE_LOCALE
 2998|  14.2k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.2k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.2k|#endif
 3005|       |
 3006|  14.2k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.2k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.2k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  14.2k|    {
 2331|  14.2k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.62k, False: 11.6k]
  |  |  |  Branch (865:45): [True: 2.59k, False: 11.7k]
  |  |  |  Branch (865:45): [True: 26, False: 11.6k]
  |  |  ------------------
  ------------------
 2332|  2.62k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.62k|                                "Invalid value for minutes"});
 2334|  2.62k|        }
 2335|  11.6k|        t.min = m;
 2336|  11.6k|        st.set_min(h);
 2337|  11.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.74k|    {
 3011|  2.74k|#if !SCN_DISABLE_LOCALE
 3012|  2.74k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.74k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.74k|#endif
 3019|       |
 3020|  2.74k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.74k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.74k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.74k|    {
 2318|  2.74k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.16k]
  |  |  |  Branch (865:45): [True: 4, False: 1.16k]
  |  |  ------------------
  ------------------
 2319|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.58k|                                "Invalid value for seconds"});
 2321|  1.58k|        }
 2322|  1.16k|        t.sec = s;
 2323|  1.16k|        st.set_sec(h);
 2324|  1.16k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.84k|    {
 3253|       |        // %m/%d/%y
 3254|  5.84k|        constexpr CharT slash = '/';
 3255|  5.84k|        on_dec_month();
 3256|  5.84k|        on_text(&slash, &slash + 1);
 3257|  5.84k|        on_day_of_month();
 3258|  5.84k|        on_text(&slash, &slash + 1);
 3259|  5.84k|        on_short_year();
 3260|  5.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  2.00k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.00k|        constexpr CharT dash = '-';
 3265|  2.00k|        on_full_year();
 3266|  2.00k|        on_text(&dash, &dash + 1);
 3267|  2.00k|        on_dec_month();
 3268|  2.00k|        on_text(&dash, &dash + 1);
 3269|  2.00k|        on_day_of_month();
 3270|  2.00k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.74k|    {
 3303|       |        // %H:%M:%S
 3304|  2.74k|        constexpr CharT colon = ':';
 3305|  2.74k|        on_24_hour();
 3306|  2.74k|        on_text(&colon, &colon + 1);
 3307|  2.74k|        on_minute();
 3308|  2.74k|        on_text(&colon, &colon + 1);
 3309|  2.74k|        on_second();
 3310|  2.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.9k|    {
 3342|  19.9k|        m_st.verify(*this);
 3343|  19.9k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.9k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.9k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.6k, False: 388]
  |  Branch (3346:37): [True: 4.24k, False: 15.3k]
  |  Branch (3346:60): [True: 0, False: 15.3k]
  ------------------
 3347|  4.24k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.24k|        }
 3349|  19.9k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  4.39k|    {
 2483|  4.39k|        assert(t.year);
 2484|  4.39k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  4.39k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  62.6k|    {
 3353|  62.6k|        return m_error;
 3354|  62.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.9k|    {
 3370|  19.9k|        return m_begin;
 3371|  19.9k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.8k|{
 3563|  26.8k|    {
 3564|  26.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 270, False: 26.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    270|    }                                                  \
  |  |  |  | 3939|  26.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  26.6k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  26.6k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  26.6k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  26.6k|        ctx.range(), t, ctx.locale());
 3571|  26.6k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  26.6k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  26.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 15.1k]
  |  |  ------------------
  ------------------
 3573|  11.4k|        return unexpected(e.error());
 3574|  11.4k|    }
 3575|  15.1k|    return r.get_iterator();
 3576|  26.6k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  26.6k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  26.6k|    static_cast<    \
  |  |  935|  26.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  26.6k|          m_begin(ranges::begin(m_range)),
 2708|  26.6k|          m_tm(t),
 2709|  26.6k|          m_loc(loc)
 2710|  26.6k|    {
 2711|  26.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.7k|    {
 3358|  10.7k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  44.6k|    {
 3363|  44.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.4k, False: 33.1k]
  ------------------
 3364|  11.4k|            m_error = unexpected(e);
 3365|  11.4k|        }
 3366|  44.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.2k|    {
 2715|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.2k, False: 13.3k]
  ------------------
 2716|  24.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 150, False: 24.0k]
  ------------------
 2717|    150|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    150|            }
 2719|  24.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.7k, False: 13.3k]
  ------------------
 2720|  10.7k|                return on_error("Invalid literal character");
 2721|  10.7k|            }
 2722|  13.3k|            ++beg;
 2723|  13.3k|            ++m_begin;
 2724|  13.3k|        }
 2725|  24.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.68k|    {
 2745|  3.68k|#if !SCN_DISABLE_LOCALE
 2746|  3.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.68k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.68k|#endif
 2753|       |
 2754|  3.68k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.68k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.68k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.68k|    {
 2396|  3.68k|        t.year = y;
 2397|  3.68k|        st.set_full_year(h);
 2398|  3.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.3k|    {
 3381|  43.3k|        int digits_read = 0;
 3382|  43.3k|        int accumulator = 0;
 3383|  71.4k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 71.1k, False: 324]
  ------------------
 3384|  71.1k|            const auto ch = *m_begin;
 3385|  71.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.1k, False: 50.0k]
  |  Branch (3385:36): [True: 17.5k, False: 32.4k]
  ------------------
 3386|  38.6k|                break;
 3387|  38.6k|            }
 3388|  32.4k|            ++m_begin;
 3389|  32.4k|            ++digits_read;
 3390|  32.4k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  32.4k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.40k, False: 28.0k]
  ------------------
 3392|  4.40k|                break;
 3393|  4.40k|            }
 3394|  32.4k|        }
 3395|  43.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.4k, False: 25.9k]
  ------------------
 3396|  17.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.4k|                                 "Too few integer digits"});
 3398|  17.4k|            return -1;
 3399|  17.4k|        }
 3400|  25.9k|        return accumulator;
 3401|  43.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.77k|    {
 2759|  1.77k|#if !SCN_DISABLE_LOCALE
 2760|  1.77k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.77k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.77k|#endif
 2768|       |
 2769|  1.77k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.77k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.77k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.77k|    {
 2419|  1.77k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.77k, False: 0]
  ------------------
 2420|  1.77k|            t.year = y;
 2421|  1.77k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.77k|        st.set_short_year(h);
 2426|  1.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  4.35k|    {
 2802|  4.35k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  4.35k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 4.35k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  4.35k|#endif
 2810|       |
 2811|  4.35k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  4.35k|            {"January", 1},
 2813|  4.35k|            {"February", 2},
 2814|  4.35k|            {"March", 3},
 2815|  4.35k|            {"April", 4},
 2816|  4.35k|            {"May", 5},
 2817|  4.35k|            {"June", 6},
 2818|  4.35k|            {"July", 7},
 2819|  4.35k|            {"August", 8},
 2820|  4.35k|            {"September", 9},
 2821|  4.35k|            {"October", 10},
 2822|  4.35k|            {"November", 11},
 2823|  4.35k|            {"December", 12},
 2824|  4.35k|        }};
 2825|  4.35k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 82, False: 4.26k]
  ------------------
 2826|     82|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     82|        }
 2828|  4.26k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  4.26k|            {"Jan", 1},
 2830|  4.26k|            {"Feb", 2},
 2831|  4.26k|            {"Mar", 3},
 2832|  4.26k|            {"Apr", 4},
 2833|  4.26k|            {"Jun", 6},
 2834|  4.26k|            {"Jul", 7},
 2835|  4.26k|            {"Aug", 8},
 2836|  4.26k|            {"Sep", 9},
 2837|  4.26k|            {"Oct", 10},
 2838|  4.26k|            {"Nov", 11},
 2839|  4.26k|            {"Dec", 12},
 2840|  4.26k|        }};
 2841|  4.26k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2.63k, False: 1.63k]
  ------------------
 2842|  2.63k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  2.63k|        }
 2844|  1.63k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.63k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.59k|    {
 2383|  6.59k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.81k, False: 3.78k]
  |  |  |  Branch (865:45): [True: 2.71k, False: 3.87k]
  |  |  |  Branch (865:45): [True: 94, False: 3.78k]
  |  |  ------------------
  ------------------
 2384|  2.81k|            return h.set_error(
 2385|  2.81k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.81k|        }
 2387|  3.78k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  3.78k|        st.set_mon(h);
 2389|  3.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.35k|    {
 3419|  4.35k|        auto start_it = m_begin;
 3420|  4.35k|        std::size_t options_available = N;
 3421|  4.35k|        std::size_t chars_consumed = 0;
 3422|  16.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.7k, False: 4.21k]
  ------------------
 3423|  16.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 12.6k, False: 82]
  ------------------
 3424|  12.6k|            std::size_t i = 0;
 3425|  12.6k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 58, False: 12.6k]
  ------------------
 3426|     58|                options_available = 0;
 3427|     58|                break;
 3428|     58|            }
 3429|  12.6k|            const auto ch = *m_begin;
 3430|  12.6k|            ++m_begin;
 3431|  78.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 66.1k, False: 12.6k]
  ------------------
 3432|  66.1k|                const auto cmp = static_cast<unsigned>(
 3433|  66.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  66.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 66.1k]
  ------------------
 3435|  66.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 54.7k, False: 11.3k]
  |  Branch (3435:34): [True: 52.0k, False: 2.76k]
  ------------------
 3436|  52.0k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  52.0k|                                options.end());
 3438|  52.0k|                    --options_available;
 3439|  52.0k|                    continue;
 3440|  52.0k|                }
 3441|  14.1k|                ++i;
 3442|  14.1k|            }
 3443|  12.6k|            ++chars_consumed;
 3444|  12.6k|        }
 3445|  4.35k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.26k, False: 82]
  ------------------
 3446|  4.26k|            m_begin = start_it;
 3447|  4.26k|            return std::nullopt;
 3448|  4.26k|        }
 3449|     82|        return options.front().second;
 3450|  4.35k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.26k|    {
 3419|  4.26k|        auto start_it = m_begin;
 3420|  4.26k|        std::size_t options_available = N;
 3421|  4.26k|        std::size_t chars_consumed = 0;
 3422|  14.0k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 12.4k, False: 1.58k]
  ------------------
 3423|  14.0k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.80k, False: 2.63k]
  ------------------
 3424|  9.80k|            std::size_t i = 0;
 3425|  9.80k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 9.75k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  9.75k|            const auto ch = *m_begin;
 3430|  9.75k|            ++m_begin;
 3431|  62.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 52.4k, False: 9.75k]
  ------------------
 3432|  52.4k|                const auto cmp = static_cast<unsigned>(
 3433|  52.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  52.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 52.4k]
  ------------------
 3435|  52.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.9k, False: 5.53k]
  |  Branch (3435:34): [True: 44.2k, False: 2.67k]
  ------------------
 3436|  44.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  44.2k|                                options.end());
 3438|  44.2k|                    --options_available;
 3439|  44.2k|                    continue;
 3440|  44.2k|                }
 3441|  8.20k|                ++i;
 3442|  8.20k|            }
 3443|  9.75k|            ++chars_consumed;
 3444|  9.75k|        }
 3445|  4.26k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.63k, False: 2.63k]
  ------------------
 3446|  1.63k|            m_begin = start_it;
 3447|  1.63k|            return std::nullopt;
 3448|  1.63k|        }
 3449|  2.63k|        return options.front().second;
 3450|  4.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.87k|    {
 2848|  3.87k|#if !SCN_DISABLE_LOCALE
 2849|  3.87k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.87k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.87k|#endif
 2856|       |
 2857|  3.87k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.87k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.86k|    {
 2880|  3.86k|#if !SCN_DISABLE_LOCALE
 2881|  3.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.86k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.86k|#endif
 2888|       |
 2889|  3.86k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.86k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.86k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.86k|    {
 2370|  3.86k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.26k, False: 602]
  |  |  |  Branch (865:45): [True: 3.18k, False: 674]
  |  |  |  Branch (865:45): [True: 72, False: 602]
  |  |  ------------------
  ------------------
 2371|  3.26k|            return h.set_error(
 2372|  3.26k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.26k|        }
 2374|    602|        t.mday = d;
 2375|    602|        st.set_mday(h);
 2376|    602|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  3.10k|    {
 2895|  3.10k|#if !SCN_DISABLE_LOCALE
 2896|  3.10k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.10k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.10k|#endif
 2903|       |
 2904|  3.10k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.10k|            {"Sunday", 0},
 2906|  3.10k|            {"Monday", 1},
 2907|  3.10k|            {"Tuesday", 2},
 2908|  3.10k|            {"Wednesday", 3},
 2909|  3.10k|            {"Thursday", 4},
 2910|  3.10k|            {"Friday", 5},
 2911|  3.10k|            {"Saturday", 6},
 2912|  3.10k|        }};
 2913|  3.10k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.10k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.10k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.10k|            {"Sun", 0},
 2918|  3.10k|            {"Mon", 1},
 2919|  3.10k|            {"Tue", 2},
 2920|  3.10k|            {"Wed", 3},
 2921|  3.10k|            {"Thu", 4},
 2922|  3.10k|            {"Fri", 5},
 2923|  3.10k|            {"Sat", 6},
 2924|  3.10k|        }};
 2925|  3.10k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 1.45k, False: 1.64k]
  ------------------
 2926|  1.45k|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|  1.45k|        }
 2928|  1.64k|        return set_error(
 2929|  1.64k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.10k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|  1.45k|    {
 2433|  1.45k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  |  Branch (865:45): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|  1.45k|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|  1.45k|        st.set_wday(h);
 2439|  1.45k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.21k|    {
 3419|  6.21k|        auto start_it = m_begin;
 3420|  6.21k|        std::size_t options_available = N;
 3421|  6.21k|        std::size_t chars_consumed = 0;
 3422|  20.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 15.5k, False: 4.71k]
  ------------------
 3423|  20.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 14.0k, False: 1.45k]
  ------------------
 3424|  14.0k|            std::size_t i = 0;
 3425|  14.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 14.0k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  14.0k|            const auto ch = *m_begin;
 3430|  14.0k|            ++m_begin;
 3431|  65.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 51.2k, False: 14.0k]
  ------------------
 3432|  51.2k|                const auto cmp = static_cast<unsigned>(
 3433|  51.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  51.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 51.2k]
  ------------------
 3435|  51.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.0k, False: 9.28k]
  |  Branch (3435:34): [True: 41.9k, False: 28]
  ------------------
 3436|  41.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.9k|                                options.end());
 3438|  41.9k|                    --options_available;
 3439|  41.9k|                    continue;
 3440|  41.9k|                }
 3441|  9.31k|                ++i;
 3442|  9.31k|            }
 3443|  14.0k|            ++chars_consumed;
 3444|  14.0k|        }
 3445|  6.21k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.75k, False: 1.45k]
  ------------------
 3446|  4.75k|            m_begin = start_it;
 3447|  4.75k|            return std::nullopt;
 3448|  4.75k|        }
 3449|  1.45k|        return options.front().second;
 3450|  6.21k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  13.7k|    {
 2969|  13.7k|#if !SCN_DISABLE_LOCALE
 2970|  13.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.7k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.7k|#endif
 2977|       |
 2978|  13.7k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.7k|    {
 2344|  13.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.60k, False: 11.1k]
  |  |  |  Branch (865:45): [True: 2.42k, False: 11.3k]
  |  |  |  Branch (865:45): [True: 180, False: 11.1k]
  |  |  ------------------
  ------------------
 2345|  2.60k|            return hdl.set_error(
 2346|  2.60k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.60k|        }
 2348|  11.1k|        t.hour = h;
 2349|  11.1k|        st.set_hour24(hdl);
 2350|  11.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.6k|    {
 2331|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 2.70k, False: 10.9k]
  |  |  |  Branch (865:45): [True: 18, False: 10.9k]
  |  |  ------------------
  ------------------
 2332|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.72k|                                "Invalid value for minutes"});
 2334|  2.72k|        }
 2335|  10.9k|        t.min = m;
 2336|  10.9k|        st.set_min(h);
 2337|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.76k|    {
 3011|  2.76k|#if !SCN_DISABLE_LOCALE
 3012|  2.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.76k|#endif
 3019|       |
 3020|  2.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.76k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.76k|    {
 2318|  2.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 1.61k, False: 1.14k]
  |  |  |  Branch (865:45): [True: 2, False: 1.14k]
  |  |  ------------------
  ------------------
 2319|  1.61k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.61k|                                "Invalid value for seconds"});
 2321|  1.61k|        }
 2322|  1.14k|        t.sec = s;
 2323|  1.14k|        st.set_sec(h);
 2324|  1.14k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.77k|    {
 3253|       |        // %m/%d/%y
 3254|  1.77k|        constexpr CharT slash = '/';
 3255|  1.77k|        on_dec_month();
 3256|  1.77k|        on_text(&slash, &slash + 1);
 3257|  1.77k|        on_day_of_month();
 3258|  1.77k|        on_text(&slash, &slash + 1);
 3259|  1.77k|        on_short_year();
 3260|  1.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  2.03k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.03k|        constexpr CharT dash = '-';
 3265|  2.03k|        on_full_year();
 3266|  2.03k|        on_text(&dash, &dash + 1);
 3267|  2.03k|        on_dec_month();
 3268|  2.03k|        on_text(&dash, &dash + 1);
 3269|  2.03k|        on_day_of_month();
 3270|  2.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  10.9k|    {
 3295|       |        // %H:%M
 3296|  10.9k|        constexpr CharT colon = ':';
 3297|  10.9k|        on_24_hour();
 3298|  10.9k|        on_text(&colon, &colon + 1);
 3299|  10.9k|        on_minute();
 3300|  10.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.76k|    {
 3303|       |        // %H:%M:%S
 3304|  2.76k|        constexpr CharT colon = ':';
 3305|  2.76k|        on_24_hour();
 3306|  2.76k|        on_text(&colon, &colon + 1);
 3307|  2.76k|        on_minute();
 3308|  2.76k|        on_text(&colon, &colon + 1);
 3309|  2.76k|        on_second();
 3310|  2.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  15.1k|    {
 3342|  15.1k|        m_st.verify(*this);
 3343|  15.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 15.1k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  15.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.7k, False: 388]
  |  Branch (3346:37): [True: 130, False: 14.6k]
  |  Branch (3346:60): [True: 0, False: 14.6k]
  ------------------
 3347|    130|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|    130|        }
 3349|  15.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  53.3k|    {
 3353|  53.3k|        return m_error;
 3354|  53.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  15.1k|    {
 3370|  15.1k|        return m_begin;
 3371|  15.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  99.5k|    {
 3363|  99.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 76.4k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  99.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.64k|    {
 2218|  6.64k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.64k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.64k|        t.tm_year = y - 1900;
 2223|  6.64k|        st.set_full_year(h);
 2224|  6.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.32k|    {
 2235|  3.32k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.30k|                                "Invalid value for tm_year"});
 2238|  3.30k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.31k|    {
 2208|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2209|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.30k|                                "Invalid value for tm_mon"});
 2211|  6.30k|        }
 2212|  1.01k|        t.tm_mon = m - 1;
 2213|  1.01k|        st.set_mon(h);
 2214|  1.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.66k|    {
 2198|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2199|  6.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.59k|                                "Invalid value for tm_mday"});
 2201|  6.59k|        }
 2202|     66|        t.tm_mday = d;
 2203|     66|        st.set_mday(h);
 2204|     66|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2179|  6.18k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.18k|                                  "Invalid value for tm_hour"});
 2181|  6.18k|        }
 2182|  7.46k|        t.tm_hour = h;
 2183|  7.46k|        st.set_hour24(hdl);
 2184|  7.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2169|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.22k|                                "Invalid value for tm_min"});
 2171|  6.22k|        }
 2172|  7.42k|        t.tm_min = m;
 2173|  7.42k|        st.set_min(h);
 2174|  7.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.76k|    {
 2158|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2159|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.29k|                                "Invalid value for tm_sec"});
 2161|  3.29k|        }
 2162|    468|        t.tm_sec = s;
 2163|    468|        st.set_sec(h);
 2164|    468|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  93.5k|{
  250|  93.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.5k|        .transform_error(impl::make_eof_scan_error);
  252|  93.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  99.5k|    {
 3363|  99.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 76.4k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  99.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.64k|    {
 2218|  6.64k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.64k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.64k|        t.tm_year = y - 1900;
 2223|  6.64k|        st.set_full_year(h);
 2224|  6.64k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.32k|    {
 2235|  3.32k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.30k|                                "Invalid value for tm_year"});
 2238|  3.30k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.31k|    {
 2208|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2209|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.30k|                                "Invalid value for tm_mon"});
 2211|  6.30k|        }
 2212|  1.01k|        t.tm_mon = m - 1;
 2213|  1.01k|        st.set_mon(h);
 2214|  1.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.66k|    {
 2198|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2199|  6.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.59k|                                "Invalid value for tm_mday"});
 2201|  6.59k|        }
 2202|     66|        t.tm_mday = d;
 2203|     66|        st.set_mday(h);
 2204|     66|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2179|  6.18k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.18k|                                  "Invalid value for tm_hour"});
 2181|  6.18k|        }
 2182|  7.46k|        t.tm_hour = h;
 2183|  7.46k|        st.set_hour24(hdl);
 2184|  7.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2169|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.22k|                                "Invalid value for tm_min"});
 2171|  6.22k|        }
 2172|  7.42k|        t.tm_min = m;
 2173|  7.42k|        st.set_min(h);
 2174|  7.42k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.76k|    {
 2158|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2159|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.29k|                                "Invalid value for tm_sec"});
 2161|  3.29k|        }
 2162|    468|        t.tm_sec = s;
 2163|    468|        st.set_sec(h);
 2164|    468|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  99.5k|    {
 3363|  99.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 76.4k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  99.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.64k|    {
 2218|  6.64k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.64k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.64k|        t.tm_year = y - 1900;
 2223|  6.64k|        st.set_full_year(h);
 2224|  6.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.32k|    {
 2235|  3.32k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.30k|                                "Invalid value for tm_year"});
 2238|  3.30k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.31k|    {
 2208|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2209|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.30k|                                "Invalid value for tm_mon"});
 2211|  6.30k|        }
 2212|  1.01k|        t.tm_mon = m - 1;
 2213|  1.01k|        st.set_mon(h);
 2214|  1.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.66k|    {
 2198|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2199|  6.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.59k|                                "Invalid value for tm_mday"});
 2201|  6.59k|        }
 2202|     66|        t.tm_mday = d;
 2203|     66|        st.set_mday(h);
 2204|     66|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2179|  6.18k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.18k|                                  "Invalid value for tm_hour"});
 2181|  6.18k|        }
 2182|  7.46k|        t.tm_hour = h;
 2183|  7.46k|        st.set_hour24(hdl);
 2184|  7.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2169|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.22k|                                "Invalid value for tm_min"});
 2171|  6.22k|        }
 2172|  7.42k|        t.tm_min = m;
 2173|  7.42k|        st.set_min(h);
 2174|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.76k|    {
 2158|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2159|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.29k|                                "Invalid value for tm_sec"});
 2161|  3.29k|        }
 2162|    468|        t.tm_sec = s;
 2163|    468|        st.set_sec(h);
 2164|    468|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  99.5k|    {
 3363|  99.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 76.4k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  99.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.64k|    {
 2218|  6.64k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.64k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.64k|        t.tm_year = y - 1900;
 2223|  6.64k|        st.set_full_year(h);
 2224|  6.64k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.32k|    {
 2235|  3.32k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 3.30k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.30k|                                "Invalid value for tm_year"});
 2238|  3.30k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  7.31k|    {
 2208|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2209|  6.30k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.30k|                                "Invalid value for tm_mon"});
 2211|  6.30k|        }
 2212|  1.01k|        t.tm_mon = m - 1;
 2213|  1.01k|        st.set_mon(h);
 2214|  1.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.66k|    {
 2198|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2199|  6.59k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.59k|                                "Invalid value for tm_mday"});
 2201|  6.59k|        }
 2202|     66|        t.tm_mday = d;
 2203|     66|        st.set_mday(h);
 2204|     66|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  13.6k|    {
 2178|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2179|  6.18k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.18k|                                  "Invalid value for tm_hour"});
 2181|  6.18k|        }
 2182|  7.46k|        t.tm_hour = h;
 2183|  7.46k|        st.set_hour24(hdl);
 2184|  7.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  13.6k|    {
 2168|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2169|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.22k|                                "Invalid value for tm_min"});
 2171|  6.22k|        }
 2172|  7.42k|        t.tm_min = m;
 2173|  7.42k|        st.set_min(h);
 2174|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.76k|    {
 2158|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2159|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.29k|                                "Invalid value for tm_sec"});
 2161|  3.29k|        }
 2162|    468|        t.tm_sec = s;
 2163|    468|        st.set_sec(h);
 2164|    468|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  96.2k|    {
 3363|  96.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 73.1k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  96.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.64k|    {
 2396|  6.64k|        t.year = y;
 2397|  6.64k|        st.set_full_year(h);
 2398|  6.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.32k|    {
 2419|  3.32k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.32k, False: 0]
  ------------------
 2420|  3.32k|            t.year = y;
 2421|  3.32k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.32k|        st.set_short_year(h);
 2426|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  7.31k|    {
 2383|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2384|  6.30k|            return h.set_error(
 2385|  6.30k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.30k|        }
 2387|  1.01k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  1.01k|        st.set_mon(h);
 2389|  1.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.66k|    {
 2370|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2371|  6.59k|            return h.set_error(
 2372|  6.59k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.59k|        }
 2374|     66|        t.mday = d;
 2375|     66|        st.set_mday(h);
 2376|     66|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.6k|    {
 2344|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2345|  6.18k|            return hdl.set_error(
 2346|  6.18k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.18k|        }
 2348|  7.46k|        t.hour = h;
 2349|  7.46k|        st.set_hour24(hdl);
 2350|  7.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.6k|    {
 2331|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2332|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.22k|                                "Invalid value for minutes"});
 2334|  6.22k|        }
 2335|  7.42k|        t.min = m;
 2336|  7.42k|        st.set_min(h);
 2337|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.76k|    {
 2318|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2319|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.29k|                                "Invalid value for seconds"});
 2321|  3.29k|        }
 2322|    468|        t.sec = s;
 2323|    468|        st.set_sec(h);
 2324|    468|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  31.1k|{
 3563|  31.1k|    {
 3564|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 330, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    330|    }                                                  \
  |  |  |  | 3939|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.8k|        ctx.range(), t, ctx.locale());
 3571|  30.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.1k, False: 7.70k]
  |  |  ------------------
  ------------------
 3573|  23.1k|        return unexpected(e.error());
 3574|  23.1k|    }
 3575|  7.70k|    return r.get_iterator();
 3576|  30.8k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  30.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.8k|    static_cast<    \
  |  |  935|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.8k|          m_begin(ranges::begin(m_range)),
 2708|  30.8k|          m_tm(t),
 2709|  30.8k|          m_loc(loc)
 2710|  30.8k|    {
 2711|  30.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.5k|    {
 3358|  22.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  96.2k|    {
 3363|  96.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 23.1k, False: 73.1k]
  ------------------
 3364|  23.1k|            m_error = unexpected(e);
 3365|  23.1k|        }
 3366|  96.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  30.7k|    {
 2715|  38.8k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 30.7k, False: 8.05k]
  ------------------
 2716|  30.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 118, False: 30.6k]
  ------------------
 2717|    118|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    118|            }
 2719|  30.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.5k, False: 8.05k]
  ------------------
 2720|  22.5k|                return on_error("Invalid literal character");
 2721|  22.5k|            }
 2722|  8.05k|            ++beg;
 2723|  8.05k|            ++m_begin;
 2724|  8.05k|        }
 2725|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.64k|    {
 2745|  6.64k|#if !SCN_DISABLE_LOCALE
 2746|  6.64k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.64k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.64k|#endif
 2753|       |
 2754|  6.64k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.64k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.64k|    {
 2396|  6.64k|        t.year = y;
 2397|  6.64k|        st.set_full_year(h);
 2398|  6.64k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  54.3k|    {
 3381|  54.3k|        int digits_read = 0;
 3382|  54.3k|        int accumulator = 0;
 3383|  71.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 70.9k, False: 258]
  ------------------
 3384|  70.9k|            const auto ch = *m_begin;
 3385|  70.9k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.9k, False: 41.0k]
  |  Branch (3385:36): [True: 21.7k, False: 19.3k]
  ------------------
 3386|  51.6k|                break;
 3387|  51.6k|            }
 3388|  19.3k|            ++m_begin;
 3389|  19.3k|            ++digits_read;
 3390|  19.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  19.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 2.47k, False: 16.8k]
  ------------------
 3392|  2.47k|                break;
 3393|  2.47k|            }
 3394|  19.3k|        }
 3395|  54.3k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 38.3k, False: 16.0k]
  ------------------
 3396|  38.3k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  38.3k|                                 "Too few integer digits"});
 3398|  38.3k|            return -1;
 3399|  38.3k|        }
 3400|  16.0k|        return accumulator;
 3401|  54.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.32k|    {
 2759|  3.32k|#if !SCN_DISABLE_LOCALE
 2760|  3.32k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.32k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.32k|#endif
 2768|       |
 2769|  3.32k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.32k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.32k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.32k|    {
 2419|  3.32k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.32k, False: 0]
  ------------------
 2420|  3.32k|            t.year = y;
 2421|  3.32k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.32k|        st.set_short_year(h);
 2426|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.93k|    {
 2802|  3.93k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.93k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.93k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.93k|#endif
 2810|       |
 2811|  3.93k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.93k|            {"January", 1},
 2813|  3.93k|            {"February", 2},
 2814|  3.93k|            {"March", 3},
 2815|  3.93k|            {"April", 4},
 2816|  3.93k|            {"May", 5},
 2817|  3.93k|            {"June", 6},
 2818|  3.93k|            {"July", 7},
 2819|  3.93k|            {"August", 8},
 2820|  3.93k|            {"September", 9},
 2821|  3.93k|            {"October", 10},
 2822|  3.93k|            {"November", 11},
 2823|  3.93k|            {"December", 12},
 2824|  3.93k|        }};
 2825|  3.93k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 22, False: 3.91k]
  ------------------
 2826|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     22|        }
 2828|  3.91k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.91k|            {"Jan", 1},
 2830|  3.91k|            {"Feb", 2},
 2831|  3.91k|            {"Mar", 3},
 2832|  3.91k|            {"Apr", 4},
 2833|  3.91k|            {"Jun", 6},
 2834|  3.91k|            {"Jul", 7},
 2835|  3.91k|            {"Aug", 8},
 2836|  3.91k|            {"Sep", 9},
 2837|  3.91k|            {"Oct", 10},
 2838|  3.91k|            {"Nov", 11},
 2839|  3.91k|            {"Dec", 12},
 2840|  3.91k|        }};
 2841|  3.91k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 612, False: 3.30k]
  ------------------
 2842|    612|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    612|        }
 2844|  3.30k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.30k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  7.31k|    {
 2383|  7.31k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.30k, False: 1.01k]
  |  |  |  Branch (865:45): [True: 6.25k, False: 1.05k]
  |  |  |  Branch (865:45): [True: 46, False: 1.01k]
  |  |  ------------------
  ------------------
 2384|  6.30k|            return h.set_error(
 2385|  6.30k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.30k|        }
 2387|  1.01k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  1.01k|        st.set_mon(h);
 2389|  1.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.93k|    {
 3419|  3.93k|        auto start_it = m_begin;
 3420|  3.93k|        std::size_t options_available = N;
 3421|  3.93k|        std::size_t chars_consumed = 0;
 3422|  9.81k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.93k, False: 3.87k]
  ------------------
 3423|  9.81k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.91k, False: 22]
  ------------------
 3424|  5.91k|            std::size_t i = 0;
 3425|  5.91k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 40, False: 5.87k]
  ------------------
 3426|     40|                options_available = 0;
 3427|     40|                break;
 3428|     40|            }
 3429|  5.87k|            const auto ch = *m_begin;
 3430|  5.87k|            ++m_begin;
 3431|  56.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 50.4k, False: 5.87k]
  ------------------
 3432|  50.4k|                const auto cmp = static_cast<unsigned>(
 3433|  50.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  50.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 50.4k]
  ------------------
 3435|  50.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 47.9k, False: 2.58k]
  |  Branch (3435:34): [True: 47.1k, False: 758]
  ------------------
 3436|  47.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  47.1k|                                options.end());
 3438|  47.1k|                    --options_available;
 3439|  47.1k|                    continue;
 3440|  47.1k|                }
 3441|  3.34k|                ++i;
 3442|  3.34k|            }
 3443|  5.87k|            ++chars_consumed;
 3444|  5.87k|        }
 3445|  3.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.91k, False: 22]
  ------------------
 3446|  3.91k|            m_begin = start_it;
 3447|  3.91k|            return std::nullopt;
 3448|  3.91k|        }
 3449|     22|        return options.front().second;
 3450|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.91k|    {
 3419|  3.91k|        auto start_it = m_begin;
 3420|  3.91k|        std::size_t options_available = N;
 3421|  3.91k|        std::size_t chars_consumed = 0;
 3422|  9.12k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.84k, False: 3.27k]
  ------------------
 3423|  9.12k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.23k, False: 612]
  ------------------
 3424|  5.23k|            std::size_t i = 0;
 3425|  5.23k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 30, False: 5.20k]
  ------------------
 3426|     30|                options_available = 0;
 3427|     30|                break;
 3428|     30|            }
 3429|  5.20k|            const auto ch = *m_begin;
 3430|  5.20k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 44.3k, False: 5.20k]
  ------------------
 3432|  44.3k|                const auto cmp = static_cast<unsigned>(
 3433|  44.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  44.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 44.3k]
  ------------------
 3435|  44.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 43.1k, False: 1.27k]
  |  Branch (3435:34): [True: 42.4k, False: 700]
  ------------------
 3436|  42.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.4k|                                options.end());
 3438|  42.4k|                    --options_available;
 3439|  42.4k|                    continue;
 3440|  42.4k|                }
 3441|  1.97k|                ++i;
 3442|  1.97k|            }
 3443|  5.20k|            ++chars_consumed;
 3444|  5.20k|        }
 3445|  3.91k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.30k, False: 612]
  ------------------
 3446|  3.30k|            m_begin = start_it;
 3447|  3.30k|            return std::nullopt;
 3448|  3.30k|        }
 3449|    612|        return options.front().second;
 3450|  3.91k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.68k|    {
 2848|  6.68k|#if !SCN_DISABLE_LOCALE
 2849|  6.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.68k|#endif
 2856|       |
 2857|  6.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.66k|    {
 2880|  6.66k|#if !SCN_DISABLE_LOCALE
 2881|  6.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.66k|#endif
 2888|       |
 2889|  6.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.66k|    {
 2370|  6.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.59k, False: 66]
  |  |  |  Branch (865:45): [True: 6.59k, False: 74]
  |  |  |  Branch (865:45): [True: 8, False: 66]
  |  |  ------------------
  ------------------
 2371|  6.59k|            return h.set_error(
 2372|  6.59k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.59k|        }
 2374|     66|        t.mday = d;
 2375|     66|        st.set_mday(h);
 2376|     66|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.31k|    {
 2895|  3.31k|#if !SCN_DISABLE_LOCALE
 2896|  3.31k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.31k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.31k|#endif
 2903|       |
 2904|  3.31k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.31k|            {"Sunday", 0},
 2906|  3.31k|            {"Monday", 1},
 2907|  3.31k|            {"Tuesday", 2},
 2908|  3.31k|            {"Wednesday", 3},
 2909|  3.31k|            {"Thursday", 4},
 2910|  3.31k|            {"Friday", 5},
 2911|  3.31k|            {"Saturday", 6},
 2912|  3.31k|        }};
 2913|  3.31k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.31k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.31k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.31k|            {"Sun", 0},
 2918|  3.31k|            {"Mon", 1},
 2919|  3.31k|            {"Tue", 2},
 2920|  3.31k|            {"Wed", 3},
 2921|  3.31k|            {"Thu", 4},
 2922|  3.31k|            {"Fri", 5},
 2923|  3.31k|            {"Sat", 6},
 2924|  3.31k|        }};
 2925|  3.31k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.31k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.31k|        return set_error(
 2929|  3.31k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.63k|    {
 3419|  6.63k|        auto start_it = m_begin;
 3420|  6.63k|        std::size_t options_available = N;
 3421|  6.63k|        std::size_t chars_consumed = 0;
 3422|  13.4k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.82k, False: 6.61k]
  ------------------
 3423|  13.4k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.82k, False: 0]
  ------------------
 3424|  6.82k|            std::size_t i = 0;
 3425|  6.82k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.80k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.80k|            const auto ch = *m_begin;
 3430|  6.80k|            ++m_begin;
 3431|  53.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 46.6k, False: 6.80k]
  ------------------
 3432|  46.6k|                const auto cmp = static_cast<unsigned>(
 3433|  46.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  46.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 46.6k]
  ------------------
 3435|  46.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 46.4k, False: 200]
  |  Branch (3435:34): [True: 46.4k, False: 16]
  ------------------
 3436|  46.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  46.4k|                                options.end());
 3438|  46.4k|                    --options_available;
 3439|  46.4k|                    continue;
 3440|  46.4k|                }
 3441|    216|                ++i;
 3442|    216|            }
 3443|  6.80k|            ++chars_consumed;
 3444|  6.80k|        }
 3445|  6.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.63k, False: 0]
  ------------------
 3446|  6.63k|            m_begin = start_it;
 3447|  6.63k|            return std::nullopt;
 3448|  6.63k|        }
 3449|      0|        return options.front().second;
 3450|  6.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  13.6k|    {
 2969|  13.6k|#if !SCN_DISABLE_LOCALE
 2970|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 13.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  13.6k|#endif
 2977|       |
 2978|  13.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  13.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  13.6k|    {
 2344|  13.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.18k, False: 7.46k]
  |  |  |  Branch (865:45): [True: 6.12k, False: 7.53k]
  |  |  |  Branch (865:45): [True: 66, False: 7.46k]
  |  |  ------------------
  ------------------
 2345|  6.18k|            return hdl.set_error(
 2346|  6.18k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.18k|        }
 2348|  7.46k|        t.hour = h;
 2349|  7.46k|        st.set_hour24(hdl);
 2350|  7.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  13.6k|    {
 2997|  13.6k|#if !SCN_DISABLE_LOCALE
 2998|  13.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 13.6k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  13.6k|#endif
 3005|       |
 3006|  13.6k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  13.6k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  13.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  13.6k|    {
 2331|  13.6k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.22k, False: 7.42k]
  |  |  |  Branch (865:45): [True: 6.20k, False: 7.43k]
  |  |  |  Branch (865:45): [True: 12, False: 7.42k]
  |  |  ------------------
  ------------------
 2332|  6.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.22k|                                "Invalid value for minutes"});
 2334|  6.22k|        }
 2335|  7.42k|        t.min = m;
 2336|  7.42k|        st.set_min(h);
 2337|  7.42k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.76k|    {
 3011|  3.76k|#if !SCN_DISABLE_LOCALE
 3012|  3.76k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.76k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.76k|#endif
 3019|       |
 3020|  3.76k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.76k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.76k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.76k|    {
 2318|  3.76k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 468]
  |  |  |  Branch (865:45): [True: 3.29k, False: 470]
  |  |  |  Branch (865:45): [True: 2, False: 468]
  |  |  ------------------
  ------------------
 2319|  3.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.29k|                                "Invalid value for seconds"});
 2321|  3.29k|        }
 2322|    468|        t.sec = s;
 2323|    468|        st.set_sec(h);
 2324|    468|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.32k|    {
 3253|       |        // %m/%d/%y
 3254|  3.32k|        constexpr CharT slash = '/';
 3255|  3.32k|        on_dec_month();
 3256|  3.32k|        on_text(&slash, &slash + 1);
 3257|  3.32k|        on_day_of_month();
 3258|  3.32k|        on_text(&slash, &slash + 1);
 3259|  3.32k|        on_short_year();
 3260|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.32k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.32k|        constexpr CharT dash = '-';
 3265|  3.32k|        on_full_year();
 3266|  3.32k|        on_text(&dash, &dash + 1);
 3267|  3.32k|        on_dec_month();
 3268|  3.32k|        on_text(&dash, &dash + 1);
 3269|  3.32k|        on_day_of_month();
 3270|  3.32k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  9.88k|    {
 3295|       |        // %H:%M
 3296|  9.88k|        constexpr CharT colon = ':';
 3297|  9.88k|        on_24_hour();
 3298|  9.88k|        on_text(&colon, &colon + 1);
 3299|  9.88k|        on_minute();
 3300|  9.88k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.76k|    {
 3303|       |        // %H:%M:%S
 3304|  3.76k|        constexpr CharT colon = ':';
 3305|  3.76k|        on_24_hour();
 3306|  3.76k|        on_text(&colon, &colon + 1);
 3307|  3.76k|        on_minute();
 3308|  3.76k|        on_text(&colon, &colon + 1);
 3309|  3.76k|        on_second();
 3310|  3.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  7.70k|    {
 3342|  7.70k|        m_st.verify(*this);
 3343|  7.70k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 7.70k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  7.70k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 7.69k, False: 8]
  |  Branch (3346:37): [True: 10, False: 7.68k]
  |  Branch (3346:60): [True: 0, False: 7.68k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  7.70k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  61.7k|    {
 3353|  61.7k|        return m_error;
 3354|  61.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  7.70k|    {
 3370|  7.70k|        return m_begin;
 3371|  7.70k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    839|{
 1462|    839|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    839|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    839|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    839|            return transcode_to_string_impl_to32(src, dest);
 1473|    839|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    839|    SCN_EXPECT(false);
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    839|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    839|{
 1355|    839|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    839|    auto it = src.begin();
 1358|   226k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 225k, False: 839]
  ------------------
 1359|   225k|        auto res = get_next_code_point(
 1360|   225k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   225k|                                                                 src.end()));
 1362|   225k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.39k, False: 219k]
  |  |  ------------------
  ------------------
 1363|  5.39k|            dest.push_back(DestCharT{0xfffd});
 1364|  5.39k|        }
 1365|   219k|        else {
 1366|   219k|            dest.push_back(res.value);
 1367|   219k|        }
 1368|   225k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   225k|    }
 1370|    839|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   242k|{
 1279|   242k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   242k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   242k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.78k, False: 233k]
  |  |  ------------------
  ------------------
 1283|  8.78k|        return {get_start_for_next_code_point(input),
 1284|  8.78k|                detail::invalid_code_point};
 1285|  8.78k|    }
 1286|   233k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 269, False: 233k]
  |  |  ------------------
  ------------------
 1287|    269|        return {input.end(), detail::invalid_code_point};
 1288|    269|    }
 1289|       |
 1290|   233k|    return {input.begin() + len,
 1291|   233k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   233k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  8.78k|{
 1265|  8.78k|    auto it = input.begin();
 1266|   118k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 118k, False: 569]
  ------------------
 1267|   118k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.21k, False: 109k]
  ------------------
 1268|  8.21k|            break;
 1269|  8.21k|        }
 1270|   118k|    }
 1271|  8.78k|    return it;
 1272|  8.78k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   161k|{
  458|   161k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   161k|        static_cast<unsigned char>(ch))];
  460|   161k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  85.5k|{
  539|  85.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  85.5k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   363k|{
  784|   363k|    return e != eof_error::good;
  785|   363k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.30k|{
  798|  4.30k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.30k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.30k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  80.6k|    {
  304|  80.6k|        ranges::advance(x, n);
  305|  80.6k|        return x;
  306|  80.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  80.6k|    {
  268|  80.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  80.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  80.6k|    {
  151|  80.6k|        i += n;
  152|  80.6k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   212k|    {
  108|   212k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   212k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   212k|    {
   87|   212k|        return s - i;
   88|   212k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   116k|    {
  108|   116k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   116k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   116k|    {
   87|   116k|        return s - i;
   88|   116k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  80.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  80.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  80.6k|          m_current(m_range.begin())
 2988|  80.6k|    {
 2989|  80.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   447k|    {
 2993|   447k|        return m_current;
 2994|   447k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  93.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  93.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  93.5k|          m_current(m_range.begin())
 2988|  93.5k|    {
 2989|  93.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   489k|    {
 2993|   489k|        return m_current;
 2994|   489k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.12M|    {
  763|  1.12M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.12M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   282k|        : m_fptr([](storage fn,
  743|   282k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   282k|              cvref<T> obj = *get<T>(fn);
  745|   282k|              if constexpr (std::is_void_v<R>) {
  746|   282k|                  obj(static_cast<decltype(args)>(args)...);
  747|   282k|              }
  748|   282k|              else {
  749|   282k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   282k|              }
  751|   282k|          }),
  752|   282k|          m_storage(std::addressof(f))
  753|   282k|    {
  754|   282k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   560k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   560k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   560k|              else {
  749|   560k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   560k|              }
  751|   560k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   560k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   560k|        else if constexpr (std::is_object_v<T>) {
  688|   560k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   560k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   282k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   282k|        {
  662|   282k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  59.9k|    {
  108|  59.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  59.9k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  59.9k|    {
   94|  59.9k|        iter_difference_t<I> counter{0};
   95|   537k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 477k, False: 59.9k]
  ------------------
   96|   477k|            ++i;
   97|   477k|            ++counter;
   98|   477k|        }
   99|  59.9k|        return counter;
  100|  59.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  95.2k|{
  951|  95.2k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 93.7k]
  |  |  ------------------
  ------------------
  952|  1.51k|        return eof_error::eof;
  953|  1.51k|    }
  954|  93.7k|    return eof_error::good;
  955|  95.2k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   313k|{
  945|   313k|    return is_range_eof(r.begin(), r.end());
  946|   313k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   313k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   313k|    {
  938|   313k|        return begin == end;
  939|   313k|    }
  940|   313k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  80.6k|{
  951|  80.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 810, False: 79.8k]
  |  |  ------------------
  ------------------
  952|    810|        return eof_error::eof;
  953|    810|    }
  954|  79.8k|    return eof_error::good;
  955|  80.6k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  80.6k|{
  945|  80.6k|    return is_range_eof(r.begin(), r.end());
  946|  80.6k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  80.6k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  80.6k|    {
  938|  80.6k|        return begin == end;
  939|  80.6k|    }
  940|  80.6k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   161k|    {
 1602|   161k|        return sv;
 1603|   161k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  80.6k|{
 3066|  80.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 80.6k, False: 0]
  ------------------
 3067|  80.6k|        auto it = read_while_classic_space(range);
 3068|  80.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  80.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 810, False: 79.8k]
  |  |  ------------------
  ------------------
 3070|    810|            return unexpected(e);
 3071|    810|        }
 3072|       |
 3073|  79.8k|        return it;
 3074|  80.6k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  80.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  80.6k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  80.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  80.6k|        auto buf = make_contiguous_buffer(range);
 2220|  80.6k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  80.6k|        return ranges::next(range.begin(),
 2222|  80.6k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  80.6k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  80.6k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  80.6k|                  ranges::sized_range<Range>) {
 1785|  80.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  80.6k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  80.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  80.6k|    {
 1589|  80.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  95.2k|    {
  268|  95.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  95.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  95.2k|    {
  181|  95.2k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 95.2k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  95.2k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  95.2k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  95.2k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  95.2k|        else {
 1055|  95.2k|            return r.begin().contiguous_segment();
 1056|  95.2k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  95.2k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  95.2k|{
 2160|  95.2k|    auto it = range.begin();
 2161|   219k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 218k, False: 1.51k]
  ------------------
 2162|   218k|        const auto val =
 2163|   218k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   218k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   218k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 200k, False: 17.6k]
  |  |  ------------------
  ------------------
 2165|   200k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   200k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   200k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 93.7k, False: 106k]
  ------------------
 2168|  93.7k|                return it;
 2169|  93.7k|            }
 2170|   200k|        }
 2171|   124k|        it = val.iterator;
 2172|   124k|    }
 2173|       |
 2174|  1.51k|    return it;
 2175|  95.2k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   218k|{
 1998|   218k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   218k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   218k|    auto it = range.begin();
 2002|   218k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   218k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 200k]
  |  |  ------------------
  ------------------
 2005|  17.6k|        ++it;
 2006|  17.6k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  17.6k|        return {it, {}};
 2008|  17.6k|    }
 2009|       |
 2010|   200k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 195k, False: 4.91k]
  ------------------
 2011|   195k|        ++it;
 2012|   195k|        return {it, string_type(1, *range.begin())};
 2013|   195k|    }
 2014|       |
 2015|  4.91k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.91k|    return {it, string_type{range.begin(), it}};
 2017|   200k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  17.6k|{
 1265|  17.6k|    auto it = input.begin();
 1266|   227k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 227k, False: 540]
  ------------------
 1267|   227k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 17.0k, False: 210k]
  ------------------
 1268|  17.0k|            break;
 1269|  17.0k|        }
 1270|   227k|    }
 1271|  17.6k|    return it;
 1272|  17.6k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.91k|    {
  283|  4.91k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.91k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.91k|    {
  252|  4.91k|        constexpr iter_difference_t<I> zero{0};
  253|  4.91k|        iter_difference_t<I> counter{0};
  254|       |
  255|  15.6k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 10.9k, False: 4.63k]
  |  Branch (255:30): [True: 10.7k, False: 276]
  ------------------
  256|  10.7k|            ++i;
  257|  10.7k|            ++counter;
  258|  10.7k|        }
  259|       |
  260|  4.91k|        return counter;
  261|  4.91k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   218k|    {
 1989|   218k|        return !codepoint.empty();
 1990|   218k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  95.2k|{
 2181|  95.2k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  95.2k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  95.2k|{
 3066|  95.2k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 95.2k, False: 0]
  ------------------
 3067|  95.2k|        auto it = read_while_classic_space(range);
 3068|  95.2k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  95.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 93.7k]
  |  |  ------------------
  ------------------
 3070|  1.51k|            return unexpected(e);
 3071|  1.51k|        }
 3072|       |
 3073|  93.7k|        return it;
 3074|  95.2k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  95.2k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  95.2k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  95.2k|    else {
 2225|  95.2k|        auto it = range.begin();
 2226|       |
 2227|  95.2k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  95.2k|            auto seg = get_contiguous_beginning(range);
 2229|  95.2k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  95.2k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 95.2k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  95.2k|            ranges::advance(it, seg.size());
 2234|  95.2k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  95.2k|            return detail::is_cp_space(cp);
 2238|  95.2k|        });
 2239|  95.2k|    }
 2240|  95.2k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  95.2k|        : m_fptr([](storage fn,
  743|  95.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.2k|              cvref<T> obj = *get<T>(fn);
  745|  95.2k|              if constexpr (std::is_void_v<R>) {
  746|  95.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.2k|              }
  748|  95.2k|              else {
  749|  95.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.2k|              }
  751|  95.2k|          }),
  752|  95.2k|          m_storage(std::addressof(f))
  753|  95.2k|    {
  754|  95.2k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   200k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   200k|        else if constexpr (std::is_object_v<T>) {
  688|   200k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   200k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   200k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   200k|            return detail::is_cp_space(cp);
 2238|   200k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  95.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.2k|        {
  662|  95.2k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  23.1k|    {
  108|  23.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  23.1k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  23.1k|    {
   94|  23.1k|        iter_difference_t<I> counter{0};
   95|   162k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 139k, False: 23.1k]
  ------------------
   96|   139k|            ++i;
   97|   139k|            ++counter;
   98|   139k|        }
   99|  23.1k|        return counter;
  100|  23.1k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  93.5k|{
  951|  93.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 990, False: 92.5k]
  |  |  ------------------
  ------------------
  952|    990|        return eof_error::eof;
  953|    990|    }
  954|  92.5k|    return eof_error::good;
  955|  93.5k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   273k|{
  945|   273k|    return is_range_eof(r.begin(), r.end());
  946|   273k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   273k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   273k|    {
  938|   273k|        return begin == end;
  939|   273k|    }
  940|   273k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   180k|{
 1998|   180k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   180k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   180k|    auto it = range.begin();
 2002|   180k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   180k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   180k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 180k, False: 0]
  ------------------
 2011|   180k|        ++it;
 2012|   180k|        return {it, string_type(1, *range.begin())};
 2013|   180k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   180k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   273k|{
  945|   273k|    return is_range_eof(r.begin(), r.end());
  946|   273k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   273k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   273k|    {
  938|   273k|        return begin == end;
  939|   273k|    }
  940|   273k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   180k|    {
 1989|   180k|        return !codepoint.empty();
 1990|   180k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  93.5k|{
  951|  93.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 990, False: 92.5k]
  |  |  ------------------
  ------------------
  952|    990|        return eof_error::eof;
  953|    990|    }
  954|  92.5k|    return eof_error::good;
  955|  93.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  93.5k|{
 3066|  93.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 93.5k, False: 0]
  ------------------
 3067|  93.5k|        auto it = read_while_classic_space(range);
 3068|  93.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  93.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 990, False: 92.5k]
  |  |  ------------------
  ------------------
 3070|    990|            return unexpected(e);
 3071|    990|        }
 3072|       |
 3073|  92.5k|        return it;
 3074|  93.5k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  93.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  93.5k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  93.5k|    else {
 2225|  93.5k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  93.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  93.5k|            return detail::is_cp_space(cp);
 2238|  93.5k|        });
 2239|  93.5k|    }
 2240|  93.5k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  93.5k|{
 2181|  93.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  93.5k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  93.5k|{
 2160|  93.5k|    auto it = range.begin();
 2161|   180k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 180k, False: 990]
  ------------------
 2162|   180k|        const auto val =
 2163|   180k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   180k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   180k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 180k, False: 0]
  |  |  ------------------
  ------------------
 2165|   180k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   180k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   180k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 92.5k, False: 87.4k]
  ------------------
 2168|  92.5k|                return it;
 2169|  92.5k|            }
 2170|   180k|        }
 2171|  87.4k|        it = val.iterator;
 2172|  87.4k|    }
 2173|       |
 2174|    990|    return it;
 2175|  93.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  93.5k|        : m_fptr([](storage fn,
  743|  93.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.5k|              cvref<T> obj = *get<T>(fn);
  745|  93.5k|              if constexpr (std::is_void_v<R>) {
  746|  93.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.5k|              }
  748|  93.5k|              else {
  749|  93.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.5k|              }
  751|  93.5k|          }),
  752|  93.5k|          m_storage(std::addressof(f))
  753|  93.5k|    {
  754|  93.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   180k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  688|   180k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   180k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   180k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   180k|            return detail::is_cp_space(cp);
 2238|   180k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  93.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.5k|        {
  662|  93.5k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  93.5k|{
 2160|  93.5k|    auto it = range.begin();
 2161|   180k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 180k, False: 990]
  ------------------
 2162|   180k|        const auto val =
 2163|   180k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   180k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   180k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 180k, False: 0]
  |  |  ------------------
  ------------------
 2165|   180k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   180k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   180k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 92.5k, False: 87.4k]
  ------------------
 2168|  92.5k|                return it;
 2169|  92.5k|            }
 2170|   180k|        }
 2171|  87.4k|        it = val.iterator;
 2172|  87.4k|    }
 2173|       |
 2174|    990|    return it;
 2175|  93.5k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   180k|{
 1998|   180k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   180k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   180k|    auto it = range.begin();
 2002|   180k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   180k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   180k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 180k, False: 0]
  ------------------
 2011|   180k|        ++it;
 2012|   180k|        return {it, string_type(1, *range.begin())};
 2013|   180k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   180k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   180k|    {
 1989|   180k|        return !codepoint.empty();
 1990|   180k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  93.5k|{
 2181|  93.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  93.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  93.5k|{
 3066|  93.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 93.5k, False: 0]
  ------------------
 3067|  93.5k|        auto it = read_while_classic_space(range);
 3068|  93.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  93.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 990, False: 92.5k]
  |  |  ------------------
  ------------------
 3070|    990|            return unexpected(e);
 3071|    990|        }
 3072|       |
 3073|  92.5k|        return it;
 3074|  93.5k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  93.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  93.5k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  93.5k|    else {
 2225|  93.5k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  93.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  93.5k|            return detail::is_cp_space(cp);
 2238|  93.5k|        });
 2239|  93.5k|    }
 2240|  93.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  93.5k|        : m_fptr([](storage fn,
  743|  93.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.5k|              cvref<T> obj = *get<T>(fn);
  745|  93.5k|              if constexpr (std::is_void_v<R>) {
  746|  93.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.5k|              }
  748|  93.5k|              else {
  749|  93.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.5k|              }
  751|  93.5k|          }),
  752|  93.5k|          m_storage(std::addressof(f))
  753|  93.5k|    {
  754|  93.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   180k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  688|   180k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   180k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   180k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   180k|            return detail::is_cp_space(cp);
 2238|   180k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.5k|        {
  662|  93.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.51k|    {
 5954|  2.51k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.51k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.51k|                source_tag<range_type>, {}};
 5957|  2.51k|            auto ctx = make_custom_ctx();
 5958|  2.51k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.51k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.51k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.51k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.51k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.51k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.51k|            auto it =
 5940|  2.51k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.51k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.51k|                                                      range.size()),
 5943|  2.51k|                    0};
 5944|  2.51k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.51k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.51k|    {
 5954|  2.51k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.51k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.51k|                source_tag<range_type>, {}};
 5957|  2.51k|            auto ctx = make_custom_ctx();
 5958|  2.51k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.51k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.51k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.51k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.51k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.51k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.51k|        else {
 5947|  2.51k|            return {range.begin(), args, loc};
 5948|  2.51k|        }
 5949|  2.51k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  80.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  80.6k|    static_cast<    \
  |  |  935|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  80.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  80.6k|          m_current(m_range.begin())
 2988|  80.6k|    {
 2989|  80.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   240k|    {
 2998|   240k|        return m_range.end();
 2999|   240k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  79.8k|    {
 3013|  79.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  79.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  79.8k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 79.8k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  79.8k|        }
 3019|  79.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  79.8k|    static_cast<    \
  |  |  935|  79.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  79.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   160k|    {
 3003|   160k|        return ranges::subrange{begin(), end()};
 3004|   160k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   175k|    {
 6286|   175k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   175k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 70.4k, False: 105k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  70.4k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  70.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  70.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  70.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  70.4k|    }
  ------------------
 6287|   105k|        return {ctx.begin()};
 6288|   175k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  45.3k|    {
 3024|  45.3k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  45.3k|        m_current = m_range.begin() + it.position();
 3026|  45.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   241k|    {
 3008|   241k|        return m_range;
 3009|   241k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  80.6k|    {
 3030|  80.6k|        return ranges::distance(m_range.begin(), begin());
 3031|  80.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  5.03k|    {
 5954|  5.03k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.03k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.03k|                source_tag<range_type>, {}};
 5957|  5.03k|            auto ctx = make_custom_ctx();
 5958|  5.03k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  5.03k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.03k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.03k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  5.03k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  5.03k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  5.03k|            auto it =
 5940|  5.03k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  5.03k|                    std::basic_string_view<char_type>(range.data(),
 5942|  5.03k|                                                      range.size()),
 5943|  5.03k|                    0};
 5944|  5.03k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  5.03k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  93.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  93.5k|    static_cast<    \
  |  |  935|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  93.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  93.5k|          m_current(m_range.begin())
 2988|  93.5k|    {
 2989|  93.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   278k|    {
 2998|   278k|        return m_range.end();
 2999|   278k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  92.5k|    {
 3013|  92.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  92.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  92.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  92.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 92.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  92.5k|        }
 3019|  92.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  92.5k|    static_cast<    \
  |  |  935|  92.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  92.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   186k|    {
 3003|   186k|        return ranges::subrange{begin(), end()};
 3004|   186k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   187k|    {
 6286|   187k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   187k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 140k, False: 46.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   140k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   140k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   140k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   140k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   140k|    }
  ------------------
 6287|  46.2k|        return {ctx.begin()};
 6288|   187k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  23.1k|    {
 3024|  23.1k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  23.1k|        m_current = m_range.begin() + it.position();
 3026|  23.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   280k|    {
 3008|   280k|        return m_range;
 3009|   280k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  93.5k|    {
 3030|  93.5k|        return ranges::distance(m_range.begin(), begin());
 3031|  93.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  5.03k|    {
 5954|  5.03k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  5.03k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  5.03k|                source_tag<range_type>, {}};
 5957|  5.03k|            auto ctx = make_custom_ctx();
 5958|  5.03k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  5.03k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  5.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.03k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.03k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  5.03k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  5.03k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  5.03k|        else {
 5947|  5.03k|            return {range.begin(), args, loc};
 5948|  5.03k|        }
 5949|  5.03k|    }

LLVMFuzzerTestOneInput:
   58|    839|{
   59|    839|    scn::fuzz::run(data, size);
   60|    839|    return 0;
   61|    839|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    839|{
   35|    839|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 839]
  |  Branch (35:35): [True: 0, False: 839]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    839|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    839|    const auto& f =
   42|    839|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    839|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    839|    do_basic_run(sv, f);
   45|       |
   46|    839|    const auto& wf = get_format_strings<wchar_t>(
   47|    839|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    839|        L"{:%a}", L"{:%b}");
   49|    839|    do_basic_run(wsv_reinterpret, wf);
   50|    839|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 839, False: 0]
  ------------------
   51|    839|        do_basic_run(wsv_transcode, wf);
   52|    839|    }
   53|    839|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    839|{
   27|    839|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    839|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    839|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    839|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    839|{
   27|    839|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    839|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    839|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    839|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.67k|{
   27|  1.67k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.67k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.67k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.67k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.67k|{
   27|  1.67k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.67k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.67k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.67k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    839|{
   53|    839|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    839|    string_buffer.resize(size);
   57|    839|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    839|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    839|    const auto wsv_reinterpret_size =
   62|    839|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 75, False: 764]
  ------------------
   63|    839|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    839|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    839|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    839|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    839|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    839|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    839|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    839|{
  123|    839|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    839|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    839|    buf.resize(sizeof...(Args));
  126|    839|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    839|    return buf;
  128|    839|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    839|{
  109|    839|    if constexpr (std::is_same_v<CharT, char>) {
  110|    839|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    839|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    839|{
  186|    839|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    839|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    839|                                   format_strings);
  189|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 7.56k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  7.56k|            it = result->begin();
  146|  7.56k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 7.56k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  7.56k|            it = result->begin();
  162|  7.56k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 7.56k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  7.56k|            it = result->begin();
  146|  7.56k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 7.56k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  7.56k|            it = result->begin();
  162|  7.56k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  13.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.4k|            auto result = scn::scan<T>(
  140|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.4k|                scn::runtime_format(f));
  142|  13.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 7.56k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  7.56k|            it = result->begin();
  146|  7.56k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  13.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.4k|            auto result = scn::scan<T>(
  155|  13.4k|                global_locale,
  156|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.4k|                scn::runtime_format(f));
  158|  13.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 7.56k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  7.56k|            it = result->begin();
  162|  7.56k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  15.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.8k|            auto result = scn::scan<T>(
  140|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.8k|                scn::runtime_format(f));
  142|  15.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 9.99k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  9.99k|            it = result->begin();
  146|  9.99k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  15.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.8k|            auto result = scn::scan<T>(
  155|  15.8k|                global_locale,
  156|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.8k|                scn::runtime_format(f));
  158|  15.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 9.99k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  9.99k|            it = result->begin();
  162|  9.99k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  15.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.8k|            auto result = scn::scan<T>(
  140|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.8k|                scn::runtime_format(f));
  142|  15.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 9.99k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  9.99k|            it = result->begin();
  146|  9.99k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  15.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.8k|            auto result = scn::scan<T>(
  155|  15.8k|                global_locale,
  156|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.8k|                scn::runtime_format(f));
  158|  15.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 9.99k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  9.99k|            it = result->begin();
  162|  9.99k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    839|{
  134|       |    // Regular scan
  135|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.87k, False: 839]
  ------------------
  136|  5.87k|        auto it = scn::ranges::begin(source);
  137|  15.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.8k|            auto result = scn::scan<T>(
  140|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.8k|                scn::runtime_format(f));
  142|  15.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.87k, False: 9.99k]
  ------------------
  143|  5.87k|                break;
  144|  5.87k|            }
  145|  9.99k|            it = result->begin();
  146|  9.99k|        }
  147|  5.87k|    }
  148|       |
  149|       |    // scan localized
  150|  5.87k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.87k, False: 839]
  ------------------
  151|  5.87k|        auto it = scn::ranges::begin(source);
  152|  15.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.8k|            auto result = scn::scan<T>(
  155|  15.8k|                global_locale,
  156|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.8k|                scn::runtime_format(f));
  158|  15.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.87k, False: 9.99k]
  ------------------
  159|  5.87k|                break;
  160|  5.87k|            }
  161|  9.99k|            it = result->begin();
  162|  9.99k|        }
  163|  5.87k|    }
  164|       |
  165|       |    // scan_value
  166|    839|    {
  167|    839|        auto it = scn::ranges::begin(source);
  168|    839|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    839|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    839|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    839|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    839|            auto result = scn::scan_value<T>(
  171|    839|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    839|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 839, False: 0]
  ------------------
  173|    839|                break;
  174|    839|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    839|    }
  178|    839|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    839|{
   91|    839|    using char_type = ranges::range_value_t<Source>;
   92|    839|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    839|    deque.clear();
   94|    839|    std::copy(ranges::begin(source), ranges::end(source),
   95|    839|              std::back_inserter(deque));
   96|    839|    return deque;
   97|    839|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    839|{
   80|    839|    if constexpr (std::is_same_v<CharT, char>) {
   81|    839|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    839|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    839|{
  123|    839|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    839|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    839|    buf.resize(sizeof...(Args));
  126|    839|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    839|    return buf;
  128|    839|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    839|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    839|    else {
  113|    839|        return wformat_string_view_buffer;
  114|    839|    }
  115|    839|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.67k|{
  186|  1.67k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.67k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.67k|                                   format_strings);
  189|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.67k|{
  134|       |    // Regular scan
  135|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.7k, False: 1.67k]
  ------------------
  136|  11.7k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.7k, False: 3.85k]
  ------------------
  143|  11.7k|                break;
  144|  11.7k|            }
  145|  3.85k|            it = result->begin();
  146|  3.85k|        }
  147|  11.7k|    }
  148|       |
  149|       |    // scan localized
  150|  11.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.7k, False: 1.67k]
  ------------------
  151|  11.7k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.7k, False: 3.85k]
  ------------------
  159|  11.7k|                break;
  160|  11.7k|            }
  161|  3.85k|            it = result->begin();
  162|  3.85k|        }
  163|  11.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.67k|    {
  167|  1.67k|        auto it = scn::ranges::begin(source);
  168|  1.67k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.67k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.67k|            auto result = scn::scan_value<T>(
  171|  1.67k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.67k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.67k, False: 0]
  ------------------
  173|  1.67k|                break;
  174|  1.67k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.67k|    }
  178|  1.67k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.67k|{
   91|  1.67k|    using char_type = ranges::range_value_t<Source>;
   92|  1.67k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.67k|    deque.clear();
   94|  1.67k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.67k|              std::back_inserter(deque));
   96|  1.67k|    return deque;
   97|  1.67k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.67k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.67k|    else {
   84|  1.67k|        return wnoncontiguous_buffer;
   85|  1.67k|    }
   86|  1.67k|}

