_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  58.9k|    {
 1523|  58.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.9k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.9k|{
 1494|  58.9k|    auto it = pctx.begin();
 1495|  58.9k|    auto end = pctx.end();
 1496|  58.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 57.3k]
  |  Branch (1496:22): [True: 0, False: 57.3k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  57.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.3k, False: 0]
  ------------------
 1505|  57.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.3k|    }
 1507|  57.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.3k|    return end;
 1512|  57.3k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   686k|        : localized(0),
  743|   686k|          subsec_set(0),
  744|   686k|          sec_set(0),
  745|   686k|          min_set(0),
  746|   686k|          hour24_set(0),
  747|   686k|          hour12_set(0),
  748|   686k|          mday_set(0),
  749|   686k|          mon_set(0),
  750|   686k|          full_year_set(0),
  751|   686k|          century_set(0),
  752|   686k|          short_year_set(0),
  753|   686k|          wday_set(0),
  754|   686k|          yday_set(0),
  755|   686k|          tzoff_set(0),
  756|   686k|          tzname_set(0),
  757|   686k|          am_pm_set(0),
  758|   686k|          epoch_ticks_set(0),
  759|   686k|          duration_ticks_set(0),
  760|   686k|          duration_suffix_set(0),
  761|   686k|          is_pm(0)
  762|   686k|    {
  763|   686k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  57.3k|{
  377|  57.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.3k]
  |  Branch (377:25): [True: 0, False: 57.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.3k|    auto p = begin;
  383|  57.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.3k]
  |  Branch (392:21): [True: 0, False: 57.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   150k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 150k, False: 0]
  ------------------
  399|   150k|        auto ch = *p;
  400|   150k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.3k, False: 93.5k]
  ------------------
  401|  57.3k|            break;
  402|  57.3k|        }
  403|  93.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 77.0k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  77.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 60.6k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  77.0k|        ++p;  // Consume '%'
  445|  77.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 77.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  77.0k|        ch = *p;
  451|  77.0k|        ++p;
  452|       |
  453|  77.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 77.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 77.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 77.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.28k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.28k, False: 73.7k]
  ------------------
  463|  3.28k|                handler.on_full_year();
  464|  3.28k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 77.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 77.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 77.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 77.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.34k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.34k, False: 69.7k]
  ------------------
  479|  7.34k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 77.0k]
  ------------------
  480|  7.34k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 77.0k]
  ------------------
  481|  7.34k|                handler.on_month_name();
  482|  7.34k|                break;
  483|  3.28k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.28k, False: 73.7k]
  ------------------
  484|  3.28k|                handler.on_dec_month();
  485|  3.28k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 77.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 77.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 77.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 77.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.28k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.28k, False: 73.7k]
  ------------------
  502|  3.28k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 77.0k]
  ------------------
  503|  3.28k|                handler.on_day_of_month();
  504|  3.28k|                break;
  505|       |            // Day of week
  506|  5.04k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.04k, False: 72.0k]
  ------------------
  507|  5.04k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 77.0k]
  ------------------
  508|  5.04k|                handler.on_weekday_name();
  509|  5.04k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 77.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 77.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.28k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.28k, False: 73.7k]
  ------------------
  518|  3.28k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 77.0k]
  ------------------
  519|  3.28k|                handler.on_24_hour();
  520|  3.28k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 77.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 77.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.28k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.28k, False: 73.7k]
  ------------------
  527|  3.28k|                handler.on_minute();
  528|  3.28k|                break;
  529|       |            // Second
  530|  3.28k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.28k, False: 73.7k]
  ------------------
  531|  3.28k|                handler.on_second();
  532|  3.28k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 77.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.28k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.28k, False: 73.7k]
  ------------------
  563|  3.28k|                handler.on_tz_offset();
  564|  3.28k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 77.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 77.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 77.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 77.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.60k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.60k, False: 69.4k]
  ------------------
  579|  7.60k|                handler.on_us_date();
  580|  7.60k|                break;
  581|  3.74k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.74k, False: 73.3k]
  ------------------
  582|  3.74k|                handler.on_iso_date();
  583|  3.74k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 77.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  24.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 24.1k, False: 52.9k]
  ------------------
  588|  24.1k|                handler.on_24_hour_time();
  589|  24.1k|                break;
  590|  6.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.18k, False: 70.8k]
  ------------------
  591|  6.18k|                handler.on_iso_time();
  592|  6.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 77.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 77.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 77.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 77.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 77.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 77.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 77.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 77.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  77.0k|        }
  704|  77.0k|        begin = p;
  705|       |
  706|  77.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 77.0k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  77.0k|    }
  710|  57.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.3k|    handler.verify();
  714|  57.3k|    return p;
  715|  57.3k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  20.1k|    {
 1189|  20.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.1k|        st.set_full_year(*this);
 1193|  20.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.2k|    {
 1196|  14.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.2k|        st.set_short_year(*this);
 1200|  14.2k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.2k|    {                                                                \
  769|  14.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.2k|        field##_set = 1;                                             \
  774|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  14.4k|    {
 1232|  14.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.3k|    {
 1238|  34.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.3k|        st.set_mon(*this);
 1242|  34.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.3k|    {
 1266|  34.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.3k|        st.set_mday(*this);
 1270|  34.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  11.6k|    {
 1274|  11.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  11.6k|        st.set_wday(*this);
 1278|  11.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  64.4k|    {
 1296|  64.4k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  64.4k|        st.set_hour24(*this);
 1300|  64.4k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  64.4k|    {
 1310|  64.4k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  64.4k|        st.set_min(*this);
 1314|  64.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  22.7k|    {
 1317|  22.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.7k|        st.set_sec(*this);
 1321|  22.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.86k|    {
 1336|  9.86k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.86k|        st.set_tzoff(*this);
 1340|  9.86k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  9.86k|    {                                                                \
  769|  9.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.86k|        field##_set = 1;                                             \
  774|  9.86k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.2k|    {
 1369|  14.2k|        on_dec_month();
 1370|  14.2k|        on_day_of_month();
 1371|  14.2k|        on_short_year();
 1372|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.3k|    {
 1375|  10.3k|        on_full_year();
 1376|  10.3k|        on_dec_month();
 1377|  10.3k|        on_day_of_month();
 1378|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   115k|    {
 1419|   115k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   115k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   115k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   115k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   115k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   115k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   115k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   115k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   115k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   115k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   115k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   115k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   115k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   115k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   115k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   115k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   115k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   115k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   115k|        st.verify(*this);
 1463|   115k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   115k|    {
  800|   115k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 64.4k, False: 50.6k]
  |  Branch (800:27): [True: 0, False: 64.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   115k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 115k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   115k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.1k, False: 94.9k]
  |  Branch (818:31): [True: 0, False: 20.1k]
  |  Branch (818:46): [True: 0, False: 20.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   115k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.86k, False: 105k]
  |  Branch (824:26): [True: 0, False: 9.86k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   115k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 11.6k, False: 103k]
  |  Branch (829:26): [True: 34.3k, False: 69.0k]
  |  Branch (829:38): [True: 0, False: 69.0k]
  ------------------
  830|   115k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 46.0k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   115k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   289k|    {
 1467|   289k|        return err;
 1468|   289k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.3k|    {
 1530|  57.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  58.9k|    {
 1523|  58.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.9k|{
 1494|  58.9k|    auto it = pctx.begin();
 1495|  58.9k|    auto end = pctx.end();
 1496|  58.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 57.3k]
  |  Branch (1496:22): [True: 0, False: 57.3k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  57.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.3k, False: 0]
  ------------------
 1505|  57.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.3k|    }
 1507|  57.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.3k|    return end;
 1512|  57.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  57.3k|{
  377|  57.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.3k]
  |  Branch (377:25): [True: 0, False: 57.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.3k|    auto p = begin;
  383|  57.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.3k]
  |  Branch (392:21): [True: 0, False: 57.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   150k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 150k, False: 0]
  ------------------
  399|   150k|        auto ch = *p;
  400|   150k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.3k, False: 93.5k]
  ------------------
  401|  57.3k|            break;
  402|  57.3k|        }
  403|  93.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 77.0k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  77.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 60.6k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  77.0k|        ++p;  // Consume '%'
  445|  77.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 77.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  77.0k|        ch = *p;
  451|  77.0k|        ++p;
  452|       |
  453|  77.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 77.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 77.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 77.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.28k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.28k, False: 73.7k]
  ------------------
  463|  3.28k|                handler.on_full_year();
  464|  3.28k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 77.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 77.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 77.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 77.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.34k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.34k, False: 69.7k]
  ------------------
  479|  7.34k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 77.0k]
  ------------------
  480|  7.34k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 77.0k]
  ------------------
  481|  7.34k|                handler.on_month_name();
  482|  7.34k|                break;
  483|  3.28k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.28k, False: 73.7k]
  ------------------
  484|  3.28k|                handler.on_dec_month();
  485|  3.28k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 77.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 77.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 77.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 77.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.28k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.28k, False: 73.7k]
  ------------------
  502|  3.28k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 77.0k]
  ------------------
  503|  3.28k|                handler.on_day_of_month();
  504|  3.28k|                break;
  505|       |            // Day of week
  506|  5.04k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.04k, False: 72.0k]
  ------------------
  507|  5.04k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 77.0k]
  ------------------
  508|  5.04k|                handler.on_weekday_name();
  509|  5.04k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 77.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 77.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.28k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.28k, False: 73.7k]
  ------------------
  518|  3.28k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 77.0k]
  ------------------
  519|  3.28k|                handler.on_24_hour();
  520|  3.28k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 77.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 77.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.28k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.28k, False: 73.7k]
  ------------------
  527|  3.28k|                handler.on_minute();
  528|  3.28k|                break;
  529|       |            // Second
  530|  3.28k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.28k, False: 73.7k]
  ------------------
  531|  3.28k|                handler.on_second();
  532|  3.28k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 77.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.28k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.28k, False: 73.7k]
  ------------------
  563|  3.28k|                handler.on_tz_offset();
  564|  3.28k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 77.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 77.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 77.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 77.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.60k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.60k, False: 69.4k]
  ------------------
  579|  7.60k|                handler.on_us_date();
  580|  7.60k|                break;
  581|  3.74k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.74k, False: 73.3k]
  ------------------
  582|  3.74k|                handler.on_iso_date();
  583|  3.74k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 77.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  24.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 24.1k, False: 52.9k]
  ------------------
  588|  24.1k|                handler.on_24_hour_time();
  589|  24.1k|                break;
  590|  6.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.18k, False: 70.8k]
  ------------------
  591|  6.18k|                handler.on_iso_time();
  592|  6.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 77.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 77.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 77.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 77.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 77.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 77.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 77.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 77.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  77.0k|        }
  704|  77.0k|        begin = p;
  705|       |
  706|  77.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 77.0k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  77.0k|    }
  710|  57.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.3k|    handler.verify();
  714|  57.3k|    return p;
  715|  57.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.1k|    {
 1189|  20.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.1k|        st.set_full_year(*this);
 1193|  20.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.2k|    {
 1196|  14.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.2k|        st.set_short_year(*this);
 1200|  14.2k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.2k|    {                                                                \
  769|  14.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.2k|        field##_set = 1;                                             \
  774|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  14.4k|    {
 1232|  14.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.3k|    {
 1238|  34.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.3k|        st.set_mon(*this);
 1242|  34.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.3k|    {
 1266|  34.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.3k|        st.set_mday(*this);
 1270|  34.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  11.6k|    {
 1274|  11.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  11.6k|        st.set_wday(*this);
 1278|  11.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  64.4k|    {
 1296|  64.4k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  64.4k|        st.set_hour24(*this);
 1300|  64.4k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  64.4k|    {
 1310|  64.4k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  64.4k|        st.set_min(*this);
 1314|  64.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  22.7k|    {
 1317|  22.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.7k|        st.set_sec(*this);
 1321|  22.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.86k|    {
 1336|  9.86k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.86k|        st.set_tzoff(*this);
 1340|  9.86k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  9.86k|    {                                                                \
  769|  9.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.86k|        field##_set = 1;                                             \
  774|  9.86k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.2k|    {
 1369|  14.2k|        on_dec_month();
 1370|  14.2k|        on_day_of_month();
 1371|  14.2k|        on_short_year();
 1372|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.3k|    {
 1375|  10.3k|        on_full_year();
 1376|  10.3k|        on_dec_month();
 1377|  10.3k|        on_day_of_month();
 1378|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   115k|    {
 1419|   115k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   115k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   115k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   115k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   115k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   115k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   115k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   115k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   115k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   115k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   115k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   115k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   115k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   115k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   115k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   115k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   115k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   115k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   115k|        st.verify(*this);
 1463|   115k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   115k|    {
  800|   115k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 64.4k, False: 50.6k]
  |  Branch (800:27): [True: 0, False: 64.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   115k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 115k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   115k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.1k, False: 94.9k]
  |  Branch (818:31): [True: 0, False: 20.1k]
  |  Branch (818:46): [True: 0, False: 20.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   115k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.86k, False: 105k]
  |  Branch (824:26): [True: 0, False: 9.86k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   115k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 11.6k, False: 103k]
  |  Branch (829:26): [True: 34.3k, False: 69.0k]
  |  Branch (829:38): [True: 0, False: 69.0k]
  ------------------
  830|   115k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 46.0k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   115k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   289k|    {
 1467|   289k|        return err;
 1468|   289k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.3k|    {
 1530|  57.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  58.9k|    {
 1523|  58.9k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  58.9k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  58.9k|{
 1494|  58.9k|    auto it = pctx.begin();
 1495|  58.9k|    auto end = pctx.end();
 1496|  58.9k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.64k, False: 57.3k]
  |  Branch (1496:22): [True: 0, False: 57.3k]
  ------------------
 1497|  1.64k|        pctx.on_error(
 1498|  1.64k|            "Format string without specifiers is not valid for this type");
 1499|  1.64k|        return it;
 1500|  1.64k|    }
 1501|       |
 1502|  57.3k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.3k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.3k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.3k, False: 0]
  ------------------
 1505|  57.3k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.3k|    }
 1507|  57.3k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.3k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.3k|    return end;
 1512|  57.3k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  57.3k|{
  377|  57.3k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.3k]
  |  Branch (377:25): [True: 0, False: 57.3k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.3k|    auto p = begin;
  383|  57.3k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.3k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.3k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.3k]
  |  Branch (392:21): [True: 0, False: 57.3k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   150k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 150k, False: 0]
  ------------------
  399|   150k|        auto ch = *p;
  400|   150k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.3k, False: 93.5k]
  ------------------
  401|  57.3k|            break;
  402|  57.3k|        }
  403|  93.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16.4k, False: 77.0k]
  ------------------
  404|  16.4k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16.4k]
  |  Branch (404:32): [True: 16.4k, False: 0]
  |  Branch (404:46): [True: 0, False: 16.4k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  16.4k|            const auto cp_len =
  412|  16.4k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  16.4k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16.4k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  16.4k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16.4k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  16.4k|            ++p;
  439|  16.4k|            continue;
  440|  16.4k|        }
  441|  77.0k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16.4k, False: 60.6k]
  ------------------
  442|  16.4k|            handler.on_text(begin, p);
  443|  16.4k|        }
  444|  77.0k|        ++p;  // Consume '%'
  445|  77.0k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 77.0k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  77.0k|        ch = *p;
  451|  77.0k|        ++p;
  452|       |
  453|  77.0k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 77.0k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 77.0k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 77.0k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.28k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.28k, False: 73.7k]
  ------------------
  463|  3.28k|                handler.on_full_year();
  464|  3.28k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 77.0k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 77.0k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 77.0k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 77.0k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.34k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.34k, False: 69.7k]
  ------------------
  479|  7.34k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 77.0k]
  ------------------
  480|  7.34k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 77.0k]
  ------------------
  481|  7.34k|                handler.on_month_name();
  482|  7.34k|                break;
  483|  3.28k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.28k, False: 73.7k]
  ------------------
  484|  3.28k|                handler.on_dec_month();
  485|  3.28k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 77.0k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 77.0k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 77.0k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 77.0k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.28k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.28k, False: 73.7k]
  ------------------
  502|  3.28k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 77.0k]
  ------------------
  503|  3.28k|                handler.on_day_of_month();
  504|  3.28k|                break;
  505|       |            // Day of week
  506|  5.04k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.04k, False: 72.0k]
  ------------------
  507|  5.04k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 77.0k]
  ------------------
  508|  5.04k|                handler.on_weekday_name();
  509|  5.04k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 77.0k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 77.0k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.28k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.28k, False: 73.7k]
  ------------------
  518|  3.28k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 77.0k]
  ------------------
  519|  3.28k|                handler.on_24_hour();
  520|  3.28k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 77.0k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 77.0k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.28k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.28k, False: 73.7k]
  ------------------
  527|  3.28k|                handler.on_minute();
  528|  3.28k|                break;
  529|       |            // Second
  530|  3.28k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.28k, False: 73.7k]
  ------------------
  531|  3.28k|                handler.on_second();
  532|  3.28k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 77.0k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.28k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.28k, False: 73.7k]
  ------------------
  563|  3.28k|                handler.on_tz_offset();
  564|  3.28k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 77.0k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 77.0k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 77.0k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 77.0k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.60k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.60k, False: 69.4k]
  ------------------
  579|  7.60k|                handler.on_us_date();
  580|  7.60k|                break;
  581|  3.74k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.74k, False: 73.3k]
  ------------------
  582|  3.74k|                handler.on_iso_date();
  583|  3.74k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 77.0k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  24.1k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 24.1k, False: 52.9k]
  ------------------
  588|  24.1k|                handler.on_24_hour_time();
  589|  24.1k|                break;
  590|  6.18k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.18k, False: 70.8k]
  ------------------
  591|  6.18k|                handler.on_iso_time();
  592|  6.18k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 77.0k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 77.0k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 77.0k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 77.0k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 77.0k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 77.0k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 77.0k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 77.0k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  77.0k|        }
  704|  77.0k|        begin = p;
  705|       |
  706|  77.0k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 77.0k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  77.0k|    }
  710|  57.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.3k|    handler.verify();
  714|  57.3k|    return p;
  715|  57.3k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  16.4k|    {
 1177|  16.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  20.1k|    {
 1189|  20.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  20.1k|        st.set_full_year(*this);
 1193|  20.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  20.1k|    {                                                                \
  769|  20.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  20.1k|        field##_set = 1;                                             \
  774|  20.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.2k|    {
 1196|  14.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.2k|        st.set_short_year(*this);
 1200|  14.2k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.2k|    {                                                                \
  769|  14.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.2k|        field##_set = 1;                                             \
  774|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  14.4k|    {
 1232|  14.4k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  14.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  34.3k|    {
 1238|  34.3k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  34.3k|        st.set_mon(*this);
 1242|  34.3k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  34.3k|    {
 1266|  34.3k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  34.3k|        st.set_mday(*this);
 1270|  34.3k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  34.3k|    {                                                                \
  769|  34.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  34.3k|        field##_set = 1;                                             \
  774|  34.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  11.6k|    {
 1274|  11.6k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  11.6k|        st.set_wday(*this);
 1278|  11.6k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  11.6k|    {                                                                \
  769|  11.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.6k|        field##_set = 1;                                             \
  774|  11.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  64.4k|    {
 1296|  64.4k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  64.4k|        st.set_hour24(*this);
 1300|  64.4k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  64.4k|    {
 1310|  64.4k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  64.4k|        st.set_min(*this);
 1314|  64.4k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  64.4k|    {                                                                \
  769|  64.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  64.4k|        field##_set = 1;                                             \
  774|  64.4k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  22.7k|    {
 1317|  22.7k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  22.7k|        st.set_sec(*this);
 1321|  22.7k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  22.7k|    {                                                                \
  769|  22.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  22.7k|        field##_set = 1;                                             \
  774|  22.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  9.86k|    {
 1336|  9.86k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  9.86k|        st.set_tzoff(*this);
 1340|  9.86k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  9.86k|    {                                                                \
  769|  9.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.86k|        field##_set = 1;                                             \
  774|  9.86k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.2k|    {
 1369|  14.2k|        on_dec_month();
 1370|  14.2k|        on_day_of_month();
 1371|  14.2k|        on_short_year();
 1372|  14.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.3k|    {
 1375|  10.3k|        on_full_year();
 1376|  10.3k|        on_dec_month();
 1377|  10.3k|        on_day_of_month();
 1378|  10.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  41.7k|    {
 1387|  41.7k|        on_24_hour();
 1388|  41.7k|        on_minute();
 1389|  41.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  12.8k|    {
 1392|  12.8k|        on_24_hour();
 1393|  12.8k|        on_minute();
 1394|  12.8k|        on_second();
 1395|  12.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   115k|    {
 1419|   115k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   115k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   115k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   115k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   115k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   115k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   115k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   115k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   115k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   115k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   115k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   115k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   115k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   115k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   115k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   115k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   115k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   115k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   115k|        st.verify(*this);
 1463|   115k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   115k|    {
  800|   115k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 64.4k, False: 50.6k]
  |  Branch (800:27): [True: 0, False: 64.4k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   115k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 115k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   115k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 20.1k, False: 94.9k]
  |  Branch (818:31): [True: 0, False: 20.1k]
  |  Branch (818:46): [True: 0, False: 20.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   115k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 9.86k, False: 105k]
  |  Branch (824:26): [True: 0, False: 9.86k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   115k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 11.6k, False: 103k]
  |  Branch (829:26): [True: 34.3k, False: 69.0k]
  |  Branch (829:38): [True: 0, False: 69.0k]
  ------------------
  830|   115k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 46.0k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   115k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   289k|    {
 1467|   289k|        return err;
 1468|   289k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.3k|    {
 1530|  57.3k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.3k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  61.0k|    {
 1523|  61.0k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.0k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.0k|{
 1494|  61.0k|    auto it = pctx.begin();
 1495|  61.0k|    auto end = pctx.end();
 1496|  61.0k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.28k, False: 57.7k]
  |  Branch (1496:22): [True: 0, False: 57.7k]
  ------------------
 1497|  3.28k|        pctx.on_error(
 1498|  3.28k|            "Format string without specifiers is not valid for this type");
 1499|  3.28k|        return it;
 1500|  3.28k|    }
 1501|       |
 1502|  57.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.7k, False: 0]
  ------------------
 1505|  57.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.7k|    }
 1507|  57.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.7k|    return end;
 1512|  57.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  57.7k|{
  377|  57.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.7k]
  |  Branch (377:25): [True: 0, False: 57.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.7k|    auto p = begin;
  383|  57.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.7k]
  |  Branch (392:21): [True: 0, False: 57.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   187k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 187k, False: 0]
  ------------------
  399|   187k|        auto ch = *p;
  400|   187k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.7k, False: 130k]
  ------------------
  401|  57.7k|            break;
  402|  57.7k|        }
  403|   130k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.8k, False: 97.2k]
  ------------------
  404|  32.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.8k]
  |  Branch (404:32): [True: 32.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.8k|            const auto cp_len =
  412|  32.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.8k|            ++p;
  439|  32.8k|            continue;
  440|  32.8k|        }
  441|  97.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.8k, False: 64.3k]
  ------------------
  442|  32.8k|            handler.on_text(begin, p);
  443|  32.8k|        }
  444|  97.2k|        ++p;  // Consume '%'
  445|  97.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 97.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  97.2k|        ch = *p;
  451|  97.2k|        ++p;
  452|       |
  453|  97.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 97.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 97.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 97.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.57k, False: 90.6k]
  ------------------
  463|  6.57k|                handler.on_full_year();
  464|  6.57k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 97.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 97.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 97.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 97.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.15k, False: 90.0k]
  ------------------
  479|  7.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 97.2k]
  ------------------
  480|  7.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 97.2k]
  ------------------
  481|  7.15k|                handler.on_month_name();
  482|  7.15k|                break;
  483|  6.57k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.57k, False: 90.6k]
  ------------------
  484|  6.57k|                handler.on_dec_month();
  485|  6.57k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 97.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 97.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 97.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 97.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.57k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.57k, False: 90.6k]
  ------------------
  502|  6.57k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 97.2k]
  ------------------
  503|  6.57k|                handler.on_day_of_month();
  504|  6.57k|                break;
  505|       |            // Day of week
  506|  6.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.57k, False: 90.6k]
  ------------------
  507|  6.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 97.2k]
  ------------------
  508|  6.57k|                handler.on_weekday_name();
  509|  6.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 97.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 97.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.57k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.57k, False: 90.6k]
  ------------------
  518|  6.57k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 97.2k]
  ------------------
  519|  6.57k|                handler.on_24_hour();
  520|  6.57k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 97.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 97.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.57k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.57k, False: 90.6k]
  ------------------
  527|  6.57k|                handler.on_minute();
  528|  6.57k|                break;
  529|       |            // Second
  530|  6.57k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.57k, False: 90.6k]
  ------------------
  531|  6.57k|                handler.on_second();
  532|  6.57k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 97.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.57k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.57k, False: 90.6k]
  ------------------
  563|  6.57k|                handler.on_tz_offset();
  564|  6.57k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 97.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 97.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 97.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 97.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.59k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.59k, False: 90.6k]
  ------------------
  579|  6.59k|                handler.on_us_date();
  580|  6.59k|                break;
  581|  6.57k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.57k, False: 90.6k]
  ------------------
  582|  6.57k|                handler.on_iso_date();
  583|  6.57k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 97.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  17.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 17.5k, False: 79.6k]
  ------------------
  588|  17.5k|                handler.on_24_hour_time();
  589|  17.5k|                break;
  590|  6.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.70k, False: 90.5k]
  ------------------
  591|  6.70k|                handler.on_iso_time();
  592|  6.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 97.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 97.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 97.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 97.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 97.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 97.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 97.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 97.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  97.2k|        }
  704|  97.2k|        begin = p;
  705|       |
  706|  97.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 97.2k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  97.2k|    }
  710|  57.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.7k|    handler.verify();
  714|  57.7k|    return p;
  715|  57.7k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  32.8k|    {
 1177|  32.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.7k|    {
 1530|  57.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  61.0k|    {
 1523|  61.0k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.0k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.0k|{
 1494|  61.0k|    auto it = pctx.begin();
 1495|  61.0k|    auto end = pctx.end();
 1496|  61.0k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.28k, False: 57.7k]
  |  Branch (1496:22): [True: 0, False: 57.7k]
  ------------------
 1497|  3.28k|        pctx.on_error(
 1498|  3.28k|            "Format string without specifiers is not valid for this type");
 1499|  3.28k|        return it;
 1500|  3.28k|    }
 1501|       |
 1502|  57.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.7k, False: 0]
  ------------------
 1505|  57.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.7k|    }
 1507|  57.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.7k|    return end;
 1512|  57.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  57.7k|{
  377|  57.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.7k]
  |  Branch (377:25): [True: 0, False: 57.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.7k|    auto p = begin;
  383|  57.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.7k]
  |  Branch (392:21): [True: 0, False: 57.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   187k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 187k, False: 0]
  ------------------
  399|   187k|        auto ch = *p;
  400|   187k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.7k, False: 130k]
  ------------------
  401|  57.7k|            break;
  402|  57.7k|        }
  403|   130k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.8k, False: 97.2k]
  ------------------
  404|  32.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.8k]
  |  Branch (404:32): [True: 32.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.8k|            const auto cp_len =
  412|  32.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.8k|            ++p;
  439|  32.8k|            continue;
  440|  32.8k|        }
  441|  97.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.8k, False: 64.3k]
  ------------------
  442|  32.8k|            handler.on_text(begin, p);
  443|  32.8k|        }
  444|  97.2k|        ++p;  // Consume '%'
  445|  97.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 97.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  97.2k|        ch = *p;
  451|  97.2k|        ++p;
  452|       |
  453|  97.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 97.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 97.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 97.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.57k, False: 90.6k]
  ------------------
  463|  6.57k|                handler.on_full_year();
  464|  6.57k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 97.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 97.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 97.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 97.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.15k, False: 90.0k]
  ------------------
  479|  7.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 97.2k]
  ------------------
  480|  7.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 97.2k]
  ------------------
  481|  7.15k|                handler.on_month_name();
  482|  7.15k|                break;
  483|  6.57k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.57k, False: 90.6k]
  ------------------
  484|  6.57k|                handler.on_dec_month();
  485|  6.57k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 97.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 97.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 97.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 97.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.57k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.57k, False: 90.6k]
  ------------------
  502|  6.57k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 97.2k]
  ------------------
  503|  6.57k|                handler.on_day_of_month();
  504|  6.57k|                break;
  505|       |            // Day of week
  506|  6.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.57k, False: 90.6k]
  ------------------
  507|  6.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 97.2k]
  ------------------
  508|  6.57k|                handler.on_weekday_name();
  509|  6.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 97.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 97.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.57k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.57k, False: 90.6k]
  ------------------
  518|  6.57k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 97.2k]
  ------------------
  519|  6.57k|                handler.on_24_hour();
  520|  6.57k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 97.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 97.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.57k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.57k, False: 90.6k]
  ------------------
  527|  6.57k|                handler.on_minute();
  528|  6.57k|                break;
  529|       |            // Second
  530|  6.57k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.57k, False: 90.6k]
  ------------------
  531|  6.57k|                handler.on_second();
  532|  6.57k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 97.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.57k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.57k, False: 90.6k]
  ------------------
  563|  6.57k|                handler.on_tz_offset();
  564|  6.57k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 97.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 97.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 97.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 97.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.59k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.59k, False: 90.6k]
  ------------------
  579|  6.59k|                handler.on_us_date();
  580|  6.59k|                break;
  581|  6.57k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.57k, False: 90.6k]
  ------------------
  582|  6.57k|                handler.on_iso_date();
  583|  6.57k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 97.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  17.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 17.5k, False: 79.6k]
  ------------------
  588|  17.5k|                handler.on_24_hour_time();
  589|  17.5k|                break;
  590|  6.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.70k, False: 90.5k]
  ------------------
  591|  6.70k|                handler.on_iso_time();
  592|  6.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 97.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 97.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 97.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 97.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 97.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 97.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 97.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 97.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  97.2k|        }
  704|  97.2k|        begin = p;
  705|       |
  706|  97.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 97.2k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  97.2k|    }
  710|  57.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.7k|    handler.verify();
  714|  57.7k|    return p;
  715|  57.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  32.8k|    {
 1177|  32.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.7k|    {
 1530|  57.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  61.0k|    {
 1523|  61.0k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  61.0k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  61.0k|{
 1494|  61.0k|    auto it = pctx.begin();
 1495|  61.0k|    auto end = pctx.end();
 1496|  61.0k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.28k, False: 57.7k]
  |  Branch (1496:22): [True: 0, False: 57.7k]
  ------------------
 1497|  3.28k|        pctx.on_error(
 1498|  3.28k|            "Format string without specifiers is not valid for this type");
 1499|  3.28k|        return it;
 1500|  3.28k|    }
 1501|       |
 1502|  57.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.7k, False: 0]
  ------------------
 1505|  57.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.7k|    }
 1507|  57.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 57.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.7k|    return end;
 1512|  57.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  57.7k|{
  377|  57.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.7k]
  |  Branch (377:25): [True: 0, False: 57.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.7k|    auto p = begin;
  383|  57.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.7k]
  |  Branch (392:21): [True: 0, False: 57.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   187k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 187k, False: 0]
  ------------------
  399|   187k|        auto ch = *p;
  400|   187k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.7k, False: 130k]
  ------------------
  401|  57.7k|            break;
  402|  57.7k|        }
  403|   130k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 32.8k, False: 97.2k]
  ------------------
  404|  32.8k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 32.8k]
  |  Branch (404:32): [True: 32.8k, False: 0]
  |  Branch (404:46): [True: 0, False: 32.8k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  32.8k|            const auto cp_len =
  412|  32.8k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  32.8k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 32.8k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  32.8k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 32.8k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  32.8k|            ++p;
  439|  32.8k|            continue;
  440|  32.8k|        }
  441|  97.2k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 32.8k, False: 64.3k]
  ------------------
  442|  32.8k|            handler.on_text(begin, p);
  443|  32.8k|        }
  444|  97.2k|        ++p;  // Consume '%'
  445|  97.2k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 97.2k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  97.2k|        ch = *p;
  451|  97.2k|        ++p;
  452|       |
  453|  97.2k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 97.2k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 97.2k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 97.2k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.57k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.57k, False: 90.6k]
  ------------------
  463|  6.57k|                handler.on_full_year();
  464|  6.57k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 97.2k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 97.2k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 97.2k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 97.2k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  7.15k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 7.15k, False: 90.0k]
  ------------------
  479|  7.15k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 97.2k]
  ------------------
  480|  7.15k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 97.2k]
  ------------------
  481|  7.15k|                handler.on_month_name();
  482|  7.15k|                break;
  483|  6.57k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.57k, False: 90.6k]
  ------------------
  484|  6.57k|                handler.on_dec_month();
  485|  6.57k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 97.2k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 97.2k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 97.2k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 97.2k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.57k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.57k, False: 90.6k]
  ------------------
  502|  6.57k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 97.2k]
  ------------------
  503|  6.57k|                handler.on_day_of_month();
  504|  6.57k|                break;
  505|       |            // Day of week
  506|  6.57k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.57k, False: 90.6k]
  ------------------
  507|  6.57k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 97.2k]
  ------------------
  508|  6.57k|                handler.on_weekday_name();
  509|  6.57k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 97.2k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 97.2k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.57k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.57k, False: 90.6k]
  ------------------
  518|  6.57k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 97.2k]
  ------------------
  519|  6.57k|                handler.on_24_hour();
  520|  6.57k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 97.2k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 97.2k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.57k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.57k, False: 90.6k]
  ------------------
  527|  6.57k|                handler.on_minute();
  528|  6.57k|                break;
  529|       |            // Second
  530|  6.57k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.57k, False: 90.6k]
  ------------------
  531|  6.57k|                handler.on_second();
  532|  6.57k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 97.2k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.57k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.57k, False: 90.6k]
  ------------------
  563|  6.57k|                handler.on_tz_offset();
  564|  6.57k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 97.2k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 97.2k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 97.2k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 97.2k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.59k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.59k, False: 90.6k]
  ------------------
  579|  6.59k|                handler.on_us_date();
  580|  6.59k|                break;
  581|  6.57k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.57k, False: 90.6k]
  ------------------
  582|  6.57k|                handler.on_iso_date();
  583|  6.57k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 97.2k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  17.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 17.5k, False: 79.6k]
  ------------------
  588|  17.5k|                handler.on_24_hour_time();
  589|  17.5k|                break;
  590|  6.70k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.70k, False: 90.5k]
  ------------------
  591|  6.70k|                handler.on_iso_time();
  592|  6.70k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 97.2k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 97.2k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 97.2k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 97.2k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 97.2k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 97.2k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 97.2k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 97.2k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  97.2k|        }
  704|  97.2k|        begin = p;
  705|       |
  706|  97.2k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 97.2k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  97.2k|    }
  710|  57.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.7k|    handler.verify();
  714|  57.7k|    return p;
  715|  57.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  32.8k|    {
 1177|  32.8k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.7k|    {
 1530|  57.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.7k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  1.75k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 1.75k, False: 0]
  ------------------
   72|  1.75k|    {
   73|  1.75k|    }
_ZN3scn2v45monthC2Ej:
  119|  11.1k|        : m_value(static_cast<unsigned char>(d))
  120|  11.1k|    {
  121|  11.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.7k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 168, False: 30.9k]
  ------------------
  404|    168|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 168]
  |  Branch (404:32): [True: 168, False: 0]
  |  Branch (404:46): [True: 0, False: 168]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    168|            const auto cp_len =
  412|    168|                detail::code_point_length_by_starting_code_unit(ch);
  413|    168|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 168]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    168|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 168]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    168|            ++p;
  439|    168|            continue;
  440|    168|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 168, False: 30.7k]
  ------------------
  442|    168|            handler.on_text(begin, p);
  443|    168|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 29.3k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.63k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.63k, False: 27.2k]
  ------------------
  479|  3.63k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.63k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.63k|                handler.on_month_name();
  482|  3.63k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 30.8k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 30.8k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.46k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.46k, False: 28.4k]
  ------------------
  507|  2.46k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  2.46k|                handler.on_weekday_name();
  509|  2.46k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 30.8k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.79k, False: 25.1k]
  ------------------
  579|  5.79k|                handler.on_us_date();
  580|  5.79k|                break;
  581|  1.81k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.81k, False: 29.1k]
  ------------------
  582|  1.81k|                handler.on_iso_date();
  583|  1.81k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.4k, False: 18.5k]
  ------------------
  588|  12.4k|                handler.on_24_hour_time();
  589|  12.4k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 27.8k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.9k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.9k|    }
  710|  19.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.7k|    handler.verify();
  714|  19.7k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.40k|    {                                                                \
  769|  3.40k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.40k|        field##_set = 1;                                             \
  774|  3.40k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.23k|    {                                                                \
  769|  4.23k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.23k|        field##_set = 1;                                             \
  774|  4.23k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.12k|    {                                                                \
  769|  7.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.12k|        field##_set = 1;                                             \
  774|  7.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.56k|    {                                                                \
  769|  4.56k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.56k|        field##_set = 1;                                             \
  774|  4.56k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.2k|    {                                                                \
  769|  13.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.2k|        field##_set = 1;                                             \
  774|  13.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.48k|    {                                                                \
  769|  1.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.48k|        field##_set = 1;                                             \
  774|  1.48k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.7k|    {
  800|  19.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.3k, False: 7.40k]
  |  Branch (800:27): [True: 0, False: 12.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 18.8k]
  |  Branch (829:26): [True: 4.45k, False: 14.4k]
  |  Branch (829:38): [True: 0, False: 14.4k]
  ------------------
  830|  19.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.33k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.7k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  13.0k|    {
  867|  13.0k|        assert(!full_year_set);
  868|  13.0k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 13.0k, False: 0]
  |  Branch (868:31): [True: 0, False: 13.0k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  13.0k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 13.0k, False: 0]
  ------------------
  872|  13.0k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 60, False: 12.9k]
  ------------------
  873|     60|                year = 1900 + short_year_value - offset;
  874|     60|            }
  875|  12.9k|            else {
  876|  12.9k|                year = 2000 + short_year_value - offset;
  877|  12.9k|            }
  878|  13.0k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  13.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.8k|{
  377|  25.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.8k]
  |  Branch (377:25): [True: 0, False: 25.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.8k|    auto p = begin;
  383|  25.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.8k]
  |  Branch (392:21): [True: 0, False: 25.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.1k, False: 14.5k]
  ------------------
  399|  26.1k|        auto ch = *p;
  400|  26.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 164, False: 25.9k]
  ------------------
  404|    164|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 164]
  |  Branch (404:32): [True: 164, False: 0]
  |  Branch (404:46): [True: 0, False: 164]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    164|            const auto cp_len =
  412|    164|                detail::code_point_length_by_starting_code_unit(ch);
  413|    164|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 164]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    164|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 164]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    164|            ++p;
  439|    164|            continue;
  440|    164|        }
  441|  25.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 164, False: 25.8k]
  ------------------
  442|    164|            handler.on_text(begin, p);
  443|    164|        }
  444|  25.9k|        ++p;  // Consume '%'
  445|  25.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.9k|        ch = *p;
  451|  25.9k|        ++p;
  452|       |
  453|  25.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 24.3k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.59k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.59k, False: 22.4k]
  ------------------
  479|  3.59k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.9k]
  ------------------
  480|  3.59k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.9k]
  ------------------
  481|  3.59k|                handler.on_month_name();
  482|  3.59k|                break;
  483|     68|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 68, False: 25.9k]
  ------------------
  484|     68|                handler.on_dec_month();
  485|     68|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 25.9k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.49k, False: 23.5k]
  ------------------
  507|  2.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.9k]
  ------------------
  508|  2.49k|                handler.on_weekday_name();
  509|  2.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 25.9k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.70k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.70k, False: 24.2k]
  ------------------
  579|  1.70k|                handler.on_us_date();
  580|  1.70k|                break;
  581|  1.84k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.84k, False: 24.1k]
  ------------------
  582|  1.84k|                handler.on_iso_date();
  583|  1.84k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 14.4k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  3.05k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.05k, False: 22.9k]
  ------------------
  591|  3.05k|                handler.on_iso_time();
  592|  3.05k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.9k|        }
  704|  25.9k|        begin = p;
  705|       |
  706|  25.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.7k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.9k|    }
  710|  14.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.5k|    handler.verify();
  714|  14.5k|    return p;
  715|  25.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.46k|    {                                                                \
  769|  3.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.46k|        field##_set = 1;                                             \
  774|  3.46k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    100|    {                                                                \
  769|    100|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    100|        field##_set = 1;                                             \
  774|    100|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.86k|    {                                                                \
  769|  2.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.86k|        field##_set = 1;                                             \
  774|  2.86k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    410|    {                                                                \
  769|    410|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    410|        field##_set = 1;                                             \
  774|    410|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.0k|    {                                                                \
  769|  12.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.0k|        field##_set = 1;                                             \
  774|  12.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.47k|    {                                                                \
  769|  1.47k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.47k|        field##_set = 1;                                             \
  774|  1.47k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.5k|    {
  800|  14.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.3k, False: 3.18k]
  |  Branch (800:27): [True: 0, False: 11.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 14.3k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 13.6k]
  |  Branch (829:26): [True: 322, False: 13.3k]
  |  Branch (829:38): [True: 0, False: 13.3k]
  ------------------
  830|  14.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.20k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.5k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.7k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 168, False: 30.9k]
  ------------------
  404|    168|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 168]
  |  Branch (404:32): [True: 168, False: 0]
  |  Branch (404:46): [True: 0, False: 168]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    168|            const auto cp_len =
  412|    168|                detail::code_point_length_by_starting_code_unit(ch);
  413|    168|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 168]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    168|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 168]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    168|            ++p;
  439|    168|            continue;
  440|    168|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 168, False: 30.7k]
  ------------------
  442|    168|            handler.on_text(begin, p);
  443|    168|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 29.3k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.63k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.63k, False: 27.2k]
  ------------------
  479|  3.63k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.63k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.63k|                handler.on_month_name();
  482|  3.63k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 30.8k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 30.8k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.46k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.46k, False: 28.4k]
  ------------------
  507|  2.46k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  2.46k|                handler.on_weekday_name();
  509|  2.46k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 30.8k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.79k, False: 25.1k]
  ------------------
  579|  5.79k|                handler.on_us_date();
  580|  5.79k|                break;
  581|  1.81k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.81k, False: 29.1k]
  ------------------
  582|  1.81k|                handler.on_iso_date();
  583|  1.81k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.4k, False: 18.5k]
  ------------------
  588|  12.4k|                handler.on_24_hour_time();
  589|  12.4k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 27.8k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.9k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.9k|    }
  710|  19.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.7k|    handler.verify();
  714|  19.7k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.40k|    {                                                                \
  769|  3.40k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.40k|        field##_set = 1;                                             \
  774|  3.40k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.23k|    {                                                                \
  769|  4.23k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.23k|        field##_set = 1;                                             \
  774|  4.23k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.12k|    {                                                                \
  769|  7.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.12k|        field##_set = 1;                                             \
  774|  7.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.56k|    {                                                                \
  769|  4.56k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.56k|        field##_set = 1;                                             \
  774|  4.56k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.2k|    {                                                                \
  769|  13.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.2k|        field##_set = 1;                                             \
  774|  13.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.48k|    {                                                                \
  769|  1.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.48k|        field##_set = 1;                                             \
  774|  1.48k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.7k|    {
  800|  19.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.3k, False: 7.40k]
  |  Branch (800:27): [True: 0, False: 12.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 18.8k]
  |  Branch (829:26): [True: 4.45k, False: 14.4k]
  |  Branch (829:38): [True: 0, False: 14.4k]
  ------------------
  830|  19.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.33k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.8k|{
  377|  25.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.8k]
  |  Branch (377:25): [True: 0, False: 25.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.8k|    auto p = begin;
  383|  25.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.8k]
  |  Branch (392:21): [True: 0, False: 25.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.1k, False: 14.5k]
  ------------------
  399|  26.1k|        auto ch = *p;
  400|  26.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 164, False: 25.9k]
  ------------------
  404|    164|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 164]
  |  Branch (404:32): [True: 164, False: 0]
  |  Branch (404:46): [True: 0, False: 164]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    164|            const auto cp_len =
  412|    164|                detail::code_point_length_by_starting_code_unit(ch);
  413|    164|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 164]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    164|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 164]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    164|            ++p;
  439|    164|            continue;
  440|    164|        }
  441|  25.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 164, False: 25.8k]
  ------------------
  442|    164|            handler.on_text(begin, p);
  443|    164|        }
  444|  25.9k|        ++p;  // Consume '%'
  445|  25.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.9k|        ch = *p;
  451|  25.9k|        ++p;
  452|       |
  453|  25.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 24.3k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.59k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.59k, False: 22.4k]
  ------------------
  479|  3.59k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.9k]
  ------------------
  480|  3.59k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.9k]
  ------------------
  481|  3.59k|                handler.on_month_name();
  482|  3.59k|                break;
  483|     68|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 68, False: 25.9k]
  ------------------
  484|     68|                handler.on_dec_month();
  485|     68|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 25.9k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.49k, False: 23.5k]
  ------------------
  507|  2.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.9k]
  ------------------
  508|  2.49k|                handler.on_weekday_name();
  509|  2.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 25.9k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.70k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.70k, False: 24.2k]
  ------------------
  579|  1.70k|                handler.on_us_date();
  580|  1.70k|                break;
  581|  1.84k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.84k, False: 24.1k]
  ------------------
  582|  1.84k|                handler.on_iso_date();
  583|  1.84k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 14.4k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  3.05k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.05k, False: 22.9k]
  ------------------
  591|  3.05k|                handler.on_iso_time();
  592|  3.05k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.9k|        }
  704|  25.9k|        begin = p;
  705|       |
  706|  25.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.7k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.9k|    }
  710|  14.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.5k|    handler.verify();
  714|  14.5k|    return p;
  715|  25.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.46k|    {                                                                \
  769|  3.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.46k|        field##_set = 1;                                             \
  774|  3.46k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    100|    {                                                                \
  769|    100|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    100|        field##_set = 1;                                             \
  774|    100|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.86k|    {                                                                \
  769|  2.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.86k|        field##_set = 1;                                             \
  774|  2.86k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    410|    {                                                                \
  769|    410|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    410|        field##_set = 1;                                             \
  774|    410|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.0k|    {                                                                \
  769|  12.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.0k|        field##_set = 1;                                             \
  774|  12.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.47k|    {                                                                \
  769|  1.47k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.47k|        field##_set = 1;                                             \
  774|  1.47k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.5k|    {
  800|  14.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.3k, False: 3.18k]
  |  Branch (800:27): [True: 0, False: 11.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 14.3k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 13.6k]
  |  Branch (829:26): [True: 322, False: 13.3k]
  |  Branch (829:38): [True: 0, False: 13.3k]
  ------------------
  830|  14.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.20k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.5k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.7k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 168, False: 30.9k]
  ------------------
  404|    168|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 168]
  |  Branch (404:32): [True: 168, False: 0]
  |  Branch (404:46): [True: 0, False: 168]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    168|            const auto cp_len =
  412|    168|                detail::code_point_length_by_starting_code_unit(ch);
  413|    168|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 168]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    168|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 168]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    168|            ++p;
  439|    168|            continue;
  440|    168|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 168, False: 30.7k]
  ------------------
  442|    168|            handler.on_text(begin, p);
  443|    168|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.59k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.59k, False: 29.3k]
  ------------------
  463|  1.59k|                handler.on_full_year();
  464|  1.59k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.63k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.63k, False: 27.2k]
  ------------------
  479|  3.63k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  3.63k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  3.63k|                handler.on_month_name();
  482|  3.63k|                break;
  483|     72|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 72, False: 30.8k]
  ------------------
  484|     72|                handler.on_dec_month();
  485|     72|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 30.8k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.46k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.46k, False: 28.4k]
  ------------------
  507|  2.46k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  2.46k|                handler.on_weekday_name();
  509|  2.46k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 30.8k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.79k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.79k, False: 25.1k]
  ------------------
  579|  5.79k|                handler.on_us_date();
  580|  5.79k|                break;
  581|  1.81k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.81k, False: 29.1k]
  ------------------
  582|  1.81k|                handler.on_iso_date();
  583|  1.81k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.4k, False: 18.5k]
  ------------------
  588|  12.4k|                handler.on_24_hour_time();
  589|  12.4k|                break;
  590|  3.03k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.03k, False: 27.8k]
  ------------------
  591|  3.03k|                handler.on_iso_time();
  592|  3.03k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.0k, False: 19.9k]
  ------------------
  707|  11.0k|            return p;
  708|  11.0k|        }
  709|  30.9k|    }
  710|  19.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.7k|    handler.verify();
  714|  19.7k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.40k|    {                                                                \
  769|  3.40k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.40k|        field##_set = 1;                                             \
  774|  3.40k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.79k|    {                                                                \
  769|  5.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.79k|        field##_set = 1;                                             \
  774|  5.79k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.12k|    {                                                                \
  769|  7.12k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.12k|        field##_set = 1;                                             \
  774|  7.12k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.56k|    {                                                                \
  769|  4.56k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.56k|        field##_set = 1;                                             \
  774|  4.56k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  13.2k|    {                                                                \
  769|  13.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.2k|        field##_set = 1;                                             \
  774|  13.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  12.9k|    {                                                                \
  769|  12.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.9k|        field##_set = 1;                                             \
  774|  12.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.48k|    {                                                                \
  769|  1.48k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.48k|        field##_set = 1;                                             \
  774|  1.48k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.7k|    {
  800|  19.7k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.3k, False: 7.40k]
  |  Branch (800:27): [True: 0, False: 12.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.7k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.7k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.7k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 19.5k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.7k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.7k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.7k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 18.8k]
  |  Branch (829:26): [True: 4.45k, False: 14.4k]
  |  Branch (829:38): [True: 0, False: 14.4k]
  ------------------
  830|  19.7k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.33k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  25.8k|{
  377|  25.8k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 25.8k]
  |  Branch (377:25): [True: 0, False: 25.8k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  25.8k|    auto p = begin;
  383|  25.8k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 25.8k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  25.8k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 25.8k]
  |  Branch (392:21): [True: 0, False: 25.8k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.7k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.1k, False: 14.5k]
  ------------------
  399|  26.1k|        auto ch = *p;
  400|  26.1k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.1k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.1k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 164, False: 25.9k]
  ------------------
  404|    164|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 164]
  |  Branch (404:32): [True: 164, False: 0]
  |  Branch (404:46): [True: 0, False: 164]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    164|            const auto cp_len =
  412|    164|                detail::code_point_length_by_starting_code_unit(ch);
  413|    164|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 164]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    164|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 164]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    164|            ++p;
  439|    164|            continue;
  440|    164|        }
  441|  25.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 164, False: 25.8k]
  ------------------
  442|    164|            handler.on_text(begin, p);
  443|    164|        }
  444|  25.9k|        ++p;  // Consume '%'
  445|  25.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 25.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  25.9k|        ch = *p;
  451|  25.9k|        ++p;
  452|       |
  453|  25.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 25.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 25.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 25.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.62k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.62k, False: 24.3k]
  ------------------
  463|  1.62k|                handler.on_full_year();
  464|  1.62k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 25.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 25.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 25.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 25.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.59k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.59k, False: 22.4k]
  ------------------
  479|  3.59k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 25.9k]
  ------------------
  480|  3.59k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 25.9k]
  ------------------
  481|  3.59k|                handler.on_month_name();
  482|  3.59k|                break;
  483|     68|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 68, False: 25.9k]
  ------------------
  484|     68|                handler.on_dec_month();
  485|     68|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 25.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 25.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 25.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 25.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     52|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 52, False: 25.9k]
  ------------------
  502|     52|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 25.9k]
  ------------------
  503|     52|                handler.on_day_of_month();
  504|     52|                break;
  505|       |            // Day of week
  506|  2.49k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.49k, False: 23.5k]
  ------------------
  507|  2.49k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 25.9k]
  ------------------
  508|  2.49k|                handler.on_weekday_name();
  509|  2.49k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 25.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 25.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     44|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 44, False: 25.9k]
  ------------------
  518|     44|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 25.9k]
  ------------------
  519|     44|                handler.on_24_hour();
  520|     44|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 25.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 25.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 25.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 25.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 25.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 25.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 25.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 25.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 25.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 25.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.70k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.70k, False: 24.2k]
  ------------------
  579|  1.70k|                handler.on_us_date();
  580|  1.70k|                break;
  581|  1.84k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.84k, False: 24.1k]
  ------------------
  582|  1.84k|                handler.on_iso_date();
  583|  1.84k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 25.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  11.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 11.5k, False: 14.4k]
  ------------------
  588|  11.5k|                handler.on_24_hour_time();
  589|  11.5k|                break;
  590|  3.05k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.05k, False: 22.9k]
  ------------------
  591|  3.05k|                handler.on_iso_time();
  592|  3.05k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 25.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 25.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 25.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 25.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 25.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 25.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 25.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 25.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  25.9k|        }
  704|  25.9k|        begin = p;
  705|       |
  706|  25.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.2k, False: 14.7k]
  ------------------
  707|  11.2k|            return p;
  708|  11.2k|        }
  709|  25.9k|    }
  710|  14.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.5k|    handler.verify();
  714|  14.5k|    return p;
  715|  25.8k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.46k|    {                                                                \
  769|  3.46k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.46k|        field##_set = 1;                                             \
  774|  3.46k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.70k|    {                                                                \
  769|  1.70k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.70k|        field##_set = 1;                                             \
  774|  1.70k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  2.86k|    {                                                                \
  769|  2.86k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.86k|        field##_set = 1;                                             \
  774|  2.86k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    410|    {                                                                \
  769|    410|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    410|        field##_set = 1;                                             \
  774|    410|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    878|    {                                                                \
  769|    878|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    878|        field##_set = 1;                                             \
  774|    878|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.0k|    {                                                                \
  769|  12.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.0k|        field##_set = 1;                                             \
  774|  12.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  11.9k|    {                                                                \
  769|  11.9k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.9k|        field##_set = 1;                                             \
  774|  11.9k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.47k|    {                                                                \
  769|  1.47k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.47k|        field##_set = 1;                                             \
  774|  1.47k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.5k|    {
  800|  14.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 11.3k, False: 3.18k]
  |  Branch (800:27): [True: 0, False: 11.3k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 230, False: 14.3k]
  |  Branch (818:31): [True: 0, False: 230]
  |  Branch (818:46): [True: 0, False: 230]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 878, False: 13.6k]
  |  Branch (829:26): [True: 322, False: 13.3k]
  |  Branch (829:38): [True: 0, False: 13.3k]
  ------------------
  830|  14.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 1.20k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.5k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.25k|    {                                                                \
  769|  3.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.25k|        field##_set = 1;                                             \
  774|  3.25k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  28.5k|{
  377|  28.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 28.5k]
  |  Branch (377:25): [True: 0, False: 28.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  28.5k|    auto p = begin;
  383|  28.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 28.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  28.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 28.5k]
  |  Branch (392:21): [True: 0, False: 28.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  34.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 28.5k, False: 5.86k]
  ------------------
  399|  28.5k|        auto ch = *p;
  400|  28.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 28.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  28.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 28.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  28.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 28.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  28.5k|        ++p;  // Consume '%'
  445|  28.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 28.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  28.5k|        ch = *p;
  451|  28.5k|        ++p;
  452|       |
  453|  28.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 28.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 28.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 28.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.25k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.25k, False: 25.3k]
  ------------------
  463|  3.25k|                handler.on_full_year();
  464|  3.25k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 28.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 28.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 28.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 28.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  3.52k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 3.52k, False: 25.0k]
  ------------------
  479|  3.52k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 28.5k]
  ------------------
  480|  3.52k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 28.5k]
  ------------------
  481|  3.52k|                handler.on_month_name();
  482|  3.52k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 28.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 28.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 28.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 28.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 28.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 28.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 28.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  3.25k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.25k, False: 25.3k]
  ------------------
  507|  3.25k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 28.5k]
  ------------------
  508|  3.25k|                handler.on_weekday_name();
  509|  3.25k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 28.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 28.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 28.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 28.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 28.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 28.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 28.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 28.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 28.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 28.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 28.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 28.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 28.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 28.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.25k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.25k, False: 25.3k]
  ------------------
  579|  3.25k|                handler.on_us_date();
  580|  3.25k|                break;
  581|  3.25k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.25k, False: 25.3k]
  ------------------
  582|  3.25k|                handler.on_iso_date();
  583|  3.25k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 28.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  8.71k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 8.71k, False: 19.8k]
  ------------------
  588|  8.71k|                handler.on_24_hour_time();
  589|  8.71k|                break;
  590|  3.31k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.31k, False: 25.2k]
  ------------------
  591|  3.31k|                handler.on_iso_time();
  592|  3.31k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 28.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 28.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 28.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 28.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 28.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 28.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 28.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 28.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  28.5k|        }
  704|  28.5k|        begin = p;
  705|       |
  706|  28.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 22.6k, False: 5.88k]
  ------------------
  707|  22.6k|            return p;
  708|  22.6k|        }
  709|  28.5k|    }
  710|  5.86k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 5.86k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  5.86k|    handler.verify();
  714|  5.86k|    return p;
  715|  28.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.50k|    {                                                                \
  769|  6.50k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.50k|        field##_set = 1;                                             \
  774|  6.50k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.25k|    {                                                                \
  769|  3.25k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.25k|        field##_set = 1;                                             \
  774|  3.25k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    602|    {                                                                \
  769|    602|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    602|        field##_set = 1;                                             \
  774|    602|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     30|    {                                                                \
  769|     30|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     30|        field##_set = 1;                                             \
  774|     30|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.95k|    {                                                                \
  769|  5.95k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.95k|        field##_set = 1;                                             \
  774|  5.95k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.87k|    {                                                                \
  769|  5.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.87k|        field##_set = 1;                                             \
  774|  5.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     92|    {                                                                \
  769|     92|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     92|        field##_set = 1;                                             \
  774|     92|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  5.86k|    {
  800|  5.86k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 5.57k, False: 298]
  |  Branch (800:27): [True: 0, False: 5.57k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  5.86k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 5.86k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  5.86k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 5.86k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  5.86k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 5.86k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  5.86k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 5.86k]
  |  Branch (829:26): [True: 10, False: 5.85k]
  |  Branch (829:38): [True: 0, False: 5.85k]
  ------------------
  830|  5.86k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 10]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  5.86k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   889k|{
 4068|   889k|    if constexpr (sizeof(U) == 1) {
 4069|   889k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   889k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   889k|{
 4032|   889k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   889k|    SCN_GCC_COMPAT_PUSH
 4035|   889k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   889k|    constexpr char lengths[] =
 4037|   889k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   889k|        "\1\1\1\1\1\1\1\1"
 4039|   889k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   889k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   889k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   889k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   889k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   889k|    SCN_GCC_COMPAT_POP
 4046|   889k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   423k|{
 4274|   423k|    if constexpr (sizeof(CharT) == 1) {
 4275|   423k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   423k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   423k|{
 4087|   423k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   423k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   423k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   423k|    };
 4092|       |
 4093|   423k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 412k, False: 10.7k]
  ------------------
 4094|   412k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 144, False: 412k]
  ------------------
 4095|    144|            SCN_UNLIKELY_ATTR
 4096|    144|            return invalid_code_point;
 4097|    144|        }
 4098|   412k|        return static_cast<char32_t>(input[0]);
 4099|   412k|    }
 4100|       |
 4101|  10.7k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 8.98k, False: 1.81k]
  ------------------
 4102|  8.98k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 54, False: 8.92k]
  ------------------
 4103|     54|            SCN_UNLIKELY_ATTR
 4104|     54|            return invalid_code_point;
 4105|     54|        }
 4106|  8.92k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 2.12k, False: 6.80k]
  ------------------
 4107|  2.12k|            SCN_UNLIKELY_ATTR
 4108|  2.12k|            return invalid_code_point;
 4109|  2.12k|        }
 4110|       |
 4111|  6.80k|        char32_t cp{};
 4112|  6.80k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  6.80k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  6.80k|        return cp;
 4115|  8.92k|    }
 4116|       |
 4117|  1.81k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 653, False: 1.15k]
  ------------------
 4118|    653|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 48, False: 605]
  ------------------
 4119|     48|            SCN_UNLIKELY_ATTR
 4120|     48|            return invalid_code_point;
 4121|     48|        }
 4122|    605|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 333, False: 272]
  ------------------
 4123|    605|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 147, False: 125]
  ------------------
 4124|    480|            SCN_UNLIKELY_ATTR
 4125|    480|            return invalid_code_point;
 4126|    480|        }
 4127|       |
 4128|    125|        char32_t cp{};
 4129|    125|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    125|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    125|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    125|        return cp;
 4133|    605|    }
 4134|       |
 4135|  1.15k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.15k, False: 0]
  ------------------
 4136|  1.15k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.15k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.15k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 290, False: 869]
  ------------------
 4141|    290|            SCN_UNLIKELY_ATTR
 4142|    290|            return invalid_code_point;
 4143|    290|        }
 4144|    869|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 429, False: 440]
  ------------------
 4145|    869|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 129, False: 311]
  ------------------
 4146|    869|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 152, False: 159]
  ------------------
 4147|    710|            SCN_UNLIKELY_ATTR
 4148|    710|            return invalid_code_point;
 4149|    710|        }
 4150|       |
 4151|    159|        char32_t cp{};
 4152|    159|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    159|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    159|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    159|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    159|        return cp;
 4157|    869|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  11.4k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  11.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  11.4k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   306k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   306k|    else {
 3966|   306k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   306k|                                       to_address(first), to_address(last)))};
 3968|   306k|    }
 3969|   306k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   926k|{
  316|   926k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   926k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   926k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.24M|{
  294|  1.24M|    return p;
  295|  1.24M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   442k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   442k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   442k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   442k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   442k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   442k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  37.8k|    {
 2869|  37.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  37.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  37.8k|    {
 2850|  37.8k|        return decay_copy(t.begin());
 2851|  37.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   957k|{
 2094|   957k|    return SCN_FWD(t);
  ------------------
  |  |  936|   957k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   957k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   162k|    {
 2926|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   162k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   162k|    {
 2908|   162k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   162k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.0k|{
 9705|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.0k|                                   make_scan_args(result->values())));
 9708|  13.0k|    return result;
 9709|  13.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9660|  26.9k|{
 9661|  26.9k|    return scan_result_type<Source, Args...>();
 9662|  26.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  26.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  26.9k|        : m_value(T{}), m_has_value(true)
  427|  26.9k|    {
  428|  26.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6610|  26.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|  80.7k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  80.7k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6384|   120k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.9k|{
 9646|  26.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 14.5k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  14.5k|    else {
 9650|  14.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  14.5k|    static_cast<    \
  |  |  935|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  14.5k|    }
 9652|  26.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  80.7k|    {
 1740|  80.7k|        return has_value();
 1741|  80.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   161k|    {
  490|   161k|        return m_has_value;
  491|   161k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  36.9k|    {
 1746|  36.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  36.9k|        return this->get_unexpected().error();
 1748|  36.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  36.9k|    {
  473|  36.9k|        return m_unexpected;
  474|  36.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.48M|    {
  365|  3.48M|        return m_unexpected;
  366|  3.48M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.83M|        : m_unexpected(std::forward<Err>(e))
  350|  1.83M|    {
  351|  1.83M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.83M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.3k|          m_has_value(false)
  451|  12.3k|    {
  452|  12.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.84M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.84M|    {
  360|  1.84M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.84M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   107k|    {
  490|   107k|        return m_has_value;
  491|   107k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  56.0k|    {
  456|  56.0k|        return m_value;
  457|  56.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  12.3k|    {
  504|  12.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.3k|                                  std::forward<Args>(args)...);
  506|  12.3k|        m_has_value = false;
  507|  12.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   221k|{
  396|   221k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   221k|        T(std::forward<Args>(args)...);
  398|   221k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.3k|    {
  473|  12.3k|        return m_unexpected;
  474|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.3k|    {
  481|  12.3k|        return std::move(m_unexpected);
  482|  12.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|  43.7k|    {
 6485|  43.7k|        m_range = std::forward<Other>(r);
 6486|  43.7k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  43.7k|    {
 1795|  43.7k|        return value();
 1796|  43.7k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  43.7k|    {
 1769|  43.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  43.7k|        return this->get_value();
 1771|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  43.7k|    {
  456|  43.7k|        return m_value;
  457|  43.7k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  39.1k|{
 9485|  39.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  39.1k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  39.1k|{
 9422|  39.1k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  39.1k|    auto result = vscan_impl(buffer, format, args);
 9425|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 9426|  17.2k|        return unexpected(result.error());
 9427|  17.2k|    }
 9428|  21.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  39.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  80.7k|{
 5381|  80.7k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  80.7k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  80.7k|                  "\n"
 5385|  80.7k|                  "Unsupported range type given as input to a scanning "
 5386|  80.7k|                  "function.\n"
 5387|  80.7k|                  "A range needs to have a character type (value type) "
 5388|  80.7k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  80.7k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  80.7k|                  "to be included.\n"
 5391|  80.7k|                  "See the scnlib documentation for more details.");
 5392|  80.7k|    static_assert(
 5393|  80.7k|        !std::is_same_v<T, custom_char_traits>,
 5394|  80.7k|        "\n"
 5395|  80.7k|        "Unsupported range type given as input to a scanning "
 5396|  80.7k|        "function.\n"
 5397|  80.7k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  80.7k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  80.7k|        "not supported.");
 5400|  80.7k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  80.7k|                  "\n"
 5402|  80.7k|                  "Unsupported range type given as input to a scanning "
 5403|  80.7k|                  "function.\n"
 5404|  80.7k|                  "file_marker_found cannot be used as an "
 5405|  80.7k|                  "source range type to scn::scan.\n"
 5406|  80.7k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  80.7k|                  "and do not provide an explicit source range, "
 5408|  80.7k|                  "or use scn::scan with a FILE* directly.");
 5409|  80.7k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  80.7k|                  "\n"
 5411|  80.7k|                  "Unsupported range type given as input to a scanning "
 5412|  80.7k|                  "function.\n"
 5413|  80.7k|                  "In order to be scannable, a range needs to satisfy "
 5414|  80.7k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  80.7k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  80.7k|                  "\n"
 5417|  80.7k|                  "Unsupported range type given as input to a scanning "
 5418|  80.7k|                  "function.\n"
 5419|  80.7k|                  "A range needs to model forward_range and have a valid "
 5420|  80.7k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  80.7k|                  "Examples of scannable ranges are std::string, "
 5422|  80.7k|                  "std::string_view, "
 5423|  80.7k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  80.7k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  80.7k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  80.7k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  80.7k|{
 5320|  80.7k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  80.7k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  80.7k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  80.7k|    {
 3000|  80.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  80.7k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  80.7k|    {
 2981|  80.7k|        return t.data();
 2982|  80.7k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  80.7k|    {
 3383|  80.7k|        return detail::to_address(ranges::begin(derived()));
 3384|  80.7k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   317k|{
  316|   317k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   317k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   124k|    {
 2869|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   124k|    {
 2850|   124k|        return decay_copy(t.begin());
 2851|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.07M|    {
 3480|  1.07M|        return m_iterator;
 3481|  1.07M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  80.7k|    {
 3339|  80.7k|        return static_cast<const D&>(*this);
 3340|  80.7k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  80.7k|    {
 3075|  80.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  80.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  80.7k|    {
 3041|  80.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  80.7k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   666k|{
 2094|   666k|    return SCN_FWD(t);
  ------------------
  |  |  936|   666k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   666k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   361k|    {
 3496|   361k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   361k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   547k|    {
 1740|   547k|        return has_value();
 1741|   547k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   984k|    {
  490|   984k|        return m_has_value;
  491|   984k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   221k|    {
 1746|   221k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   221k|        return this->get_unexpected().error();
 1748|   221k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   221k|    {
  473|   221k|        return m_unexpected;
  474|   221k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  36.9k|        : base(unexpect, std::move(e.error())),
 1616|  36.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  36.9k|    {
 1618|  36.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  36.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  36.9k|          m_has_value(false)
  451|  36.9k|    {
  452|  36.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  80.7k|    {
 1316|  80.7k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  43.7k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  43.7k|                      ranges::iterator_t<SourceRange>>) {
 6717|  43.7k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  43.7k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   358k|    {
 2869|   358k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   358k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   358k|    {
 2850|   358k|        return decay_copy(t.begin());
 2851|   358k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|  43.7k|{
 6702|  43.7k|    return ranges::end(source);
 6703|  43.7k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   118k|    {
 2926|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   118k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   118k|    {
 2908|   118k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   118k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   811k|    {
 3484|   811k|        return m_sentinel;
 3485|   811k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   214k|    {
 1795|   214k|        return value();
 1796|   214k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   214k|    {
 1769|   214k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   214k|        return this->get_value();
 1771|   214k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   214k|    {
  456|   214k|        return m_value;
  457|   214k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  43.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  43.7k|    {
 1572|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  43.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  43.7k|    {
  442|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.0k|    {
 8783|  26.0k|        return m_str;
 8784|  26.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.3k|{
 6115|  57.3k|    detail::check_scan_arg_types<Args...>();
 6116|  57.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5829|   120k|{
 5830|   120k|    constexpr bool default_constructible_constraint =
 5831|   120k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   120k|    static_assert(default_constructible_constraint,
 5833|   120k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   120k|    constexpr bool destructible_constraint =
 5836|   120k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   120k|    static_assert(destructible_constraint,
 5838|   120k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   120k|    constexpr bool non_reference_constraint =
 5841|   120k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   120k|    static_assert(non_reference_constraint,
 5843|   120k|                  "Scan argument types must not be references");
 5844|       |
 5845|   120k|    constexpr bool movable_constraint =
 5846|   120k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   120k|    static_assert(movable_constraint,
 5848|   120k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   120k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   120k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   120k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.3k|    {
 6092|  57.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.3k|    {
 6100|  57.3k|        return {detail::make_arg<
 6101|  57.3k|            kind, Context,
 6102|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  57.3k|{
 5889|  57.3k|    return make_value<Context>(value);
 5890|  57.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5814|  58.9k|{
 5815|  58.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  58.9k|    else {
 5822|  58.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  58.9k|            value, context_tag<Context>{}));
 5824|  58.9k|    }
 5825|  58.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  58.9k|    {
 5720|  58.9k|        return {};
 5721|  58.9k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  58.9k|{
 5784|  58.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  58.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  58.9k|    constexpr bool scannable_char =
 5788|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  58.9k|    static_assert(scannable_char,
 5790|  58.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  58.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  58.9k|    constexpr bool scannable_const =
 5794|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  58.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  58.9k|    constexpr bool scannable_disabled =
 5798|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  58.9k|    static_assert(scannable_disabled,
 5800|  58.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  58.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  58.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  58.9k|    static_assert(
 5805|  58.9k|        scannable,
 5806|  58.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  58.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  58.9k|    return arg_value{arg};
 5810|  58.9k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  58.9k|        : custom_value{static_cast<void*>(&val.val),
 5603|  58.9k|                       scan_custom_arg<T, Context>}
 5604|  58.9k|    {
 5605|  58.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  58.9k|    {
 5621|  58.9k|        static_assert(!is_type_disabled<T>,
 5622|  58.9k|                      "Scanning of custom types is disabled by "
 5623|  58.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  58.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  58.9k|        using context_type = Context;
 5627|  58.9k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  58.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  58.9k|        auto s = scanner_type{};
 5631|       |
 5632|  58.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  58.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  58.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  58.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  58.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  57.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  57.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  34.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.3k|    static_cast<    \
  |  |  935|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  34.3k|        return {};
 5641|  57.3k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  58.9k|{
 5555|  58.9k|#if SCN_HAS_EXCEPTIONS
 5556|  58.9k|    auto fmt_it = pctx.begin();
 5557|  58.9k|    try {
 5558|  58.9k|        fmt_it = s.parse(pctx);
 5559|  58.9k|    }
 5560|  58.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  58.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  57.3k|    pctx.advance_to(fmt_it);
 5583|  57.3k|    return {};
 5584|  58.9k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   869k|    {
 6299|   869k|        return m_format.data();
 6300|   869k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6303|   176k|    {
 6304|   176k|        return m_format.data() + m_format.size();
 6305|   176k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6344|  4.93k|    {
 6345|  4.93k|        m_error = unexpected(detail::handle_error(
 6346|  4.93k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  4.93k|        return m_error.error();
 6348|  4.93k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   862k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   862k|    {
 3742|   862k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   862k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   862k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  14.7k|        : m_unexpected(std::forward<Err>(e))
  350|  14.7k|    {
  351|  14.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  14.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  14.7k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.17M|    {
  572|  5.17M|        return m_has_value;
  573|  5.17M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   546k|{
 4308|       |    // Pattern_White_Space property
 4309|   546k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 469k, False: 77.3k]
  |  Branch (4309:27): [True: 8.96k, False: 460k]
  ------------------
 4310|   546k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 253k, False: 284k]
  ------------------
 4311|   546k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 7.54k, False: 277k]
  ------------------
 4312|   546k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 276k]
  ------------------
 4313|   546k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 1.00k, False: 275k]
  ------------------
 4314|   546k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 288, False: 275k]
  ------------------
 4315|   546k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 275k]
  ------------------
 4316|   546k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   328k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   328k|    else {
 3981|   328k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   328k|    }
 3983|   328k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6351|   176k|    {
 6352|   176k|        return m_error;
 6353|   176k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   343k|    {
 6310|   343k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   343k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  3.66M|    {
 1740|  3.66M|        return has_value();
 1741|  3.66M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   661k|    {
 1746|   661k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   661k|        return this->get_unexpected().error();
 1748|   661k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   661k|    {
  555|   661k|        return m_unexpected;
  556|   661k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   646k|        : base(unexpect, std::move(e.error())),
 1616|   646k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   646k|    {
 1618|   646k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   646k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   646k|          m_has_value(false)
  550|   646k|    {
  551|   646k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   646k|    {
 1316|   646k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   440k|    {
 1740|   440k|        return has_value();
 1741|   440k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   880k|    {
  490|   880k|        return m_has_value;
  491|   880k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   142k|    {
 1746|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   142k|        return this->get_unexpected().error();
 1748|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   195k|    {
 1805|   195k|        return std::move(value());
 1806|   195k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   298k|    {
 1769|   298k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   298k|        return this->get_value();
 1771|   298k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   298k|    {
  456|   298k|        return m_value;
  457|   298k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   254k|    {
 8986|   254k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   254k|    static_cast<    \
  |  |  935|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   254k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.87M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.87M|        : m_deferred_init(), m_has_value(true)
  529|  1.87M|    {
  530|  1.87M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  58.9k|    {
 5728|  58.9k|        return {val};
 5729|  58.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6393|   115k|    {
 6394|   115k|        return m_values;
 6395|   115k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.3k|    {
 6142|  57.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6197|   171k|        : m_desc(desc), m_values(data)
 6198|   171k|    {
 6199|   171k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   595k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   595k|    static_cast<    \
  |  |  935|   595k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   595k|    static_cast<    \
  |  |  935|   595k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   595k|    {
 3466|   595k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   171k|{
 8444|   171k|    return s;
 8445|   171k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   171k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.0k|        : m_str(r.str)
 8778|  26.0k|    {
 8779|  26.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  26.9k|    {
 1740|  26.9k|        return has_value();
 1741|  26.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  56.0k|    {
 1815|  56.0k|        return &value();
 1816|  56.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  56.0k|    {
 1769|  56.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  56.0k|        return this->get_value();
 1771|  56.0k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|  43.7k|    {
 6474|  43.7k|        return ranges::begin(m_range);
 6475|  43.7k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.0k|{
 9774|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.0k|                                   make_scan_args(result->values())));
 9777|  13.0k|    return result;
 9778|  13.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  39.1k|{
 9503|  39.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  39.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  39.1k|{
 9438|  39.1k|#if !SCN_DISABLE_LOCALE
 9439|  39.1k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  39.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  39.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  39.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  39.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  39.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.2k, False: 21.8k]
  |  |  ------------------
  ------------------
 9446|  17.2k|        return unexpected(result.error());
 9447|  17.2k|    }
 9448|  21.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  39.1k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  2.46k|{
 9516|  2.46k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.46k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.46k|{
 9462|  2.46k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.46k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.46k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.46k|        return unexpected(result.error());
 9467|  2.46k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.46k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   176k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|   360k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.93k|    {
 6416|  4.93k|        return std::get<0>(m_values);
 6417|  4.93k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.0k|{
 9705|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.0k|                                   make_scan_args(result->values())));
 9708|  13.0k|    return result;
 9709|  13.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  26.9k|{
 9661|  26.9k|    return scan_result_type<Source, Args...>();
 9662|  26.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  26.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  26.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  26.9k|    {
  613|  26.9k|        construct();
  614|  26.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  26.9k|    {
  694|  26.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  26.9k|        m_has_value = true;
  696|  26.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  26.9k|{
  396|  26.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  26.9k|        T(std::forward<Args>(args)...);
  398|  26.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  26.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6384|   120k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   109k|    {
  718|   109k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   109k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   109k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.9k|{
 9646|  26.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 14.5k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  14.5k|    else {
 9650|  14.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  14.5k|    static_cast<    \
  |  |  935|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  14.5k|    }
 9652|  26.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   147k|{
  396|   147k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   147k|        T(std::forward<Args>(args)...);
  398|   147k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.6k|    {
  730|  61.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   146k|    {
  687|   146k|        return m_has_value;
  688|   146k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  56.0k|    {
  653|  56.0k|        return *value_ptr();
  654|  56.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  26.9k|    {
  708|  26.9k|        scn::detail::destroy_at(value_ptr());
  709|  26.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  26.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  26.9k|    else {
  408|  26.9k|        p->~T();
  409|  26.9k|    }
  410|  26.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  26.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.6k|    {
  712|  24.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.6k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   295k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   295k|    else {
  408|   295k|        p->~T();
  409|   295k|    }
  410|   295k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.0k|    {
 8783|  26.0k|        return m_str;
 8784|  26.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.3k|{
 6115|  57.3k|    detail::check_scan_arg_types<Args...>();
 6116|  57.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5829|   120k|{
 5830|   120k|    constexpr bool default_constructible_constraint =
 5831|   120k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   120k|    static_assert(default_constructible_constraint,
 5833|   120k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   120k|    constexpr bool destructible_constraint =
 5836|   120k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   120k|    static_assert(destructible_constraint,
 5838|   120k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   120k|    constexpr bool non_reference_constraint =
 5841|   120k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   120k|    static_assert(non_reference_constraint,
 5843|   120k|                  "Scan argument types must not be references");
 5844|       |
 5845|   120k|    constexpr bool movable_constraint =
 5846|   120k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   120k|    static_assert(movable_constraint,
 5848|   120k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   120k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   120k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   120k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.3k|    {
 6092|  57.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.3k|    {
 6100|  57.3k|        return {detail::make_arg<
 6101|  57.3k|            kind, Context,
 6102|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  57.3k|{
 5889|  57.3k|    return make_value<Context>(value);
 5890|  57.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5814|  58.9k|{
 5815|  58.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  58.9k|    else {
 5822|  58.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  58.9k|            value, context_tag<Context>{}));
 5824|  58.9k|    }
 5825|  58.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  58.9k|    {
 5720|  58.9k|        return {};
 5721|  58.9k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  58.9k|{
 5784|  58.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  58.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  58.9k|    constexpr bool scannable_char =
 5788|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  58.9k|    static_assert(scannable_char,
 5790|  58.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  58.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  58.9k|    constexpr bool scannable_const =
 5794|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  58.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  58.9k|    constexpr bool scannable_disabled =
 5798|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  58.9k|    static_assert(scannable_disabled,
 5800|  58.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  58.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  58.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  58.9k|    static_assert(
 5805|  58.9k|        scannable,
 5806|  58.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  58.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  58.9k|    return arg_value{arg};
 5810|  58.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  58.9k|        : custom_value{static_cast<void*>(&val.val),
 5603|  58.9k|                       scan_custom_arg<T, Context>}
 5604|  58.9k|    {
 5605|  58.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  58.9k|    {
 5621|  58.9k|        static_assert(!is_type_disabled<T>,
 5622|  58.9k|                      "Scanning of custom types is disabled by "
 5623|  58.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  58.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  58.9k|        using context_type = Context;
 5627|  58.9k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  58.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  58.9k|        auto s = scanner_type{};
 5631|       |
 5632|  58.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  58.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  58.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  58.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  58.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  57.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  57.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  34.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.3k|    static_cast<    \
  |  |  935|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  34.3k|        return {};
 5641|  57.3k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  58.9k|{
 5555|  58.9k|#if SCN_HAS_EXCEPTIONS
 5556|  58.9k|    auto fmt_it = pctx.begin();
 5557|  58.9k|    try {
 5558|  58.9k|        fmt_it = s.parse(pctx);
 5559|  58.9k|    }
 5560|  58.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  58.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  57.3k|    pctx.advance_to(fmt_it);
 5583|  57.3k|    return {};
 5584|  58.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  58.9k|    {
 5728|  58.9k|        return {val};
 5729|  58.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6393|   115k|    {
 6394|   115k|        return m_values;
 6395|   115k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.3k|    {
 6142|  57.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.0k|        : m_str(r.str)
 8778|  26.0k|    {
 8779|  26.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  26.9k|    {
 1740|  26.9k|        return has_value();
 1741|  26.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  56.0k|    {
 1815|  56.0k|        return &value();
 1816|  56.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  56.0k|    {
 1769|  56.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  56.0k|        return this->get_value();
 1771|  56.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  39.2k|    {
  643|  39.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 14.5k, False: 24.6k]
  ------------------
  644|  14.5k|            destroy_value();
  645|  14.5k|        }
  646|  24.6k|        else {
  647|  24.6k|            destroy_unexpected();
  648|  24.6k|        }
  649|  39.2k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.0k|{
 9774|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.0k|                                   make_scan_args(result->values())));
 9777|  13.0k|    return result;
 9778|  13.0k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.93k|    {
 6416|  4.93k|        return std::get<0>(m_values);
 6417|  4.93k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9704|  13.0k|{
 9705|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9706|  13.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  13.0k|                                   make_scan_args(result->values())));
 9708|  13.0k|    return result;
 9709|  13.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  26.9k|{
 9661|  26.9k|    return scan_result_type<Source, Args...>();
 9662|  26.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  26.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  26.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  26.9k|    {
  613|  26.9k|        construct();
  614|  26.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  26.9k|    {
  694|  26.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  26.9k|        m_has_value = true;
  696|  26.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  26.9k|{
  396|  26.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  26.9k|        T(std::forward<Args>(args)...);
  398|  26.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  26.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6384|   120k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   109k|    {
  718|   109k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   109k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   109k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  26.9k|{
 9646|  26.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 14.5k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  14.5k|    else {
 9650|  14.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  14.5k|    static_cast<    \
  |  |  935|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  14.5k|    }
 9652|  26.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.6k|    {
  730|  61.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   146k|    {
  687|   146k|        return m_has_value;
  688|   146k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  56.0k|    {
  653|  56.0k|        return *value_ptr();
  654|  56.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  26.9k|    {
  708|  26.9k|        scn::detail::destroy_at(value_ptr());
  709|  26.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  26.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  26.9k|    else {
  408|  26.9k|        p->~T();
  409|  26.9k|    }
  410|  26.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  26.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.6k|    {
  712|  24.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8782|  26.0k|    {
 8783|  26.0k|        return m_str;
 8784|  26.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.3k|{
 6115|  57.3k|    detail::check_scan_arg_types<Args...>();
 6116|  57.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5829|   120k|{
 5830|   120k|    constexpr bool default_constructible_constraint =
 5831|   120k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   120k|    static_assert(default_constructible_constraint,
 5833|   120k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   120k|    constexpr bool destructible_constraint =
 5836|   120k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   120k|    static_assert(destructible_constraint,
 5838|   120k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   120k|    constexpr bool non_reference_constraint =
 5841|   120k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   120k|    static_assert(non_reference_constraint,
 5843|   120k|                  "Scan argument types must not be references");
 5844|       |
 5845|   120k|    constexpr bool movable_constraint =
 5846|   120k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   120k|    static_assert(movable_constraint,
 5848|   120k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   120k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   120k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   120k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.3k|    {
 6092|  57.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.3k|    {
 6100|  57.3k|        return {detail::make_arg<
 6101|  57.3k|            kind, Context,
 6102|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.3k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  57.3k|{
 5889|  57.3k|    return make_value<Context>(value);
 5890|  57.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5814|  58.9k|{
 5815|  58.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  58.9k|    else {
 5822|  58.9k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  58.9k|            value, context_tag<Context>{}));
 5824|  58.9k|    }
 5825|  58.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  58.9k|    {
 5720|  58.9k|        return {};
 5721|  58.9k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5783|  58.9k|{
 5784|  58.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  58.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  58.9k|    constexpr bool scannable_char =
 5788|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  58.9k|    static_assert(scannable_char,
 5790|  58.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  58.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  58.9k|    constexpr bool scannable_const =
 5794|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  58.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  58.9k|    constexpr bool scannable_disabled =
 5798|  58.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  58.9k|    static_assert(scannable_disabled,
 5800|  58.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  58.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  58.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  58.9k|    static_assert(
 5805|  58.9k|        scannable,
 5806|  58.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  58.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  58.9k|    return arg_value{arg};
 5810|  58.9k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  58.9k|        : custom_value{static_cast<void*>(&val.val),
 5603|  58.9k|                       scan_custom_arg<T, Context>}
 5604|  58.9k|    {
 5605|  58.9k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  58.9k|    {
 5621|  58.9k|        static_assert(!is_type_disabled<T>,
 5622|  58.9k|                      "Scanning of custom types is disabled by "
 5623|  58.9k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  58.9k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  58.9k|        using context_type = Context;
 5627|  58.9k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  58.9k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  58.9k|        auto s = scanner_type{};
 5631|       |
 5632|  58.9k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  58.9k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  58.9k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  58.9k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  58.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.64k|    }
  ------------------
 5637|  57.3k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  57.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  34.3k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.3k|    static_cast<    \
  |  |  935|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  34.3k|        return {};
 5641|  57.3k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  58.9k|{
 5555|  58.9k|#if SCN_HAS_EXCEPTIONS
 5556|  58.9k|    auto fmt_it = pctx.begin();
 5557|  58.9k|    try {
 5558|  58.9k|        fmt_it = s.parse(pctx);
 5559|  58.9k|    }
 5560|  58.9k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  58.9k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.64k, False: 57.3k]
  |  |  ------------------
  ------------------
 5580|  1.64k|        return e;
 5581|  1.64k|    }
 5582|  57.3k|    pctx.advance_to(fmt_it);
 5583|  57.3k|    return {};
 5584|  58.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  58.9k|    {
 5728|  58.9k|        return {val};
 5729|  58.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6393|   115k|    {
 6394|   115k|        return m_values;
 6395|   115k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.3k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.3k|    {
 6142|  57.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  26.0k|        : m_str(r.str)
 8778|  26.0k|    {
 8779|  26.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  26.9k|    {
 1740|  26.9k|        return has_value();
 1741|  26.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  56.0k|    {
 1815|  56.0k|        return &value();
 1816|  56.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  56.0k|    {
 1769|  56.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  56.0k|        return this->get_value();
 1771|  56.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  39.2k|    {
  643|  39.2k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 14.5k, False: 24.6k]
  ------------------
  644|  14.5k|            destroy_value();
  645|  14.5k|        }
  646|  24.6k|        else {
  647|  24.6k|            destroy_unexpected();
  648|  24.6k|        }
  649|  39.2k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9773|  13.0k|{
 9774|  13.0k|    auto result = make_scan_result<Source, Args...>();
 9775|  13.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  13.0k|                                   make_scan_args(result->values())));
 9777|  13.0k|    return result;
 9778|  13.0k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  1.64k|{
 5865|  1.64k|    check_scan_arg_types<T>();
 5866|       |
 5867|  1.64k|    basic_scan_arg<Context> arg;
 5868|  1.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  1.64k|    arg.m_value = make_value<Context>(value);
 5870|  1.64k|    return arg;
 5871|  1.64k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  4.93k|    {
 6416|  4.93k|        return std::get<0>(m_values);
 6417|  4.93k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  36.9k|    {
 2869|  36.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  36.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  36.9k|    {
 2850|  36.9k|        return decay_copy(t.begin());
 2851|  36.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  2.74M|{
 2094|  2.74M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.74M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   192k|    {
 2926|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   192k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   192k|    {
 2908|   192k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   192k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.6k|{
 9705|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.6k|                                   make_scan_args(result->values())));
 9708|  15.6k|    return result;
 9709|  15.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9660|  32.0k|{
 9661|  32.0k|    return scan_result_type<Source, Args...>();
 9662|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.0k|        : m_value(T{}), m_has_value(true)
  427|  32.0k|    {
  428|  32.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6610|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  96.2k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  96.2k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.0k|{
 9646|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.7k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.7k|    else {
 9650|  19.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.7k|    static_cast<    \
  |  |  935|  19.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.7k|    }
 9652|  32.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  96.2k|    {
 1740|  96.2k|        return has_value();
 1741|  96.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   192k|    {
  490|   192k|        return m_has_value;
  491|   192k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  36.9k|    {
 1746|  36.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  36.9k|        return this->get_unexpected().error();
 1748|  36.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  36.9k|    {
  473|  36.9k|        return m_unexpected;
  474|  36.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.3k|          m_has_value(false)
  451|  12.3k|    {
  452|  12.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   128k|    {
  490|   128k|        return m_has_value;
  491|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  71.5k|    {
  456|  71.5k|        return m_value;
  457|  71.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  12.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  12.3k|    {
  504|  12.3k|        scn::detail::construct_at(&get_unexpected(),
  505|  12.3k|                                  std::forward<Args>(args)...);
  506|  12.3k|        m_has_value = false;
  507|  12.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.3k|    {
  473|  12.3k|        return m_unexpected;
  474|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  12.3k|    {
  481|  12.3k|        return std::move(m_unexpected);
  482|  12.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  59.2k|    {
 6485|  59.2k|        m_range = std::forward<Other>(r);
 6486|  59.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  59.2k|    {
 1795|  59.2k|        return value();
 1796|  59.2k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  59.2k|    {
 1769|  59.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  59.2k|        return this->get_value();
 1771|  59.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  59.2k|    {
  456|  59.2k|        return m_value;
  457|  59.2k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  46.8k|{
 9485|  46.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  46.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  46.8k|{
 9422|  46.8k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  46.8k|    auto result = vscan_impl(buffer, format, args);
 9425|  46.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.2k, False: 29.6k]
  |  |  ------------------
  ------------------
 9426|  17.2k|        return unexpected(result.error());
 9427|  17.2k|    }
 9428|  29.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  46.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  96.2k|{
 5381|  96.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  96.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  96.2k|                  "\n"
 5385|  96.2k|                  "Unsupported range type given as input to a scanning "
 5386|  96.2k|                  "function.\n"
 5387|  96.2k|                  "A range needs to have a character type (value type) "
 5388|  96.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  96.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  96.2k|                  "to be included.\n"
 5391|  96.2k|                  "See the scnlib documentation for more details.");
 5392|  96.2k|    static_assert(
 5393|  96.2k|        !std::is_same_v<T, custom_char_traits>,
 5394|  96.2k|        "\n"
 5395|  96.2k|        "Unsupported range type given as input to a scanning "
 5396|  96.2k|        "function.\n"
 5397|  96.2k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  96.2k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  96.2k|        "not supported.");
 5400|  96.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  96.2k|                  "\n"
 5402|  96.2k|                  "Unsupported range type given as input to a scanning "
 5403|  96.2k|                  "function.\n"
 5404|  96.2k|                  "file_marker_found cannot be used as an "
 5405|  96.2k|                  "source range type to scn::scan.\n"
 5406|  96.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  96.2k|                  "and do not provide an explicit source range, "
 5408|  96.2k|                  "or use scn::scan with a FILE* directly.");
 5409|  96.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  96.2k|                  "\n"
 5411|  96.2k|                  "Unsupported range type given as input to a scanning "
 5412|  96.2k|                  "function.\n"
 5413|  96.2k|                  "In order to be scannable, a range needs to satisfy "
 5414|  96.2k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  96.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  96.2k|                  "\n"
 5417|  96.2k|                  "Unsupported range type given as input to a scanning "
 5418|  96.2k|                  "function.\n"
 5419|  96.2k|                  "A range needs to model forward_range and have a valid "
 5420|  96.2k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  96.2k|                  "Examples of scannable ranges are std::string, "
 5422|  96.2k|                  "std::string_view, "
 5423|  96.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  96.2k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  96.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  96.2k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  96.2k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  96.2k|    else {
 5366|  96.2k|        return make_forward_scan_buffer(r);
 5367|  96.2k|    }
 5368|  96.2k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  96.2k|{
 5185|  96.2k|    return basic_scan_forward_buffer_impl(range);
 5186|  96.2k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  96.2k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  96.2k|          m_cursor(ranges::begin(*m_range))
 4766|  96.2k|    {
 4767|  96.2k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  96.2k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  96.2k|    {
 4738|  96.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  96.2k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  96.2k|    {
 4429|  96.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   174k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   155k|    {
 2869|   155k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   155k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   155k|    {
 2850|   155k|        return decay_copy(t.begin());
 2851|   155k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   214k|    {
 3480|   214k|        return m_iterator;
 3481|   214k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   756k|    {
 4771|   756k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 14.0k, False: 742k]
  ------------------
 4772|  14.0k|            return false;
 4773|  14.0k|        }
 4774|   742k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   742k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   742k|        }
 4777|   742k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 649k, False: 93.5k]
  ------------------
 4778|   649k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   649k|                                          this->m_current_view.begin(),
 4780|   649k|                                          this->m_current_view.end());
 4781|   649k|        }
 4782|   742k|        m_latest = *m_cursor;
 4783|   742k|        ++m_cursor;
 4784|   742k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   742k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   742k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   742k|        }
 4788|   742k|        return true;
 4789|   756k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.24M|    {
 2926|  2.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.24M|    {
 2908|  2.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.30M|    {
 3484|  2.30M|        return m_sentinel;
 3485|  2.30M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  96.2k|    {
 4346|  96.2k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  96.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  96.2k|        return true;
 4348|  96.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  36.9k|        : base(unexpect, std::move(e.error())),
 1616|  36.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  36.9k|    {
 1618|  36.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  36.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  36.9k|          m_has_value(false)
  451|  36.9k|    {
  452|  36.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  96.2k|    {
 1316|  96.2k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  59.2k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  59.2k|                      ranges::iterator_t<SourceRange>>) {
 6717|  59.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  59.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  59.2k|    {
 2869|  59.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  59.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  59.2k|    {
 2850|  59.2k|        return decay_copy(t.begin());
 2851|  59.2k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|  59.2k|{
 6702|  59.2k|    return ranges::end(source);
 6703|  59.2k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  59.2k|    {
 2926|  59.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  59.2k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  59.2k|    {
 2908|  59.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  59.2k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  59.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  59.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  59.2k|    {
 1572|  59.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  59.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  59.2k|    {
  442|  59.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.2k|    {
 8783|  31.2k|        return m_str;
 8784|  31.2k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   155k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   155k|    {
 3466|   155k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.2k|        : m_str(r.str)
 8778|  31.2k|    {
 8779|  31.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  32.0k|    {
 1740|  32.0k|        return has_value();
 1741|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  71.5k|    {
 1815|  71.5k|        return &value();
 1816|  71.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  71.5k|    {
 1769|  71.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  71.5k|        return this->get_value();
 1771|  71.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|  59.2k|    {
 6474|  59.2k|        return ranges::begin(m_range);
 6475|  59.2k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.6k|{
 9774|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.6k|                                   make_scan_args(result->values())));
 9777|  15.6k|    return result;
 9778|  15.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  46.8k|{
 9503|  46.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  46.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  46.8k|{
 9438|  46.8k|#if !SCN_DISABLE_LOCALE
 9439|  46.8k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  46.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  46.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  46.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  46.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.2k, False: 29.6k]
  |  |  ------------------
  ------------------
 9446|  17.2k|        return unexpected(result.error());
 9447|  17.2k|    }
 9448|  29.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  46.8k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  2.46k|{
 9516|  2.46k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  2.46k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  2.46k|{
 9462|  2.46k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  2.46k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  2.46k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  ------------------
  ------------------
 9466|  2.46k|        return unexpected(result.error());
 9467|  2.46k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  2.46k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.6k|{
 9705|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.6k|                                   make_scan_args(result->values())));
 9708|  15.6k|    return result;
 9709|  15.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  32.0k|{
 9661|  32.0k|    return scan_result_type<Source, Args...>();
 9662|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.0k|    {
  613|  32.0k|        construct();
  614|  32.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.0k|    {
  694|  32.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.0k|        m_has_value = true;
  696|  32.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  32.0k|{
  396|  32.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.0k|        T(std::forward<Args>(args)...);
  398|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   135k|    {
  718|   135k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   135k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   135k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.0k|{
 9646|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.7k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.7k|    else {
 9650|  19.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.7k|    static_cast<    \
  |  |  935|  19.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.7k|    }
 9652|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.6k|    {
  730|  61.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   172k|    {
  687|   172k|        return m_has_value;
  688|   172k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  71.5k|    {
  653|  71.5k|        return *value_ptr();
  654|  71.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.0k|    {
  708|  32.0k|        scn::detail::destroy_at(value_ptr());
  709|  32.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.0k|    else {
  408|  32.0k|        p->~T();
  409|  32.0k|    }
  410|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  32.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.6k|    {
  712|  24.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.2k|    {
 8783|  31.2k|        return m_str;
 8784|  31.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.2k|        : m_str(r.str)
 8778|  31.2k|    {
 8779|  31.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  32.0k|    {
 1740|  32.0k|        return has_value();
 1741|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  71.5k|    {
 1815|  71.5k|        return &value();
 1816|  71.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  71.5k|    {
 1769|  71.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  71.5k|        return this->get_value();
 1771|  71.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  44.4k|    {
  643|  44.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.7k, False: 24.6k]
  ------------------
  644|  19.7k|            destroy_value();
  645|  19.7k|        }
  646|  24.6k|        else {
  647|  24.6k|            destroy_unexpected();
  648|  24.6k|        }
  649|  44.4k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.6k|{
 9774|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.6k|                                   make_scan_args(result->values())));
 9777|  15.6k|    return result;
 9778|  15.6k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  15.6k|{
 9705|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9706|  15.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  15.6k|                                   make_scan_args(result->values())));
 9708|  15.6k|    return result;
 9709|  15.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  32.0k|{
 9661|  32.0k|    return scan_result_type<Source, Args...>();
 9662|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.0k|    {
  613|  32.0k|        construct();
  614|  32.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.0k|    {
  694|  32.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.0k|        m_has_value = true;
  696|  32.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  32.0k|{
  396|  32.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.0k|        T(std::forward<Args>(args)...);
  398|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   135k|    {
  718|   135k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   135k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   135k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  32.0k|{
 9646|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 19.7k]
  |  |  ------------------
  ------------------
 9647|  12.3k|        out = unexpected(in.error());
 9648|  12.3k|    }
 9649|  19.7k|    else {
 9650|  19.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  19.7k|    static_cast<    \
  |  |  935|  19.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  19.7k|    }
 9652|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  12.3k|        : m_has_value(false)
  637|  12.3k|    {
  638|  12.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  61.6k|    {
  730|  61.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  61.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  61.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.3k|    {
 1316|  12.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  12.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  12.3k|    {
  903|  12.3k|        assign_common(std::move(other));
  904|  12.3k|        return *this;
  905|  12.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  12.3k|    {
  950|  12.3k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 12.3k, False: 0]
  ------------------
  951|  12.3k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 12.3k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  12.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  12.3k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   172k|    {
  687|   172k|        return m_has_value;
  688|   172k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  71.5k|    {
  653|  71.5k|        return *value_ptr();
  654|  71.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  12.3k|    {
 1046|  12.3k|        this->destroy_value();
 1047|  12.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.0k|    {
  708|  32.0k|        scn::detail::destroy_at(value_ptr());
  709|  32.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.0k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.0k|    else {
  408|  32.0k|        p->~T();
  409|  32.0k|    }
  410|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  32.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  12.3k|    {
  701|  12.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  12.3k|                                  std::forward<Args>(args)...);
  703|  12.3k|        m_has_value = false;
  704|  12.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  12.3k|    {
  678|  12.3k|        return std::move(*unexpected_ptr());
  679|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  24.6k|    {
  712|  24.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  24.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|  31.2k|    {
 8783|  31.2k|        return m_str;
 8784|  31.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  31.2k|        : m_str(r.str)
 8778|  31.2k|    {
 8779|  31.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  32.0k|    {
 1740|  32.0k|        return has_value();
 1741|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  71.5k|    {
 1815|  71.5k|        return &value();
 1816|  71.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  71.5k|    {
 1769|  71.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  71.5k|        return this->get_value();
 1771|  71.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  44.4k|    {
  643|  44.4k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 19.7k, False: 24.6k]
  ------------------
  644|  19.7k|            destroy_value();
  645|  19.7k|        }
  646|  24.6k|        else {
  647|  24.6k|            destroy_unexpected();
  648|  24.6k|        }
  649|  44.4k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  15.6k|{
 9774|  15.6k|    auto result = make_scan_result<Source, Args...>();
 9775|  15.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  15.6k|                                   make_scan_args(result->values())));
 9777|  15.6k|    return result;
 9778|  15.6k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|    822|{
 9815|    822|    auto result = make_scan_result<Source, T>();
 9816|    822|    fill_scan_result(
 9817|    822|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    822|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|    822|                            detail::make_arg<scan_context>(result->value())));
 9819|    822|    return result;
 9820|    822|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  75.6k|    {
 2869|  75.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  75.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  75.6k|    {
 2850|  75.6k|        return decay_copy(t.begin());
 2851|  75.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   927k|{
 2094|   927k|    return SCN_FWD(t);
  ------------------
  |  |  936|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   927k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   184k|    {
 2926|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   184k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   184k|    {
 2908|   184k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   184k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.5k|        : m_value(T{}), m_has_value(true)
  427|  30.5k|    {
  428|  30.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  91.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  91.5k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  91.5k|    {
 1740|  91.5k|        return has_value();
 1741|  91.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   183k|    {
  490|   183k|        return m_has_value;
  491|   183k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  73.9k|    {
 1746|  73.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  73.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  73.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  73.9k|        return this->get_unexpected().error();
 1748|  73.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  73.9k|    {
  473|  73.9k|        return m_unexpected;
  474|  73.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  24.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.6k|          m_has_value(false)
  451|  24.6k|    {
  452|  24.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  42.2k|    {
  456|  42.2k|        return m_value;
  457|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  24.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  24.6k|    {
  504|  24.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  24.6k|                                  std::forward<Args>(args)...);
  506|  24.6k|        m_has_value = false;
  507|  24.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  24.6k|    {
  473|  24.6k|        return m_unexpected;
  474|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  24.6k|    {
  481|  24.6k|        return std::move(m_unexpected);
  482|  24.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  17.6k|    {
 6485|  17.6k|        m_range = std::forward<Other>(r);
 6486|  17.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  17.6k|    {
 1795|  17.6k|        return value();
 1796|  17.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  17.6k|    {
 1769|  17.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.6k|        return this->get_value();
 1771|  17.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.6k|    {
  456|  17.6k|        return m_value;
  457|  17.6k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  43.3k|{
 9422|  43.3k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  43.3k|    auto result = vscan_impl(buffer, format, args);
 9425|  43.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 8.80k]
  |  |  ------------------
  ------------------
 9426|  34.5k|        return unexpected(result.error());
 9427|  34.5k|    }
 9428|  8.80k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  8.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  43.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  91.5k|{
 5381|  91.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  91.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  91.5k|                  "\n"
 5385|  91.5k|                  "Unsupported range type given as input to a scanning "
 5386|  91.5k|                  "function.\n"
 5387|  91.5k|                  "A range needs to have a character type (value type) "
 5388|  91.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  91.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  91.5k|                  "to be included.\n"
 5391|  91.5k|                  "See the scnlib documentation for more details.");
 5392|  91.5k|    static_assert(
 5393|  91.5k|        !std::is_same_v<T, custom_char_traits>,
 5394|  91.5k|        "\n"
 5395|  91.5k|        "Unsupported range type given as input to a scanning "
 5396|  91.5k|        "function.\n"
 5397|  91.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  91.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  91.5k|        "not supported.");
 5400|  91.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  91.5k|                  "\n"
 5402|  91.5k|                  "Unsupported range type given as input to a scanning "
 5403|  91.5k|                  "function.\n"
 5404|  91.5k|                  "file_marker_found cannot be used as an "
 5405|  91.5k|                  "source range type to scn::scan.\n"
 5406|  91.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  91.5k|                  "and do not provide an explicit source range, "
 5408|  91.5k|                  "or use scn::scan with a FILE* directly.");
 5409|  91.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  91.5k|                  "\n"
 5411|  91.5k|                  "Unsupported range type given as input to a scanning "
 5412|  91.5k|                  "function.\n"
 5413|  91.5k|                  "In order to be scannable, a range needs to satisfy "
 5414|  91.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  91.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  91.5k|                  "\n"
 5417|  91.5k|                  "Unsupported range type given as input to a scanning "
 5418|  91.5k|                  "function.\n"
 5419|  91.5k|                  "A range needs to model forward_range and have a valid "
 5420|  91.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  91.5k|                  "Examples of scannable ranges are std::string, "
 5422|  91.5k|                  "std::string_view, "
 5423|  91.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  91.5k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  91.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  91.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  91.5k|{
 5320|  91.5k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  91.5k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  91.5k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  91.5k|    {
 3000|  91.5k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  91.5k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  91.5k|    {
 2981|  91.5k|        return t.data();
 2982|  91.5k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  91.5k|    {
 3383|  91.5k|        return detail::to_address(ranges::begin(derived()));
 3384|  91.5k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   269k|{
  316|   269k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   269k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   269k|{
  294|   269k|    return p;
  295|   269k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   109k|    {
 2869|   109k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   109k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   109k|    {
 2850|   109k|        return decay_copy(t.begin());
 2851|   109k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.57M|    {
 3480|  1.57M|        return m_iterator;
 3481|  1.57M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  91.5k|    {
 3339|  91.5k|        return static_cast<const D&>(*this);
 3340|  91.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  91.5k|    {
 3075|  91.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  91.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  91.5k|    {
 3041|  91.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  91.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   287k|    {
 3496|   287k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   287k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  73.9k|        : base(unexpect, std::move(e.error())),
 1616|  73.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  73.9k|    {
 1618|  73.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  73.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  73.9k|          m_has_value(false)
  451|  73.9k|    {
  452|  73.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  91.5k|    {
 1316|  91.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  17.6k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  17.6k|                      ranges::iterator_t<SourceRange>>) {
 6717|  17.6k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  17.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   281k|    {
 2869|   281k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   281k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   281k|    {
 2850|   281k|        return decay_copy(t.begin());
 2851|   281k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  17.6k|{
 6702|  17.6k|    return ranges::end(source);
 6703|  17.6k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   102k|    {
 2926|   102k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   102k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   102k|    {
 2908|   102k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   102k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  1.24M|    {
 3484|  1.24M|        return m_sentinel;
 3485|  1.24M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  17.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  17.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  17.6k|    {
 1572|  17.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  17.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  17.6k|    {
  442|  17.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.7k|{
 6115|  57.7k|    detail::check_scan_arg_types<Args...>();
 6116|  57.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.7k|    {
 6092|  57.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.7k|    {
 6100|  57.7k|        return {detail::make_arg<
 6101|  57.7k|            kind, Context,
 6102|  57.7k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.7k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5888|  57.7k|{
 5889|  57.7k|    return make_value<Context>(value);
 5890|  57.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5814|  61.0k|{
 5815|  61.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  61.0k|    else {
 5822|  61.0k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  61.0k|            value, context_tag<Context>{}));
 5824|  61.0k|    }
 5825|  61.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  61.0k|    {
 5720|  61.0k|        return {};
 5721|  61.0k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  61.0k|{
 5784|  61.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  61.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  61.0k|    constexpr bool scannable_char =
 5788|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  61.0k|    static_assert(scannable_char,
 5790|  61.0k|                  "Cannot scan an argument of an unsupported character "
 5791|  61.0k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  61.0k|    constexpr bool scannable_const =
 5794|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  61.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  61.0k|    constexpr bool scannable_disabled =
 5798|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  61.0k|    static_assert(scannable_disabled,
 5800|  61.0k|                  "Cannot scan an argument that has been disabled by "
 5801|  61.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  61.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  61.0k|    static_assert(
 5805|  61.0k|        scannable,
 5806|  61.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  61.0k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  61.0k|    return arg_value{arg};
 5810|  61.0k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  61.0k|        : custom_value{static_cast<void*>(&val.val),
 5603|  61.0k|                       scan_custom_arg<T, Context>}
 5604|  61.0k|    {
 5605|  61.0k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  61.0k|    {
 5621|  61.0k|        static_assert(!is_type_disabled<T>,
 5622|  61.0k|                      "Scanning of custom types is disabled by "
 5623|  61.0k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  61.0k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  61.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  61.0k|        using context_type = Context;
 5627|  61.0k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  61.0k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  61.0k|        auto s = scanner_type{};
 5631|       |
 5632|  61.0k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  61.0k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  61.0k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  61.0k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  61.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.28k|    }
  ------------------
 5637|  57.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.0k, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.0k|    }                                                  \
  |  |  |  | 3939|  57.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  11.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  11.7k|    static_cast<    \
  |  |  935|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  11.7k|        return {};
 5641|  57.7k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  61.0k|{
 5555|  61.0k|#if SCN_HAS_EXCEPTIONS
 5556|  61.0k|    auto fmt_it = pctx.begin();
 5557|  61.0k|    try {
 5558|  61.0k|        fmt_it = s.parse(pctx);
 5559|  61.0k|    }
 5560|  61.0k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  61.0k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  ------------------
  ------------------
 5580|  3.28k|        return e;
 5581|  3.28k|    }
 5582|  57.7k|    pctx.advance_to(fmt_it);
 5583|  57.7k|    return {};
 5584|  61.0k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|   886k|    {
 6299|   886k|        return m_format.data();
 6300|   886k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6303|   183k|    {
 6304|   183k|        return m_format.data() + m_format.size();
 6305|   183k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6344|  9.86k|    {
 6345|  9.86k|        m_error = unexpected(detail::handle_error(
 6346|  9.86k|            scan_error{scan_error::invalid_format_string, msg}));
 6347|  9.86k|        return m_error.error();
 6348|  9.86k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   415k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   415k|    else {
 4075|       |        // utf-32
 4076|   415k|        static_assert(sizeof(U) == 4);
 4077|   415k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   415k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   415k|        return 1;
 4079|   415k|    }
 4080|   415k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   316k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   316k|    else {
 4281|   316k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   316k|        auto cp = static_cast<char32_t>(input.front());
 4283|   316k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 45.2k, False: 271k]
  |  |  ------------------
  ------------------
 4284|  45.2k|            return invalid_code_point;
 4285|  45.2k|        }
 4286|   271k|        return cp;
 4287|   316k|    }
 4288|   316k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   346k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   346k|    else {
 3981|   346k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   346k|    }
 3983|   346k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6351|   183k|    {
 6352|   183k|        return m_error;
 6353|   183k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   346k|    {
 6310|   346k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   346k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   438k|    {
 1740|   438k|        return has_value();
 1741|   438k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   876k|    {
  490|   876k|        return m_has_value;
  491|   876k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   282k|    {
 1746|   282k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   282k|        return this->get_unexpected().error();
 1748|   282k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   282k|    {
  473|   282k|        return m_unexpected;
  474|   282k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   120k|    {
 1805|   120k|        return std::move(value());
 1806|   120k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   156k|    {
 1769|   156k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   156k|        return this->get_value();
 1771|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   156k|    {
  456|   156k|        return m_value;
  457|   156k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   138k|    {
 8986|   138k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   138k|    static_cast<    \
  |  |  935|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   138k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  61.0k|    {
 5728|  61.0k|        return {val};
 5729|  61.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.7k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.7k|    {
 6142|  57.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6197|   173k|        : m_desc(desc), m_values(data)
 6198|   173k|    {
 6199|   173k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   791k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   791k|    static_cast<    \
  |  |  935|   791k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   791k|    static_cast<    \
  |  |  935|   791k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   791k|    {
 3466|   791k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|   173k|{
 8449|   173k|    return s;
 8450|   173k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|   173k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  17.6k|    {
 6474|  17.6k|        return ranges::begin(m_range);
 6475|  17.6k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  43.3k|{
 9438|  43.3k|#if !SCN_DISABLE_LOCALE
 9439|  43.3k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  43.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  43.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  43.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  43.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 8.80k]
  |  |  ------------------
  ------------------
 9446|  34.5k|        return unexpected(result.error());
 9447|  34.5k|    }
 9448|  8.80k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  8.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  43.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  4.93k|{
 9462|  4.93k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  4.93k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  4.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  ------------------
  ------------------
 9466|  4.93k|        return unexpected(result.error());
 9467|  4.93k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  4.93k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.28k|{
 5865|  3.28k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.28k|    basic_scan_arg<Context> arg;
 5868|  3.28k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.28k|    arg.m_value = make_value<Context>(value);
 5870|  3.28k|    return arg;
 5871|  3.28k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|   183k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.5k|    {
  613|  30.5k|        construct();
  614|  30.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.5k|    {
  694|  30.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.5k|        m_has_value = true;
  696|  30.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  30.5k|{
  396|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.5k|        T(std::forward<Args>(args)...);
  398|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   103k|    {
  718|   103k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   103k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   103k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  24.6k|        : m_has_value(false)
  637|  24.6k|    {
  638|  24.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  42.2k|    {
  653|  42.2k|        return *value_ptr();
  654|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.5k|    {
  708|  30.5k|        scn::detail::destroy_at(value_ptr());
  709|  30.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  30.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.5k|    else {
  408|  30.5k|        p->~T();
  409|  30.5k|    }
  410|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  30.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.6k|    {
  678|  24.6k|        return std::move(*unexpected_ptr());
  679|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.7k|{
 6115|  57.7k|    detail::check_scan_arg_types<Args...>();
 6116|  57.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.7k|    {
 6092|  57.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.7k|    {
 6100|  57.7k|        return {detail::make_arg<
 6101|  57.7k|            kind, Context,
 6102|  57.7k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.7k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5888|  57.7k|{
 5889|  57.7k|    return make_value<Context>(value);
 5890|  57.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5814|  61.0k|{
 5815|  61.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  61.0k|    else {
 5822|  61.0k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  61.0k|            value, context_tag<Context>{}));
 5824|  61.0k|    }
 5825|  61.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  61.0k|    {
 5720|  61.0k|        return {};
 5721|  61.0k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  61.0k|{
 5784|  61.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  61.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  61.0k|    constexpr bool scannable_char =
 5788|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  61.0k|    static_assert(scannable_char,
 5790|  61.0k|                  "Cannot scan an argument of an unsupported character "
 5791|  61.0k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  61.0k|    constexpr bool scannable_const =
 5794|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  61.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  61.0k|    constexpr bool scannable_disabled =
 5798|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  61.0k|    static_assert(scannable_disabled,
 5800|  61.0k|                  "Cannot scan an argument that has been disabled by "
 5801|  61.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  61.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  61.0k|    static_assert(
 5805|  61.0k|        scannable,
 5806|  61.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  61.0k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  61.0k|    return arg_value{arg};
 5810|  61.0k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  61.0k|        : custom_value{static_cast<void*>(&val.val),
 5603|  61.0k|                       scan_custom_arg<T, Context>}
 5604|  61.0k|    {
 5605|  61.0k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  61.0k|    {
 5621|  61.0k|        static_assert(!is_type_disabled<T>,
 5622|  61.0k|                      "Scanning of custom types is disabled by "
 5623|  61.0k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  61.0k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  61.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  61.0k|        using context_type = Context;
 5627|  61.0k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  61.0k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  61.0k|        auto s = scanner_type{};
 5631|       |
 5632|  61.0k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  61.0k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  61.0k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  61.0k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  61.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.28k|    }
  ------------------
 5637|  57.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.0k, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.0k|    }                                                  \
  |  |  |  | 3939|  57.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  11.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  11.7k|    static_cast<    \
  |  |  935|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  11.7k|        return {};
 5641|  57.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  61.0k|{
 5555|  61.0k|#if SCN_HAS_EXCEPTIONS
 5556|  61.0k|    auto fmt_it = pctx.begin();
 5557|  61.0k|    try {
 5558|  61.0k|        fmt_it = s.parse(pctx);
 5559|  61.0k|    }
 5560|  61.0k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  61.0k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  ------------------
  ------------------
 5580|  3.28k|        return e;
 5581|  3.28k|    }
 5582|  57.7k|    pctx.advance_to(fmt_it);
 5583|  57.7k|    return {};
 5584|  61.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  61.0k|    {
 5728|  61.0k|        return {val};
 5729|  61.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.7k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.7k|    {
 6142|  57.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  55.1k|    {
  643|  55.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 5.86k, False: 49.3k]
  ------------------
  644|  5.86k|            destroy_value();
  645|  5.86k|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  55.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.28k|{
 5865|  3.28k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.28k|    basic_scan_arg<Context> arg;
 5868|  3.28k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.28k|    arg.m_value = make_value<Context>(value);
 5870|  3.28k|    return arg;
 5871|  3.28k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.5k|    {
  613|  30.5k|        construct();
  614|  30.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.5k|    {
  694|  30.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.5k|        m_has_value = true;
  696|  30.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  30.5k|{
  396|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.5k|        T(std::forward<Args>(args)...);
  398|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   103k|    {
  718|   103k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   103k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   103k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  24.6k|        : m_has_value(false)
  637|  24.6k|    {
  638|  24.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  42.2k|    {
  653|  42.2k|        return *value_ptr();
  654|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.5k|    {
  708|  30.5k|        scn::detail::destroy_at(value_ptr());
  709|  30.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  30.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.5k|    else {
  408|  30.5k|        p->~T();
  409|  30.5k|    }
  410|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  30.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.6k|    {
  678|  24.6k|        return std::move(*unexpected_ptr());
  679|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|  57.7k|{
 6115|  57.7k|    detail::check_scan_arg_types<Args...>();
 6116|  57.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  57.7k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6090|  57.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  57.7k|    {
 6092|  57.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6099|  57.7k|    {
 6100|  57.7k|        return {detail::make_arg<
 6101|  57.7k|            kind, Context,
 6102|  57.7k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  57.7k|                                 typename Context::char_type>::value>(args)...};
 6104|  57.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5888|  57.7k|{
 5889|  57.7k|    return make_value<Context>(value);
 5890|  57.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5814|  61.0k|{
 5815|  61.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|       |                                  needs_context_tag>) {
 5819|       |        return make_value_impl<T>(SCN_FWD(arg));
 5820|       |    }
 5821|  61.0k|    else {
 5822|  61.0k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|  61.0k|            value, context_tag<Context>{}));
 5824|  61.0k|    }
 5825|  61.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5719|  61.0k|    {
 5720|  61.0k|        return {};
 5721|  61.0k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5783|  61.0k|{
 5784|  61.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  61.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  61.0k|    constexpr bool scannable_char =
 5788|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  61.0k|    static_assert(scannable_char,
 5790|  61.0k|                  "Cannot scan an argument of an unsupported character "
 5791|  61.0k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  61.0k|    constexpr bool scannable_const =
 5794|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  61.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  61.0k|    constexpr bool scannable_disabled =
 5798|  61.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  61.0k|    static_assert(scannable_disabled,
 5800|  61.0k|                  "Cannot scan an argument that has been disabled by "
 5801|  61.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  61.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  61.0k|    static_assert(
 5805|  61.0k|        scannable,
 5806|  61.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  61.0k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  61.0k|    return arg_value{arg};
 5810|  61.0k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5602|  61.0k|        : custom_value{static_cast<void*>(&val.val),
 5603|  61.0k|                       scan_custom_arg<T, Context>}
 5604|  61.0k|    {
 5605|  61.0k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5620|  61.0k|    {
 5621|  61.0k|        static_assert(!is_type_disabled<T>,
 5622|  61.0k|                      "Scanning of custom types is disabled by "
 5623|  61.0k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5624|  61.0k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  61.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5625|       |
 5626|  61.0k|        using context_type = Context;
 5627|  61.0k|        using parse_context_type = typename context_type::parse_context_type;
 5628|  61.0k|        using scanner_type = typename context_type::template scanner_type<T>;
 5629|       |
 5630|  61.0k|        auto s = scanner_type{};
 5631|       |
 5632|  61.0k|        auto& arg_ref = *static_cast<T*>(arg);
 5633|  61.0k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5634|  61.0k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5635|       |
 5636|  61.0k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3930|  61.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.28k|    }
  ------------------
 5637|  57.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  57.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.0k, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.0k|    }                                                  \
  |  |  |  | 3939|  57.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5638|  11.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  11.7k|    static_cast<    \
  |  |  935|  11.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5639|       |
 5640|  11.7k|        return {};
 5641|  57.7k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5554|  61.0k|{
 5555|  61.0k|#if SCN_HAS_EXCEPTIONS
 5556|  61.0k|    auto fmt_it = pctx.begin();
 5557|  61.0k|    try {
 5558|  61.0k|        fmt_it = s.parse(pctx);
 5559|  61.0k|    }
 5560|  61.0k|    catch (const detail::scan_format_string_error_base& ex) {
 5561|       |        // scan_error takes a const char*.
 5562|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5563|       |        // stores a reference-counted string,
 5564|       |        // that will go out of scope here.
 5565|       |        // We need to provide a const char* that will stay in scope.
 5566|       |        // If scan_format_string_error was thrown with a string literal,
 5567|       |        // use that, otherwise refer to a thread_local std::string
 5568|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5568:25): [True: 0, False: 0]
  ------------------
 5569|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5570|      0|        }
 5571|      0|        thread_local std::string err_msg{};
 5572|      0|        err_msg = ex.what();
 5573|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5574|      0|                                     err_msg.c_str());
 5575|      0|    }
 5576|       |#else
 5577|       |    auto fmt_it = s.parse(pctx_ref);
 5578|       |#endif
 5579|  61.0k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.28k, False: 57.7k]
  |  |  ------------------
  ------------------
 5580|  3.28k|        return e;
 5581|  3.28k|    }
 5582|  57.7k|    pctx.advance_to(fmt_it);
 5583|  57.7k|    return {};
 5584|  61.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5727|  61.0k|    {
 5728|  61.0k|        return {val};
 5729|  61.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  57.7k|        : basic_scan_args(store.desc, store.args.data())
 6141|  57.7k|    {
 6142|  57.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  55.1k|    {
  643|  55.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 5.86k, False: 49.3k]
  ------------------
  644|  5.86k|            destroy_value();
  645|  5.86k|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  55.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5864|  3.28k|{
 5865|  3.28k|    check_scan_arg_types<T>();
 5866|       |
 5867|  3.28k|    basic_scan_arg<Context> arg;
 5868|  3.28k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  3.28k|    arg.m_value = make_value<Context>(value);
 5870|  3.28k|    return arg;
 5871|  3.28k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  73.9k|    {
 2869|  73.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  73.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  73.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  73.9k|    {
 2850|  73.9k|        return decay_copy(t.begin());
 2851|  73.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  1.26M|{
 2094|  1.26M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.26M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   183k|    {
 2926|   183k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   183k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   183k|    {
 2908|   183k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   183k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.5k|        : m_value(T{}), m_has_value(true)
  427|  30.5k|    {
  428|  30.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|  91.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  91.5k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  91.5k|    {
 1740|  91.5k|        return has_value();
 1741|  91.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   183k|    {
  490|   183k|        return m_has_value;
  491|   183k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  73.9k|    {
 1746|  73.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  73.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  73.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  73.9k|        return this->get_unexpected().error();
 1748|  73.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  73.9k|    {
  473|  73.9k|        return m_unexpected;
  474|  73.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  24.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.6k|          m_has_value(false)
  451|  24.6k|    {
  452|  24.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  42.2k|    {
  456|  42.2k|        return m_value;
  457|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  24.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  24.6k|    {
  504|  24.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  24.6k|                                  std::forward<Args>(args)...);
  506|  24.6k|        m_has_value = false;
  507|  24.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  24.6k|    {
  473|  24.6k|        return m_unexpected;
  474|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  24.6k|    {
  481|  24.6k|        return std::move(m_unexpected);
  482|  24.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  17.6k|    {
 6485|  17.6k|        m_range = std::forward<Other>(r);
 6486|  17.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  17.6k|    {
 1795|  17.6k|        return value();
 1796|  17.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  17.6k|    {
 1769|  17.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  17.6k|        return this->get_value();
 1771|  17.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  17.6k|    {
  456|  17.6k|        return m_value;
  457|  17.6k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  43.3k|{
 9422|  43.3k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  43.3k|    auto result = vscan_impl(buffer, format, args);
 9425|  43.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 8.80k]
  |  |  ------------------
  ------------------
 9426|  34.5k|        return unexpected(result.error());
 9427|  34.5k|    }
 9428|  8.80k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  8.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  43.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  91.5k|{
 5381|  91.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  91.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  91.5k|                  "\n"
 5385|  91.5k|                  "Unsupported range type given as input to a scanning "
 5386|  91.5k|                  "function.\n"
 5387|  91.5k|                  "A range needs to have a character type (value type) "
 5388|  91.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  91.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  91.5k|                  "to be included.\n"
 5391|  91.5k|                  "See the scnlib documentation for more details.");
 5392|  91.5k|    static_assert(
 5393|  91.5k|        !std::is_same_v<T, custom_char_traits>,
 5394|  91.5k|        "\n"
 5395|  91.5k|        "Unsupported range type given as input to a scanning "
 5396|  91.5k|        "function.\n"
 5397|  91.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  91.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  91.5k|        "not supported.");
 5400|  91.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  91.5k|                  "\n"
 5402|  91.5k|                  "Unsupported range type given as input to a scanning "
 5403|  91.5k|                  "function.\n"
 5404|  91.5k|                  "file_marker_found cannot be used as an "
 5405|  91.5k|                  "source range type to scn::scan.\n"
 5406|  91.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  91.5k|                  "and do not provide an explicit source range, "
 5408|  91.5k|                  "or use scn::scan with a FILE* directly.");
 5409|  91.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  91.5k|                  "\n"
 5411|  91.5k|                  "Unsupported range type given as input to a scanning "
 5412|  91.5k|                  "function.\n"
 5413|  91.5k|                  "In order to be scannable, a range needs to satisfy "
 5414|  91.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  91.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  91.5k|                  "\n"
 5417|  91.5k|                  "Unsupported range type given as input to a scanning "
 5418|  91.5k|                  "function.\n"
 5419|  91.5k|                  "A range needs to model forward_range and have a valid "
 5420|  91.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  91.5k|                  "Examples of scannable ranges are std::string, "
 5422|  91.5k|                  "std::string_view, "
 5423|  91.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  91.5k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  91.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  91.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  91.5k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  91.5k|    else {
 5366|  91.5k|        return make_forward_scan_buffer(r);
 5367|  91.5k|    }
 5368|  91.5k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  91.5k|{
 5185|  91.5k|    return basic_scan_forward_buffer_impl(range);
 5186|  91.5k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  91.5k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  91.5k|          m_cursor(ranges::begin(*m_range))
 4766|  91.5k|    {
 4767|  91.5k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  91.5k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  91.5k|    {
 4738|  91.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  91.5k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  91.5k|    {
 4429|  91.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   178k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   109k|    {
 2869|   109k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   109k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   109k|    {
 2850|   109k|        return decay_copy(t.begin());
 2851|   109k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   126k|    {
 3480|   126k|        return m_iterator;
 3481|   126k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   298k|    {
 4771|   298k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 17.4k, False: 280k]
  ------------------
 4772|  17.4k|            return false;
 4773|  17.4k|        }
 4774|   280k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   280k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   280k|        }
 4777|   280k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 194k, False: 86.5k]
  ------------------
 4778|   194k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   194k|                                          this->m_current_view.begin(),
 4780|   194k|                                          this->m_current_view.end());
 4781|   194k|        }
 4782|   280k|        m_latest = *m_cursor;
 4783|   280k|        ++m_cursor;
 4784|   280k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   280k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   280k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   280k|        }
 4788|   280k|        return true;
 4789|   298k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   859k|    {
 2926|   859k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   859k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   859k|    {
 2908|   859k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   859k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   876k|    {
 3484|   876k|        return m_sentinel;
 3485|   876k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  91.5k|    {
 4346|  91.5k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  91.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  91.5k|        return true;
 4348|  91.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  73.9k|        : base(unexpect, std::move(e.error())),
 1616|  73.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  73.9k|    {
 1618|  73.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  73.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  73.9k|          m_has_value(false)
  451|  73.9k|    {
  452|  73.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  91.5k|    {
 1316|  91.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  17.6k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  17.6k|                      ranges::iterator_t<SourceRange>>) {
 6717|  17.6k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  17.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  17.6k|    {
 2869|  17.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  17.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  17.6k|    {
 2850|  17.6k|        return decay_copy(t.begin());
 2851|  17.6k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|  17.6k|{
 6702|  17.6k|    return ranges::end(source);
 6703|  17.6k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  17.6k|    {
 2926|  17.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  17.6k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  17.6k|    {
 2908|  17.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  17.6k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  17.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  17.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  17.6k|    {
 1572|  17.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  17.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  17.6k|    {
  442|  17.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   109k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   109k|    {
 3466|   109k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|  17.6k|    {
 6474|  17.6k|        return ranges::begin(m_range);
 6475|  17.6k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  43.3k|{
 9438|  43.3k|#if !SCN_DISABLE_LOCALE
 9439|  43.3k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  43.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  43.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  43.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  43.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 8.80k]
  |  |  ------------------
  ------------------
 9446|  34.5k|        return unexpected(result.error());
 9447|  34.5k|    }
 9448|  8.80k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  8.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  43.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  4.93k|{
 9462|  4.93k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  4.93k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  4.93k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  ------------------
  ------------------
 9466|  4.93k|        return unexpected(result.error());
 9467|  4.93k|    }
 9468|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  4.93k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.5k|    {
  613|  30.5k|        construct();
  614|  30.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.5k|    {
  694|  30.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.5k|        m_has_value = true;
  696|  30.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  30.5k|{
  396|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.5k|        T(std::forward<Args>(args)...);
  398|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   103k|    {
  718|   103k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   103k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   103k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  24.6k|        : m_has_value(false)
  637|  24.6k|    {
  638|  24.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  42.2k|    {
  653|  42.2k|        return *value_ptr();
  654|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.5k|    {
  708|  30.5k|        scn::detail::destroy_at(value_ptr());
  709|  30.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  30.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.5k|    else {
  408|  30.5k|        p->~T();
  409|  30.5k|    }
  410|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6617|  30.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.6k|    {
  678|  24.6k|        return std::move(*unexpected_ptr());
  679|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  55.1k|    {
  643|  55.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 5.86k, False: 49.3k]
  ------------------
  644|  5.86k|            destroy_value();
  645|  5.86k|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  55.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9660|  30.5k|{
 9661|  30.5k|    return scan_result_type<Source, Args...>();
 9662|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  30.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  30.5k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  30.5k|    {
  613|  30.5k|        construct();
  614|  30.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  30.5k|    {
  694|  30.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  30.5k|        m_has_value = true;
  696|  30.5k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  30.5k|{
  396|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.5k|        T(std::forward<Args>(args)...);
  398|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6610|  30.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   103k|    {
  718|   103k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   103k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   103k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  30.5k|{
 9646|  30.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 9647|  24.6k|        out = unexpected(in.error());
 9648|  24.6k|    }
 9649|  5.86k|    else {
 9650|  5.86k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  5.86k|    static_cast<    \
  |  |  935|  5.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  5.86k|    }
 9652|  30.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  24.6k|        : base(unexpect, std::move(e.error())),
 1616|  24.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.6k|    {
 1618|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  24.6k|        : m_has_value(false)
  637|  24.6k|    {
  638|  24.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   123k|    {
  730|   123k|        return reinterpret_cast<unexpected<E>*>(
  731|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  24.6k|    {
 1316|  24.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  24.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  24.6k|    {
  903|  24.6k|        assign_common(std::move(other));
  904|  24.6k|        return *this;
  905|  24.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  24.6k|    {
  950|  24.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 24.6k, False: 0]
  ------------------
  951|  24.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 24.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  24.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  24.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   177k|    {
  687|   177k|        return m_has_value;
  688|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  42.2k|    {
  653|  42.2k|        return *value_ptr();
  654|  42.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  24.6k|    {
 1046|  24.6k|        this->destroy_value();
 1047|  24.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  30.5k|    {
  708|  30.5k|        scn::detail::destroy_at(value_ptr());
  709|  30.5k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  30.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.5k|    else {
  408|  30.5k|        p->~T();
  409|  30.5k|    }
  410|  30.5k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6617|  30.5k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  24.6k|    {
  701|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  24.6k|                                  std::forward<Args>(args)...);
  703|  24.6k|        m_has_value = false;
  704|  24.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  24.6k|    {
  678|  24.6k|        return std::move(*unexpected_ptr());
  679|  24.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|  28.8k|    {
 8783|  28.8k|        return m_str;
 8784|  28.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|  28.8k|        : m_str(r.str)
 8778|  28.8k|    {
 8779|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  42.2k|    {
 1815|  42.2k|        return &value();
 1816|  42.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  42.2k|    {
 1769|  42.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  42.2k|        return this->get_value();
 1771|  42.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  55.1k|    {
  643|  55.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 5.86k, False: 49.3k]
  ------------------
  644|  5.86k|            destroy_value();
  645|  5.86k|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  55.1k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.33M|    {
 3480|  1.33M|        return m_iterator;
 3481|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   998k|    {
 3480|   998k|        return m_iterator;
 3481|   998k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  12.5M|    {
 4473|  12.5M|        assert(m_begin);
 4474|  12.5M|        return m_end == nullptr;
 4475|  12.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   171k|    {
 4490|   171k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 78.2k, False: 93.7k]
  ------------------
 4491|  78.2k|            return make_string_view_from_pointers(
 4492|  78.2k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  78.2k|                static_cast<const CharT*>(m_end));
 4494|  78.2k|        }
 4495|  93.7k|        return parent()->get_segment_starting_at(position());
 4496|   171k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  7.27M|    {
 4484|  7.27M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  7.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  7.27M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  7.27M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  93.7k|    {
 4377|  93.7k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 4378|  93.7k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  93.7k|        const auto start = pos - m_putback_buffer.size();
 4382|  93.7k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  93.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  93.7k|        return m_current_view.substr(start);
 4384|  93.7k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   259k|    {
 4468|   259k|        return m_position;
 4469|   259k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   366k|    {
 4399|   366k|        return m_is_contiguous;
 4400|   366k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  5.87M|    {
 4473|  5.87M|        assert(m_begin);
 4474|  5.87M|        return m_end == nullptr;
 4475|  5.87M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  86.6k|    {
 4490|  86.6k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 86.6k, False: 0]
  ------------------
 4491|  86.6k|            return make_string_view_from_pointers(
 4492|  86.6k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  86.6k|                static_cast<const CharT*>(m_end));
 4494|  86.6k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  86.6k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  3.24M|    {
 4484|  3.24M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  3.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  3.24M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  3.24M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   121k|    {
 4468|   121k|        return m_position;
 4469|   121k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   361k|    {
 4399|   361k|        return m_is_contiguous;
 4400|   361k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   237k|    {
 3334|   237k|        return static_cast<D&>(*this);
 3335|   237k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   237k|    {
 3375|   237k|        return detail::to_address(ranges::begin(derived()));
 3376|   237k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   178k|    {
 3334|   178k|        return static_cast<D&>(*this);
 3335|   178k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   178k|    {
 3375|   178k|        return detail::to_address(ranges::begin(derived()));
 3376|   178k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   186k|    {
 8980|   186k|        return ranges::subrange{begin(), end()};
 8981|   186k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   186k|    {
 8972|   186k|        return ranges::default_sentinel;
 8973|   186k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   702k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   702k|    static_cast<    \
  |  |  935|   702k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   702k|    static_cast<    \
  |  |  935|   702k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   702k|    {
 3466|   702k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|   187k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  93.7k|    {
 1979|  93.7k|        return detail::transform_error_impl(std::move(*this),
 1980|  93.7k|                                            std::forward<F>(f));
 1981|  93.7k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  93.7k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  93.7k|    else {
 1472|  93.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  93.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  93.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 92.2k, False: 1.48k]
  |  |  ------------------
  ------------------
 1474|  93.7k|                   ? result(*std::forward<Exp>(exp))
 1475|  93.7k|                   : result(unexpect,
 1476|  1.48k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.48k|                                           std::forward<Exp>(exp).error()));
 1478|  93.7k|    }
 1479|  93.7k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   187k|    {
  490|   187k|        return m_has_value;
  491|   187k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  92.2k|    {
 1805|  92.2k|        return std::move(value());
 1806|  92.2k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  92.2k|    {
 1769|  92.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  92.2k|        return this->get_value();
 1771|  92.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  92.2k|    {
  456|  92.2k|        return m_value;
  457|  92.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   254k|        : base(std::in_place, std::forward<U>(val)),
 1570|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   254k|    {
 1572|   254k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   254k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   254k|    {
  442|   254k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   440k|    {
 1316|   440k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  4.17k|{
 1350|  4.17k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  4.17k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.48k|    {
 1756|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.48k|        return std::move(this->get_unexpected().error());
 1758|  1.48k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.48k|    {
  473|  1.48k|        return m_unexpected;
  474|  1.48k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  8.35k|    {
  365|  8.35k|        return m_unexpected;
  366|  8.35k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.48k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.48k|    {
 1628|  1.48k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   142k|          m_has_value(false)
  451|   142k|    {
  452|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   172k|    {
 8980|   172k|        return ranges::subrange{begin(), end()};
 8981|   172k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   172k|    {
 8972|   172k|        return ranges::default_sentinel;
 8973|   172k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   595k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   595k|    static_cast<    \
  |  |  935|   595k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   595k|    static_cast<    \
  |  |  935|   595k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   595k|    {
 3466|   595k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  86.6k|    {
 1979|  86.6k|        return detail::transform_error_impl(std::move(*this),
 1980|  86.6k|                                            std::forward<F>(f));
 1981|  86.6k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  86.6k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  86.6k|    else {
 1472|  86.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  86.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  86.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 85.6k, False: 978]
  |  |  ------------------
  ------------------
 1474|  86.6k|                   ? result(*std::forward<Exp>(exp))
 1475|  86.6k|                   : result(unexpect,
 1476|    978|                            trivial_invoke(std::forward<F>(f),
 1477|    978|                                           std::forward<Exp>(exp).error()));
 1478|  86.6k|    }
 1479|  86.6k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   173k|    {
  490|   173k|        return m_has_value;
  491|   173k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  85.6k|    {
 1805|  85.6k|        return std::move(value());
 1806|  85.6k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  85.6k|    {
 1769|  85.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  85.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  85.6k|        return this->get_value();
 1771|  85.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  85.6k|    {
  456|  85.6k|        return m_value;
  457|  85.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   138k|        : base(std::in_place, std::forward<U>(val)),
 1570|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   138k|    {
 1572|   138k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   138k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   138k|    {
  442|   138k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   438k|    {
 1316|   438k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|    978|    {
 1756|    978|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    978|        return std::move(this->get_unexpected().error());
 1758|    978|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    978|    {
  473|    978|        return m_unexpected;
  474|    978|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|    978|        : base(unexpect, std::forward<Args>(args)...),
 1626|    978|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    978|    {
 1628|    978|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   282k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   282k|          m_has_value(false)
  451|   282k|    {
  452|   282k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   221k|        : base(unexpect, std::move(e.error())),
 1616|   221k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   221k|    {
 1618|   221k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   221k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   221k|          m_has_value(false)
  451|   221k|    {
  452|   221k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   360k|    {
 1316|   360k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  36.9k|        : base(unexpect, std::move(e.error())),
 1616|  36.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  36.9k|    {
 1618|  36.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  37.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.7k|          m_has_value(false)
  451|  37.7k|    {
  452|  37.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   158k|    {
 1316|   158k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   121k|        : base(std::in_place, std::forward<U>(val)),
 1570|   121k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   121k|    {
 1572|   121k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   121k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   121k|    {
  442|   121k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   158k|    {
 1740|   158k|        return has_value();
 1741|   158k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   317k|    {
  490|   317k|        return m_has_value;
  491|   317k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  37.7k|    {
 1746|  37.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  37.7k|        return this->get_unexpected().error();
 1748|  37.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  37.7k|    {
  473|  37.7k|        return m_unexpected;
  474|  37.7k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   121k|    {
 1805|   121k|        return std::move(value());
 1806|   121k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   121k|    {
 1769|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   121k|        return this->get_value();
 1771|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   121k|    {
  456|   121k|        return m_value;
  457|   121k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  73.9k|        : base(unexpect, std::move(e.error())),
 1616|  73.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  73.9k|    {
 1618|  73.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  74.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.9k|          m_has_value(false)
  451|  74.9k|    {
  452|  74.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   178k|    {
 1316|   178k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   103k|        : base(std::in_place, std::forward<U>(val)),
 1570|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   103k|    {
 1572|   103k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   103k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   103k|    {
  442|   103k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   178k|    {
 1740|   178k|        return has_value();
 1741|   178k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   356k|    {
  490|   356k|        return m_has_value;
  491|   356k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  74.9k|    {
 1746|  74.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  74.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  74.9k|        return this->get_unexpected().error();
 1748|  74.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  74.9k|    {
  473|  74.9k|        return m_unexpected;
  474|  74.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   103k|    {
 1805|   103k|        return std::move(value());
 1806|   103k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   103k|    {
 1769|   103k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   103k|        return this->get_value();
 1771|   103k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   103k|    {
  456|   103k|        return m_value;
  457|   103k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  78.2k|    {
 1979|  78.2k|        return detail::transform_error_impl(std::move(*this),
 1980|  78.2k|                                            std::forward<F>(f));
 1981|  78.2k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  78.2k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  78.2k|    else {
 1472|  78.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  78.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  78.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 77.5k, False: 738]
  |  |  ------------------
  ------------------
 1474|  78.2k|                   ? result(*std::forward<Exp>(exp))
 1475|  78.2k|                   : result(unexpect,
 1476|    738|                            trivial_invoke(std::forward<F>(f),
 1477|    738|                                           std::forward<Exp>(exp).error()));
 1478|  78.2k|    }
 1479|  78.2k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   156k|    {
  490|   156k|        return m_has_value;
  491|   156k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  77.5k|    {
 1805|  77.5k|        return std::move(value());
 1806|  77.5k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  77.5k|    {
 1769|  77.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  77.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  77.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  77.5k|        return this->get_value();
 1771|  77.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  77.5k|    {
  456|  77.5k|        return m_value;
  457|  77.5k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    738|    {
 1756|    738|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    738|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    738|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    738|        return std::move(this->get_unexpected().error());
 1758|    738|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    738|    {
  473|    738|        return m_unexpected;
  474|    738|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    738|        : base(unexpect, std::forward<Args>(args)...),
 1626|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    738|    {
 1628|    738|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   735k|    {
 8964|   735k|        return m_current;
 8965|   735k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8851|   156k|    {
 8852|   156k|        return m_args;
 8853|   156k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   326k|    {
 8857|   326k|        return m_locale;
 8858|   326k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   333k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   333k|    static_cast<    \
  |  |  935|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   333k|    static_cast<    \
  |  |  935|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   333k|    {
 8864|   333k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   156k|    {
 3000|   156k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   156k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   156k|    {
 2981|   156k|        return t.data();
 2982|   156k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  78.2k|    {
 3075|  78.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  78.2k|    {
 3041|  78.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   140k|        : base(unexpect, std::move(e.error())),
 1616|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   140k|    {
 1618|   140k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  43.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  43.7k|    {
 1572|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  43.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  43.7k|    {
  442|  43.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   589k|    {
 8964|   589k|        return m_current;
 8965|   589k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8851|   173k|    {
 8852|   173k|        return m_args;
 8853|   173k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   344k|    {
 8857|   344k|        return m_locale;
 8858|   344k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   356k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   356k|    static_cast<    \
  |  |  935|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   356k|    static_cast<    \
  |  |  935|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   356k|    {
 8864|   356k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   173k|    {
 3000|   173k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   173k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   173k|    {
 2981|   173k|        return t.data();
 2982|   173k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  86.6k|    {
 3075|  86.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  86.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  86.6k|    {
 3041|  86.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  86.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   281k|        : base(unexpect, std::move(e.error())),
 1616|   281k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   281k|    {
 1618|   281k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  17.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  17.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  17.6k|    {
 1572|  17.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  17.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  17.6k|    {
  442|  17.6k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   508k|    {
 4559|   508k|        return x.is_at_end();
 4560|   508k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.29M|    {
 4603|  1.29M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.29M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.29M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.29M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.29M|        return !read_at_position();
 4610|  1.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  3.75M|    {
 4583|  3.75M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  3.75M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 3.75M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  3.75M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  3.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.99M, False: 756k]
  |  |  ------------------
  ------------------
 4590|  2.99M|            return true;
 4591|  2.99M|        }
 4592|       |
 4593|  1.49M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 756k, False: 742k]
  ------------------
 4594|   756k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 14.0k, False: 742k]
  ------------------
 4595|  14.0k|                return false;
 4596|  14.0k|            }
 4597|   756k|        }
 4598|   742k|        return true;
 4599|   756k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.17M|    {
 4518|  1.17M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.17M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.17M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.17M|        auto res = read_at_position();
 4527|  1.17M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.17M|        return parent()->get_character_at(m_position);
 4529|  1.17M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.17M|    {
 4388|  1.17M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 376k, False: 800k]
  |  |  ------------------
  ------------------
 4389|  1.17M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   376k|            return m_putback_buffer[pos];
 4391|   376k|        }
 4392|   800k|        const auto start = pos - m_putback_buffer.size();
 4393|   800k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   800k|        return m_current_view[start];
 4395|   800k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  92.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  92.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  92.2k|    {
 1572|  92.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  92.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  92.2k|    {
  442|  92.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  93.7k|    {
 1316|  93.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.48k|        : base(unexpect, std::move(e.error())),
 1616|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.48k|    {
 1618|  1.48k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.48k|          m_has_value(false)
  451|  1.48k|    {
  452|  1.48k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  4.17k|        : m_unexpected(std::forward<Args>(args)...)
  359|  4.17k|    {
  360|  4.17k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  4.17k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.27M|    {
 4504|  1.27M|        ++m_position;
 4505|  1.27M|        (void)read_at_position();
 4506|  1.27M|        return *this;
 4507|  1.27M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   576k|    {
 4553|   576k|        return !(lhs == rhs);
 4554|   576k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   576k|    {
 4548|   576k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 576k, False: 0]
  |  Branch (4548:46): [True: 69.2k, False: 506k]
  ------------------
 4549|   576k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  4.17k|        : m_unexpected(std::forward<Err>(e))
  350|  4.17k|    {
  351|  4.17k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  4.17k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.63M|    {
 3484|  1.63M|        return m_sentinel;
 3485|  1.63M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   789k|    {
 4570|   789k|        return !x.is_at_end();
 4571|   789k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    738|        : base(unexpect, std::move(e.error())),
 1616|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    738|    {
 1618|    738|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    738|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    738|          m_has_value(false)
  451|    738|    {
  452|    738|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  78.2k|    {
 1316|  78.2k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  77.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  77.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  77.5k|    {
 1572|  77.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  77.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  77.5k|    {
  442|  77.5k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   234k|    {
 3000|   234k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   234k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   234k|    {
 2981|   234k|        return t.data();
 2982|   234k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   138k|        : base(std::in_place, std::forward<U>(val)),
 1570|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   138k|    {
 1572|   138k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   138k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   138k|    {
  442|   138k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   102k|    {
 1795|   102k|        return value();
 1796|   102k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  92.2k|    {
 2869|  92.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  92.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  92.2k|    {
 2850|  92.2k|        return decay_copy(t.begin());
 2851|  92.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  92.2k|{
 2094|  92.2k|    return SCN_FWD(t);
  ------------------
  |  |  936|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  92.2k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  78.2k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  78.2k|    {
 3912|  78.2k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  93.7k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  93.7k|    {
 3912|  93.7k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   375k|    {
 4559|   375k|        return x.is_at_end();
 4560|   375k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   724k|    {
 4603|   724k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 724k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   724k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 724k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   724k|        return !read_at_position();
 4610|   724k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.73M|    {
 4583|  1.73M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.73M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.73M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.73M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.43M, False: 298k]
  |  |  ------------------
  ------------------
 4590|  1.43M|            return true;
 4591|  1.43M|        }
 4592|       |
 4593|   578k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 298k, False: 280k]
  ------------------
 4594|   298k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 17.4k, False: 280k]
  ------------------
 4595|  17.4k|                return false;
 4596|  17.4k|            }
 4597|   298k|        }
 4598|   280k|        return true;
 4599|   298k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  2.31M|    {
 4357|  2.31M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  2.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   635k|    {
 4518|   635k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   635k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   635k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   635k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 635k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   635k|        auto res = read_at_position();
 4527|   635k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   635k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   635k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   635k|        return parent()->get_character_at(m_position);
 4529|   635k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   635k|    {
 4388|   635k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 355k, False: 280k]
  |  |  ------------------
  ------------------
 4389|   635k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   355k|            return m_putback_buffer[pos];
 4391|   355k|        }
 4392|   280k|        const auto start = pos - m_putback_buffer.size();
 4393|   280k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   280k|        return m_current_view[start];
 4395|   280k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  85.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  85.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  85.6k|    {
 1572|  85.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  85.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  85.6k|    {
  442|  85.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  86.6k|    {
 1316|  86.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|    978|        : base(unexpect, std::move(e.error())),
 1616|    978|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    978|    {
 1618|    978|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|    978|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    978|          m_has_value(false)
  451|    978|    {
  452|    978|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   373k|    {
 4504|   373k|        ++m_position;
 4505|   373k|        (void)read_at_position();
 4506|   373k|        return *this;
 4507|   373k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|   124k|    {
 4553|   124k|        return !(lhs == rhs);
 4554|   124k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|   124k|    {
 4548|   124k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 124k, False: 0]
  |  Branch (4548:46): [True: 17.6k, False: 106k]
  ------------------
 4549|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   969k|    {
 3484|   969k|        return m_sentinel;
 3485|   969k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   348k|    {
 4570|   348k|        return !x.is_at_end();
 4571|   348k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    978|        : base(unexpect, std::move(e.error())),
 1616|    978|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    978|    {
 1618|    978|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    978|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    978|          m_has_value(false)
  451|    978|    {
  452|    978|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  86.6k|    {
 1316|  86.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  85.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  85.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  85.6k|    {
 1572|  85.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  85.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  85.6k|    {
  442|  85.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   173k|    {
  490|   173k|        return m_has_value;
  491|   173k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  85.6k|    {
 1769|  85.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  85.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  85.6k|        return this->get_value();
 1771|  85.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  85.6k|    {
  456|  85.6k|        return m_value;
  457|  85.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  86.6k|    {
 1979|  86.6k|        return detail::transform_error_impl(std::move(*this),
 1980|  86.6k|                                            std::forward<F>(f));
 1981|  86.6k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  86.6k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  86.6k|    else {
 1472|  86.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  86.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  86.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 85.6k, False: 978]
  |  |  ------------------
  ------------------
 1474|  86.6k|                   ? result(*std::forward<Exp>(exp))
 1475|  86.6k|                   : result(unexpect,
 1476|    978|                            trivial_invoke(std::forward<F>(f),
 1477|    978|                                           std::forward<Exp>(exp).error()));
 1478|  86.6k|    }
 1479|  86.6k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  85.6k|    {
 1805|  85.6k|        return std::move(value());
 1806|  85.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    978|    {
 1756|    978|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    978|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    978|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    978|        return std::move(this->get_unexpected().error());
 1758|    978|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    978|    {
  473|    978|        return m_unexpected;
  474|    978|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    978|        : base(unexpect, std::forward<Args>(args)...),
 1626|    978|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    978|    {
 1628|    978|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   173k|    {
 3000|   173k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   173k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   173k|    {
 2981|   173k|        return t.data();
 2982|   173k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  35.2k|    {
 1795|  35.2k|        return value();
 1796|  35.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  85.6k|    {
 2869|  85.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  85.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  85.6k|    {
 2850|  85.6k|        return decay_copy(t.begin());
 2851|  85.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  85.6k|{
 2094|  85.6k|    return SCN_FWD(t);
  ------------------
  |  |  936|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  85.6k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  86.6k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  86.6k|    {
 3912|  86.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  86.6k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  86.6k|    {
 3912|  86.6k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  5.25M|    {
 4357|  5.25M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  5.25M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   171k|    {
 6182|   171k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   171k|        return static_cast<std::size_t>(m_desc &
 6187|   171k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   171k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   343k|    {
 6208|   343k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   343k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   171k|    {
 6150|   171k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   171k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   171k|        const auto t = type(id);
 6162|   171k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   171k|        basic_scan_arg<Context> arg;
 6167|   171k|        arg.m_type = t;
 6168|   171k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 171k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   171k|        else {
 6172|   171k|            arg.m_value = m_values[id];
 6173|   171k|        }
 6174|   171k|        return arg;
 6175|   171k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   171k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   171k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   171k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   171k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   171k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   171k|    {
 6212|   171k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   171k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   348k|    {
 5966|   348k|        return m_type != detail::arg_type::none_type;
 5967|   348k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  2.46k|{
 9324|  2.46k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.46k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.46k|{
 9225|  2.46k|#define SCN_VISIT(Type)                                                \
 9226|  2.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.46k|    }                                                                  \
 9229|  2.46k|    else {                                                             \
 9230|  2.46k|        return vis(monostate_val);                                     \
 9231|  2.46k|    }
 9232|       |
 9233|  2.46k|    monostate monostate_val{};
 9234|       |
 9235|  2.46k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.46k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.46k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.46k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.46k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.46k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.46k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.46k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.46k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.46k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.46k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.46k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.46k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.46k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.46k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.46k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.46k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.46k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.46k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.46k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.46k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.46k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.46k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.46k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.46k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.46k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.46k, False: 0]
  ------------------
 9286|  2.46k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.46k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.46k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.46k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.46k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.46k|            SCN_CLANG_POP
 9303|  2.46k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   348k|{
 6011|   348k|    return arg.m_type;
 6012|   348k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   176k|{
 6023|   176k|    return arg.m_value;
 6024|   176k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6279|  2.46k|        : m_format{format},
 6280|  2.46k|          m_next_arg_id{next_arg_id},
 6281|  2.46k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.46k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.46k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.46k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.46k|    {
 6287|  2.46k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  80.7k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  80.7k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  80.7k|          m_position(pos)
 4463|  80.7k|    {
 4464|  80.7k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   176k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   176k|    static_cast<    \
  |  |  935|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   176k|    {
 8949|   176k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5943|   176k|        {
 5944|   176k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   176k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5948|   176k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   174k|{
 4691|   174k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 78.2k, False: 96.2k]
  ------------------
 4692|  78.2k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  78.2k|                                ranges::default_sentinel};
 4694|  78.2k|    }
 4695|  96.2k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  96.2k|                            ranges::default_sentinel};
 4697|   174k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  96.2k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  96.2k|    {
 4455|  96.2k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  96.2k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  96.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  2.46k|{
 9324|  2.46k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  2.46k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  2.46k|{
 9225|  2.46k|#define SCN_VISIT(Type)                                                \
 9226|  2.46k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  2.46k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  2.46k|    }                                                                  \
 9229|  2.46k|    else {                                                             \
 9230|  2.46k|        return vis(monostate_val);                                     \
 9231|  2.46k|    }
 9232|       |
 9233|  2.46k|    monostate monostate_val{};
 9234|       |
 9235|  2.46k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.46k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.46k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.46k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.46k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.46k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.46k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.46k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.46k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.46k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.46k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.46k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.46k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 2.46k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 2.46k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 2.46k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 2.46k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 2.46k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 2.46k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 2.46k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.46k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 2.46k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 2.46k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 2.46k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 2.46k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  2.46k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 2.46k, False: 0]
  ------------------
 9286|  2.46k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  2.46k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  2.46k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 2.46k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 2.46k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  2.46k|            SCN_CLANG_POP
 9303|  2.46k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6279|  2.46k|        : m_format{format},
 6280|  2.46k|          m_next_arg_id{next_arg_id},
 6281|  2.46k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  2.46k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  2.46k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  2.46k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  2.46k|    {
 6287|  2.46k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  78.2k|        : m_format{format},
 6280|  78.2k|          m_next_arg_id{next_arg_id},
 6281|  78.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  78.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  78.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  78.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  78.2k|    {
 6287|  78.2k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  78.2k|    {
 3075|  78.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  78.2k|    {
 3041|  78.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  78.2k|{
 7796|  78.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  78.2k|    handler.check_args_exhausted();
 7798|  78.2k|    return handler.get_error();
 7799|  78.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  78.2k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  78.2k|    auto begin = format.data();
 7764|  78.2k|    auto it = begin;
 7765|  78.2k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   121k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 78.2k, False: 43.7k]
  ------------------
 7768|  78.2k|        const auto ch = *it++;
 7769|  78.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 78.2k, False: 0]
  ------------------
 7770|  78.2k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  78.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  78.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 34.5k, False: 43.7k]
  ------------------
 7774|  34.5k|                return;
 7775|  34.5k|            }
 7776|  78.2k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  78.2k|    }
 7787|       |
 7788|  43.7k|    handler.on_literal_text(begin, end);
 7789|  43.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  78.2k|{
 7693|  78.2k|    struct id_adapter {
 7694|  78.2k|        constexpr void operator()()
 7695|  78.2k|        {
 7696|  78.2k|            arg_id = handler.on_arg_id();
 7697|  78.2k|        }
 7698|  78.2k|        constexpr void operator()(std::size_t id)
 7699|  78.2k|        {
 7700|  78.2k|            arg_id = handler.on_arg_id(id);
 7701|  78.2k|        }
 7702|       |
 7703|  78.2k|        constexpr void on_error(const char* msg)
 7704|  78.2k|        {
 7705|  78.2k|            SCN_UNLIKELY_ATTR
 7706|  78.2k|            handler.on_error(msg);
 7707|  78.2k|        }
 7708|       |
 7709|  78.2k|        Handler& handler;
 7710|  78.2k|        std::size_t arg_id;
 7711|  78.2k|    };
 7712|       |
 7713|  78.2k|    ++begin;
 7714|  78.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  78.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 78.2k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  78.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 78.2k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  78.2k|    else {
 7726|  78.2k|        auto adapter = id_adapter{handler, 0};
 7727|  78.2k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  78.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  78.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 78.2k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  78.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 78.2k, False: 0]
  ------------------
 7738|  78.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  78.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  78.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.2k]
  |  |  |  Branch (865:45): [True: 0, False: 78.2k]
  |  |  |  Branch (865:45): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  78.2k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  78.2k|    }
 7754|  78.2k|    return begin + 1;
 7755|  78.2k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   171k|    {
 8847|   171k|        return m_args.get(id);
 8848|   171k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   171k|    {
 6315|   171k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   171k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   171k|        do_check_arg_id(id);
 6323|   171k|        return id;
 6324|   171k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   171k|{
 6809|   171k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   171k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   171k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  78.2k|{
 7194|  78.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  78.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  78.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 78.2k, False: 0]
  |  Branch (7195:26): [True: 0, False: 78.2k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  78.2k|    handler();
 7200|  78.2k|    return begin;
 7201|  78.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  78.2k|        {
 7696|  78.2k|            arg_id = handler.on_arg_id();
 7697|  78.2k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   171k|{
 9324|   171k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   171k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   171k|{
 9225|   171k|#define SCN_VISIT(Type)                                                \
 9226|   171k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   171k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   171k|    }                                                                  \
 9229|   171k|    else {                                                             \
 9230|   171k|        return vis(monostate_val);                                     \
 9231|   171k|    }
 9232|       |
 9233|   171k|    monostate monostate_val{};
 9234|       |
 9235|   171k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 171k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 171k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 171k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 171k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 171k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 171k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 171k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 171k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 171k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 171k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 171k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 171k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 171k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 171k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 171k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 171k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 171k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 171k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 171k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 171k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 171k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 171k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 171k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 171k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   171k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 171k, False: 0]
  ------------------
 9286|   171k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   171k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   171k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 171k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 171k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   171k|            SCN_CLANG_POP
 9303|   171k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  78.2k|        : base(typename base::contiguous_tag{}, sv)
 4717|  78.2k|    {
 4718|  78.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  78.2k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  78.2k|    {
 4423|  78.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   156k|    {
 3000|   156k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   156k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   156k|    {
 2991|   156k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   156k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   156k|    {
 2869|   156k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   156k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   156k|    {
 2850|   156k|        return decay_copy(t.begin());
 2851|   156k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  78.2k|    {
 3075|  78.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  78.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  78.2k|    {
 3041|  78.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  78.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  78.2k|    {
 4540|  78.2k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  78.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  78.2k|        m_position = i;
 4542|  78.2k|        return *this;
 4543|  78.2k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  93.7k|        : m_format{format},
 6280|  93.7k|          m_next_arg_id{next_arg_id},
 6281|  93.7k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  93.7k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  93.7k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  93.7k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  93.7k|    {
 6287|  93.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  93.7k|{
 7796|  93.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  93.7k|    handler.check_args_exhausted();
 7798|  93.7k|    return handler.get_error();
 7799|  93.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  93.7k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  93.7k|    auto begin = format.data();
 7764|  93.7k|    auto it = begin;
 7765|  93.7k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   152k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 93.7k, False: 59.2k]
  ------------------
 7768|  93.7k|        const auto ch = *it++;
 7769|  93.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 93.7k, False: 0]
  ------------------
 7770|  93.7k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  93.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  93.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 34.5k, False: 59.2k]
  ------------------
 7774|  34.5k|                return;
 7775|  34.5k|            }
 7776|  93.7k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  93.7k|    }
 7787|       |
 7788|  59.2k|    handler.on_literal_text(begin, end);
 7789|  59.2k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  93.7k|{
 7693|  93.7k|    struct id_adapter {
 7694|  93.7k|        constexpr void operator()()
 7695|  93.7k|        {
 7696|  93.7k|            arg_id = handler.on_arg_id();
 7697|  93.7k|        }
 7698|  93.7k|        constexpr void operator()(std::size_t id)
 7699|  93.7k|        {
 7700|  93.7k|            arg_id = handler.on_arg_id(id);
 7701|  93.7k|        }
 7702|       |
 7703|  93.7k|        constexpr void on_error(const char* msg)
 7704|  93.7k|        {
 7705|  93.7k|            SCN_UNLIKELY_ATTR
 7706|  93.7k|            handler.on_error(msg);
 7707|  93.7k|        }
 7708|       |
 7709|  93.7k|        Handler& handler;
 7710|  93.7k|        std::size_t arg_id;
 7711|  93.7k|    };
 7712|       |
 7713|  93.7k|    ++begin;
 7714|  93.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  93.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 93.7k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  93.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 93.7k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  93.7k|    else {
 7726|  93.7k|        auto adapter = id_adapter{handler, 0};
 7727|  93.7k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  93.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  93.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 93.7k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  93.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 93.7k, False: 0]
  ------------------
 7738|  93.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  93.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  93.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  |  Branch (865:45): [True: 0, False: 93.7k]
  |  |  |  Branch (865:45): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  93.7k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  93.7k|    }
 7754|  93.7k|    return begin + 1;
 7755|  93.7k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  93.7k|{
 7194|  93.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  93.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  93.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 93.7k, False: 0]
  |  Branch (7195:26): [True: 0, False: 93.7k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  93.7k|    handler();
 7200|  93.7k|    return begin;
 7201|  93.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  93.7k|        {
 7696|  93.7k|            arg_id = handler.on_arg_id();
 7697|  93.7k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  36.9k|    {
 4352|  36.9k|        return sync(0);
 4353|  36.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|   173k|    {
 6182|   173k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   173k|        return static_cast<std::size_t>(m_desc &
 6187|   173k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   173k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|   346k|    {
 6208|   346k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   346k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|   173k|    {
 6150|   173k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   173k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   173k|        const auto t = type(id);
 6162|   173k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   173k|        basic_scan_arg<Context> arg;
 6167|   173k|        arg.m_type = t;
 6168|   173k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 173k]
  ------------------
 6169|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6170|      0|        }
 6171|   173k|        else {
 6172|   173k|            arg.m_value = m_values[id];
 6173|   173k|        }
 6174|   173k|        return arg;
 6175|   173k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|   173k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   173k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   173k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   173k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   173k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|   173k|    {
 6212|   173k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   173k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|   356k|    {
 5966|   356k|        return m_type != detail::arg_type::none_type;
 5967|   356k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|  4.93k|{
 9324|  4.93k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  4.93k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  4.93k|{
 9225|  4.93k|#define SCN_VISIT(Type)                                                \
 9226|  4.93k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  4.93k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  4.93k|    }                                                                  \
 9229|  4.93k|    else {                                                             \
 9230|  4.93k|        return vis(monostate_val);                                     \
 9231|  4.93k|    }
 9232|       |
 9233|  4.93k|    monostate monostate_val{};
 9234|       |
 9235|  4.93k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.93k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.93k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.93k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.93k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.93k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.93k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.93k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.93k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.93k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.93k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.93k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.93k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 4.93k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 4.93k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 4.93k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 4.93k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 4.93k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 4.93k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 4.93k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.93k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 4.93k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 4.93k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 4.93k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 4.93k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  4.93k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 4.93k, False: 0]
  ------------------
 9286|  4.93k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  4.93k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  4.93k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 4.93k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 4.93k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  4.93k|            SCN_CLANG_POP
 9303|  4.93k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   356k|{
 6011|   356k|    return arg.m_type;
 6012|   356k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   183k|{
 6023|   183k|    return arg.m_value;
 6024|   183k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6279|  4.93k|        : m_format{format},
 6280|  4.93k|          m_next_arg_id{next_arg_id},
 6281|  4.93k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  4.93k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  4.93k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  4.93k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  4.93k|    {
 6287|  4.93k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  91.5k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  91.5k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  91.5k|          m_position(pos)
 4463|  91.5k|    {
 4464|  91.5k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   183k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   183k|    static_cast<    \
  |  |  935|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   183k|    {
 8949|   183k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5943|   183k|        {
 5944|   183k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5945|   183k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5948|   183k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|  86.6k|        : m_format{format},
 6280|  86.6k|          m_next_arg_id{next_arg_id},
 6281|  86.6k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  86.6k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  86.6k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  86.6k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  86.6k|    {
 6287|  86.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  86.6k|    {
 3075|  86.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  86.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  86.6k|    {
 3041|  86.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  86.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  86.6k|{
 7796|  86.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  86.6k|    handler.check_args_exhausted();
 7798|  86.6k|    return handler.get_error();
 7799|  86.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  86.6k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  86.6k|    auto begin = format.data();
 7764|  86.6k|    auto it = begin;
 7765|  86.6k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   104k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 86.6k, False: 17.6k]
  ------------------
 7768|  86.6k|        const auto ch = *it++;
 7769|  86.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 86.6k, False: 0]
  ------------------
 7770|  86.6k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  86.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  86.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.0k, False: 17.6k]
  ------------------
 7774|  69.0k|                return;
 7775|  69.0k|            }
 7776|  86.6k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  86.6k|    }
 7787|       |
 7788|  17.6k|    handler.on_literal_text(begin, end);
 7789|  17.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|  86.6k|{
 7693|  86.6k|    struct id_adapter {
 7694|  86.6k|        constexpr void operator()()
 7695|  86.6k|        {
 7696|  86.6k|            arg_id = handler.on_arg_id();
 7697|  86.6k|        }
 7698|  86.6k|        constexpr void operator()(std::size_t id)
 7699|  86.6k|        {
 7700|  86.6k|            arg_id = handler.on_arg_id(id);
 7701|  86.6k|        }
 7702|       |
 7703|  86.6k|        constexpr void on_error(const char* msg)
 7704|  86.6k|        {
 7705|  86.6k|            SCN_UNLIKELY_ATTR
 7706|  86.6k|            handler.on_error(msg);
 7707|  86.6k|        }
 7708|       |
 7709|  86.6k|        Handler& handler;
 7710|  86.6k|        std::size_t arg_id;
 7711|  86.6k|    };
 7712|       |
 7713|  86.6k|    ++begin;
 7714|  86.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  86.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 86.6k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  86.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 86.6k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  86.6k|    else {
 7726|  86.6k|        auto adapter = id_adapter{handler, 0};
 7727|  86.6k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  86.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  86.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 86.6k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  86.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 86.6k, False: 0]
  ------------------
 7738|  86.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  86.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  86.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  |  Branch (865:45): [True: 0, False: 86.6k]
  |  |  |  Branch (865:45): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  86.6k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  86.6k|    }
 7754|  86.6k|    return begin + 1;
 7755|  86.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   173k|    {
 8847|   173k|        return m_args.get(id);
 8848|   173k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   173k|    {
 6315|   173k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   173k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   173k|        do_check_arg_id(id);
 6323|   173k|        return id;
 6324|   173k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   173k|{
 6809|   173k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   173k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   173k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  86.6k|{
 7194|  86.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  86.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 86.6k, False: 0]
  |  Branch (7195:26): [True: 0, False: 86.6k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  86.6k|    handler();
 7200|  86.6k|    return begin;
 7201|  86.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  86.6k|        {
 7696|  86.6k|            arg_id = handler.on_arg_id();
 7697|  86.6k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9323|   173k|{
 9324|   173k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   173k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   173k|{
 9225|   173k|#define SCN_VISIT(Type)                                                \
 9226|   173k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   173k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   173k|    }                                                                  \
 9229|   173k|    else {                                                             \
 9230|   173k|        return vis(monostate_val);                                     \
 9231|   173k|    }
 9232|       |
 9233|   173k|    monostate monostate_val{};
 9234|       |
 9235|   173k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 173k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 173k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 173k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 173k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 173k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 173k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 173k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 173k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 173k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 173k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 173k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 173k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 173k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 173k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 173k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 173k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 173k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 173k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 173k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 173k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 173k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 173k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 173k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 173k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|   173k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 173k, False: 0]
  ------------------
 9286|   173k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   173k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   173k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 173k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 173k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   173k|            SCN_CLANG_POP
 9303|   173k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  86.6k|        : base(typename base::contiguous_tag{}, sv)
 4717|  86.6k|    {
 4718|  86.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  86.6k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  86.6k|    {
 4423|  86.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   173k|    {
 3000|   173k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   173k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   173k|    {
 2991|   173k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   173k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   173k|    {
 2869|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   173k|    {
 2850|   173k|        return decay_copy(t.begin());
 2851|   173k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  86.6k|    {
 3075|  86.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  86.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  86.6k|    {
 3041|  86.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  86.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   178k|{
 4691|   178k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 86.6k, False: 91.5k]
  ------------------
 4692|  86.6k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  86.6k|                                ranges::default_sentinel};
 4694|  86.6k|    }
 4695|  91.5k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  91.5k|                            ranges::default_sentinel};
 4697|   178k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  91.5k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  91.5k|    {
 4455|  91.5k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  91.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  91.5k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  91.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  91.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  86.6k|    {
 4540|  86.6k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  86.6k|        m_position = i;
 4542|  86.6k|        return *this;
 4543|  86.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  4.93k|{
 9324|  4.93k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  4.93k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  4.93k|{
 9225|  4.93k|#define SCN_VISIT(Type)                                                \
 9226|  4.93k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  4.93k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  4.93k|    }                                                                  \
 9229|  4.93k|    else {                                                             \
 9230|  4.93k|        return vis(monostate_val);                                     \
 9231|  4.93k|    }
 9232|       |
 9233|  4.93k|    monostate monostate_val{};
 9234|       |
 9235|  4.93k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.93k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.93k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.93k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.93k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.93k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.93k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.93k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.93k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.93k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.93k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.93k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.93k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 4.93k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 4.93k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 4.93k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 4.93k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 4.93k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 4.93k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 4.93k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.93k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 4.93k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 4.93k]
  ------------------
 9279|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 4.93k]
  ------------------
 9281|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 4.93k]
  ------------------
 9283|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9284|       |
 9285|  4.93k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 4.93k, False: 0]
  ------------------
 9286|  4.93k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  4.93k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  4.93k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 4.93k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 4.93k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  4.93k|            SCN_CLANG_POP
 9303|  4.93k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6279|  4.93k|        : m_format{format},
 6280|  4.93k|          m_next_arg_id{next_arg_id},
 6281|  4.93k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  4.93k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  4.93k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  4.93k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  4.93k|    {
 6287|  4.93k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|  86.6k|        : m_format{format},
 6280|  86.6k|          m_next_arg_id{next_arg_id},
 6281|  86.6k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  86.6k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  86.6k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  86.6k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  86.6k|    {
 6287|  86.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  86.6k|{
 7796|  86.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  86.6k|    handler.check_args_exhausted();
 7798|  86.6k|    return handler.get_error();
 7799|  86.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  86.6k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  86.6k|    auto begin = format.data();
 7764|  86.6k|    auto it = begin;
 7765|  86.6k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   104k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 86.6k, False: 17.6k]
  ------------------
 7768|  86.6k|        const auto ch = *it++;
 7769|  86.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 86.6k, False: 0]
  ------------------
 7770|  86.6k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  86.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  86.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 69.0k, False: 17.6k]
  ------------------
 7774|  69.0k|                return;
 7775|  69.0k|            }
 7776|  86.6k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  86.6k|    }
 7787|       |
 7788|  17.6k|    handler.on_literal_text(begin, end);
 7789|  17.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|  86.6k|{
 7693|  86.6k|    struct id_adapter {
 7694|  86.6k|        constexpr void operator()()
 7695|  86.6k|        {
 7696|  86.6k|            arg_id = handler.on_arg_id();
 7697|  86.6k|        }
 7698|  86.6k|        constexpr void operator()(std::size_t id)
 7699|  86.6k|        {
 7700|  86.6k|            arg_id = handler.on_arg_id(id);
 7701|  86.6k|        }
 7702|       |
 7703|  86.6k|        constexpr void on_error(const char* msg)
 7704|  86.6k|        {
 7705|  86.6k|            SCN_UNLIKELY_ATTR
 7706|  86.6k|            handler.on_error(msg);
 7707|  86.6k|        }
 7708|       |
 7709|  86.6k|        Handler& handler;
 7710|  86.6k|        std::size_t arg_id;
 7711|  86.6k|    };
 7712|       |
 7713|  86.6k|    ++begin;
 7714|  86.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  86.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 86.6k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  86.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 86.6k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  86.6k|    else {
 7726|  86.6k|        auto adapter = id_adapter{handler, 0};
 7727|  86.6k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  86.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  86.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 86.6k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  86.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 86.6k, False: 0]
  ------------------
 7738|  86.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  86.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  86.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  |  Branch (865:45): [True: 0, False: 86.6k]
  |  |  |  Branch (865:45): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|  86.6k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  86.6k|    }
 7754|  86.6k|    return begin + 1;
 7755|  86.6k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  86.6k|{
 7194|  86.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  86.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 86.6k, False: 0]
  |  Branch (7195:26): [True: 0, False: 86.6k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  86.6k|    handler();
 7200|  86.6k|    return begin;
 7201|  86.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  86.6k|        {
 7696|  86.6k|            arg_id = handler.on_arg_id();
 7697|  86.6k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  73.9k|    {
 4352|  73.9k|        return sync(0);
 4353|  73.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  4.93k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|  9.86k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|   101k|    {
 2926|   101k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   101k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|   101k|    {
 2908|   101k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   101k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   186k|{
 2094|   186k|    return SCN_FWD(t);
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   186k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  43.7k|    {
 4533|  43.7k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  43.7k|        m_position += n;
 4535|  43.7k|        return *this;
 4536|  43.7k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  85.1k|    {
 2926|  85.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  85.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  85.1k|    {
 2908|  85.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  85.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  17.6k|    {
 4533|  17.6k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  17.6k|        m_position += n;
 4535|  17.6k|        return *this;
 4536|  17.6k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  43.3k|{
   44|  43.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  43.3k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  43.3k|{
   60|  43.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  43.3k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  4.93k|{
   72|  4.93k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.93k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  43.3k|{
   44|  43.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  43.3k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  43.3k|{
   60|  43.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  43.3k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  4.93k|{
   72|  4.93k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.93k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.64k|{
  171|  1.64k|    auto result = make_scan_result<Source, T>();
  172|  1.64k|    fill_scan_result(
  173|  1.64k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.64k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.64k|    return result;
  176|  1.64k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  93.7k|{
  250|  93.7k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.7k|        .transform_error(impl::make_eof_scan_error);
  252|  93.7k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  86.6k|{
  250|  86.6k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  86.6k|        .transform_error(impl::make_eof_scan_error);
  252|  86.6k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   172k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   172k|{
  309|   172k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   172k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  39.1k|{
 1903|  39.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  39.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  46.8k|{
 1911|  46.8k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  46.8k|    return sync_after_vscan(source, n);
 1913|  46.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  43.3k|{
 1921|  43.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  43.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  43.3k|{
 1929|  43.3k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  43.3k|    return sync_after_vscan(source, n);
 1931|  43.3k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.3k|{
 3582|  57.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.2k, False: 26.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.2k|    }
 3586|       |
 3587|  26.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.0k|    auto begin = contiguous_ctx.begin();
 3590|  26.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  14.5k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.0k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.3k|{
 3582|  57.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.2k, False: 26.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.2k|    }
 3586|       |
 3587|  26.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.0k|    auto begin = contiguous_ctx.begin();
 3590|  26.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  14.5k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.0k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.3k|{
 3582|  57.3k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 31.2k, False: 26.0k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  31.2k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  31.2k|    }
 3586|       |
 3587|  26.0k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  26.0k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  26.0k|    auto begin = contiguous_ctx.begin();
 3590|  26.0k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  14.5k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  26.0k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.7k|{
 3582|  57.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 28.8k, False: 28.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  28.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  28.8k|    }
 3586|       |
 3587|  28.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  28.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  28.8k|    auto begin = contiguous_ctx.begin();
 3590|  28.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  5.86k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  28.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.7k|{
 3582|  57.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 28.8k, False: 28.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  28.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  28.8k|    }
 3586|       |
 3587|  28.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  28.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  28.8k|    auto begin = contiguous_ctx.begin();
 3590|  28.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  5.86k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  28.8k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  57.7k|{
 3582|  57.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 28.8k, False: 28.8k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  28.8k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  28.8k|    }
 3586|       |
 3587|  28.8k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  28.8k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  28.8k|    auto begin = contiguous_ctx.begin();
 3590|  28.8k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 23.0k, False: 5.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  23.0k|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  5.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  5.86k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  28.8k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   171k|{
  215|   171k|    return find_classic_impl(
  216|   171k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   171k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   171k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  14.7k|{
  329|  14.7k|    SCN_UNLIKELY_ATTR
  330|  14.7k|    return e;
  331|  14.7k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  39.1k|{
 1872|  39.1k|    return vscan_internal(source, format, args);
 1873|  39.1k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  46.8k|{
 1878|  46.8k|    auto n = vscan_internal(source, format, args);
 1879|  46.8k|    return sync_after_vscan(source, n);
 1880|  46.8k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  43.3k|{
 1886|  43.3k|    return vscan_internal(source, format, args);
 1887|  43.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  43.3k|{
 1892|  43.3k|    auto n = vscan_internal(source, format, args);
 1893|  43.3k|    return sync_after_vscan(source, n);
 1894|  43.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.46k|{
 1958|  2.46k|    return vscan_value_internal(source, arg);
 1959|  2.46k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.46k|{
 1963|  2.46k|    auto n = vscan_value_internal(source, arg);
 1964|  2.46k|    return sync_after_vscan(source, n);
 1965|  2.46k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  4.93k|{
 1971|  4.93k|    return vscan_value_internal(source, arg);
 1972|  4.93k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  4.93k|{
 1977|  4.93k|    auto n = vscan_value_internal(source, arg);
 1978|  4.93k|    return sync_after_vscan(source, n);
 1979|  4.93k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  84.3k|{
  118|  84.3k|    static_assert(sizeof(*source.data()) == 1);
  119|  84.3k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  84.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  84.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  84.3k|    uint64_t word{};
  121|  84.3k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  84.3k|    return has_byte_greater(word, 127) != 0;
  124|  84.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   171k|{
  131|   171k|    auto it = source.begin();
  132|       |
  133|   178k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 84.3k, False: 94.4k]
  ------------------
  134|  84.3k|        auto sv =
  135|  84.3k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  84.3k|                .substr(0, 8);
  137|       |
  138|  84.3k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 71.3k, False: 12.9k]
  ------------------
  139|  71.3k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  71.3k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  71.3k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 66.0k, False: 5.31k]
  ------------------
  142|  66.0k|                break;
  143|  66.0k|            }
  144|  5.31k|            continue;
  145|  71.3k|        }
  146|       |
  147|  19.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 18.3k, False: 1.52k]
  ------------------
  148|  18.3k|            auto tmp =
  149|  18.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  18.3k|            auto res = get_next_code_point(tmp);
  151|  18.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 11.4k, False: 6.93k]
  ------------------
  152|  11.4k|                return it;
  153|  11.4k|            }
  154|  6.93k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.93k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.93k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  6.93k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.93k|        }
  158|  12.9k|    }
  159|       |
  160|   160k|    return detail::make_string_view_iterator(source, it);
  161|   171k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   170k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  18.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  93.7k|{
 1769|  93.7k|    const auto argcount = args.size();
 1770|  93.7k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 93.7k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  93.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 93.7k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  93.7k|    SCN_UNLIKELY_ATTR
 1783|  93.7k|    {
 1784|  93.7k|        auto handler = format_handler<false, CharT>{
 1785|  93.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  93.7k|        return vscan_parse_format_string(format, handler);
 1787|  93.7k|    }
 1788|  93.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   171k|{
 1317|   171k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 171k, False: 0]
  ------------------
 1318|   171k|        return false;
 1319|   171k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   171k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.46k|{
 1350|  2.46k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.46k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.46k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.46k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.46k|    static_cast<    \
  |  |  935|  2.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.46k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.46k|    }                                                  \
  |  |  |  | 3939|  2.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.46k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  78.2k|        : format_handler_base{argcount},
 1593|  78.2k|          parse_ctx{source_tag<Source&&>, format},
 1594|  78.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  78.2k|    {
 1596|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   345k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   345k|    {
 1412|   345k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   345k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  78.2k|        : contiguous_ctx(source, args, loc)
 1544|  78.2k|    {
 1545|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  78.2k|{
 1734|  78.2k|    const auto beg = handler.get_ctx().begin();
 1735|  78.2k|    detail::parse_format_string<false>(format, handler);
 1736|  78.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 43.7k]
  |  |  ------------------
  ------------------
 1737|  34.5k|        return unexpected(err.error());
 1738|  34.5k|    }
 1739|  43.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  78.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   243k|    {
 1718|   243k|        return ctx.get();
 1719|   243k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   243k|    {
 1549|   243k|        return contiguous_ctx;
 1550|   243k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   121k|    {
 1600|   121k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 121k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   121k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   207k|    {
 1460|   207k|        error = unexpected(err);
 1461|   207k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  78.2k|{
 1372|  78.2k|    auto arg = ctx.arg(id);
 1373|  78.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  78.2k|    return arg;
 1377|  78.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   345k|    {
 1486|   345k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   345k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   345k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   345k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 345k, False: 0]
  |  |  ------------------
  ------------------
 1498|   345k|            visited_args_lower64 |= (1ull << id);
 1499|   345k|            return;
 1500|   345k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   345k|    {
 1470|   345k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   345k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   345k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 345k, False: 0]
  |  |  ------------------
  ------------------
 1477|   345k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   345k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   345k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  78.2k|    {
 1640|  78.2k|        return parse_ctx.next_arg_id();
 1641|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  78.2k|    {
 1680|  78.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  78.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  78.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 78.2k, False: 0]
  ------------------
 1684|  78.2k|            parse_ctx.advance_to(begin);
 1685|  78.2k|            on_visit_scan_arg(
 1686|  78.2k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  78.2k|                    parse_ctx, get_custom_ctx()},
 1688|  78.2k|                arg);
 1689|  78.2k|            return parse_ctx.begin();
 1690|  78.2k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  78.2k|    {
 1651|  78.2k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 78.2k]
  |  Branch (1651:13): [True: 0, False: 78.2k]
  |  Branch (1651:29): [True: 0, False: 78.2k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  78.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  78.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 43.7k]
  |  |  ------------------
  ------------------
 1658|  34.5k|            on_error(r.error());
 1659|  34.5k|        }
 1660|  43.7k|        else {
 1661|  43.7k|            get_ctx().advance_to(*r);
 1662|  43.7k|        }
 1663|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  78.2k|    {
 1722|  78.2k|        return ctx.get_custom();
 1723|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  78.2k|    {
 1553|  78.2k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 78.2k, False: 0]
  ------------------
 1554|  78.2k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  78.2k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  78.2k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  78.2k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  78.2k|        }
 1559|  78.2k|        auto it = buffer->get().begin();
 1560|  78.2k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  78.2k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  78.2k|        return *custom_ctx;
 1563|  78.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   345k|    {
 1419|   345k|        {
 1420|   345k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 345k]
  ------------------
 1421|   345k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 345k]
  ------------------
 1422|   345k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   345k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   345k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 345k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   345k|        }
 1430|       |
 1431|   345k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 345k, False: 0]
  ------------------
 1432|   345k|            return;
 1433|   345k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.38M|    {
 1465|  1.38M|        return error;
 1466|  1.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  93.7k|        : format_handler_base{argcount},
 1593|  93.7k|          parse_ctx{source_tag<Source&&>, format},
 1594|  93.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  93.7k|    {
 1596|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  93.7k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  93.7k|    static_cast<    \
  |  |  935|  93.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  93.7k|    {
 1521|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  93.7k|{
 1734|  93.7k|    const auto beg = handler.get_ctx().begin();
 1735|  93.7k|    detail::parse_format_string<false>(format, handler);
 1736|  93.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 59.2k]
  |  |  ------------------
  ------------------
 1737|  34.5k|        return unexpected(err.error());
 1738|  34.5k|    }
 1739|  59.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  93.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   305k|    {
 1718|   305k|        return ctx.get();
 1719|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   305k|    {
 1525|   305k|        return ctx;
 1526|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   152k|    {
 1600|   152k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 152k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   152k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  93.7k|{
 1372|  93.7k|    auto arg = ctx.arg(id);
 1373|  93.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 93.7k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  93.7k|    return arg;
 1377|  93.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  93.7k|    {
 1640|  93.7k|        return parse_ctx.next_arg_id();
 1641|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  93.7k|    {
 1680|  93.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  93.7k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  93.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 93.7k, False: 0]
  ------------------
 1684|  93.7k|            parse_ctx.advance_to(begin);
 1685|  93.7k|            on_visit_scan_arg(
 1686|  93.7k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  93.7k|                    parse_ctx, get_custom_ctx()},
 1688|  93.7k|                arg);
 1689|  93.7k|            return parse_ctx.begin();
 1690|  93.7k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  93.7k|    {
 1651|  93.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 93.7k]
  |  Branch (1651:13): [True: 0, False: 93.7k]
  |  Branch (1651:29): [True: 0, False: 93.7k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  93.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  93.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 59.2k]
  |  |  ------------------
  ------------------
 1658|  34.5k|            on_error(r.error());
 1659|  34.5k|        }
 1660|  59.2k|        else {
 1661|  59.2k|            get_ctx().advance_to(*r);
 1662|  59.2k|        }
 1663|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  93.7k|    {
 1722|  93.7k|        return ctx.get_custom();
 1723|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  93.7k|    {
 1529|  93.7k|        return ctx;
 1530|  93.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  78.2k|{
 1749|  78.2k|    const auto argcount = args.size();
 1750|  78.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 78.2k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  78.2k|    auto handler = format_handler<true, CharT>{
 1756|  78.2k|        ranges::subrange<const CharT*>{source.data(),
 1757|  78.2k|                                       source.data() + source.size()},
 1758|  78.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  78.2k|    return vscan_parse_format_string(format, handler);
 1760|  78.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.46k|{
 1330|  2.46k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.46k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.46k|    auto reader =
 1336|  2.46k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.46k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.46k|                                           source.data() + source.size()},
 1339|  2.46k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.46k|    static_cast<    \
  |  |  935|  2.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.46k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.46k|    }                                                  \
  |  |  |  | 3939|  2.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.46k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  96.2k|{
 1849|  96.2k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  96.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 59.2k, False: 36.9k]
  |  |  ------------------
  ------------------
 1850|  59.2k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  59.2k|    }
 1856|  36.9k|    else {
 1857|  36.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 36.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  36.9k|    }
 1863|  96.2k|    return result;
 1864|  96.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  86.6k|{
 1749|  86.6k|    const auto argcount = args.size();
 1750|  86.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 86.6k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  86.6k|    auto handler = format_handler<true, CharT>{
 1756|  86.6k|        ranges::subrange<const CharT*>{source.data(),
 1757|  86.6k|                                       source.data() + source.size()},
 1758|  86.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  86.6k|    return vscan_parse_format_string(format, handler);
 1760|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   173k|{
 1317|   173k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 173k, False: 0]
  ------------------
 1318|   173k|        return false;
 1319|   173k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   173k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  4.93k|{
 1330|  4.93k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  4.93k|    auto reader =
 1336|  4.93k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  4.93k|            ranges::subrange<const CharT*>{source.data(),
 1338|  4.93k|                                           source.data() + source.size()},
 1339|  4.93k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.93k|    static_cast<    \
  |  |  935|  4.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  4.93k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.93k|    }                                                  \
  |  |  |  | 3939|  4.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  4.93k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  86.6k|        : format_handler_base{argcount},
 1593|  86.6k|          parse_ctx{source_tag<Source&&>, format},
 1594|  86.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  86.6k|    {
 1596|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  86.6k|        : contiguous_ctx(source, args, loc)
 1544|  86.6k|    {
 1545|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  86.6k|{
 1734|  86.6k|    const auto beg = handler.get_ctx().begin();
 1735|  86.6k|    detail::parse_format_string<false>(format, handler);
 1736|  86.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.0k, False: 17.6k]
  |  |  ------------------
  ------------------
 1737|  69.0k|        return unexpected(err.error());
 1738|  69.0k|    }
 1739|  17.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   208k|    {
 1718|   208k|        return ctx.get();
 1719|   208k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   208k|    {
 1549|   208k|        return contiguous_ctx;
 1550|   208k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   104k|    {
 1600|   104k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 104k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   104k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  86.6k|{
 1372|  86.6k|    auto arg = ctx.arg(id);
 1373|  86.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  86.6k|    return arg;
 1377|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  86.6k|    {
 1640|  86.6k|        return parse_ctx.next_arg_id();
 1641|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  86.6k|    {
 1680|  86.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  86.6k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  86.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 86.6k, False: 0]
  ------------------
 1684|  86.6k|            parse_ctx.advance_to(begin);
 1685|  86.6k|            on_visit_scan_arg(
 1686|  86.6k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  86.6k|                    parse_ctx, get_custom_ctx()},
 1688|  86.6k|                arg);
 1689|  86.6k|            return parse_ctx.begin();
 1690|  86.6k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  86.6k|    {
 1651|  86.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 86.6k]
  |  Branch (1651:13): [True: 0, False: 86.6k]
  |  Branch (1651:29): [True: 0, False: 86.6k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  86.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  86.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.0k, False: 17.6k]
  |  |  ------------------
  ------------------
 1658|  69.0k|            on_error(r.error());
 1659|  69.0k|        }
 1660|  17.6k|        else {
 1661|  17.6k|            get_ctx().advance_to(*r);
 1662|  17.6k|        }
 1663|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  86.6k|    {
 1722|  86.6k|        return ctx.get_custom();
 1723|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  86.6k|    {
 1553|  86.6k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 86.6k, False: 0]
  ------------------
 1554|  86.6k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  86.6k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  86.6k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  86.6k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  86.6k|        }
 1559|  86.6k|        auto it = buffer->get().begin();
 1560|  86.6k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  86.6k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  86.6k|        return *custom_ctx;
 1563|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  86.6k|{
 1769|  86.6k|    const auto argcount = args.size();
 1770|  86.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 86.6k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  86.6k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 86.6k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  86.6k|    SCN_UNLIKELY_ATTR
 1783|  86.6k|    {
 1784|  86.6k|        auto handler = format_handler<false, CharT>{
 1785|  86.6k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  86.6k|        return vscan_parse_format_string(format, handler);
 1787|  86.6k|    }
 1788|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  4.93k|{
 1350|  4.93k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  4.93k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  4.93k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  4.93k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  4.93k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.93k|    static_cast<    \
  |  |  935|  4.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  4.93k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.93k|    }                                                  \
  |  |  |  | 3939|  4.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  4.93k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  86.6k|        : format_handler_base{argcount},
 1593|  86.6k|          parse_ctx{source_tag<Source&&>, format},
 1594|  86.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  86.6k|    {
 1596|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  86.6k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  86.6k|    {
 1521|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  86.6k|{
 1734|  86.6k|    const auto beg = handler.get_ctx().begin();
 1735|  86.6k|    detail::parse_format_string<false>(format, handler);
 1736|  86.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.0k, False: 17.6k]
  |  |  ------------------
  ------------------
 1737|  69.0k|        return unexpected(err.error());
 1738|  69.0k|    }
 1739|  17.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   208k|    {
 1718|   208k|        return ctx.get();
 1719|   208k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   208k|    {
 1525|   208k|        return ctx;
 1526|   208k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   104k|    {
 1600|   104k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 104k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   104k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  86.6k|{
 1372|  86.6k|    auto arg = ctx.arg(id);
 1373|  86.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  86.6k|    return arg;
 1377|  86.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  86.6k|    {
 1640|  86.6k|        return parse_ctx.next_arg_id();
 1641|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  86.6k|    {
 1680|  86.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  86.6k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  86.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 86.6k, False: 0]
  ------------------
 1684|  86.6k|            parse_ctx.advance_to(begin);
 1685|  86.6k|            on_visit_scan_arg(
 1686|  86.6k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  86.6k|                    parse_ctx, get_custom_ctx()},
 1688|  86.6k|                arg);
 1689|  86.6k|            return parse_ctx.begin();
 1690|  86.6k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  86.6k|    {
 1651|  86.6k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 86.6k]
  |  Branch (1651:13): [True: 0, False: 86.6k]
  |  Branch (1651:29): [True: 0, False: 86.6k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  86.6k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  86.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.0k, False: 17.6k]
  |  |  ------------------
  ------------------
 1658|  69.0k|            on_error(r.error());
 1659|  69.0k|        }
 1660|  17.6k|        else {
 1661|  17.6k|            get_ctx().advance_to(*r);
 1662|  17.6k|        }
 1663|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  86.6k|    {
 1722|  86.6k|        return ctx.get_custom();
 1723|  86.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  86.6k|    {
 1529|  86.6k|        return ctx;
 1530|  86.6k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  91.5k|{
 1849|  91.5k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  91.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 17.6k, False: 73.9k]
  |  |  ------------------
  ------------------
 1850|  17.6k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  17.6k|    }
 1856|  73.9k|    else {
 1857|  73.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  73.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 73.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  73.9k|    }
 1863|  91.5k|    return result;
 1864|  91.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.46k|{
 1795|  2.46k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.46k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.46k|{
 1795|  2.46k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.46k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  4.93k|{
 1795|  4.93k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.93k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  4.93k|{
 1795|  4.93k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.93k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.2k|{
 3563|  31.2k|    {
 3564|  31.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 494, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    494|    }                                                  \
  |  |  |  | 3939|  31.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.7k|        ctx.range(), t, ctx.locale());
 3571|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.7k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.7k|    return r.get_iterator();
 3576|  30.7k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.7k|          m_begin(ranges::begin(m_range)),
 2708|  30.7k|          m_tm(t),
 2709|  30.7k|          m_loc(loc)
 2710|  30.7k|    {
 2711|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.1k|    {
 3358|  10.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  43.4k|    {
 3363|  43.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 32.3k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  43.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  33.8k|    {
 2715|  57.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 33.8k, False: 23.5k]
  ------------------
 2716|  33.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 202, False: 33.6k]
  ------------------
 2717|    202|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    202|            }
 2719|  33.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.1k, False: 23.5k]
  ------------------
 2720|  10.1k|                return on_error("Invalid literal character");
 2721|  10.1k|            }
 2722|  23.5k|            ++beg;
 2723|  23.5k|            ++m_begin;
 2724|  23.5k|        }
 2725|  33.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.40k|    {
 2745|  3.40k|#if !SCN_DISABLE_LOCALE
 2746|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.40k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.40k|#endif
 2753|       |
 2754|  3.40k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.40k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.40k|    {
 2218|  3.40k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.40k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.40k|        t.tm_year = y - 1900;
 2223|  3.40k|        st.set_full_year(h);
 2224|  3.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  58.5k|    {
 3381|  58.5k|        int digits_read = 0;
 3382|  58.5k|        int accumulator = 0;
 3383|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 102k, False: 404]
  ------------------
 3384|   102k|            const auto ch = *m_begin;
 3385|   102k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.5k, False: 72.9k]
  |  Branch (3385:36): [True: 19.7k, False: 53.1k]
  ------------------
 3386|  49.3k|                break;
 3387|  49.3k|            }
 3388|  53.1k|            ++m_begin;
 3389|  53.1k|            ++digits_read;
 3390|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.82k, False: 44.3k]
  ------------------
 3392|  8.82k|                break;
 3393|  8.82k|            }
 3394|  53.1k|        }
 3395|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.2k, False: 42.2k]
  ------------------
 3396|  16.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.2k|                                 "Too few integer digits"});
 3398|  16.2k|            return -1;
 3399|  16.2k|        }
 3400|  42.2k|        return accumulator;
 3401|  58.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.79k|    {
 2759|  5.79k|#if !SCN_DISABLE_LOCALE
 2760|  5.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.79k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.79k|#endif
 2768|       |
 2769|  5.79k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.79k|    {
 2235|  5.79k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 4.23k]
  |  |  |  Branch (865:45): [True: 1.56k, False: 4.23k]
  |  |  |  Branch (865:45): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
 2236|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.56k|                                "Invalid value for tm_year"});
 2238|  1.56k|        }
 2239|  4.23k|        st.short_year_value = y;
 2240|  4.23k|        st.set_short_year(h);
 2241|  4.23k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.63k|    {
 2802|  3.63k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.63k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.63k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.63k|#endif
 2810|       |
 2811|  3.63k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.63k|            {"January", 1},
 2813|  3.63k|            {"February", 2},
 2814|  3.63k|            {"March", 3},
 2815|  3.63k|            {"April", 4},
 2816|  3.63k|            {"May", 5},
 2817|  3.63k|            {"June", 6},
 2818|  3.63k|            {"July", 7},
 2819|  3.63k|            {"August", 8},
 2820|  3.63k|            {"September", 9},
 2821|  3.63k|            {"October", 10},
 2822|  3.63k|            {"November", 11},
 2823|  3.63k|            {"December", 12},
 2824|  3.63k|        }};
 2825|  3.63k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 100, False: 3.53k]
  ------------------
 2826|    100|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|    100|        }
 2828|  3.53k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.53k|            {"Jan", 1},
 2830|  3.53k|            {"Feb", 2},
 2831|  3.53k|            {"Mar", 3},
 2832|  3.53k|            {"Apr", 4},
 2833|  3.53k|            {"Jun", 6},
 2834|  3.53k|            {"Jul", 7},
 2835|  3.53k|            {"Aug", 8},
 2836|  3.53k|            {"Sep", 9},
 2837|  3.53k|            {"Oct", 10},
 2838|  3.53k|            {"Nov", 11},
 2839|  3.53k|            {"Dec", 12},
 2840|  3.53k|        }};
 2841|  3.53k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.97k, False: 1.56k]
  ------------------
 2842|  1.97k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.97k|        }
 2844|  1.56k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.56k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  9.75k|    {
 2208|  9.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.63k, False: 7.12k]
  |  |  |  Branch (865:45): [True: 2.53k, False: 7.22k]
  |  |  |  Branch (865:45): [True: 104, False: 7.12k]
  |  |  ------------------
  ------------------
 2209|  2.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.63k|                                "Invalid value for tm_mon"});
 2211|  2.63k|        }
 2212|  7.12k|        t.tm_mon = m - 1;
 2213|  7.12k|        st.set_mon(h);
 2214|  7.12k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.63k|    {
 3419|  3.63k|        auto start_it = m_begin;
 3420|  3.63k|        std::size_t options_available = N;
 3421|  3.63k|        std::size_t chars_consumed = 0;
 3422|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.1k, False: 3.47k]
  ------------------
 3423|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.0k, False: 100]
  ------------------
 3424|  10.0k|            std::size_t i = 0;
 3425|  10.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 60, False: 9.96k]
  ------------------
 3426|     60|                options_available = 0;
 3427|     60|                break;
 3428|     60|            }
 3429|  9.96k|            const auto ch = *m_begin;
 3430|  9.96k|            ++m_begin;
 3431|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 54.3k, False: 9.96k]
  ------------------
 3432|  54.3k|                const auto cmp = static_cast<unsigned>(
 3433|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 54.3k]
  ------------------
 3435|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 8.73k]
  |  Branch (3435:34): [True: 43.4k, False: 2.15k]
  ------------------
 3436|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.4k|                                options.end());
 3438|  43.4k|                    --options_available;
 3439|  43.4k|                    continue;
 3440|  43.4k|                }
 3441|  10.8k|                ++i;
 3442|  10.8k|            }
 3443|  9.96k|            ++chars_consumed;
 3444|  9.96k|        }
 3445|  3.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.53k, False: 100]
  ------------------
 3446|  3.53k|            m_begin = start_it;
 3447|  3.53k|            return std::nullopt;
 3448|  3.53k|        }
 3449|    100|        return options.front().second;
 3450|  3.63k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.53k|    {
 3419|  3.53k|        auto start_it = m_begin;
 3420|  3.53k|        std::size_t options_available = N;
 3421|  3.53k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.72k, False: 1.51k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.75k, False: 1.97k]
  ------------------
 3424|  7.75k|            std::size_t i = 0;
 3425|  7.75k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 7.69k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  7.69k|            const auto ch = *m_begin;
 3430|  7.69k|            ++m_begin;
 3431|  50.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 7.69k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.9k, False: 4.19k]
  |  Branch (3435:34): [True: 36.8k, False: 2.04k]
  ------------------
 3436|  36.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.8k|                                options.end());
 3438|  36.8k|                    --options_available;
 3439|  36.8k|                    continue;
 3440|  36.8k|                }
 3441|  6.24k|                ++i;
 3442|  6.24k|            }
 3443|  7.69k|            ++chars_consumed;
 3444|  7.69k|        }
 3445|  3.53k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.56k, False: 1.97k]
  ------------------
 3446|  1.56k|            m_begin = start_it;
 3447|  1.56k|            return std::nullopt;
 3448|  1.56k|        }
 3449|  1.97k|        return options.front().second;
 3450|  3.53k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.68k|    {
 2848|  7.68k|#if !SCN_DISABLE_LOCALE
 2849|  7.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.68k|#endif
 2856|       |
 2857|  7.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.66k|    {
 2880|  7.66k|#if !SCN_DISABLE_LOCALE
 2881|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.66k|#endif
 2888|       |
 2889|  7.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.66k|    {
 2198|  7.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 4.56k]
  |  |  |  Branch (865:45): [True: 3.03k, False: 4.62k]
  |  |  |  Branch (865:45): [True: 68, False: 4.56k]
  |  |  ------------------
  ------------------
 2199|  3.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.10k|                                "Invalid value for tm_mday"});
 2201|  3.10k|        }
 2202|  4.56k|        t.tm_mday = d;
 2203|  4.56k|        st.set_mday(h);
 2204|  4.56k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  2.46k|    {
 2895|  2.46k|#if !SCN_DISABLE_LOCALE
 2896|  2.46k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.46k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.46k|#endif
 2903|       |
 2904|  2.46k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.46k|            {"Sunday", 0},
 2906|  2.46k|            {"Monday", 1},
 2907|  2.46k|            {"Tuesday", 2},
 2908|  2.46k|            {"Wednesday", 3},
 2909|  2.46k|            {"Thursday", 4},
 2910|  2.46k|            {"Friday", 5},
 2911|  2.46k|            {"Saturday", 6},
 2912|  2.46k|        }};
 2913|  2.46k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.46k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.46k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.46k|            {"Sun", 0},
 2918|  2.46k|            {"Mon", 1},
 2919|  2.46k|            {"Tue", 2},
 2920|  2.46k|            {"Wed", 3},
 2921|  2.46k|            {"Thu", 4},
 2922|  2.46k|            {"Fri", 5},
 2923|  2.46k|            {"Sat", 6},
 2924|  2.46k|        }};
 2925|  2.46k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.58k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.58k|        return set_error(
 2929|  1.58k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|    878|    {
 2245|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|    878|        t.tm_wday = d;
 2250|    878|        st.set_wday(h);
 2251|    878|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.92k|    {
 3419|  4.92k|        auto start_it = m_begin;
 3420|  4.92k|        std::size_t options_available = N;
 3421|  4.92k|        std::size_t chars_consumed = 0;
 3422|  14.6k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.6k, False: 4.00k]
  ------------------
 3423|  14.6k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 878]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 9.76k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.3k, False: 9.76k]
  ------------------
 3432|  39.3k|                const auto cmp = static_cast<unsigned>(
 3433|  39.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.3k]
  ------------------
 3435|  39.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.6k, False: 5.73k]
  |  Branch (3435:34): [True: 33.5k, False: 60]
  ------------------
 3436|  33.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.5k|                                options.end());
 3438|  33.5k|                    --options_available;
 3439|  33.5k|                    continue;
 3440|  33.5k|                }
 3441|  5.79k|                ++i;
 3442|  5.79k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.92k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.05k, False: 878]
  ------------------
 3446|  4.05k|            m_begin = start_it;
 3447|  4.05k|            return std::nullopt;
 3448|  4.05k|        }
 3449|    878|        return options.front().second;
 3450|  4.92k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 13.2k]
  |  |  |  Branch (865:45): [True: 2.05k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 182, False: 13.2k]
  |  |  ------------------
  ------------------
 2179|  2.23k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.23k|                                  "Invalid value for tm_hour"});
 2181|  2.23k|        }
 2182|  13.2k|        t.tm_hour = h;
 2183|  13.2k|        st.set_hour24(hdl);
 2184|  13.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.54k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.52k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 26, False: 12.9k]
  |  |  ------------------
  ------------------
 2169|  2.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.54k|                                "Invalid value for tm_min"});
 2171|  2.54k|        }
 2172|  12.9k|        t.tm_min = m;
 2173|  12.9k|        st.set_min(h);
 2174|  12.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 1.48k]
  |  |  |  Branch (865:45): [True: 1.54k, False: 1.49k]
  |  |  |  Branch (865:45): [True: 6, False: 1.48k]
  |  |  ------------------
  ------------------
 2159|  1.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.54k|                                "Invalid value for tm_sec"});
 2161|  1.54k|        }
 2162|  1.48k|        t.tm_sec = s;
 2163|  1.48k|        st.set_sec(h);
 2164|  1.48k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.79k|    {
 3253|       |        // %m/%d/%y
 3254|  5.79k|        constexpr CharT slash = '/';
 3255|  5.79k|        on_dec_month();
 3256|  5.79k|        on_text(&slash, &slash + 1);
 3257|  5.79k|        on_day_of_month();
 3258|  5.79k|        on_text(&slash, &slash + 1);
 3259|  5.79k|        on_short_year();
 3260|  5.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.81k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.81k|        constexpr CharT dash = '-';
 3265|  1.81k|        on_full_year();
 3266|  1.81k|        on_text(&dash, &dash + 1);
 3267|  1.81k|        on_dec_month();
 3268|  1.81k|        on_text(&dash, &dash + 1);
 3269|  1.81k|        on_day_of_month();
 3270|  1.81k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.4k|    {
 3295|       |        // %H:%M
 3296|  12.4k|        constexpr CharT colon = ':';
 3297|  12.4k|        on_24_hour();
 3298|  12.4k|        on_text(&colon, &colon + 1);
 3299|  12.4k|        on_minute();
 3300|  12.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.7k|    {
 3342|  19.7k|        m_st.verify(*this);
 3343|  19.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.7k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 230]
  |  Branch (3346:37): [True: 4.22k, False: 15.2k]
  |  Branch (3346:60): [True: 0, False: 15.2k]
  ------------------
 3347|  4.22k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.22k|        }
 3349|  19.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  8.67k|    {
 2296|  8.67k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  8.67k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  61.6k|    {
 3353|  61.6k|        return m_error;
 3354|  61.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.7k|    {
 3370|  19.7k|        return m_begin;
 3371|  19.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.0k|{
 3563|  26.0k|    {
 3564|  26.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 25.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.8k|        ctx.range(), t, ctx.locale());
 3571|  25.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 14.5k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  14.5k|    return r.get_iterator();
 3576|  25.8k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  78.2k|{
  250|  78.2k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  78.2k|        .transform_error(impl::make_eof_scan_error);
  252|  78.2k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.8k|          m_begin(ranges::begin(m_range)),
 2708|  25.8k|          m_tm(t),
 2709|  25.8k|          m_loc(loc)
 2710|  25.8k|    {
 2711|  25.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.5k|    {
 3358|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  45.2k|    {
 3363|  45.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 33.9k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  45.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.8k|    {
 2715|  39.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.8k, False: 14.2k]
  ------------------
 2716|  24.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 160, False: 24.7k]
  ------------------
 2717|    160|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    160|            }
 2719|  24.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.5k, False: 14.2k]
  ------------------
 2720|  10.5k|                return on_error("Invalid literal character");
 2721|  10.5k|            }
 2722|  14.2k|            ++beg;
 2723|  14.2k|            ++m_begin;
 2724|  14.2k|        }
 2725|  24.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.46k|    {
 2745|  3.46k|#if !SCN_DISABLE_LOCALE
 2746|  3.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.46k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.46k|#endif
 2753|       |
 2754|  3.46k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.46k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.46k|    {
 2218|  3.46k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.46k|        t.tm_year = y - 1900;
 2223|  3.46k|        st.set_full_year(h);
 2224|  3.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  44.6k|    {
 3381|  44.6k|        int digits_read = 0;
 3382|  44.6k|        int accumulator = 0;
 3383|  74.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 73.7k, False: 334]
  ------------------
 3384|  73.7k|            const auto ch = *m_begin;
 3385|  73.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.5k, False: 52.2k]
  |  Branch (3385:36): [True: 18.4k, False: 33.7k]
  ------------------
 3386|  39.9k|                break;
 3387|  39.9k|            }
 3388|  33.7k|            ++m_begin;
 3389|  33.7k|            ++digits_read;
 3390|  33.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.37k, False: 29.3k]
  ------------------
 3392|  4.37k|                break;
 3393|  4.37k|            }
 3394|  33.7k|        }
 3395|  44.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.0k, False: 27.6k]
  ------------------
 3396|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.0k|                                 "Too few integer digits"});
 3398|  17.0k|            return -1;
 3399|  17.0k|        }
 3400|  27.6k|        return accumulator;
 3401|  44.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.70k|    {
 2759|  1.70k|#if !SCN_DISABLE_LOCALE
 2760|  1.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.70k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.70k|#endif
 2768|       |
 2769|  1.70k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.70k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.70k|    {
 2235|  1.70k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.60k, False: 100]
  |  |  |  Branch (865:45): [True: 1.60k, False: 100]
  |  |  |  Branch (865:45): [True: 0, False: 100]
  |  |  ------------------
  ------------------
 2236|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.60k|                                "Invalid value for tm_year"});
 2238|  1.60k|        }
 2239|    100|        st.short_year_value = y;
 2240|    100|        st.set_short_year(h);
 2241|    100|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.59k|    {
 2802|  3.59k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.59k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.59k|#endif
 2810|       |
 2811|  3.59k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.59k|            {"January", 1},
 2813|  3.59k|            {"February", 2},
 2814|  3.59k|            {"March", 3},
 2815|  3.59k|            {"April", 4},
 2816|  3.59k|            {"May", 5},
 2817|  3.59k|            {"June", 6},
 2818|  3.59k|            {"July", 7},
 2819|  3.59k|            {"August", 8},
 2820|  3.59k|            {"September", 9},
 2821|  3.59k|            {"October", 10},
 2822|  3.59k|            {"November", 11},
 2823|  3.59k|            {"December", 12},
 2824|  3.59k|        }};
 2825|  3.59k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 90, False: 3.50k]
  ------------------
 2826|     90|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     90|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.89k, False: 1.60k]
  ------------------
 2842|  1.89k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.89k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.60k|    {
 2208|  5.60k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74k, False: 2.86k]
  |  |  |  Branch (865:45): [True: 2.65k, False: 2.95k]
  |  |  |  Branch (865:45): [True: 90, False: 2.86k]
  |  |  ------------------
  ------------------
 2209|  2.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.74k|                                "Invalid value for tm_mon"});
 2211|  2.74k|        }
 2212|  2.86k|        t.tm_mon = m - 1;
 2213|  2.86k|        st.set_mon(h);
 2214|  2.86k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.59k|    {
 3419|  3.59k|        auto start_it = m_begin;
 3420|  3.59k|        std::size_t options_available = N;
 3421|  3.59k|        std::size_t chars_consumed = 0;
 3422|  13.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.79k, False: 3.44k]
  ------------------
 3423|  13.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.70k, False: 90]
  ------------------
 3424|  9.70k|            std::size_t i = 0;
 3425|  9.70k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 9.65k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  9.65k|            const auto ch = *m_begin;
 3430|  9.65k|            ++m_begin;
 3431|  62.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 53.3k, False: 9.65k]
  ------------------
 3432|  53.3k|                const auto cmp = static_cast<unsigned>(
 3433|  53.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  53.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 53.3k]
  ------------------
 3435|  53.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 44.9k, False: 8.37k]
  |  Branch (3435:34): [True: 42.8k, False: 2.04k]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|  10.4k|                ++i;
 3442|  10.4k|            }
 3443|  9.65k|            ++chars_consumed;
 3444|  9.65k|        }
 3445|  3.59k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 90]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     90|        return options.front().second;
 3450|  3.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.43k, False: 1.55k]
  ------------------
 3423|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.54k, False: 1.89k]
  ------------------
 3424|  7.54k|            std::size_t i = 0;
 3425|  7.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 7.48k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  7.48k|            const auto ch = *m_begin;
 3430|  7.48k|            ++m_begin;
 3431|  50.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.5k, False: 7.48k]
  ------------------
 3432|  42.5k|                const auto cmp = static_cast<unsigned>(
 3433|  42.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.5k]
  ------------------
 3435|  42.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.4k, False: 4.03k]
  |  Branch (3435:34): [True: 36.5k, False: 1.95k]
  ------------------
 3436|  36.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.5k|                                options.end());
 3438|  36.5k|                    --options_available;
 3439|  36.5k|                    continue;
 3440|  36.5k|                }
 3441|  5.98k|                ++i;
 3442|  5.98k|            }
 3443|  7.48k|            ++chars_consumed;
 3444|  7.48k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 1.89k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  1.89k|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.61k|    {
 2848|  3.61k|#if !SCN_DISABLE_LOCALE
 2849|  3.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.61k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.61k|#endif
 2856|       |
 2857|  3.61k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.61k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.60k|    {
 2880|  3.60k|#if !SCN_DISABLE_LOCALE
 2881|  3.60k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.60k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.60k|#endif
 2888|       |
 2889|  3.60k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.60k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.60k|    {
 2198|  3.60k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.19k, False: 410]
  |  |  |  Branch (865:45): [True: 3.12k, False: 474]
  |  |  |  Branch (865:45): [True: 64, False: 410]
  |  |  ------------------
  ------------------
 2199|  3.19k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.19k|                                "Invalid value for tm_mday"});
 2201|  3.19k|        }
 2202|    410|        t.tm_mday = d;
 2203|    410|        st.set_mday(h);
 2204|    410|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  2.49k|    {
 2895|  2.49k|#if !SCN_DISABLE_LOCALE
 2896|  2.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.49k|#endif
 2903|       |
 2904|  2.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.49k|            {"Sunday", 0},
 2906|  2.49k|            {"Monday", 1},
 2907|  2.49k|            {"Tuesday", 2},
 2908|  2.49k|            {"Wednesday", 3},
 2909|  2.49k|            {"Thursday", 4},
 2910|  2.49k|            {"Friday", 5},
 2911|  2.49k|            {"Saturday", 6},
 2912|  2.49k|        }};
 2913|  2.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.49k|            {"Sun", 0},
 2918|  2.49k|            {"Mon", 1},
 2919|  2.49k|            {"Tue", 2},
 2920|  2.49k|            {"Wed", 3},
 2921|  2.49k|            {"Thu", 4},
 2922|  2.49k|            {"Fri", 5},
 2923|  2.49k|            {"Sat", 6},
 2924|  2.49k|        }};
 2925|  2.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.61k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.61k|        return set_error(
 2929|  1.61k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|    878|    {
 2245|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|    878|        t.tm_wday = d;
 2250|    878|        st.set_wday(h);
 2251|    878|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.98k|    {
 3419|  4.98k|        auto start_it = m_begin;
 3420|  4.98k|        std::size_t options_available = N;
 3421|  4.98k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 4.07k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.84k, False: 878]
  ------------------
 3424|  9.84k|            std::size_t i = 0;
 3425|  9.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 9.80k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  9.80k|            const auto ch = *m_begin;
 3430|  9.80k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.7k, False: 9.80k]
  ------------------
 3432|  39.7k|                const auto cmp = static_cast<unsigned>(
 3433|  39.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.7k]
  ------------------
 3435|  39.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.0k, False: 5.73k]
  |  Branch (3435:34): [True: 33.9k, False: 32]
  ------------------
 3436|  33.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.9k|                                options.end());
 3438|  33.9k|                    --options_available;
 3439|  33.9k|                    continue;
 3440|  33.9k|                }
 3441|  5.76k|                ++i;
 3442|  5.76k|            }
 3443|  9.80k|            ++chars_consumed;
 3444|  9.80k|        }
 3445|  4.98k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.11k, False: 878]
  ------------------
 3446|  4.11k|            m_begin = start_it;
 3447|  4.11k|            return std::nullopt;
 3448|  4.11k|        }
 3449|    878|        return options.front().second;
 3450|  4.98k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.6k|    {
 2969|  14.6k|#if !SCN_DISABLE_LOCALE
 2970|  14.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.6k|#endif
 2977|       |
 2978|  14.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.6k|    {
 2178|  14.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.53k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 166, False: 12.0k]
  |  |  ------------------
  ------------------
 2179|  2.53k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.53k|                                  "Invalid value for tm_hour"});
 2181|  2.53k|        }
 2182|  12.0k|        t.tm_hour = h;
 2183|  12.0k|        st.set_hour24(hdl);
 2184|  12.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.5k|    {
 2997|  14.5k|#if !SCN_DISABLE_LOCALE
 2998|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.5k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.5k|#endif
 3005|       |
 3006|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.5k|    {
 2168|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.64k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.62k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 18, False: 11.9k]
  |  |  ------------------
  ------------------
 2169|  2.64k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.64k|                                "Invalid value for tm_min"});
 2171|  2.64k|        }
 2172|  11.9k|        t.tm_min = m;
 2173|  11.9k|        st.set_min(h);
 2174|  11.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  3.05k|    {
 3011|  3.05k|#if !SCN_DISABLE_LOCALE
 3012|  3.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.05k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.05k|#endif
 3019|       |
 3020|  3.05k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.05k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.05k|    {
 2158|  3.05k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 4, False: 1.47k]
  |  |  ------------------
  ------------------
 2159|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.58k|                                "Invalid value for tm_sec"});
 2161|  1.58k|        }
 2162|  1.47k|        t.tm_sec = s;
 2163|  1.47k|        st.set_sec(h);
 2164|  1.47k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.70k|    {
 3253|       |        // %m/%d/%y
 3254|  1.70k|        constexpr CharT slash = '/';
 3255|  1.70k|        on_dec_month();
 3256|  1.70k|        on_text(&slash, &slash + 1);
 3257|  1.70k|        on_day_of_month();
 3258|  1.70k|        on_text(&slash, &slash + 1);
 3259|  1.70k|        on_short_year();
 3260|  1.70k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.84k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.84k|        constexpr CharT dash = '-';
 3265|  1.84k|        on_full_year();
 3266|  1.84k|        on_text(&dash, &dash + 1);
 3267|  1.84k|        on_dec_month();
 3268|  1.84k|        on_text(&dash, &dash + 1);
 3269|  1.84k|        on_day_of_month();
 3270|  1.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  3.05k|    {
 3303|       |        // %H:%M:%S
 3304|  3.05k|        constexpr CharT colon = ':';
 3305|  3.05k|        on_24_hour();
 3306|  3.05k|        on_text(&colon, &colon + 1);
 3307|  3.05k|        on_minute();
 3308|  3.05k|        on_text(&colon, &colon + 1);
 3309|  3.05k|        on_second();
 3310|  3.05k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  14.5k|    {
 3342|  14.5k|        m_st.verify(*this);
 3343|  14.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 14.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  14.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.3k, False: 230]
  |  Branch (3346:37): [True: 92, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|     92|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     92|        }
 3349|  14.5k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  51.8k|    {
 3353|  51.8k|        return m_error;
 3354|  51.8k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  14.5k|    {
 3370|  14.5k|        return m_begin;
 3371|  14.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.2k|{
 3563|  31.2k|    {
 3564|  31.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 494, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    494|    }                                                  \
  |  |  |  | 3939|  31.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.7k|        ctx.range(), t, ctx.locale());
 3571|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.7k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.7k|    return r.get_iterator();
 3576|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.7k|          m_begin(ranges::begin(m_range)),
 2708|  30.7k|          m_tm(t),
 2709|  30.7k|          m_loc(loc)
 2710|  30.7k|    {
 2711|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.1k|    {
 3358|  10.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  43.4k|    {
 3363|  43.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 32.3k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  43.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  33.8k|    {
 2715|  57.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 33.8k, False: 23.5k]
  ------------------
 2716|  33.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 202, False: 33.6k]
  ------------------
 2717|    202|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    202|            }
 2719|  33.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.1k, False: 23.5k]
  ------------------
 2720|  10.1k|                return on_error("Invalid literal character");
 2721|  10.1k|            }
 2722|  23.5k|            ++beg;
 2723|  23.5k|            ++m_begin;
 2724|  23.5k|        }
 2725|  33.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.40k|    {
 2745|  3.40k|#if !SCN_DISABLE_LOCALE
 2746|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.40k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.40k|#endif
 2753|       |
 2754|  3.40k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.40k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.40k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.40k|    {
 2218|  3.40k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.40k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.40k|        t.tm_year = y - 1900;
 2223|  3.40k|        st.set_full_year(h);
 2224|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  58.5k|    {
 3381|  58.5k|        int digits_read = 0;
 3382|  58.5k|        int accumulator = 0;
 3383|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 102k, False: 404]
  ------------------
 3384|   102k|            const auto ch = *m_begin;
 3385|   102k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.5k, False: 72.9k]
  |  Branch (3385:36): [True: 19.7k, False: 53.1k]
  ------------------
 3386|  49.3k|                break;
 3387|  49.3k|            }
 3388|  53.1k|            ++m_begin;
 3389|  53.1k|            ++digits_read;
 3390|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.82k, False: 44.3k]
  ------------------
 3392|  8.82k|                break;
 3393|  8.82k|            }
 3394|  53.1k|        }
 3395|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.2k, False: 42.2k]
  ------------------
 3396|  16.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.2k|                                 "Too few integer digits"});
 3398|  16.2k|            return -1;
 3399|  16.2k|        }
 3400|  42.2k|        return accumulator;
 3401|  58.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.79k|    {
 2759|  5.79k|#if !SCN_DISABLE_LOCALE
 2760|  5.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.79k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.79k|#endif
 2768|       |
 2769|  5.79k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.79k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  5.79k|    {
 2235|  5.79k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56k, False: 4.23k]
  |  |  |  Branch (865:45): [True: 1.56k, False: 4.23k]
  |  |  |  Branch (865:45): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
 2236|  1.56k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.56k|                                "Invalid value for tm_year"});
 2238|  1.56k|        }
 2239|  4.23k|        st.short_year_value = y;
 2240|  4.23k|        st.set_short_year(h);
 2241|  4.23k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.63k|    {
 2802|  3.63k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.63k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.63k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.63k|#endif
 2810|       |
 2811|  3.63k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.63k|            {"January", 1},
 2813|  3.63k|            {"February", 2},
 2814|  3.63k|            {"March", 3},
 2815|  3.63k|            {"April", 4},
 2816|  3.63k|            {"May", 5},
 2817|  3.63k|            {"June", 6},
 2818|  3.63k|            {"July", 7},
 2819|  3.63k|            {"August", 8},
 2820|  3.63k|            {"September", 9},
 2821|  3.63k|            {"October", 10},
 2822|  3.63k|            {"November", 11},
 2823|  3.63k|            {"December", 12},
 2824|  3.63k|        }};
 2825|  3.63k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 100, False: 3.53k]
  ------------------
 2826|    100|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|    100|        }
 2828|  3.53k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.53k|            {"Jan", 1},
 2830|  3.53k|            {"Feb", 2},
 2831|  3.53k|            {"Mar", 3},
 2832|  3.53k|            {"Apr", 4},
 2833|  3.53k|            {"Jun", 6},
 2834|  3.53k|            {"Jul", 7},
 2835|  3.53k|            {"Aug", 8},
 2836|  3.53k|            {"Sep", 9},
 2837|  3.53k|            {"Oct", 10},
 2838|  3.53k|            {"Nov", 11},
 2839|  3.53k|            {"Dec", 12},
 2840|  3.53k|        }};
 2841|  3.53k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.97k, False: 1.56k]
  ------------------
 2842|  1.97k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.97k|        }
 2844|  1.56k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.56k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  9.75k|    {
 2208|  9.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.63k, False: 7.12k]
  |  |  |  Branch (865:45): [True: 2.53k, False: 7.22k]
  |  |  |  Branch (865:45): [True: 104, False: 7.12k]
  |  |  ------------------
  ------------------
 2209|  2.63k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.63k|                                "Invalid value for tm_mon"});
 2211|  2.63k|        }
 2212|  7.12k|        t.tm_mon = m - 1;
 2213|  7.12k|        st.set_mon(h);
 2214|  7.12k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.63k|    {
 3419|  3.63k|        auto start_it = m_begin;
 3420|  3.63k|        std::size_t options_available = N;
 3421|  3.63k|        std::size_t chars_consumed = 0;
 3422|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.1k, False: 3.47k]
  ------------------
 3423|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.0k, False: 100]
  ------------------
 3424|  10.0k|            std::size_t i = 0;
 3425|  10.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 60, False: 9.96k]
  ------------------
 3426|     60|                options_available = 0;
 3427|     60|                break;
 3428|     60|            }
 3429|  9.96k|            const auto ch = *m_begin;
 3430|  9.96k|            ++m_begin;
 3431|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 54.3k, False: 9.96k]
  ------------------
 3432|  54.3k|                const auto cmp = static_cast<unsigned>(
 3433|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 54.3k]
  ------------------
 3435|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 8.73k]
  |  Branch (3435:34): [True: 43.4k, False: 2.15k]
  ------------------
 3436|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.4k|                                options.end());
 3438|  43.4k|                    --options_available;
 3439|  43.4k|                    continue;
 3440|  43.4k|                }
 3441|  10.8k|                ++i;
 3442|  10.8k|            }
 3443|  9.96k|            ++chars_consumed;
 3444|  9.96k|        }
 3445|  3.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.53k, False: 100]
  ------------------
 3446|  3.53k|            m_begin = start_it;
 3447|  3.53k|            return std::nullopt;
 3448|  3.53k|        }
 3449|    100|        return options.front().second;
 3450|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.53k|    {
 3419|  3.53k|        auto start_it = m_begin;
 3420|  3.53k|        std::size_t options_available = N;
 3421|  3.53k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.72k, False: 1.51k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.75k, False: 1.97k]
  ------------------
 3424|  7.75k|            std::size_t i = 0;
 3425|  7.75k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 7.69k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  7.69k|            const auto ch = *m_begin;
 3430|  7.69k|            ++m_begin;
 3431|  50.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 7.69k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.9k, False: 4.19k]
  |  Branch (3435:34): [True: 36.8k, False: 2.04k]
  ------------------
 3436|  36.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.8k|                                options.end());
 3438|  36.8k|                    --options_available;
 3439|  36.8k|                    continue;
 3440|  36.8k|                }
 3441|  6.24k|                ++i;
 3442|  6.24k|            }
 3443|  7.69k|            ++chars_consumed;
 3444|  7.69k|        }
 3445|  3.53k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.56k, False: 1.97k]
  ------------------
 3446|  1.56k|            m_begin = start_it;
 3447|  1.56k|            return std::nullopt;
 3448|  1.56k|        }
 3449|  1.97k|        return options.front().second;
 3450|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.68k|    {
 2848|  7.68k|#if !SCN_DISABLE_LOCALE
 2849|  7.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.68k|#endif
 2856|       |
 2857|  7.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.66k|    {
 2880|  7.66k|#if !SCN_DISABLE_LOCALE
 2881|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.66k|#endif
 2888|       |
 2889|  7.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  7.66k|    {
 2198|  7.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 4.56k]
  |  |  |  Branch (865:45): [True: 3.03k, False: 4.62k]
  |  |  |  Branch (865:45): [True: 68, False: 4.56k]
  |  |  ------------------
  ------------------
 2199|  3.10k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.10k|                                "Invalid value for tm_mday"});
 2201|  3.10k|        }
 2202|  4.56k|        t.tm_mday = d;
 2203|  4.56k|        st.set_mday(h);
 2204|  4.56k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  2.46k|    {
 2895|  2.46k|#if !SCN_DISABLE_LOCALE
 2896|  2.46k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.46k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.46k|#endif
 2903|       |
 2904|  2.46k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.46k|            {"Sunday", 0},
 2906|  2.46k|            {"Monday", 1},
 2907|  2.46k|            {"Tuesday", 2},
 2908|  2.46k|            {"Wednesday", 3},
 2909|  2.46k|            {"Thursday", 4},
 2910|  2.46k|            {"Friday", 5},
 2911|  2.46k|            {"Saturday", 6},
 2912|  2.46k|        }};
 2913|  2.46k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.46k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.46k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.46k|            {"Sun", 0},
 2918|  2.46k|            {"Mon", 1},
 2919|  2.46k|            {"Tue", 2},
 2920|  2.46k|            {"Wed", 3},
 2921|  2.46k|            {"Thu", 4},
 2922|  2.46k|            {"Fri", 5},
 2923|  2.46k|            {"Sat", 6},
 2924|  2.46k|        }};
 2925|  2.46k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.58k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.58k|        return set_error(
 2929|  1.58k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|    878|    {
 2245|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|    878|        t.tm_wday = d;
 2250|    878|        st.set_wday(h);
 2251|    878|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.92k|    {
 3419|  4.92k|        auto start_it = m_begin;
 3420|  4.92k|        std::size_t options_available = N;
 3421|  4.92k|        std::size_t chars_consumed = 0;
 3422|  14.6k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.6k, False: 4.00k]
  ------------------
 3423|  14.6k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 878]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 9.76k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.3k, False: 9.76k]
  ------------------
 3432|  39.3k|                const auto cmp = static_cast<unsigned>(
 3433|  39.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.3k]
  ------------------
 3435|  39.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.6k, False: 5.73k]
  |  Branch (3435:34): [True: 33.5k, False: 60]
  ------------------
 3436|  33.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.5k|                                options.end());
 3438|  33.5k|                    --options_available;
 3439|  33.5k|                    continue;
 3440|  33.5k|                }
 3441|  5.79k|                ++i;
 3442|  5.79k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.92k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.05k, False: 878]
  ------------------
 3446|  4.05k|            m_begin = start_it;
 3447|  4.05k|            return std::nullopt;
 3448|  4.05k|        }
 3449|    878|        return options.front().second;
 3450|  4.92k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.4k|    {
 2178|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 13.2k]
  |  |  |  Branch (865:45): [True: 2.05k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 182, False: 13.2k]
  |  |  ------------------
  ------------------
 2179|  2.23k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.23k|                                  "Invalid value for tm_hour"});
 2181|  2.23k|        }
 2182|  13.2k|        t.tm_hour = h;
 2183|  13.2k|        st.set_hour24(hdl);
 2184|  13.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.4k|    {
 2168|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.54k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.52k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 26, False: 12.9k]
  |  |  ------------------
  ------------------
 2169|  2.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.54k|                                "Invalid value for tm_min"});
 2171|  2.54k|        }
 2172|  12.9k|        t.tm_min = m;
 2173|  12.9k|        st.set_min(h);
 2174|  12.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.03k|    {
 2158|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 1.48k]
  |  |  |  Branch (865:45): [True: 1.54k, False: 1.49k]
  |  |  |  Branch (865:45): [True: 6, False: 1.48k]
  |  |  ------------------
  ------------------
 2159|  1.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.54k|                                "Invalid value for tm_sec"});
 2161|  1.54k|        }
 2162|  1.48k|        t.tm_sec = s;
 2163|  1.48k|        st.set_sec(h);
 2164|  1.48k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.79k|    {
 3253|       |        // %m/%d/%y
 3254|  5.79k|        constexpr CharT slash = '/';
 3255|  5.79k|        on_dec_month();
 3256|  5.79k|        on_text(&slash, &slash + 1);
 3257|  5.79k|        on_day_of_month();
 3258|  5.79k|        on_text(&slash, &slash + 1);
 3259|  5.79k|        on_short_year();
 3260|  5.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.81k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.81k|        constexpr CharT dash = '-';
 3265|  1.81k|        on_full_year();
 3266|  1.81k|        on_text(&dash, &dash + 1);
 3267|  1.81k|        on_dec_month();
 3268|  1.81k|        on_text(&dash, &dash + 1);
 3269|  1.81k|        on_day_of_month();
 3270|  1.81k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.4k|    {
 3295|       |        // %H:%M
 3296|  12.4k|        constexpr CharT colon = ':';
 3297|  12.4k|        on_24_hour();
 3298|  12.4k|        on_text(&colon, &colon + 1);
 3299|  12.4k|        on_minute();
 3300|  12.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.7k|    {
 3342|  19.7k|        m_st.verify(*this);
 3343|  19.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.7k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 230]
  |  Branch (3346:37): [True: 4.22k, False: 15.2k]
  |  Branch (3346:60): [True: 0, False: 15.2k]
  ------------------
 3347|  4.22k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.22k|        }
 3349|  19.7k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  61.6k|    {
 3353|  61.6k|        return m_error;
 3354|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.7k|    {
 3370|  19.7k|        return m_begin;
 3371|  19.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.0k|{
 3563|  26.0k|    {
 3564|  26.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 25.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.8k|        ctx.range(), t, ctx.locale());
 3571|  25.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 14.5k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  14.5k|    return r.get_iterator();
 3576|  25.8k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.8k|          m_begin(ranges::begin(m_range)),
 2708|  25.8k|          m_tm(t),
 2709|  25.8k|          m_loc(loc)
 2710|  25.8k|    {
 2711|  25.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.5k|    {
 3358|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  45.2k|    {
 3363|  45.2k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 33.9k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  45.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.8k|    {
 2715|  39.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.8k, False: 14.2k]
  ------------------
 2716|  24.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 160, False: 24.7k]
  ------------------
 2717|    160|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    160|            }
 2719|  24.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.5k, False: 14.2k]
  ------------------
 2720|  10.5k|                return on_error("Invalid literal character");
 2721|  10.5k|            }
 2722|  14.2k|            ++beg;
 2723|  14.2k|            ++m_begin;
 2724|  14.2k|        }
 2725|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.46k|    {
 2745|  3.46k|#if !SCN_DISABLE_LOCALE
 2746|  3.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.46k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.46k|#endif
 2753|       |
 2754|  3.46k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.46k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.46k|    {
 2218|  3.46k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.46k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.46k|        t.tm_year = y - 1900;
 2223|  3.46k|        st.set_full_year(h);
 2224|  3.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  44.6k|    {
 3381|  44.6k|        int digits_read = 0;
 3382|  44.6k|        int accumulator = 0;
 3383|  74.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 73.7k, False: 334]
  ------------------
 3384|  73.7k|            const auto ch = *m_begin;
 3385|  73.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.5k, False: 52.2k]
  |  Branch (3385:36): [True: 18.4k, False: 33.7k]
  ------------------
 3386|  39.9k|                break;
 3387|  39.9k|            }
 3388|  33.7k|            ++m_begin;
 3389|  33.7k|            ++digits_read;
 3390|  33.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.37k, False: 29.3k]
  ------------------
 3392|  4.37k|                break;
 3393|  4.37k|            }
 3394|  33.7k|        }
 3395|  44.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.0k, False: 27.6k]
  ------------------
 3396|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.0k|                                 "Too few integer digits"});
 3398|  17.0k|            return -1;
 3399|  17.0k|        }
 3400|  27.6k|        return accumulator;
 3401|  44.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.70k|    {
 2759|  1.70k|#if !SCN_DISABLE_LOCALE
 2760|  1.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.70k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.70k|#endif
 2768|       |
 2769|  1.70k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.70k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.70k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.70k|    {
 2235|  1.70k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.60k, False: 100]
  |  |  |  Branch (865:45): [True: 1.60k, False: 100]
  |  |  |  Branch (865:45): [True: 0, False: 100]
  |  |  ------------------
  ------------------
 2236|  1.60k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.60k|                                "Invalid value for tm_year"});
 2238|  1.60k|        }
 2239|    100|        st.short_year_value = y;
 2240|    100|        st.set_short_year(h);
 2241|    100|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.59k|    {
 2802|  3.59k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.59k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.59k|#endif
 2810|       |
 2811|  3.59k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.59k|            {"January", 1},
 2813|  3.59k|            {"February", 2},
 2814|  3.59k|            {"March", 3},
 2815|  3.59k|            {"April", 4},
 2816|  3.59k|            {"May", 5},
 2817|  3.59k|            {"June", 6},
 2818|  3.59k|            {"July", 7},
 2819|  3.59k|            {"August", 8},
 2820|  3.59k|            {"September", 9},
 2821|  3.59k|            {"October", 10},
 2822|  3.59k|            {"November", 11},
 2823|  3.59k|            {"December", 12},
 2824|  3.59k|        }};
 2825|  3.59k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 90, False: 3.50k]
  ------------------
 2826|     90|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     90|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.89k, False: 1.60k]
  ------------------
 2842|  1.89k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.89k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.60k|    {
 2208|  5.60k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74k, False: 2.86k]
  |  |  |  Branch (865:45): [True: 2.65k, False: 2.95k]
  |  |  |  Branch (865:45): [True: 90, False: 2.86k]
  |  |  ------------------
  ------------------
 2209|  2.74k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.74k|                                "Invalid value for tm_mon"});
 2211|  2.74k|        }
 2212|  2.86k|        t.tm_mon = m - 1;
 2213|  2.86k|        st.set_mon(h);
 2214|  2.86k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.59k|    {
 3419|  3.59k|        auto start_it = m_begin;
 3420|  3.59k|        std::size_t options_available = N;
 3421|  3.59k|        std::size_t chars_consumed = 0;
 3422|  13.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.79k, False: 3.44k]
  ------------------
 3423|  13.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.70k, False: 90]
  ------------------
 3424|  9.70k|            std::size_t i = 0;
 3425|  9.70k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 9.65k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  9.65k|            const auto ch = *m_begin;
 3430|  9.65k|            ++m_begin;
 3431|  62.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 53.3k, False: 9.65k]
  ------------------
 3432|  53.3k|                const auto cmp = static_cast<unsigned>(
 3433|  53.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  53.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 53.3k]
  ------------------
 3435|  53.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 44.9k, False: 8.37k]
  |  Branch (3435:34): [True: 42.8k, False: 2.04k]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|  10.4k|                ++i;
 3442|  10.4k|            }
 3443|  9.65k|            ++chars_consumed;
 3444|  9.65k|        }
 3445|  3.59k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 90]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     90|        return options.front().second;
 3450|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.43k, False: 1.55k]
  ------------------
 3423|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.54k, False: 1.89k]
  ------------------
 3424|  7.54k|            std::size_t i = 0;
 3425|  7.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 7.48k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  7.48k|            const auto ch = *m_begin;
 3430|  7.48k|            ++m_begin;
 3431|  50.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.5k, False: 7.48k]
  ------------------
 3432|  42.5k|                const auto cmp = static_cast<unsigned>(
 3433|  42.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.5k]
  ------------------
 3435|  42.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.4k, False: 4.03k]
  |  Branch (3435:34): [True: 36.5k, False: 1.95k]
  ------------------
 3436|  36.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.5k|                                options.end());
 3438|  36.5k|                    --options_available;
 3439|  36.5k|                    continue;
 3440|  36.5k|                }
 3441|  5.98k|                ++i;
 3442|  5.98k|            }
 3443|  7.48k|            ++chars_consumed;
 3444|  7.48k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 1.89k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  1.89k|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.61k|    {
 2848|  3.61k|#if !SCN_DISABLE_LOCALE
 2849|  3.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.61k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.61k|#endif
 2856|       |
 2857|  3.61k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.61k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.60k|    {
 2880|  3.60k|#if !SCN_DISABLE_LOCALE
 2881|  3.60k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.60k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.60k|#endif
 2888|       |
 2889|  3.60k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.60k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.60k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.60k|    {
 2198|  3.60k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.19k, False: 410]
  |  |  |  Branch (865:45): [True: 3.12k, False: 474]
  |  |  |  Branch (865:45): [True: 64, False: 410]
  |  |  ------------------
  ------------------
 2199|  3.19k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  3.19k|                                "Invalid value for tm_mday"});
 2201|  3.19k|        }
 2202|    410|        t.tm_mday = d;
 2203|    410|        st.set_mday(h);
 2204|    410|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  2.49k|    {
 2895|  2.49k|#if !SCN_DISABLE_LOCALE
 2896|  2.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.49k|#endif
 2903|       |
 2904|  2.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.49k|            {"Sunday", 0},
 2906|  2.49k|            {"Monday", 1},
 2907|  2.49k|            {"Tuesday", 2},
 2908|  2.49k|            {"Wednesday", 3},
 2909|  2.49k|            {"Thursday", 4},
 2910|  2.49k|            {"Friday", 5},
 2911|  2.49k|            {"Saturday", 6},
 2912|  2.49k|        }};
 2913|  2.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.49k|            {"Sun", 0},
 2918|  2.49k|            {"Mon", 1},
 2919|  2.49k|            {"Tue", 2},
 2920|  2.49k|            {"Wed", 3},
 2921|  2.49k|            {"Thu", 4},
 2922|  2.49k|            {"Fri", 5},
 2923|  2.49k|            {"Sat", 6},
 2924|  2.49k|        }};
 2925|  2.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.61k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.61k|        return set_error(
 2929|  1.61k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.49k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2244|    878|    {
 2245|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2246|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2247|      0|                                "Invalid value for tm_wday"});
 2248|      0|        }
 2249|    878|        t.tm_wday = d;
 2250|    878|        st.set_wday(h);
 2251|    878|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.98k|    {
 3419|  4.98k|        auto start_it = m_begin;
 3420|  4.98k|        std::size_t options_available = N;
 3421|  4.98k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 4.07k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.84k, False: 878]
  ------------------
 3424|  9.84k|            std::size_t i = 0;
 3425|  9.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 9.80k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  9.80k|            const auto ch = *m_begin;
 3430|  9.80k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.7k, False: 9.80k]
  ------------------
 3432|  39.7k|                const auto cmp = static_cast<unsigned>(
 3433|  39.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.7k]
  ------------------
 3435|  39.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.0k, False: 5.73k]
  |  Branch (3435:34): [True: 33.9k, False: 32]
  ------------------
 3436|  33.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.9k|                                options.end());
 3438|  33.9k|                    --options_available;
 3439|  33.9k|                    continue;
 3440|  33.9k|                }
 3441|  5.76k|                ++i;
 3442|  5.76k|            }
 3443|  9.80k|            ++chars_consumed;
 3444|  9.80k|        }
 3445|  4.98k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.11k, False: 878]
  ------------------
 3446|  4.11k|            m_begin = start_it;
 3447|  4.11k|            return std::nullopt;
 3448|  4.11k|        }
 3449|    878|        return options.front().second;
 3450|  4.98k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.6k|    {
 2969|  14.6k|#if !SCN_DISABLE_LOCALE
 2970|  14.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.6k|#endif
 2977|       |
 2978|  14.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.6k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  14.6k|    {
 2178|  14.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.53k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 166, False: 12.0k]
  |  |  ------------------
  ------------------
 2179|  2.53k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.53k|                                  "Invalid value for tm_hour"});
 2181|  2.53k|        }
 2182|  12.0k|        t.tm_hour = h;
 2183|  12.0k|        st.set_hour24(hdl);
 2184|  12.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.5k|    {
 2997|  14.5k|#if !SCN_DISABLE_LOCALE
 2998|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.5k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.5k|#endif
 3005|       |
 3006|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  14.5k|    {
 2168|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.64k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.62k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 18, False: 11.9k]
  |  |  ------------------
  ------------------
 2169|  2.64k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.64k|                                "Invalid value for tm_min"});
 2171|  2.64k|        }
 2172|  11.9k|        t.tm_min = m;
 2173|  11.9k|        st.set_min(h);
 2174|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  3.05k|    {
 3011|  3.05k|#if !SCN_DISABLE_LOCALE
 3012|  3.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.05k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.05k|#endif
 3019|       |
 3020|  3.05k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.05k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.05k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.05k|    {
 2158|  3.05k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 4, False: 1.47k]
  |  |  ------------------
  ------------------
 2159|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.58k|                                "Invalid value for tm_sec"});
 2161|  1.58k|        }
 2162|  1.47k|        t.tm_sec = s;
 2163|  1.47k|        st.set_sec(h);
 2164|  1.47k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.70k|    {
 3253|       |        // %m/%d/%y
 3254|  1.70k|        constexpr CharT slash = '/';
 3255|  1.70k|        on_dec_month();
 3256|  1.70k|        on_text(&slash, &slash + 1);
 3257|  1.70k|        on_day_of_month();
 3258|  1.70k|        on_text(&slash, &slash + 1);
 3259|  1.70k|        on_short_year();
 3260|  1.70k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.84k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.84k|        constexpr CharT dash = '-';
 3265|  1.84k|        on_full_year();
 3266|  1.84k|        on_text(&dash, &dash + 1);
 3267|  1.84k|        on_dec_month();
 3268|  1.84k|        on_text(&dash, &dash + 1);
 3269|  1.84k|        on_day_of_month();
 3270|  1.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  3.05k|    {
 3303|       |        // %H:%M:%S
 3304|  3.05k|        constexpr CharT colon = ':';
 3305|  3.05k|        on_24_hour();
 3306|  3.05k|        on_text(&colon, &colon + 1);
 3307|  3.05k|        on_minute();
 3308|  3.05k|        on_text(&colon, &colon + 1);
 3309|  3.05k|        on_second();
 3310|  3.05k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  14.5k|    {
 3342|  14.5k|        m_st.verify(*this);
 3343|  14.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 14.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  14.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.3k, False: 230]
  |  Branch (3346:37): [True: 92, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|     92|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     92|        }
 3349|  14.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  51.8k|    {
 3353|  51.8k|        return m_error;
 3354|  51.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  14.5k|    {
 3370|  14.5k|        return m_begin;
 3371|  14.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  31.2k|{
 3563|  31.2k|    {
 3564|  31.2k|        SCN_TRY(it,
  ------------------
  |  | 3940|  31.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  31.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  31.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 494, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    494|    }                                                  \
  |  |  |  | 3939|  31.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  30.7k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  30.7k|        ctx.range(), t, ctx.locale());
 3571|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.0k, False: 19.7k]
  |  |  ------------------
  ------------------
 3573|  11.0k|        return unexpected(e.error());
 3574|  11.0k|    }
 3575|  19.7k|    return r.get_iterator();
 3576|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  30.7k|    static_cast<    \
  |  |  935|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  30.7k|          m_begin(ranges::begin(m_range)),
 2708|  30.7k|          m_tm(t),
 2709|  30.7k|          m_loc(loc)
 2710|  30.7k|    {
 2711|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  10.1k|    {
 3358|  10.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  41.8k|    {
 3363|  41.8k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.0k, False: 30.8k]
  ------------------
 3364|  11.0k|            m_error = unexpected(e);
 3365|  11.0k|        }
 3366|  41.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  33.8k|    {
 2715|  57.3k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 33.8k, False: 23.5k]
  ------------------
 2716|  33.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 202, False: 33.6k]
  ------------------
 2717|    202|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    202|            }
 2719|  33.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.1k, False: 23.5k]
  ------------------
 2720|  10.1k|                return on_error("Invalid literal character");
 2721|  10.1k|            }
 2722|  23.5k|            ++beg;
 2723|  23.5k|            ++m_begin;
 2724|  23.5k|        }
 2725|  33.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.40k|    {
 2745|  3.40k|#if !SCN_DISABLE_LOCALE
 2746|  3.40k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.40k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.40k|#endif
 2753|       |
 2754|  3.40k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.40k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.40k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.40k|    {
 2396|  3.40k|        t.year = y;
 2397|  3.40k|        st.set_full_year(h);
 2398|  3.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  58.5k|    {
 3381|  58.5k|        int digits_read = 0;
 3382|  58.5k|        int accumulator = 0;
 3383|   102k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 102k, False: 404]
  ------------------
 3384|   102k|            const auto ch = *m_begin;
 3385|   102k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 29.5k, False: 72.9k]
  |  Branch (3385:36): [True: 19.7k, False: 53.1k]
  ------------------
 3386|  49.3k|                break;
 3387|  49.3k|            }
 3388|  53.1k|            ++m_begin;
 3389|  53.1k|            ++digits_read;
 3390|  53.1k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  53.1k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 8.82k, False: 44.3k]
  ------------------
 3392|  8.82k|                break;
 3393|  8.82k|            }
 3394|  53.1k|        }
 3395|  58.5k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 16.2k, False: 42.2k]
  ------------------
 3396|  16.2k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  16.2k|                                 "Too few integer digits"});
 3398|  16.2k|            return -1;
 3399|  16.2k|        }
 3400|  42.2k|        return accumulator;
 3401|  58.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  5.79k|    {
 2759|  5.79k|#if !SCN_DISABLE_LOCALE
 2760|  5.79k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 5.79k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  5.79k|#endif
 2768|       |
 2769|  5.79k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  5.79k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  5.79k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  5.79k|    {
 2419|  5.79k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 5.79k, False: 0]
  ------------------
 2420|  5.79k|            t.year = y;
 2421|  5.79k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  5.79k|        st.set_short_year(h);
 2426|  5.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  3.63k|    {
 2802|  3.63k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.63k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.63k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.63k|#endif
 2810|       |
 2811|  3.63k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.63k|            {"January", 1},
 2813|  3.63k|            {"February", 2},
 2814|  3.63k|            {"March", 3},
 2815|  3.63k|            {"April", 4},
 2816|  3.63k|            {"May", 5},
 2817|  3.63k|            {"June", 6},
 2818|  3.63k|            {"July", 7},
 2819|  3.63k|            {"August", 8},
 2820|  3.63k|            {"September", 9},
 2821|  3.63k|            {"October", 10},
 2822|  3.63k|            {"November", 11},
 2823|  3.63k|            {"December", 12},
 2824|  3.63k|        }};
 2825|  3.63k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 100, False: 3.53k]
  ------------------
 2826|    100|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|    100|        }
 2828|  3.53k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.53k|            {"Jan", 1},
 2830|  3.53k|            {"Feb", 2},
 2831|  3.53k|            {"Mar", 3},
 2832|  3.53k|            {"Apr", 4},
 2833|  3.53k|            {"Jun", 6},
 2834|  3.53k|            {"Jul", 7},
 2835|  3.53k|            {"Aug", 8},
 2836|  3.53k|            {"Sep", 9},
 2837|  3.53k|            {"Oct", 10},
 2838|  3.53k|            {"Nov", 11},
 2839|  3.53k|            {"Dec", 12},
 2840|  3.53k|        }};
 2841|  3.53k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.97k, False: 1.56k]
  ------------------
 2842|  1.97k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.97k|        }
 2844|  1.56k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.56k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  9.75k|    {
 2383|  9.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.63k, False: 7.12k]
  |  |  |  Branch (865:45): [True: 2.53k, False: 7.22k]
  |  |  |  Branch (865:45): [True: 104, False: 7.12k]
  |  |  ------------------
  ------------------
 2384|  2.63k|            return h.set_error(
 2385|  2.63k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.63k|        }
 2387|  7.12k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  7.12k|        st.set_mon(h);
 2389|  7.12k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.63k|    {
 3419|  3.63k|        auto start_it = m_begin;
 3420|  3.63k|        std::size_t options_available = N;
 3421|  3.63k|        std::size_t chars_consumed = 0;
 3422|  13.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.1k, False: 3.47k]
  ------------------
 3423|  13.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 10.0k, False: 100]
  ------------------
 3424|  10.0k|            std::size_t i = 0;
 3425|  10.0k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 60, False: 9.96k]
  ------------------
 3426|     60|                options_available = 0;
 3427|     60|                break;
 3428|     60|            }
 3429|  9.96k|            const auto ch = *m_begin;
 3430|  9.96k|            ++m_begin;
 3431|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 54.3k, False: 9.96k]
  ------------------
 3432|  54.3k|                const auto cmp = static_cast<unsigned>(
 3433|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 54.3k]
  ------------------
 3435|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.5k, False: 8.73k]
  |  Branch (3435:34): [True: 43.4k, False: 2.15k]
  ------------------
 3436|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  43.4k|                                options.end());
 3438|  43.4k|                    --options_available;
 3439|  43.4k|                    continue;
 3440|  43.4k|                }
 3441|  10.8k|                ++i;
 3442|  10.8k|            }
 3443|  9.96k|            ++chars_consumed;
 3444|  9.96k|        }
 3445|  3.63k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.53k, False: 100]
  ------------------
 3446|  3.53k|            m_begin = start_it;
 3447|  3.53k|            return std::nullopt;
 3448|  3.53k|        }
 3449|    100|        return options.front().second;
 3450|  3.63k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.53k|    {
 3419|  3.53k|        auto start_it = m_begin;
 3420|  3.53k|        std::size_t options_available = N;
 3421|  3.53k|        std::size_t chars_consumed = 0;
 3422|  11.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.72k, False: 1.51k]
  ------------------
 3423|  11.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.75k, False: 1.97k]
  ------------------
 3424|  7.75k|            std::size_t i = 0;
 3425|  7.75k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 7.69k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  7.69k|            const auto ch = *m_begin;
 3430|  7.69k|            ++m_begin;
 3431|  50.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.0k, False: 7.69k]
  ------------------
 3432|  43.0k|                const auto cmp = static_cast<unsigned>(
 3433|  43.0k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.0k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.0k]
  ------------------
 3435|  43.0k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.9k, False: 4.19k]
  |  Branch (3435:34): [True: 36.8k, False: 2.04k]
  ------------------
 3436|  36.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.8k|                                options.end());
 3438|  36.8k|                    --options_available;
 3439|  36.8k|                    continue;
 3440|  36.8k|                }
 3441|  6.24k|                ++i;
 3442|  6.24k|            }
 3443|  7.69k|            ++chars_consumed;
 3444|  7.69k|        }
 3445|  3.53k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.56k, False: 1.97k]
  ------------------
 3446|  1.56k|            m_begin = start_it;
 3447|  1.56k|            return std::nullopt;
 3448|  1.56k|        }
 3449|  1.97k|        return options.front().second;
 3450|  3.53k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  7.68k|    {
 2848|  7.68k|#if !SCN_DISABLE_LOCALE
 2849|  7.68k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 7.68k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  7.68k|#endif
 2856|       |
 2857|  7.68k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  7.68k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  7.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  7.66k|    {
 2880|  7.66k|#if !SCN_DISABLE_LOCALE
 2881|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 7.66k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  7.66k|#endif
 2888|       |
 2889|  7.66k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  7.66k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  7.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  7.66k|    {
 2370|  7.66k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.10k, False: 4.56k]
  |  |  |  Branch (865:45): [True: 3.03k, False: 4.62k]
  |  |  |  Branch (865:45): [True: 68, False: 4.56k]
  |  |  ------------------
  ------------------
 2371|  3.10k|            return h.set_error(
 2372|  3.10k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.10k|        }
 2374|  4.56k|        t.mday = d;
 2375|  4.56k|        st.set_mday(h);
 2376|  4.56k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  2.46k|    {
 2895|  2.46k|#if !SCN_DISABLE_LOCALE
 2896|  2.46k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.46k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.46k|#endif
 2903|       |
 2904|  2.46k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.46k|            {"Sunday", 0},
 2906|  2.46k|            {"Monday", 1},
 2907|  2.46k|            {"Tuesday", 2},
 2908|  2.46k|            {"Wednesday", 3},
 2909|  2.46k|            {"Thursday", 4},
 2910|  2.46k|            {"Friday", 5},
 2911|  2.46k|            {"Saturday", 6},
 2912|  2.46k|        }};
 2913|  2.46k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.46k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.46k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.46k|            {"Sun", 0},
 2918|  2.46k|            {"Mon", 1},
 2919|  2.46k|            {"Tue", 2},
 2920|  2.46k|            {"Wed", 3},
 2921|  2.46k|            {"Thu", 4},
 2922|  2.46k|            {"Fri", 5},
 2923|  2.46k|            {"Sat", 6},
 2924|  2.46k|        }};
 2925|  2.46k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.58k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.58k|        return set_error(
 2929|  1.58k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.46k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|    878|    {
 2433|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|    878|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|    878|        st.set_wday(h);
 2439|    878|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  4.92k|    {
 3419|  4.92k|        auto start_it = m_begin;
 3420|  4.92k|        std::size_t options_available = N;
 3421|  4.92k|        std::size_t chars_consumed = 0;
 3422|  14.6k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.6k, False: 4.00k]
  ------------------
 3423|  14.6k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.81k, False: 878]
  ------------------
 3424|  9.81k|            std::size_t i = 0;
 3425|  9.81k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 46, False: 9.76k]
  ------------------
 3426|     46|                options_available = 0;
 3427|     46|                break;
 3428|     46|            }
 3429|  9.76k|            const auto ch = *m_begin;
 3430|  9.76k|            ++m_begin;
 3431|  49.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.3k, False: 9.76k]
  ------------------
 3432|  39.3k|                const auto cmp = static_cast<unsigned>(
 3433|  39.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.3k]
  ------------------
 3435|  39.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 33.6k, False: 5.73k]
  |  Branch (3435:34): [True: 33.5k, False: 60]
  ------------------
 3436|  33.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.5k|                                options.end());
 3438|  33.5k|                    --options_available;
 3439|  33.5k|                    continue;
 3440|  33.5k|                }
 3441|  5.79k|                ++i;
 3442|  5.79k|            }
 3443|  9.76k|            ++chars_consumed;
 3444|  9.76k|        }
 3445|  4.92k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.05k, False: 878]
  ------------------
 3446|  4.05k|            m_begin = start_it;
 3447|  4.05k|            return std::nullopt;
 3448|  4.05k|        }
 3449|    878|        return options.front().second;
 3450|  4.92k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.4k|    {
 2969|  15.4k|#if !SCN_DISABLE_LOCALE
 2970|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.4k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.4k|#endif
 2977|       |
 2978|  15.4k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  15.4k|    {
 2344|  15.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 13.2k]
  |  |  |  Branch (865:45): [True: 2.05k, False: 13.4k]
  |  |  |  Branch (865:45): [True: 182, False: 13.2k]
  |  |  ------------------
  ------------------
 2345|  2.23k|            return hdl.set_error(
 2346|  2.23k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.23k|        }
 2348|  13.2k|        t.hour = h;
 2349|  13.2k|        st.set_hour24(hdl);
 2350|  13.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.4k|    {
 2997|  15.4k|#if !SCN_DISABLE_LOCALE
 2998|  15.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.4k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.4k|#endif
 3005|       |
 3006|  15.4k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.4k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  15.4k|    {
 2331|  15.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.54k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 2.52k, False: 12.9k]
  |  |  |  Branch (865:45): [True: 26, False: 12.9k]
  |  |  ------------------
  ------------------
 2332|  2.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.54k|                                "Invalid value for minutes"});
 2334|  2.54k|        }
 2335|  12.9k|        t.min = m;
 2336|  12.9k|        st.set_min(h);
 2337|  12.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  3.03k|    {
 3011|  3.03k|#if !SCN_DISABLE_LOCALE
 3012|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.03k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.03k|#endif
 3019|       |
 3020|  3.03k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.03k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.03k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.03k|    {
 2318|  3.03k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54k, False: 1.48k]
  |  |  |  Branch (865:45): [True: 1.54k, False: 1.49k]
  |  |  |  Branch (865:45): [True: 6, False: 1.48k]
  |  |  ------------------
  ------------------
 2319|  1.54k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.54k|                                "Invalid value for seconds"});
 2321|  1.54k|        }
 2322|  1.48k|        t.sec = s;
 2323|  1.48k|        st.set_sec(h);
 2324|  1.48k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  5.79k|    {
 3253|       |        // %m/%d/%y
 3254|  5.79k|        constexpr CharT slash = '/';
 3255|  5.79k|        on_dec_month();
 3256|  5.79k|        on_text(&slash, &slash + 1);
 3257|  5.79k|        on_day_of_month();
 3258|  5.79k|        on_text(&slash, &slash + 1);
 3259|  5.79k|        on_short_year();
 3260|  5.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.81k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.81k|        constexpr CharT dash = '-';
 3265|  1.81k|        on_full_year();
 3266|  1.81k|        on_text(&dash, &dash + 1);
 3267|  1.81k|        on_dec_month();
 3268|  1.81k|        on_text(&dash, &dash + 1);
 3269|  1.81k|        on_day_of_month();
 3270|  1.81k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  12.4k|    {
 3295|       |        // %H:%M
 3296|  12.4k|        constexpr CharT colon = ':';
 3297|  12.4k|        on_24_hour();
 3298|  12.4k|        on_text(&colon, &colon + 1);
 3299|  12.4k|        on_minute();
 3300|  12.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  3.03k|    {
 3303|       |        // %H:%M:%S
 3304|  3.03k|        constexpr CharT colon = ':';
 3305|  3.03k|        on_24_hour();
 3306|  3.03k|        on_text(&colon, &colon + 1);
 3307|  3.03k|        on_minute();
 3308|  3.03k|        on_text(&colon, &colon + 1);
 3309|  3.03k|        on_second();
 3310|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  19.7k|    {
 3342|  19.7k|        m_st.verify(*this);
 3343|  19.7k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 19.7k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  19.7k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 19.5k, False: 230]
  |  Branch (3346:37): [True: 4.22k, False: 15.2k]
  |  Branch (3346:60): [True: 0, False: 15.2k]
  ------------------
 3347|  4.22k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  4.22k|        }
 3349|  19.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  4.33k|    {
 2483|  4.33k|        assert(t.year);
 2484|  4.33k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  4.33k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  61.6k|    {
 3353|  61.6k|        return m_error;
 3354|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  19.7k|    {
 3370|  19.7k|        return m_begin;
 3371|  19.7k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  26.0k|{
 3563|  26.0k|    {
 3564|  26.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 25.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  25.8k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  25.8k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  25.8k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  25.8k|        ctx.range(), t, ctx.locale());
 3571|  25.8k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  25.8k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 14.5k]
  |  |  ------------------
  ------------------
 3573|  11.2k|        return unexpected(e.error());
 3574|  11.2k|    }
 3575|  14.5k|    return r.get_iterator();
 3576|  25.8k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  25.8k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  25.8k|    static_cast<    \
  |  |  935|  25.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  25.8k|          m_begin(ranges::begin(m_range)),
 2708|  25.8k|          m_tm(t),
 2709|  25.8k|          m_loc(loc)
 2710|  25.8k|    {
 2711|  25.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  10.5k|    {
 3358|  10.5k|        set_error({scan_error::invalid_format_string, msg});
 3359|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  43.6k|    {
 3363|  43.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 11.2k, False: 32.3k]
  ------------------
 3364|  11.2k|            m_error = unexpected(e);
 3365|  11.2k|        }
 3366|  43.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  24.8k|    {
 2715|  39.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 24.8k, False: 14.2k]
  ------------------
 2716|  24.8k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 160, False: 24.7k]
  ------------------
 2717|    160|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    160|            }
 2719|  24.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 10.5k, False: 14.2k]
  ------------------
 2720|  10.5k|                return on_error("Invalid literal character");
 2721|  10.5k|            }
 2722|  14.2k|            ++beg;
 2723|  14.2k|            ++m_begin;
 2724|  14.2k|        }
 2725|  24.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.46k|    {
 2745|  3.46k|#if !SCN_DISABLE_LOCALE
 2746|  3.46k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.46k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.46k|#endif
 2753|       |
 2754|  3.46k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.46k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.46k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.46k|    {
 2396|  3.46k|        t.year = y;
 2397|  3.46k|        st.set_full_year(h);
 2398|  3.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  44.6k|    {
 3381|  44.6k|        int digits_read = 0;
 3382|  44.6k|        int accumulator = 0;
 3383|  74.0k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 73.7k, False: 334]
  ------------------
 3384|  73.7k|            const auto ch = *m_begin;
 3385|  73.7k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 21.5k, False: 52.2k]
  |  Branch (3385:36): [True: 18.4k, False: 33.7k]
  ------------------
 3386|  39.9k|                break;
 3387|  39.9k|            }
 3388|  33.7k|            ++m_begin;
 3389|  33.7k|            ++digits_read;
 3390|  33.7k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.7k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 4.37k, False: 29.3k]
  ------------------
 3392|  4.37k|                break;
 3393|  4.37k|            }
 3394|  33.7k|        }
 3395|  44.6k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 17.0k, False: 27.6k]
  ------------------
 3396|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  17.0k|                                 "Too few integer digits"});
 3398|  17.0k|            return -1;
 3399|  17.0k|        }
 3400|  27.6k|        return accumulator;
 3401|  44.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.70k|    {
 2759|  1.70k|#if !SCN_DISABLE_LOCALE
 2760|  1.70k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.70k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.70k|#endif
 2768|       |
 2769|  1.70k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.70k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.70k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.70k|    {
 2419|  1.70k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.70k, False: 0]
  ------------------
 2420|  1.70k|            t.year = y;
 2421|  1.70k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.70k|        st.set_short_year(h);
 2426|  1.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  3.59k|    {
 2802|  3.59k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.59k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.59k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.59k|#endif
 2810|       |
 2811|  3.59k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.59k|            {"January", 1},
 2813|  3.59k|            {"February", 2},
 2814|  3.59k|            {"March", 3},
 2815|  3.59k|            {"April", 4},
 2816|  3.59k|            {"May", 5},
 2817|  3.59k|            {"June", 6},
 2818|  3.59k|            {"July", 7},
 2819|  3.59k|            {"August", 8},
 2820|  3.59k|            {"September", 9},
 2821|  3.59k|            {"October", 10},
 2822|  3.59k|            {"November", 11},
 2823|  3.59k|            {"December", 12},
 2824|  3.59k|        }};
 2825|  3.59k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 90, False: 3.50k]
  ------------------
 2826|     90|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     90|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 1.89k, False: 1.60k]
  ------------------
 2842|  1.89k|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|  1.89k|        }
 2844|  1.60k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.60k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  5.60k|    {
 2383|  5.60k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  8.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74k, False: 2.86k]
  |  |  |  Branch (865:45): [True: 2.65k, False: 2.95k]
  |  |  |  Branch (865:45): [True: 90, False: 2.86k]
  |  |  ------------------
  ------------------
 2384|  2.74k|            return h.set_error(
 2385|  2.74k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.74k|        }
 2387|  2.86k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  2.86k|        st.set_mon(h);
 2389|  2.86k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.59k|    {
 3419|  3.59k|        auto start_it = m_begin;
 3420|  3.59k|        std::size_t options_available = N;
 3421|  3.59k|        std::size_t chars_consumed = 0;
 3422|  13.2k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.79k, False: 3.44k]
  ------------------
 3423|  13.2k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.70k, False: 90]
  ------------------
 3424|  9.70k|            std::size_t i = 0;
 3425|  9.70k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 56, False: 9.65k]
  ------------------
 3426|     56|                options_available = 0;
 3427|     56|                break;
 3428|     56|            }
 3429|  9.65k|            const auto ch = *m_begin;
 3430|  9.65k|            ++m_begin;
 3431|  62.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 53.3k, False: 9.65k]
  ------------------
 3432|  53.3k|                const auto cmp = static_cast<unsigned>(
 3433|  53.3k|                    ch ^ options[i].first[chars_consumed]);
 3434|  53.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 53.3k]
  ------------------
 3435|  53.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 44.9k, False: 8.37k]
  |  Branch (3435:34): [True: 42.8k, False: 2.04k]
  ------------------
 3436|  42.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.8k|                                options.end());
 3438|  42.8k|                    --options_available;
 3439|  42.8k|                    continue;
 3440|  42.8k|                }
 3441|  10.4k|                ++i;
 3442|  10.4k|            }
 3443|  9.65k|            ++chars_consumed;
 3444|  9.65k|        }
 3445|  3.59k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 90]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     90|        return options.front().second;
 3450|  3.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  10.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 9.43k, False: 1.55k]
  ------------------
 3423|  10.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 7.54k, False: 1.89k]
  ------------------
 3424|  7.54k|            std::size_t i = 0;
 3425|  7.54k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 52, False: 7.48k]
  ------------------
 3426|     52|                options_available = 0;
 3427|     52|                break;
 3428|     52|            }
 3429|  7.48k|            const auto ch = *m_begin;
 3430|  7.48k|            ++m_begin;
 3431|  50.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 42.5k, False: 7.48k]
  ------------------
 3432|  42.5k|                const auto cmp = static_cast<unsigned>(
 3433|  42.5k|                    ch ^ options[i].first[chars_consumed]);
 3434|  42.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 42.5k]
  ------------------
 3435|  42.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.4k, False: 4.03k]
  |  Branch (3435:34): [True: 36.5k, False: 1.95k]
  ------------------
 3436|  36.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  36.5k|                                options.end());
 3438|  36.5k|                    --options_available;
 3439|  36.5k|                    continue;
 3440|  36.5k|                }
 3441|  5.98k|                ++i;
 3442|  5.98k|            }
 3443|  7.48k|            ++chars_consumed;
 3444|  7.48k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.60k, False: 1.89k]
  ------------------
 3446|  1.60k|            m_begin = start_it;
 3447|  1.60k|            return std::nullopt;
 3448|  1.60k|        }
 3449|  1.89k|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.61k|    {
 2848|  3.61k|#if !SCN_DISABLE_LOCALE
 2849|  3.61k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.61k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.61k|#endif
 2856|       |
 2857|  3.61k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.61k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.60k|    {
 2880|  3.60k|#if !SCN_DISABLE_LOCALE
 2881|  3.60k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.60k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.60k|#endif
 2888|       |
 2889|  3.60k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.60k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.60k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.60k|    {
 2370|  3.60k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.19k, False: 410]
  |  |  |  Branch (865:45): [True: 3.12k, False: 474]
  |  |  |  Branch (865:45): [True: 64, False: 410]
  |  |  ------------------
  ------------------
 2371|  3.19k|            return h.set_error(
 2372|  3.19k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  3.19k|        }
 2374|    410|        t.mday = d;
 2375|    410|        st.set_mday(h);
 2376|    410|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  2.49k|    {
 2895|  2.49k|#if !SCN_DISABLE_LOCALE
 2896|  2.49k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.49k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.49k|#endif
 2903|       |
 2904|  2.49k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.49k|            {"Sunday", 0},
 2906|  2.49k|            {"Monday", 1},
 2907|  2.49k|            {"Tuesday", 2},
 2908|  2.49k|            {"Wednesday", 3},
 2909|  2.49k|            {"Thursday", 4},
 2910|  2.49k|            {"Friday", 5},
 2911|  2.49k|            {"Saturday", 6},
 2912|  2.49k|        }};
 2913|  2.49k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.49k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.49k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.49k|            {"Sun", 0},
 2918|  2.49k|            {"Mon", 1},
 2919|  2.49k|            {"Tue", 2},
 2920|  2.49k|            {"Wed", 3},
 2921|  2.49k|            {"Thu", 4},
 2922|  2.49k|            {"Fri", 5},
 2923|  2.49k|            {"Sat", 6},
 2924|  2.49k|        }};
 2925|  2.49k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 878, False: 1.61k]
  ------------------
 2926|    878|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|    878|        }
 2928|  1.61k|        return set_error(
 2929|  1.61k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.49k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2432|    878|    {
 2433|    878|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  |  865|  1.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  |  Branch (865:45): [True: 0, False: 878]
  |  |  ------------------
  ------------------
 2434|      0|            return h.set_error(
 2435|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 2436|      0|        }
 2437|    878|        t.wday = weekday{static_cast<unsigned>(d)};
 2438|    878|        st.set_wday(h);
 2439|    878|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  4.98k|    {
 3419|  4.98k|        auto start_it = m_begin;
 3420|  4.98k|        std::size_t options_available = N;
 3421|  4.98k|        std::size_t chars_consumed = 0;
 3422|  14.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 10.7k, False: 4.07k]
  ------------------
 3423|  14.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 9.84k, False: 878]
  ------------------
 3424|  9.84k|            std::size_t i = 0;
 3425|  9.84k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 9.80k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  9.80k|            const auto ch = *m_begin;
 3430|  9.80k|            ++m_begin;
 3431|  49.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.7k, False: 9.80k]
  ------------------
 3432|  39.7k|                const auto cmp = static_cast<unsigned>(
 3433|  39.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.7k]
  ------------------
 3435|  39.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 34.0k, False: 5.73k]
  |  Branch (3435:34): [True: 33.9k, False: 32]
  ------------------
 3436|  33.9k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  33.9k|                                options.end());
 3438|  33.9k|                    --options_available;
 3439|  33.9k|                    continue;
 3440|  33.9k|                }
 3441|  5.76k|                ++i;
 3442|  5.76k|            }
 3443|  9.80k|            ++chars_consumed;
 3444|  9.80k|        }
 3445|  4.98k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 4.11k, False: 878]
  ------------------
 3446|  4.11k|            m_begin = start_it;
 3447|  4.11k|            return std::nullopt;
 3448|  4.11k|        }
 3449|    878|        return options.front().second;
 3450|  4.98k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  14.6k|    {
 2969|  14.6k|#if !SCN_DISABLE_LOCALE
 2970|  14.6k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 14.6k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  14.6k|#endif
 2977|       |
 2978|  14.6k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  14.6k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  14.6k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  14.6k|    {
 2344|  14.6k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  26.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.53k, False: 12.0k]
  |  |  |  Branch (865:45): [True: 2.37k, False: 12.2k]
  |  |  |  Branch (865:45): [True: 166, False: 12.0k]
  |  |  ------------------
  ------------------
 2345|  2.53k|            return hdl.set_error(
 2346|  2.53k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.53k|        }
 2348|  12.0k|        t.hour = h;
 2349|  12.0k|        st.set_hour24(hdl);
 2350|  12.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  14.5k|    {
 2997|  14.5k|#if !SCN_DISABLE_LOCALE
 2998|  14.5k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 14.5k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  14.5k|#endif
 3005|       |
 3006|  14.5k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  14.5k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  14.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  14.5k|    {
 2331|  14.5k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.64k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 2.62k, False: 11.9k]
  |  |  |  Branch (865:45): [True: 18, False: 11.9k]
  |  |  ------------------
  ------------------
 2332|  2.64k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.64k|                                "Invalid value for minutes"});
 2334|  2.64k|        }
 2335|  11.9k|        t.min = m;
 2336|  11.9k|        st.set_min(h);
 2337|  11.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  3.05k|    {
 3011|  3.05k|#if !SCN_DISABLE_LOCALE
 3012|  3.05k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.05k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.05k|#endif
 3019|       |
 3020|  3.05k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.05k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.05k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.05k|    {
 2318|  3.05k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.58k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 1.57k, False: 1.47k]
  |  |  |  Branch (865:45): [True: 4, False: 1.47k]
  |  |  ------------------
  ------------------
 2319|  1.58k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.58k|                                "Invalid value for seconds"});
 2321|  1.58k|        }
 2322|  1.47k|        t.sec = s;
 2323|  1.47k|        st.set_sec(h);
 2324|  1.47k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.70k|    {
 3253|       |        // %m/%d/%y
 3254|  1.70k|        constexpr CharT slash = '/';
 3255|  1.70k|        on_dec_month();
 3256|  1.70k|        on_text(&slash, &slash + 1);
 3257|  1.70k|        on_day_of_month();
 3258|  1.70k|        on_text(&slash, &slash + 1);
 3259|  1.70k|        on_short_year();
 3260|  1.70k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.84k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.84k|        constexpr CharT dash = '-';
 3265|  1.84k|        on_full_year();
 3266|  1.84k|        on_text(&dash, &dash + 1);
 3267|  1.84k|        on_dec_month();
 3268|  1.84k|        on_text(&dash, &dash + 1);
 3269|  1.84k|        on_day_of_month();
 3270|  1.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  11.5k|    {
 3295|       |        // %H:%M
 3296|  11.5k|        constexpr CharT colon = ':';
 3297|  11.5k|        on_24_hour();
 3298|  11.5k|        on_text(&colon, &colon + 1);
 3299|  11.5k|        on_minute();
 3300|  11.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  3.05k|    {
 3303|       |        // %H:%M:%S
 3304|  3.05k|        constexpr CharT colon = ':';
 3305|  3.05k|        on_24_hour();
 3306|  3.05k|        on_text(&colon, &colon + 1);
 3307|  3.05k|        on_minute();
 3308|  3.05k|        on_text(&colon, &colon + 1);
 3309|  3.05k|        on_second();
 3310|  3.05k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  14.5k|    {
 3342|  14.5k|        m_st.verify(*this);
 3343|  14.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 14.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  14.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 14.3k, False: 230]
  |  Branch (3346:37): [True: 92, False: 14.2k]
  |  Branch (3346:60): [True: 0, False: 14.2k]
  ------------------
 3347|     92|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     92|        }
 3349|  14.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  51.8k|    {
 3353|  51.8k|        return m_error;
 3354|  51.8k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  14.5k|    {
 3370|  14.5k|        return m_begin;
 3371|  14.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  97.9k|    {
 3363|  97.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 75.2k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  97.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.50k|    {
 2218|  6.50k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.50k|        t.tm_year = y - 1900;
 2223|  6.50k|        st.set_full_year(h);
 2224|  6.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.25k|    {
 2235|  3.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.23k|                                "Invalid value for tm_year"});
 2238|  3.23k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.81k|    {
 2208|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2209|  6.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.20k|                                "Invalid value for tm_mon"});
 2211|  6.20k|        }
 2212|    602|        t.tm_mon = m - 1;
 2213|    602|        st.set_mon(h);
 2214|    602|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.50k|    {
 2198|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.47k|                                "Invalid value for tm_mday"});
 2201|  6.47k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.0k|    {
 2178|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2179|  6.07k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.07k|                                  "Invalid value for tm_hour"});
 2181|  6.07k|        }
 2182|  5.95k|        t.tm_hour = h;
 2183|  5.95k|        st.set_hour24(hdl);
 2184|  5.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.0k|    {
 2168|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2169|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.15k|                                "Invalid value for tm_min"});
 2171|  6.15k|        }
 2172|  5.87k|        t.tm_min = m;
 2173|  5.87k|        st.set_min(h);
 2174|  5.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.31k|    {
 2158|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2159|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.22k|                                "Invalid value for tm_sec"});
 2161|  3.22k|        }
 2162|     92|        t.tm_sec = s;
 2163|     92|        st.set_sec(h);
 2164|     92|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  86.6k|{
  250|  86.6k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  86.6k|        .transform_error(impl::make_eof_scan_error);
  252|  86.6k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  97.9k|    {
 3363|  97.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 75.2k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  97.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.50k|    {
 2218|  6.50k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.50k|        t.tm_year = y - 1900;
 2223|  6.50k|        st.set_full_year(h);
 2224|  6.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.25k|    {
 2235|  3.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.23k|                                "Invalid value for tm_year"});
 2238|  3.23k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.81k|    {
 2208|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2209|  6.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.20k|                                "Invalid value for tm_mon"});
 2211|  6.20k|        }
 2212|    602|        t.tm_mon = m - 1;
 2213|    602|        st.set_mon(h);
 2214|    602|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.50k|    {
 2198|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.47k|                                "Invalid value for tm_mday"});
 2201|  6.47k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.0k|    {
 2178|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2179|  6.07k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.07k|                                  "Invalid value for tm_hour"});
 2181|  6.07k|        }
 2182|  5.95k|        t.tm_hour = h;
 2183|  5.95k|        st.set_hour24(hdl);
 2184|  5.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.0k|    {
 2168|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2169|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.15k|                                "Invalid value for tm_min"});
 2171|  6.15k|        }
 2172|  5.87k|        t.tm_min = m;
 2173|  5.87k|        st.set_min(h);
 2174|  5.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.31k|    {
 2158|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2159|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.22k|                                "Invalid value for tm_sec"});
 2161|  3.22k|        }
 2162|     92|        t.tm_sec = s;
 2163|     92|        st.set_sec(h);
 2164|     92|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  97.9k|    {
 3363|  97.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 75.2k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  97.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.50k|    {
 2218|  6.50k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.50k|        t.tm_year = y - 1900;
 2223|  6.50k|        st.set_full_year(h);
 2224|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.25k|    {
 2235|  3.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.23k|                                "Invalid value for tm_year"});
 2238|  3.23k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.81k|    {
 2208|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2209|  6.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.20k|                                "Invalid value for tm_mon"});
 2211|  6.20k|        }
 2212|    602|        t.tm_mon = m - 1;
 2213|    602|        st.set_mon(h);
 2214|    602|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.50k|    {
 2198|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.47k|                                "Invalid value for tm_mday"});
 2201|  6.47k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.0k|    {
 2178|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2179|  6.07k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.07k|                                  "Invalid value for tm_hour"});
 2181|  6.07k|        }
 2182|  5.95k|        t.tm_hour = h;
 2183|  5.95k|        st.set_hour24(hdl);
 2184|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.0k|    {
 2168|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2169|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.15k|                                "Invalid value for tm_min"});
 2171|  6.15k|        }
 2172|  5.87k|        t.tm_min = m;
 2173|  5.87k|        st.set_min(h);
 2174|  5.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.31k|    {
 2158|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2159|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.22k|                                "Invalid value for tm_sec"});
 2161|  3.22k|        }
 2162|     92|        t.tm_sec = s;
 2163|     92|        st.set_sec(h);
 2164|     92|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  97.9k|    {
 3363|  97.9k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 75.2k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  97.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  6.50k|    {
 2218|  6.50k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  6.50k|        t.tm_year = y - 1900;
 2223|  6.50k|        st.set_full_year(h);
 2224|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  3.25k|    {
 2235|  3.25k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 3.23k, False: 18]
  |  |  |  Branch (865:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2236|  3.23k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  3.23k|                                "Invalid value for tm_year"});
 2238|  3.23k|        }
 2239|     18|        st.short_year_value = y;
 2240|     18|        st.set_short_year(h);
 2241|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  6.81k|    {
 2208|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2209|  6.20k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  6.20k|                                "Invalid value for tm_mon"});
 2211|  6.20k|        }
 2212|    602|        t.tm_mon = m - 1;
 2213|    602|        st.set_mon(h);
 2214|    602|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  6.50k|    {
 2198|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2199|  6.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  6.47k|                                "Invalid value for tm_mday"});
 2201|  6.47k|        }
 2202|     30|        t.tm_mday = d;
 2203|     30|        st.set_mday(h);
 2204|     30|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  12.0k|    {
 2178|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2179|  6.07k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  6.07k|                                  "Invalid value for tm_hour"});
 2181|  6.07k|        }
 2182|  5.95k|        t.tm_hour = h;
 2183|  5.95k|        st.set_hour24(hdl);
 2184|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  12.0k|    {
 2168|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2169|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  6.15k|                                "Invalid value for tm_min"});
 2171|  6.15k|        }
 2172|  5.87k|        t.tm_min = m;
 2173|  5.87k|        st.set_min(h);
 2174|  5.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  3.31k|    {
 2158|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2159|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  3.22k|                                "Invalid value for tm_sec"});
 2161|  3.22k|        }
 2162|     92|        t.tm_sec = s;
 2163|     92|        st.set_sec(h);
 2164|     92|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  94.6k|    {
 3363|  94.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 71.9k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  94.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.50k|    {
 2396|  6.50k|        t.year = y;
 2397|  6.50k|        st.set_full_year(h);
 2398|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.25k|    {
 2419|  3.25k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.25k, False: 0]
  ------------------
 2420|  3.25k|            t.year = y;
 2421|  3.25k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.25k|        st.set_short_year(h);
 2426|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.81k|    {
 2383|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2384|  6.20k|            return h.set_error(
 2385|  6.20k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.20k|        }
 2387|    602|        t.mon = month{static_cast<unsigned>(m)};
 2388|    602|        st.set_mon(h);
 2389|    602|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.50k|    {
 2370|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2371|  6.47k|            return h.set_error(
 2372|  6.47k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.47k|        }
 2374|     30|        t.mday = d;
 2375|     30|        st.set_mday(h);
 2376|     30|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  12.0k|    {
 2344|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2345|  6.07k|            return hdl.set_error(
 2346|  6.07k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.07k|        }
 2348|  5.95k|        t.hour = h;
 2349|  5.95k|        st.set_hour24(hdl);
 2350|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  12.0k|    {
 2331|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2332|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.15k|                                "Invalid value for minutes"});
 2334|  6.15k|        }
 2335|  5.87k|        t.min = m;
 2336|  5.87k|        st.set_min(h);
 2337|  5.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.31k|    {
 2318|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2319|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.22k|                                "Invalid value for seconds"});
 2321|  3.22k|        }
 2322|     92|        t.sec = s;
 2323|     92|        st.set_sec(h);
 2324|     92|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  28.8k|{
 3563|  28.8k|    {
 3564|  28.8k|        SCN_TRY(it,
  ------------------
  |  | 3940|  28.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  28.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  28.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 326, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    326|    }                                                  \
  |  |  |  | 3939|  28.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  28.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  28.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  28.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  28.5k|        ctx.range(), t, ctx.locale());
 3571|  28.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  28.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.6k, False: 5.86k]
  |  |  ------------------
  ------------------
 3573|  22.6k|        return unexpected(e.error());
 3574|  22.6k|    }
 3575|  5.86k|    return r.get_iterator();
 3576|  28.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  28.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  28.5k|    static_cast<    \
  |  |  935|  28.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  28.5k|          m_begin(ranges::begin(m_range)),
 2708|  28.5k|          m_tm(t),
 2709|  28.5k|          m_loc(loc)
 2710|  28.5k|    {
 2711|  28.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  22.1k|    {
 3358|  22.1k|        set_error({scan_error::invalid_format_string, msg});
 3359|  22.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  94.6k|    {
 3363|  94.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 22.6k, False: 71.9k]
  ------------------
 3364|  22.6k|            m_error = unexpected(e);
 3365|  22.6k|        }
 3366|  94.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  28.3k|    {
 2715|  34.4k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 28.3k, False: 6.07k]
  ------------------
 2716|  28.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 116, False: 28.2k]
  ------------------
 2717|    116|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    116|            }
 2719|  28.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 22.1k, False: 6.07k]
  ------------------
 2720|  22.1k|                return on_error("Invalid literal character");
 2721|  22.1k|            }
 2722|  6.07k|            ++beg;
 2723|  6.07k|            ++m_begin;
 2724|  6.07k|        }
 2725|  28.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  6.50k|    {
 2745|  6.50k|#if !SCN_DISABLE_LOCALE
 2746|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 6.50k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  6.50k|#endif
 2753|       |
 2754|  6.50k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  6.50k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  6.50k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  6.50k|    {
 2396|  6.50k|        t.year = y;
 2397|  6.50k|        st.set_full_year(h);
 2398|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  50.1k|    {
 3381|  50.1k|        int digits_read = 0;
 3382|  50.1k|        int accumulator = 0;
 3383|  63.2k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 63.0k, False: 236]
  ------------------
 3384|  63.0k|            const auto ch = *m_begin;
 3385|  63.0k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 28.5k, False: 34.4k]
  |  Branch (3385:36): [True: 19.3k, False: 15.0k]
  ------------------
 3386|  47.9k|                break;
 3387|  47.9k|            }
 3388|  15.0k|            ++m_begin;
 3389|  15.0k|            ++digits_read;
 3390|  15.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  15.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 1.99k, False: 13.0k]
  ------------------
 3392|  1.99k|                break;
 3393|  1.99k|            }
 3394|  15.0k|        }
 3395|  50.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 37.7k, False: 12.4k]
  ------------------
 3396|  37.7k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  37.7k|                                 "Too few integer digits"});
 3398|  37.7k|            return -1;
 3399|  37.7k|        }
 3400|  12.4k|        return accumulator;
 3401|  50.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  3.25k|    {
 2759|  3.25k|#if !SCN_DISABLE_LOCALE
 2760|  3.25k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 3.25k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  3.25k|#endif
 2768|       |
 2769|  3.25k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  3.25k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  3.25k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  3.25k|    {
 2419|  3.25k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 3.25k, False: 0]
  ------------------
 2420|  3.25k|            t.year = y;
 2421|  3.25k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  3.25k|        st.set_short_year(h);
 2426|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  3.52k|    {
 2802|  3.52k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  3.52k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 3.52k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  3.52k|#endif
 2810|       |
 2811|  3.52k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  3.52k|            {"January", 1},
 2813|  3.52k|            {"February", 2},
 2814|  3.52k|            {"March", 3},
 2815|  3.52k|            {"April", 4},
 2816|  3.52k|            {"May", 5},
 2817|  3.52k|            {"June", 6},
 2818|  3.52k|            {"July", 7},
 2819|  3.52k|            {"August", 8},
 2820|  3.52k|            {"September", 9},
 2821|  3.52k|            {"October", 10},
 2822|  3.52k|            {"November", 11},
 2823|  3.52k|            {"December", 12},
 2824|  3.52k|        }};
 2825|  3.52k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 14, False: 3.50k]
  ------------------
 2826|     14|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     14|        }
 2828|  3.50k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  3.50k|            {"Jan", 1},
 2830|  3.50k|            {"Feb", 2},
 2831|  3.50k|            {"Mar", 3},
 2832|  3.50k|            {"Apr", 4},
 2833|  3.50k|            {"Jun", 6},
 2834|  3.50k|            {"Jul", 7},
 2835|  3.50k|            {"Aug", 8},
 2836|  3.50k|            {"Sep", 9},
 2837|  3.50k|            {"Oct", 10},
 2838|  3.50k|            {"Nov", 11},
 2839|  3.50k|            {"Dec", 12},
 2840|  3.50k|        }};
 2841|  3.50k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 274, False: 3.23k]
  ------------------
 2842|    274|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    274|        }
 2844|  3.23k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  3.23k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  6.81k|    {
 2383|  6.81k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.20k, False: 602]
  |  |  |  Branch (865:45): [True: 6.18k, False: 628]
  |  |  |  Branch (865:45): [True: 26, False: 602]
  |  |  ------------------
  ------------------
 2384|  6.20k|            return h.set_error(
 2385|  6.20k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  6.20k|        }
 2387|    602|        t.mon = month{static_cast<unsigned>(m)};
 2388|    602|        st.set_mon(h);
 2389|    602|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.52k|    {
 3419|  3.52k|        auto start_it = m_begin;
 3420|  3.52k|        std::size_t options_available = N;
 3421|  3.52k|        std::size_t chars_consumed = 0;
 3422|  7.93k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.46k, False: 3.47k]
  ------------------
 3423|  7.93k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.45k, False: 14]
  ------------------
 3424|  4.45k|            std::size_t i = 0;
 3425|  4.45k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.41k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.41k|            const auto ch = *m_begin;
 3430|  4.41k|            ++m_begin;
 3431|  48.1k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 43.7k, False: 4.41k]
  ------------------
 3432|  43.7k|                const auto cmp = static_cast<unsigned>(
 3433|  43.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  43.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 43.7k]
  ------------------
 3435|  43.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 42.5k, False: 1.21k]
  |  Branch (3435:34): [True: 42.2k, False: 364]
  ------------------
 3436|  42.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  42.2k|                                options.end());
 3438|  42.2k|                    --options_available;
 3439|  42.2k|                    continue;
 3440|  42.2k|                }
 3441|  1.57k|                ++i;
 3442|  1.57k|            }
 3443|  4.41k|            ++chars_consumed;
 3444|  4.41k|        }
 3445|  3.52k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.50k, False: 14]
  ------------------
 3446|  3.50k|            m_begin = start_it;
 3447|  3.50k|            return std::nullopt;
 3448|  3.50k|        }
 3449|     14|        return options.front().second;
 3450|  3.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  3.50k|    {
 3419|  3.50k|        auto start_it = m_begin;
 3420|  3.50k|        std::size_t options_available = N;
 3421|  3.50k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 4.40k, False: 3.20k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.13k, False: 274]
  ------------------
 3424|  4.13k|            std::size_t i = 0;
 3425|  4.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 26, False: 4.10k]
  ------------------
 3426|     26|                options_available = 0;
 3427|     26|                break;
 3428|     26|            }
 3429|  4.10k|            const auto ch = *m_begin;
 3430|  4.10k|            ++m_begin;
 3431|  43.3k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 39.2k, False: 4.10k]
  ------------------
 3432|  39.2k|                const auto cmp = static_cast<unsigned>(
 3433|  39.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  39.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 39.2k]
  ------------------
 3435|  39.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 38.6k, False: 602]
  |  Branch (3435:34): [True: 38.2k, False: 338]
  ------------------
 3436|  38.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  38.2k|                                options.end());
 3438|  38.2k|                    --options_available;
 3439|  38.2k|                    continue;
 3440|  38.2k|                }
 3441|    940|                ++i;
 3442|    940|            }
 3443|  4.10k|            ++chars_consumed;
 3444|  4.10k|        }
 3445|  3.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 3.23k, False: 274]
  ------------------
 3446|  3.23k|            m_begin = start_it;
 3447|  3.23k|            return std::nullopt;
 3448|  3.23k|        }
 3449|    274|        return options.front().second;
 3450|  3.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  6.52k|    {
 2848|  6.52k|#if !SCN_DISABLE_LOCALE
 2849|  6.52k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 6.52k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  6.52k|#endif
 2856|       |
 2857|  6.52k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  6.52k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  6.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  6.50k|    {
 2880|  6.50k|#if !SCN_DISABLE_LOCALE
 2881|  6.50k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 6.50k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  6.50k|#endif
 2888|       |
 2889|  6.50k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  6.50k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  6.50k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  6.50k|    {
 2370|  6.50k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.47k, False: 30]
  |  |  |  Branch (865:45): [True: 6.46k, False: 38]
  |  |  |  Branch (865:45): [True: 8, False: 30]
  |  |  ------------------
  ------------------
 2371|  6.47k|            return h.set_error(
 2372|  6.47k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  6.47k|        }
 2374|     30|        t.mday = d;
 2375|     30|        st.set_mday(h);
 2376|     30|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  3.25k|    {
 2895|  3.25k|#if !SCN_DISABLE_LOCALE
 2896|  3.25k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 3.25k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  3.25k|#endif
 2903|       |
 2904|  3.25k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  3.25k|            {"Sunday", 0},
 2906|  3.25k|            {"Monday", 1},
 2907|  3.25k|            {"Tuesday", 2},
 2908|  3.25k|            {"Wednesday", 3},
 2909|  3.25k|            {"Thursday", 4},
 2910|  3.25k|            {"Friday", 5},
 2911|  3.25k|            {"Saturday", 6},
 2912|  3.25k|        }};
 2913|  3.25k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 3.25k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  3.25k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  3.25k|            {"Sun", 0},
 2918|  3.25k|            {"Mon", 1},
 2919|  3.25k|            {"Tue", 2},
 2920|  3.25k|            {"Wed", 3},
 2921|  3.25k|            {"Thu", 4},
 2922|  3.25k|            {"Fri", 5},
 2923|  3.25k|            {"Sat", 6},
 2924|  3.25k|        }};
 2925|  3.25k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 3.25k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  3.25k|        return set_error(
 2929|  3.25k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  6.50k|    {
 3419|  6.50k|        auto start_it = m_begin;
 3420|  6.50k|        std::size_t options_available = N;
 3421|  6.50k|        std::size_t chars_consumed = 0;
 3422|  13.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.64k, False: 6.48k]
  ------------------
 3423|  13.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.64k, False: 0]
  ------------------
 3424|  6.64k|            std::size_t i = 0;
 3425|  6.64k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 6.62k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  6.62k|            const auto ch = *m_begin;
 3430|  6.62k|            ++m_begin;
 3431|  52.2k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 45.6k, False: 6.62k]
  ------------------
 3432|  45.6k|                const auto cmp = static_cast<unsigned>(
 3433|  45.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  45.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 45.6k]
  ------------------
 3435|  45.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 45.4k, False: 152]
  |  Branch (3435:34): [True: 45.4k, False: 16]
  ------------------
 3436|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  45.4k|                                options.end());
 3438|  45.4k|                    --options_available;
 3439|  45.4k|                    continue;
 3440|  45.4k|                }
 3441|    168|                ++i;
 3442|    168|            }
 3443|  6.62k|            ++chars_consumed;
 3444|  6.62k|        }
 3445|  6.50k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 6.50k, False: 0]
  ------------------
 3446|  6.50k|            m_begin = start_it;
 3447|  6.50k|            return std::nullopt;
 3448|  6.50k|        }
 3449|      0|        return options.front().second;
 3450|  6.50k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  12.0k|    {
 2969|  12.0k|#if !SCN_DISABLE_LOCALE
 2970|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 12.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  12.0k|#endif
 2977|       |
 2978|  12.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  12.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  12.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  12.0k|    {
 2344|  12.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.07k, False: 5.95k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 5.98k]
  |  |  |  Branch (865:45): [True: 34, False: 5.95k]
  |  |  ------------------
  ------------------
 2345|  6.07k|            return hdl.set_error(
 2346|  6.07k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  6.07k|        }
 2348|  5.95k|        t.hour = h;
 2349|  5.95k|        st.set_hour24(hdl);
 2350|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  12.0k|    {
 2997|  12.0k|#if !SCN_DISABLE_LOCALE
 2998|  12.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 12.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  12.0k|#endif
 3005|       |
 3006|  12.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  12.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  12.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  12.0k|    {
 2331|  12.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.15k, False: 5.87k]
  |  |  |  Branch (865:45): [True: 6.14k, False: 5.88k]
  |  |  |  Branch (865:45): [True: 12, False: 5.87k]
  |  |  ------------------
  ------------------
 2332|  6.15k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  6.15k|                                "Invalid value for minutes"});
 2334|  6.15k|        }
 2335|  5.87k|        t.min = m;
 2336|  5.87k|        st.set_min(h);
 2337|  5.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  3.31k|    {
 3011|  3.31k|#if !SCN_DISABLE_LOCALE
 3012|  3.31k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 3.31k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  3.31k|#endif
 3019|       |
 3020|  3.31k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  3.31k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  3.31k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  3.31k|    {
 2318|  3.31k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.22k, False: 92]
  |  |  |  Branch (865:45): [True: 3.22k, False: 94]
  |  |  |  Branch (865:45): [True: 2, False: 92]
  |  |  ------------------
  ------------------
 2319|  3.22k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  3.22k|                                "Invalid value for seconds"});
 2321|  3.22k|        }
 2322|     92|        t.sec = s;
 2323|     92|        st.set_sec(h);
 2324|     92|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  3.25k|    {
 3253|       |        // %m/%d/%y
 3254|  3.25k|        constexpr CharT slash = '/';
 3255|  3.25k|        on_dec_month();
 3256|  3.25k|        on_text(&slash, &slash + 1);
 3257|  3.25k|        on_day_of_month();
 3258|  3.25k|        on_text(&slash, &slash + 1);
 3259|  3.25k|        on_short_year();
 3260|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  3.25k|    {
 3263|       |        // %Y-%m-%d
 3264|  3.25k|        constexpr CharT dash = '-';
 3265|  3.25k|        on_full_year();
 3266|  3.25k|        on_text(&dash, &dash + 1);
 3267|  3.25k|        on_dec_month();
 3268|  3.25k|        on_text(&dash, &dash + 1);
 3269|  3.25k|        on_day_of_month();
 3270|  3.25k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  8.71k|    {
 3295|       |        // %H:%M
 3296|  8.71k|        constexpr CharT colon = ':';
 3297|  8.71k|        on_24_hour();
 3298|  8.71k|        on_text(&colon, &colon + 1);
 3299|  8.71k|        on_minute();
 3300|  8.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  3.31k|    {
 3303|       |        // %H:%M:%S
 3304|  3.31k|        constexpr CharT colon = ':';
 3305|  3.31k|        on_24_hour();
 3306|  3.31k|        on_text(&colon, &colon + 1);
 3307|  3.31k|        on_minute();
 3308|  3.31k|        on_text(&colon, &colon + 1);
 3309|  3.31k|        on_second();
 3310|  3.31k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  5.86k|    {
 3342|  5.86k|        m_st.verify(*this);
 3343|  5.86k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 5.86k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  5.86k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 5.86k, False: 0]
  |  Branch (3346:37): [True: 10, False: 5.85k]
  |  Branch (3346:60): [True: 0, False: 5.85k]
  ------------------
 3347|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     10|        }
 3349|  5.86k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  57.1k|    {
 3353|  57.1k|        return m_error;
 3354|  57.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  5.86k|    {
 3370|  5.86k|        return m_begin;
 3371|  5.86k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    822|{
 1462|    822|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    822|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    822|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    822|            return transcode_to_string_impl_to32(src, dest);
 1473|    822|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    822|    SCN_EXPECT(false);
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    822|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    822|{
 1355|    822|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    822|    auto it = src.begin();
 1358|   204k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 203k, False: 822]
  ------------------
 1359|   203k|        auto res = get_next_code_point(
 1360|   203k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   203k|                                                                 src.end()));
 1362|   203k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.30k, False: 196k]
  |  |  ------------------
  ------------------
 1363|  7.30k|            dest.push_back(DestCharT{0xfffd});
 1364|  7.30k|        }
 1365|   196k|        else {
 1366|   196k|            dest.push_back(res.value);
 1367|   196k|        }
 1368|   203k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   203k|    }
 1370|    822|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   222k|{
 1279|   222k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   222k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   222k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.6k, False: 211k]
  |  |  ------------------
  ------------------
 1283|  10.6k|        return {get_start_for_next_code_point(input),
 1284|  10.6k|                detail::invalid_code_point};
 1285|  10.6k|    }
 1286|   211k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 247, False: 211k]
  |  |  ------------------
  ------------------
 1287|    247|        return {input.end(), detail::invalid_code_point};
 1288|    247|    }
 1289|       |
 1290|   211k|    return {input.begin() + len,
 1291|   211k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   211k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  10.6k|{
 1265|  10.6k|    auto it = input.begin();
 1266|   149k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 149k, False: 633]
  ------------------
 1267|   149k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 10.0k, False: 139k]
  ------------------
 1268|  10.0k|            break;
 1269|  10.0k|        }
 1270|   149k|    }
 1271|  10.6k|    return it;
 1272|  10.6k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   170k|{
  458|   170k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   170k|        static_cast<unsigned char>(ch))];
  460|   170k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  84.3k|{
  539|  84.3k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  84.3k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   345k|{
  784|   345k|    return e != eof_error::good;
  785|   345k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.17k|{
  798|  4.17k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  4.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.17k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.17k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  78.2k|    {
  304|  78.2k|        ranges::advance(x, n);
  305|  78.2k|        return x;
  306|  78.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  78.2k|    {
  268|  78.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  78.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  78.2k|    {
  151|  78.2k|        i += n;
  152|  78.2k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   207k|    {
  108|   207k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   207k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   207k|    {
   87|   207k|        return s - i;
   88|   207k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   104k|    {
  108|   104k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   104k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   104k|    {
   87|   104k|        return s - i;
   88|   104k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  78.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  78.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  78.2k|          m_current(m_range.begin())
 2988|  78.2k|    {
 2989|  78.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   434k|    {
 2993|   434k|        return m_current;
 2994|   434k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  86.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  86.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  86.6k|          m_current(m_range.begin())
 2988|  86.6k|    {
 2989|  86.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   449k|    {
 2993|   449k|        return m_current;
 2994|   449k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.05M|    {
  763|  1.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   267k|        : m_fptr([](storage fn,
  743|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   267k|              cvref<T> obj = *get<T>(fn);
  745|   267k|              if constexpr (std::is_void_v<R>) {
  746|   267k|                  obj(static_cast<decltype(args)>(args)...);
  747|   267k|              }
  748|   267k|              else {
  749|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   267k|              }
  751|   267k|          }),
  752|   267k|          m_storage(std::addressof(f))
  753|   267k|    {
  754|   267k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   528k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   528k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   528k|              else {
  749|   528k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   528k|              }
  751|   528k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   528k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   528k|        else if constexpr (std::is_object_v<T>) {
  688|   528k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   528k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   267k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   267k|        {
  662|   267k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  59.2k|    {
  108|  59.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  59.2k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  59.2k|    {
   94|  59.2k|        iter_difference_t<I> counter{0};
   95|   544k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 485k, False: 59.2k]
  ------------------
   96|   485k|            ++i;
   97|   485k|            ++counter;
   98|   485k|        }
   99|  59.2k|        return counter;
  100|  59.2k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  93.7k|{
  951|  93.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 92.2k]
  |  |  ------------------
  ------------------
  952|  1.48k|        return eof_error::eof;
  953|  1.48k|    }
  954|  92.2k|    return eof_error::good;
  955|  93.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   323k|{
  945|   323k|    return is_range_eof(r.begin(), r.end());
  946|   323k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   323k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   323k|    {
  938|   323k|        return begin == end;
  939|   323k|    }
  940|   323k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  78.2k|{
  951|  78.2k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 738, False: 77.5k]
  |  |  ------------------
  ------------------
  952|    738|        return eof_error::eof;
  953|    738|    }
  954|  77.5k|    return eof_error::good;
  955|  78.2k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  78.2k|{
  945|  78.2k|    return is_range_eof(r.begin(), r.end());
  946|  78.2k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  78.2k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  78.2k|    {
  938|  78.2k|        return begin == end;
  939|  78.2k|    }
  940|  78.2k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   156k|    {
 1602|   156k|        return sv;
 1603|   156k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  78.2k|{
 3066|  78.2k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 78.2k, False: 0]
  ------------------
 3067|  78.2k|        auto it = read_while_classic_space(range);
 3068|  78.2k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  78.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 738, False: 77.5k]
  |  |  ------------------
  ------------------
 3070|    738|            return unexpected(e);
 3071|    738|        }
 3072|       |
 3073|  77.5k|        return it;
 3074|  78.2k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  78.2k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  78.2k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  78.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  78.2k|        auto buf = make_contiguous_buffer(range);
 2220|  78.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  78.2k|        return ranges::next(range.begin(),
 2222|  78.2k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  78.2k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  78.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  78.2k|                  ranges::sized_range<Range>) {
 1785|  78.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  78.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  78.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  78.2k|    {
 1589|  78.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  93.7k|    {
  268|  93.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  93.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  93.7k|    {
  181|  93.7k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 93.7k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  93.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  93.7k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  93.7k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  93.7k|        else {
 1055|  93.7k|            return r.begin().contiguous_segment();
 1056|  93.7k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  93.7k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  93.7k|{
 2160|  93.7k|    auto it = range.begin();
 2161|   231k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 230k, False: 1.48k]
  ------------------
 2162|   230k|        const auto val =
 2163|   230k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   230k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   230k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 212k, False: 18.0k]
  |  |  ------------------
  ------------------
 2165|   212k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   212k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   212k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 92.2k, False: 119k]
  ------------------
 2168|  92.2k|                return it;
 2169|  92.2k|            }
 2170|   212k|        }
 2171|   137k|        it = val.iterator;
 2172|   137k|    }
 2173|       |
 2174|  1.48k|    return it;
 2175|  93.7k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   230k|{
 1998|   230k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   230k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   230k|    auto it = range.begin();
 2002|   230k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   230k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.0k, False: 212k]
  |  |  ------------------
  ------------------
 2005|  18.0k|        ++it;
 2006|  18.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  18.0k|        return {it, {}};
 2008|  18.0k|    }
 2009|       |
 2010|   212k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 207k, False: 5.01k]
  ------------------
 2011|   207k|        ++it;
 2012|   207k|        return {it, string_type(1, *range.begin())};
 2013|   207k|    }
 2014|       |
 2015|  5.01k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.01k|    return {it, string_type{range.begin(), it}};
 2017|   212k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  18.0k|{
 1265|  18.0k|    auto it = input.begin();
 1266|   238k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 237k, False: 594]
  ------------------
 1267|   237k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 17.4k, False: 220k]
  ------------------
 1268|  17.4k|            break;
 1269|  17.4k|        }
 1270|   237k|    }
 1271|  18.0k|    return it;
 1272|  18.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.01k|    {
  283|  5.01k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.01k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.01k|    {
  252|  5.01k|        constexpr iter_difference_t<I> zero{0};
  253|  5.01k|        iter_difference_t<I> counter{0};
  254|       |
  255|  15.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 11.0k, False: 4.77k]
  |  Branch (255:30): [True: 10.8k, False: 246]
  ------------------
  256|  10.8k|            ++i;
  257|  10.8k|            ++counter;
  258|  10.8k|        }
  259|       |
  260|  5.01k|        return counter;
  261|  5.01k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   230k|    {
 1989|   230k|        return !codepoint.empty();
 1990|   230k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  93.7k|{
 2181|  93.7k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  93.7k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  93.7k|{
 3066|  93.7k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 93.7k, False: 0]
  ------------------
 3067|  93.7k|        auto it = read_while_classic_space(range);
 3068|  93.7k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  93.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48k, False: 92.2k]
  |  |  ------------------
  ------------------
 3070|  1.48k|            return unexpected(e);
 3071|  1.48k|        }
 3072|       |
 3073|  92.2k|        return it;
 3074|  93.7k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  93.7k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  93.7k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  93.7k|    else {
 2225|  93.7k|        auto it = range.begin();
 2226|       |
 2227|  93.7k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  93.7k|            auto seg = get_contiguous_beginning(range);
 2229|  93.7k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  93.7k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 93.7k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  93.7k|            ranges::advance(it, seg.size());
 2234|  93.7k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  93.7k|            return detail::is_cp_space(cp);
 2238|  93.7k|        });
 2239|  93.7k|    }
 2240|  93.7k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  93.7k|        : m_fptr([](storage fn,
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|  93.7k|              if constexpr (std::is_void_v<R>) {
  746|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.7k|              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
  752|  93.7k|          m_storage(std::addressof(f))
  753|  93.7k|    {
  754|  93.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   212k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   212k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   212k|              else {
  749|   212k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   212k|              }
  751|   212k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   212k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   212k|        else if constexpr (std::is_object_v<T>) {
  688|   212k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   212k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   212k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   212k|            return detail::is_cp_space(cp);
 2238|   212k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.7k|        {
  662|  93.7k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  17.6k|    {
  108|  17.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  17.6k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  17.6k|    {
   94|  17.6k|        iter_difference_t<I> counter{0};
   95|   124k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 106k, False: 17.6k]
  ------------------
   96|   106k|            ++i;
   97|   106k|            ++counter;
   98|   106k|        }
   99|  17.6k|        return counter;
  100|  17.6k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  86.6k|{
  951|  86.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 978, False: 85.6k]
  |  |  ------------------
  ------------------
  952|    978|        return eof_error::eof;
  953|    978|    }
  954|  85.6k|    return eof_error::good;
  955|  86.6k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   244k|{
  945|   244k|    return is_range_eof(r.begin(), r.end());
  946|   244k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   244k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   244k|    {
  938|   244k|        return begin == end;
  939|   244k|    }
  940|   244k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   158k|{
 1998|   158k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   158k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   158k|    auto it = range.begin();
 2002|   158k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   158k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   158k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 158k, False: 0]
  ------------------
 2011|   158k|        ++it;
 2012|   158k|        return {it, string_type(1, *range.begin())};
 2013|   158k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   158k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   244k|{
  945|   244k|    return is_range_eof(r.begin(), r.end());
  946|   244k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   244k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   244k|    {
  938|   244k|        return begin == end;
  939|   244k|    }
  940|   244k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   158k|    {
 1989|   158k|        return !codepoint.empty();
 1990|   158k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  86.6k|{
  951|  86.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 978, False: 85.6k]
  |  |  ------------------
  ------------------
  952|    978|        return eof_error::eof;
  953|    978|    }
  954|  85.6k|    return eof_error::good;
  955|  86.6k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  86.6k|{
 3066|  86.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 86.6k, False: 0]
  ------------------
 3067|  86.6k|        auto it = read_while_classic_space(range);
 3068|  86.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  86.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 978, False: 85.6k]
  |  |  ------------------
  ------------------
 3070|    978|            return unexpected(e);
 3071|    978|        }
 3072|       |
 3073|  85.6k|        return it;
 3074|  86.6k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  86.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  86.6k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  86.6k|    else {
 2225|  86.6k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  86.6k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  86.6k|            return detail::is_cp_space(cp);
 2238|  86.6k|        });
 2239|  86.6k|    }
 2240|  86.6k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  86.6k|{
 2181|  86.6k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  86.6k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  86.6k|{
 2160|  86.6k|    auto it = range.begin();
 2161|   159k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 158k, False: 978]
  ------------------
 2162|   158k|        const auto val =
 2163|   158k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   158k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   158k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 158k, False: 0]
  |  |  ------------------
  ------------------
 2165|   158k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   158k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   158k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 85.6k, False: 72.5k]
  ------------------
 2168|  85.6k|                return it;
 2169|  85.6k|            }
 2170|   158k|        }
 2171|  72.5k|        it = val.iterator;
 2172|  72.5k|    }
 2173|       |
 2174|    978|    return it;
 2175|  86.6k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  86.6k|        : m_fptr([](storage fn,
  743|  86.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.6k|              cvref<T> obj = *get<T>(fn);
  745|  86.6k|              if constexpr (std::is_void_v<R>) {
  746|  86.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.6k|              }
  748|  86.6k|              else {
  749|  86.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.6k|              }
  751|  86.6k|          }),
  752|  86.6k|          m_storage(std::addressof(f))
  753|  86.6k|    {
  754|  86.6k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   158k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   158k|            return detail::is_cp_space(cp);
 2238|   158k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  86.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.6k|        {
  662|  86.6k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  86.6k|{
 2160|  86.6k|    auto it = range.begin();
 2161|   159k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 158k, False: 978]
  ------------------
 2162|   158k|        const auto val =
 2163|   158k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   158k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   158k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 158k, False: 0]
  |  |  ------------------
  ------------------
 2165|   158k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   158k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   158k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 85.6k, False: 72.5k]
  ------------------
 2168|  85.6k|                return it;
 2169|  85.6k|            }
 2170|   158k|        }
 2171|  72.5k|        it = val.iterator;
 2172|  72.5k|    }
 2173|       |
 2174|    978|    return it;
 2175|  86.6k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   158k|{
 1998|   158k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   158k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   158k|    auto it = range.begin();
 2002|   158k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   158k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   158k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 158k, False: 0]
  ------------------
 2011|   158k|        ++it;
 2012|   158k|        return {it, string_type(1, *range.begin())};
 2013|   158k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   158k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   158k|    {
 1989|   158k|        return !codepoint.empty();
 1990|   158k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  86.6k|{
 2181|  86.6k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  86.6k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  86.6k|{
 3066|  86.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 86.6k, False: 0]
  ------------------
 3067|  86.6k|        auto it = read_while_classic_space(range);
 3068|  86.6k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  86.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 978, False: 85.6k]
  |  |  ------------------
  ------------------
 3070|    978|            return unexpected(e);
 3071|    978|        }
 3072|       |
 3073|  85.6k|        return it;
 3074|  86.6k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  86.6k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  86.6k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  86.6k|    else {
 2225|  86.6k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  86.6k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  86.6k|            return detail::is_cp_space(cp);
 2238|  86.6k|        });
 2239|  86.6k|    }
 2240|  86.6k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  86.6k|        : m_fptr([](storage fn,
  743|  86.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.6k|              cvref<T> obj = *get<T>(fn);
  745|  86.6k|              if constexpr (std::is_void_v<R>) {
  746|  86.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.6k|              }
  748|  86.6k|              else {
  749|  86.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.6k|              }
  751|  86.6k|          }),
  752|  86.6k|          m_storage(std::addressof(f))
  753|  86.6k|    {
  754|  86.6k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   158k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   158k|            return detail::is_cp_space(cp);
 2238|   158k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  86.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.6k|        {
  662|  86.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.46k|    {
 5954|  2.46k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.46k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.46k|                source_tag<range_type>, {}};
 5957|  2.46k|            auto ctx = make_custom_ctx();
 5958|  2.46k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.46k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.46k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.46k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.46k|            auto it =
 5940|  2.46k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.46k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.46k|                                                      range.size()),
 5943|  2.46k|                    0};
 5944|  2.46k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.46k|    {
 5954|  2.46k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.46k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  2.46k|                source_tag<range_type>, {}};
 5957|  2.46k|            auto ctx = make_custom_ctx();
 5958|  2.46k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.46k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.46k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.46k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  2.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.46k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.46k|        else {
 5947|  2.46k|            return {range.begin(), args, loc};
 5948|  2.46k|        }
 5949|  2.46k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  78.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  78.2k|    static_cast<    \
  |  |  935|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  78.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  78.2k|          m_current(m_range.begin())
 2988|  78.2k|    {
 2989|  78.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   233k|    {
 2998|   233k|        return m_range.end();
 2999|   233k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  77.5k|    {
 3013|  77.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  77.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  77.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  77.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  77.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 77.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  77.5k|        }
 3019|  77.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  77.5k|    static_cast<    \
  |  |  935|  77.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  77.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   155k|    {
 3003|   155k|        return ranges::subrange{begin(), end()};
 3004|   155k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   171k|    {
 6286|   171k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   171k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 69.0k, False: 102k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  69.0k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  69.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  69.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  69.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  69.0k|    }
  ------------------
 6287|   102k|        return {ctx.begin()};
 6288|   171k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  43.7k|    {
 3024|  43.7k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  43.7k|        m_current = m_range.begin() + it.position();
 3026|  43.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   234k|    {
 3008|   234k|        return m_range;
 3009|   234k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  78.2k|    {
 3030|  78.2k|        return ranges::distance(m_range.begin(), begin());
 3031|  78.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  4.93k|    {
 5954|  4.93k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.93k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  4.93k|                source_tag<range_type>, {}};
 5957|  4.93k|            auto ctx = make_custom_ctx();
 5958|  4.93k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.93k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.93k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|      0|                              basic_contiguous_scan_context<char_type>>) {
 5963|      0|                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|       |            else {
 5966|       |                return ctx.begin();
 5967|       |            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  4.93k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  4.93k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  4.93k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  4.93k|            auto it =
 5940|  4.93k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  4.93k|                    std::basic_string_view<char_type>(range.data(),
 5942|  4.93k|                                                      range.size()),
 5943|  4.93k|                    0};
 5944|  4.93k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  4.93k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  86.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  86.6k|    static_cast<    \
  |  |  935|  86.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  86.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  86.6k|          m_current(m_range.begin())
 2988|  86.6k|    {
 2989|  86.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   258k|    {
 2998|   258k|        return m_range.end();
 2999|   258k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  85.6k|    {
 3013|  85.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  85.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  85.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  85.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 85.6k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  85.6k|        }
 3019|  85.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  85.6k|    static_cast<    \
  |  |  935|  85.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  85.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   172k|    {
 3003|   172k|        return ranges::subrange{begin(), end()};
 3004|   172k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6285|   173k|    {
 6286|   173k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   173k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 138k, False: 35.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   138k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   138k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   138k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   138k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   138k|    }
  ------------------
 6287|  35.2k|        return {ctx.begin()};
 6288|   173k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  17.6k|    {
 3024|  17.6k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  17.6k|        m_current = m_range.begin() + it.position();
 3026|  17.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   259k|    {
 3008|   259k|        return m_range;
 3009|   259k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  86.6k|    {
 3030|  86.6k|        return ranges::distance(m_range.begin(), begin());
 3031|  86.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  4.93k|    {
 5954|  4.93k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.93k|            basic_scan_parse_context<char_type> parse_ctx{
 5956|  4.93k|                source_tag<range_type>, {}};
 5957|  4.93k|            auto ctx = make_custom_ctx();
 5958|  4.93k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.93k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.93k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.93k|    }
  ------------------
 5959|       |
 5960|       |            if constexpr (std::is_same_v<
 5961|       |                              context_type,
 5962|       |                              basic_contiguous_scan_context<char_type>>) {
 5963|       |                return range.begin() + ctx.begin().position();
 5964|       |            }
 5965|      0|            else {
 5966|      0|                return ctx.begin();
 5967|      0|            }
 5968|       |        }
 5969|       |        else {
 5970|       |            SCN_EXPECT(false);
 5971|       |            SCN_UNREACHABLE;
 5972|       |        }
 5973|  4.93k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  4.93k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  4.93k|        else {
 5947|  4.93k|            return {range.begin(), args, loc};
 5948|  4.93k|        }
 5949|  4.93k|    }

LLVMFuzzerTestOneInput:
   58|    822|{
   59|    822|    scn::fuzz::run(data, size);
   60|    822|    return 0;
   61|    822|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    822|{
   35|    822|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 822]
  |  Branch (35:35): [True: 0, False: 822]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    822|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    822|    const auto& f =
   42|    822|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    822|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    822|    do_basic_run(sv, f);
   45|       |
   46|    822|    const auto& wf = get_format_strings<wchar_t>(
   47|    822|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    822|        L"{:%a}", L"{:%b}");
   49|    822|    do_basic_run(wsv_reinterpret, wf);
   50|    822|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 822, False: 0]
  ------------------
   51|    822|        do_basic_run(wsv_transcode, wf);
   52|    822|    }
   53|    822|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    822|{
   27|    822|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    822|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    822|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    822|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    822|{
   27|    822|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    822|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    822|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    822|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.64k|{
   27|  1.64k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.64k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.64k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.64k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.64k|{
   27|  1.64k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.64k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.64k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.64k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    822|{
   53|    822|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    822|    string_buffer.resize(size);
   57|    822|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    822|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    822|    const auto wsv_reinterpret_size =
   62|    822|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 78, False: 744]
  ------------------
   63|    822|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    822|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    822|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    822|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    822|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    822|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    822|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    822|{
  123|    822|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    822|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    822|    buf.resize(sizeof...(Args));
  126|    822|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    822|    return buf;
  128|    822|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    822|{
  109|    822|    if constexpr (std::is_same_v<CharT, char>) {
  110|    822|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    822|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    822|{
  186|    822|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    822|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    822|                                   format_strings);
  189|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  13.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.0k|            auto result = scn::scan<T>(
  140|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.0k|                scn::runtime_format(f));
  142|  13.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 7.28k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  7.28k|            it = result->begin();
  146|  7.28k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  13.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.0k|            auto result = scn::scan<T>(
  155|  13.0k|                global_locale,
  156|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.0k|                scn::runtime_format(f));
  158|  13.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 7.28k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  7.28k|            it = result->begin();
  162|  7.28k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  13.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.0k|            auto result = scn::scan<T>(
  140|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.0k|                scn::runtime_format(f));
  142|  13.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 7.28k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  7.28k|            it = result->begin();
  146|  7.28k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  13.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.0k|            auto result = scn::scan<T>(
  155|  13.0k|                global_locale,
  156|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.0k|                scn::runtime_format(f));
  158|  13.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 7.28k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  7.28k|            it = result->begin();
  162|  7.28k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  13.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.0k|            auto result = scn::scan<T>(
  140|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.0k|                scn::runtime_format(f));
  142|  13.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 7.28k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  7.28k|            it = result->begin();
  146|  7.28k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  13.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.0k|            auto result = scn::scan<T>(
  155|  13.0k|                global_locale,
  156|  13.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.0k|                scn::runtime_format(f));
  158|  13.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 7.28k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  7.28k|            it = result->begin();
  162|  7.28k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  15.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.6k|            auto result = scn::scan<T>(
  140|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.6k|                scn::runtime_format(f));
  142|  15.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 9.87k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  9.87k|            it = result->begin();
  146|  9.87k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  15.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.6k|            auto result = scn::scan<T>(
  155|  15.6k|                global_locale,
  156|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.6k|                scn::runtime_format(f));
  158|  15.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 9.87k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  9.87k|            it = result->begin();
  162|  9.87k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  15.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.6k|            auto result = scn::scan<T>(
  140|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.6k|                scn::runtime_format(f));
  142|  15.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 9.87k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  9.87k|            it = result->begin();
  146|  9.87k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  15.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.6k|            auto result = scn::scan<T>(
  155|  15.6k|                global_locale,
  156|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.6k|                scn::runtime_format(f));
  158|  15.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 9.87k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  9.87k|            it = result->begin();
  162|  9.87k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    822|{
  134|       |    // Regular scan
  135|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.75k, False: 822]
  ------------------
  136|  5.75k|        auto it = scn::ranges::begin(source);
  137|  15.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.6k|            auto result = scn::scan<T>(
  140|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.6k|                scn::runtime_format(f));
  142|  15.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.75k, False: 9.87k]
  ------------------
  143|  5.75k|                break;
  144|  5.75k|            }
  145|  9.87k|            it = result->begin();
  146|  9.87k|        }
  147|  5.75k|    }
  148|       |
  149|       |    // scan localized
  150|  5.75k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.75k, False: 822]
  ------------------
  151|  5.75k|        auto it = scn::ranges::begin(source);
  152|  15.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.6k|            auto result = scn::scan<T>(
  155|  15.6k|                global_locale,
  156|  15.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.6k|                scn::runtime_format(f));
  158|  15.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.75k, False: 9.87k]
  ------------------
  159|  5.75k|                break;
  160|  5.75k|            }
  161|  9.87k|            it = result->begin();
  162|  9.87k|        }
  163|  5.75k|    }
  164|       |
  165|       |    // scan_value
  166|    822|    {
  167|    822|        auto it = scn::ranges::begin(source);
  168|    822|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    822|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    822|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    822|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    822|            auto result = scn::scan_value<T>(
  171|    822|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    822|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 822, False: 0]
  ------------------
  173|    822|                break;
  174|    822|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    822|    }
  178|    822|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    822|{
   91|    822|    using char_type = ranges::range_value_t<Source>;
   92|    822|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    822|    deque.clear();
   94|    822|    std::copy(ranges::begin(source), ranges::end(source),
   95|    822|              std::back_inserter(deque));
   96|    822|    return deque;
   97|    822|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    822|{
   80|    822|    if constexpr (std::is_same_v<CharT, char>) {
   81|    822|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    822|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    822|{
  123|    822|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    822|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    822|    buf.resize(sizeof...(Args));
  126|    822|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    822|    return buf;
  128|    822|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    822|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    822|    else {
  113|    822|        return wformat_string_view_buffer;
  114|    822|    }
  115|    822|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.64k|{
  186|  1.64k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.64k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.64k|                                   format_strings);
  189|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.64k|{
  134|       |    // Regular scan
  135|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.5k, False: 1.64k]
  ------------------
  136|  11.5k|        auto it = scn::ranges::begin(source);
  137|  14.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.4k|            auto result = scn::scan<T>(
  140|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.4k|                scn::runtime_format(f));
  142|  14.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.5k, False: 2.93k]
  ------------------
  143|  11.5k|                break;
  144|  11.5k|            }
  145|  2.93k|            it = result->begin();
  146|  2.93k|        }
  147|  11.5k|    }
  148|       |
  149|       |    // scan localized
  150|  11.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.5k, False: 1.64k]
  ------------------
  151|  11.5k|        auto it = scn::ranges::begin(source);
  152|  14.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.4k|            auto result = scn::scan<T>(
  155|  14.4k|                global_locale,
  156|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.4k|                scn::runtime_format(f));
  158|  14.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.5k, False: 2.93k]
  ------------------
  159|  11.5k|                break;
  160|  11.5k|            }
  161|  2.93k|            it = result->begin();
  162|  2.93k|        }
  163|  11.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.64k|    {
  167|  1.64k|        auto it = scn::ranges::begin(source);
  168|  1.64k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.64k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.64k|            auto result = scn::scan_value<T>(
  171|  1.64k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.64k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.64k, False: 0]
  ------------------
  173|  1.64k|                break;
  174|  1.64k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.64k|    }
  178|  1.64k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.64k|{
   91|  1.64k|    using char_type = ranges::range_value_t<Source>;
   92|  1.64k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.64k|    deque.clear();
   94|  1.64k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.64k|              std::back_inserter(deque));
   96|  1.64k|    return deque;
   97|  1.64k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.64k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.64k|    else {
   84|  1.64k|        return wnoncontiguous_buffer;
   85|  1.64k|    }
   86|  1.64k|}

