_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.2k|    {
 1523|  57.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.2k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.2k|{
 1494|  57.2k|    auto it = pctx.begin();
 1495|  57.2k|    auto end = pctx.end();
 1496|  57.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.49k, False: 55.7k]
  |  Branch (1496:22): [True: 0, False: 55.7k]
  ------------------
 1497|  1.49k|        pctx.on_error(
 1498|  1.49k|            "Format string without specifiers is not valid for this type");
 1499|  1.49k|        return it;
 1500|  1.49k|    }
 1501|       |
 1502|  55.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.7k, False: 0]
  ------------------
 1505|  55.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.7k|    }
 1507|  55.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.7k|    return end;
 1512|  55.7k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   604k|        : localized(0),
  743|   604k|          subsec_set(0),
  744|   604k|          sec_set(0),
  745|   604k|          min_set(0),
  746|   604k|          hour24_set(0),
  747|   604k|          hour12_set(0),
  748|   604k|          mday_set(0),
  749|   604k|          mon_set(0),
  750|   604k|          full_year_set(0),
  751|   604k|          century_set(0),
  752|   604k|          short_year_set(0),
  753|   604k|          wday_set(0),
  754|   604k|          yday_set(0),
  755|   604k|          tzoff_set(0),
  756|   604k|          tzname_set(0),
  757|   604k|          am_pm_set(0),
  758|   604k|          epoch_ticks_set(0),
  759|   604k|          duration_ticks_set(0),
  760|   604k|          duration_suffix_set(0),
  761|   604k|          is_pm(0)
  762|   604k|    {
  763|   604k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  55.7k|{
  377|  55.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.7k]
  |  Branch (377:25): [True: 0, False: 55.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.7k|    auto p = begin;
  383|  55.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.7k]
  |  Branch (392:21): [True: 0, False: 55.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   144k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 144k, False: 0]
  ------------------
  399|   144k|        auto ch = *p;
  400|   144k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.7k, False: 88.7k]
  ------------------
  401|  55.7k|            break;
  402|  55.7k|        }
  403|  88.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14.9k, False: 73.7k]
  ------------------
  404|  14.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14.9k]
  |  Branch (404:32): [True: 14.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 14.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  14.9k|            const auto cp_len =
  412|  14.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  14.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  14.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  14.9k|            ++p;
  439|  14.9k|            continue;
  440|  14.9k|        }
  441|  73.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14.9k, False: 58.7k]
  ------------------
  442|  14.9k|            handler.on_text(begin, p);
  443|  14.9k|        }
  444|  73.7k|        ++p;  // Consume '%'
  445|  73.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 73.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  73.7k|        ch = *p;
  451|  73.7k|        ++p;
  452|       |
  453|  73.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 73.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 73.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 73.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.99k, False: 70.7k]
  ------------------
  463|  2.99k|                handler.on_full_year();
  464|  2.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 73.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 73.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 73.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 73.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.86k, False: 68.8k]
  ------------------
  479|  4.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 73.7k]
  ------------------
  480|  4.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 73.7k]
  ------------------
  481|  4.86k|                handler.on_month_name();
  482|  4.86k|                break;
  483|  2.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 2.99k, False: 70.7k]
  ------------------
  484|  2.99k|                handler.on_dec_month();
  485|  2.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 73.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 73.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 73.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 73.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  2.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 2.99k, False: 70.7k]
  ------------------
  502|  2.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 73.7k]
  ------------------
  503|  2.99k|                handler.on_day_of_month();
  504|  2.99k|                break;
  505|       |            // Day of week
  506|  2.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.99k, False: 70.7k]
  ------------------
  507|  2.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 73.7k]
  ------------------
  508|  2.99k|                handler.on_weekday_name();
  509|  2.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 73.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 73.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  2.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2.99k, False: 70.7k]
  ------------------
  518|  2.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 73.7k]
  ------------------
  519|  2.99k|                handler.on_24_hour();
  520|  2.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 73.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 73.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  2.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 2.99k, False: 70.7k]
  ------------------
  527|  2.99k|                handler.on_minute();
  528|  2.99k|                break;
  529|       |            // Second
  530|  2.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 2.99k, False: 70.7k]
  ------------------
  531|  2.99k|                handler.on_second();
  532|  2.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 73.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  2.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 2.99k, False: 70.7k]
  ------------------
  563|  2.99k|                handler.on_tz_offset();
  564|  2.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 73.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 73.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 73.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 73.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.65k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.65k, False: 65.0k]
  ------------------
  579|  8.65k|                handler.on_us_date();
  580|  8.65k|                break;
  581|  3.16k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.16k, False: 70.5k]
  ------------------
  582|  3.16k|                handler.on_iso_date();
  583|  3.16k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 73.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  28.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 28.4k, False: 45.2k]
  ------------------
  588|  28.4k|                handler.on_24_hour_time();
  589|  28.4k|                break;
  590|  4.63k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.63k, False: 69.1k]
  ------------------
  591|  4.63k|                handler.on_iso_time();
  592|  4.63k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 73.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 73.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 73.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 73.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 73.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 73.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 73.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 73.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  73.7k|        }
  704|  73.7k|        begin = p;
  705|       |
  706|  73.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 73.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  73.7k|    }
  710|  55.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.7k|    handler.verify();
  714|  55.7k|    return p;
  715|  55.7k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  14.9k|    {
 1177|  14.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  18.1k|    {
 1189|  18.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.1k|        st.set_full_year(*this);
 1193|  18.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  18.1k|    {                                                                \
  769|  18.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.1k|        field##_set = 1;                                             \
  774|  18.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.6k|    {
 1196|  14.6k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.6k|        st.set_short_year(*this);
 1200|  14.6k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.6k|    {                                                                \
  769|  14.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.6k|        field##_set = 1;                                             \
  774|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  10.8k|    {
 1232|  10.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.8k|    {
 1238|  32.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.8k|        st.set_mon(*this);
 1242|  32.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.8k|    {
 1266|  32.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.8k|        st.set_mday(*this);
 1270|  32.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  8.98k|    {
 1274|  8.98k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  8.98k|        st.set_wday(*this);
 1278|  8.98k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  57.5k|    {
 1296|  57.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  57.5k|        st.set_hour24(*this);
 1300|  57.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  57.5k|    {
 1310|  57.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  57.5k|        st.set_min(*this);
 1314|  57.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  19.6k|    {
 1317|  19.6k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  19.6k|        st.set_sec(*this);
 1321|  19.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  19.6k|    {                                                                \
  769|  19.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  19.6k|        field##_set = 1;                                             \
  774|  19.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  8.98k|    {
 1336|  8.98k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  8.98k|        st.set_tzoff(*this);
 1340|  8.98k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.6k|    {
 1369|  14.6k|        on_dec_month();
 1370|  14.6k|        on_day_of_month();
 1371|  14.6k|        on_short_year();
 1372|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  9.16k|    {
 1375|  9.16k|        on_full_year();
 1376|  9.16k|        on_dec_month();
 1377|  9.16k|        on_day_of_month();
 1378|  9.16k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  37.9k|    {
 1387|  37.9k|        on_24_hour();
 1388|  37.9k|        on_minute();
 1389|  37.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  10.6k|    {
 1392|  10.6k|        on_24_hour();
 1393|  10.6k|        on_minute();
 1394|  10.6k|        on_second();
 1395|  10.6k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   101k|    {
 1419|   101k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   101k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   101k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   101k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   101k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   101k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   101k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   101k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   101k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   101k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   101k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   101k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   101k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   101k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   101k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   101k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   101k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   101k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   101k|        st.verify(*this);
 1463|   101k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   101k|    {
  800|   101k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 57.5k, False: 43.6k]
  |  Branch (800:27): [True: 0, False: 57.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   101k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 101k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   101k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.1k, False: 83.0k]
  |  Branch (818:31): [True: 0, False: 18.1k]
  |  Branch (818:46): [True: 0, False: 18.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   101k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 8.98k, False: 92.2k]
  |  Branch (824:26): [True: 0, False: 8.98k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   101k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 8.98k, False: 92.2k]
  |  Branch (829:26): [True: 32.8k, False: 59.4k]
  |  Branch (829:38): [True: 0, False: 59.4k]
  ------------------
  830|   101k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   101k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   256k|    {
 1467|   256k|        return err;
 1468|   256k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.7k|    {
 1530|  55.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.2k|    {
 1523|  57.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.2k|{
 1494|  57.2k|    auto it = pctx.begin();
 1495|  57.2k|    auto end = pctx.end();
 1496|  57.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.49k, False: 55.7k]
  |  Branch (1496:22): [True: 0, False: 55.7k]
  ------------------
 1497|  1.49k|        pctx.on_error(
 1498|  1.49k|            "Format string without specifiers is not valid for this type");
 1499|  1.49k|        return it;
 1500|  1.49k|    }
 1501|       |
 1502|  55.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.7k, False: 0]
  ------------------
 1505|  55.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.7k|    }
 1507|  55.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.7k|    return end;
 1512|  55.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  55.7k|{
  377|  55.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.7k]
  |  Branch (377:25): [True: 0, False: 55.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.7k|    auto p = begin;
  383|  55.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.7k]
  |  Branch (392:21): [True: 0, False: 55.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   144k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 144k, False: 0]
  ------------------
  399|   144k|        auto ch = *p;
  400|   144k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.7k, False: 88.7k]
  ------------------
  401|  55.7k|            break;
  402|  55.7k|        }
  403|  88.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14.9k, False: 73.7k]
  ------------------
  404|  14.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14.9k]
  |  Branch (404:32): [True: 14.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 14.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  14.9k|            const auto cp_len =
  412|  14.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  14.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  14.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  14.9k|            ++p;
  439|  14.9k|            continue;
  440|  14.9k|        }
  441|  73.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14.9k, False: 58.7k]
  ------------------
  442|  14.9k|            handler.on_text(begin, p);
  443|  14.9k|        }
  444|  73.7k|        ++p;  // Consume '%'
  445|  73.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 73.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  73.7k|        ch = *p;
  451|  73.7k|        ++p;
  452|       |
  453|  73.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 73.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 73.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 73.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.99k, False: 70.7k]
  ------------------
  463|  2.99k|                handler.on_full_year();
  464|  2.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 73.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 73.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 73.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 73.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.86k, False: 68.8k]
  ------------------
  479|  4.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 73.7k]
  ------------------
  480|  4.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 73.7k]
  ------------------
  481|  4.86k|                handler.on_month_name();
  482|  4.86k|                break;
  483|  2.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 2.99k, False: 70.7k]
  ------------------
  484|  2.99k|                handler.on_dec_month();
  485|  2.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 73.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 73.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 73.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 73.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  2.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 2.99k, False: 70.7k]
  ------------------
  502|  2.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 73.7k]
  ------------------
  503|  2.99k|                handler.on_day_of_month();
  504|  2.99k|                break;
  505|       |            // Day of week
  506|  2.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.99k, False: 70.7k]
  ------------------
  507|  2.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 73.7k]
  ------------------
  508|  2.99k|                handler.on_weekday_name();
  509|  2.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 73.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 73.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  2.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2.99k, False: 70.7k]
  ------------------
  518|  2.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 73.7k]
  ------------------
  519|  2.99k|                handler.on_24_hour();
  520|  2.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 73.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 73.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  2.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 2.99k, False: 70.7k]
  ------------------
  527|  2.99k|                handler.on_minute();
  528|  2.99k|                break;
  529|       |            // Second
  530|  2.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 2.99k, False: 70.7k]
  ------------------
  531|  2.99k|                handler.on_second();
  532|  2.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 73.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  2.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 2.99k, False: 70.7k]
  ------------------
  563|  2.99k|                handler.on_tz_offset();
  564|  2.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 73.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 73.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 73.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 73.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.65k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.65k, False: 65.0k]
  ------------------
  579|  8.65k|                handler.on_us_date();
  580|  8.65k|                break;
  581|  3.16k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.16k, False: 70.5k]
  ------------------
  582|  3.16k|                handler.on_iso_date();
  583|  3.16k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 73.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  28.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 28.4k, False: 45.2k]
  ------------------
  588|  28.4k|                handler.on_24_hour_time();
  589|  28.4k|                break;
  590|  4.63k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.63k, False: 69.1k]
  ------------------
  591|  4.63k|                handler.on_iso_time();
  592|  4.63k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 73.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 73.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 73.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 73.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 73.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 73.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 73.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 73.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  73.7k|        }
  704|  73.7k|        begin = p;
  705|       |
  706|  73.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 73.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  73.7k|    }
  710|  55.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.7k|    handler.verify();
  714|  55.7k|    return p;
  715|  55.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  14.9k|    {
 1177|  14.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.1k|    {
 1189|  18.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.1k|        st.set_full_year(*this);
 1193|  18.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  18.1k|    {                                                                \
  769|  18.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.1k|        field##_set = 1;                                             \
  774|  18.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.6k|    {
 1196|  14.6k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.6k|        st.set_short_year(*this);
 1200|  14.6k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.6k|    {                                                                \
  769|  14.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.6k|        field##_set = 1;                                             \
  774|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  10.8k|    {
 1232|  10.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.8k|    {
 1238|  32.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.8k|        st.set_mon(*this);
 1242|  32.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.8k|    {
 1266|  32.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.8k|        st.set_mday(*this);
 1270|  32.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  8.98k|    {
 1274|  8.98k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  8.98k|        st.set_wday(*this);
 1278|  8.98k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  57.5k|    {
 1296|  57.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  57.5k|        st.set_hour24(*this);
 1300|  57.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  57.5k|    {
 1310|  57.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  57.5k|        st.set_min(*this);
 1314|  57.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  19.6k|    {
 1317|  19.6k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  19.6k|        st.set_sec(*this);
 1321|  19.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  19.6k|    {                                                                \
  769|  19.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  19.6k|        field##_set = 1;                                             \
  774|  19.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  8.98k|    {
 1336|  8.98k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  8.98k|        st.set_tzoff(*this);
 1340|  8.98k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.6k|    {
 1369|  14.6k|        on_dec_month();
 1370|  14.6k|        on_day_of_month();
 1371|  14.6k|        on_short_year();
 1372|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  9.16k|    {
 1375|  9.16k|        on_full_year();
 1376|  9.16k|        on_dec_month();
 1377|  9.16k|        on_day_of_month();
 1378|  9.16k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  37.9k|    {
 1387|  37.9k|        on_24_hour();
 1388|  37.9k|        on_minute();
 1389|  37.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  10.6k|    {
 1392|  10.6k|        on_24_hour();
 1393|  10.6k|        on_minute();
 1394|  10.6k|        on_second();
 1395|  10.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   101k|    {
 1419|   101k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   101k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   101k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   101k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   101k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   101k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   101k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   101k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   101k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   101k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   101k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   101k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   101k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   101k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   101k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   101k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   101k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   101k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   101k|        st.verify(*this);
 1463|   101k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   101k|    {
  800|   101k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 57.5k, False: 43.6k]
  |  Branch (800:27): [True: 0, False: 57.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   101k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 101k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   101k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.1k, False: 83.0k]
  |  Branch (818:31): [True: 0, False: 18.1k]
  |  Branch (818:46): [True: 0, False: 18.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   101k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 8.98k, False: 92.2k]
  |  Branch (824:26): [True: 0, False: 8.98k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   101k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 8.98k, False: 92.2k]
  |  Branch (829:26): [True: 32.8k, False: 59.4k]
  |  Branch (829:38): [True: 0, False: 59.4k]
  ------------------
  830|   101k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   101k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   256k|    {
 1467|   256k|        return err;
 1468|   256k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.7k|    {
 1530|  55.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  57.2k|    {
 1523|  57.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  57.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  57.2k|{
 1494|  57.2k|    auto it = pctx.begin();
 1495|  57.2k|    auto end = pctx.end();
 1496|  57.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.49k, False: 55.7k]
  |  Branch (1496:22): [True: 0, False: 55.7k]
  ------------------
 1497|  1.49k|        pctx.on_error(
 1498|  1.49k|            "Format string without specifiers is not valid for this type");
 1499|  1.49k|        return it;
 1500|  1.49k|    }
 1501|       |
 1502|  55.7k|    auto checker = detail::tm_format_checker<T>{};
 1503|  55.7k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  55.7k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 55.7k, False: 0]
  ------------------
 1505|  55.7k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  55.7k|    }
 1507|  55.7k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 55.7k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  55.7k|    return end;
 1512|  55.7k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  55.7k|{
  377|  55.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 55.7k]
  |  Branch (377:25): [True: 0, False: 55.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  55.7k|    auto p = begin;
  383|  55.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 55.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  55.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 55.7k]
  |  Branch (392:21): [True: 0, False: 55.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   144k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 144k, False: 0]
  ------------------
  399|   144k|        auto ch = *p;
  400|   144k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 55.7k, False: 88.7k]
  ------------------
  401|  55.7k|            break;
  402|  55.7k|        }
  403|  88.7k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 14.9k, False: 73.7k]
  ------------------
  404|  14.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 14.9k]
  |  Branch (404:32): [True: 14.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 14.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  14.9k|            const auto cp_len =
  412|  14.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  14.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 14.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  14.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 14.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  14.9k|            ++p;
  439|  14.9k|            continue;
  440|  14.9k|        }
  441|  73.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 14.9k, False: 58.7k]
  ------------------
  442|  14.9k|            handler.on_text(begin, p);
  443|  14.9k|        }
  444|  73.7k|        ++p;  // Consume '%'
  445|  73.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 73.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  73.7k|        ch = *p;
  451|  73.7k|        ++p;
  452|       |
  453|  73.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 73.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 73.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 73.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.99k, False: 70.7k]
  ------------------
  463|  2.99k|                handler.on_full_year();
  464|  2.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 73.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 73.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 73.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 73.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.86k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.86k, False: 68.8k]
  ------------------
  479|  4.86k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 73.7k]
  ------------------
  480|  4.86k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 73.7k]
  ------------------
  481|  4.86k|                handler.on_month_name();
  482|  4.86k|                break;
  483|  2.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 2.99k, False: 70.7k]
  ------------------
  484|  2.99k|                handler.on_dec_month();
  485|  2.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 73.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 73.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 73.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 73.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  2.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 2.99k, False: 70.7k]
  ------------------
  502|  2.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 73.7k]
  ------------------
  503|  2.99k|                handler.on_day_of_month();
  504|  2.99k|                break;
  505|       |            // Day of week
  506|  2.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.99k, False: 70.7k]
  ------------------
  507|  2.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 73.7k]
  ------------------
  508|  2.99k|                handler.on_weekday_name();
  509|  2.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 73.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 73.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  2.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 2.99k, False: 70.7k]
  ------------------
  518|  2.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 73.7k]
  ------------------
  519|  2.99k|                handler.on_24_hour();
  520|  2.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 73.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 73.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  2.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 2.99k, False: 70.7k]
  ------------------
  527|  2.99k|                handler.on_minute();
  528|  2.99k|                break;
  529|       |            // Second
  530|  2.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 2.99k, False: 70.7k]
  ------------------
  531|  2.99k|                handler.on_second();
  532|  2.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 73.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  2.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 2.99k, False: 70.7k]
  ------------------
  563|  2.99k|                handler.on_tz_offset();
  564|  2.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 73.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 73.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 73.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 73.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  8.65k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 8.65k, False: 65.0k]
  ------------------
  579|  8.65k|                handler.on_us_date();
  580|  8.65k|                break;
  581|  3.16k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.16k, False: 70.5k]
  ------------------
  582|  3.16k|                handler.on_iso_date();
  583|  3.16k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 73.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  28.4k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 28.4k, False: 45.2k]
  ------------------
  588|  28.4k|                handler.on_24_hour_time();
  589|  28.4k|                break;
  590|  4.63k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 4.63k, False: 69.1k]
  ------------------
  591|  4.63k|                handler.on_iso_time();
  592|  4.63k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 73.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 73.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 73.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 73.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 73.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 73.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 73.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 73.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  73.7k|        }
  704|  73.7k|        begin = p;
  705|       |
  706|  73.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 73.7k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  73.7k|    }
  710|  55.7k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 55.7k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  55.7k|    handler.verify();
  714|  55.7k|    return p;
  715|  55.7k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  14.9k|    {
 1177|  14.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  18.1k|    {
 1189|  18.1k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  18.1k|        st.set_full_year(*this);
 1193|  18.1k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  18.1k|    {                                                                \
  769|  18.1k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  18.1k|        field##_set = 1;                                             \
  774|  18.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.6k|    {
 1196|  14.6k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.6k|        st.set_short_year(*this);
 1200|  14.6k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.6k|    {                                                                \
  769|  14.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.6k|        field##_set = 1;                                             \
  774|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  10.8k|    {
 1232|  10.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  10.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  32.8k|    {
 1238|  32.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  32.8k|        st.set_mon(*this);
 1242|  32.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  32.8k|    {
 1266|  32.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  32.8k|        st.set_mday(*this);
 1270|  32.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  32.8k|    {                                                                \
  769|  32.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  32.8k|        field##_set = 1;                                             \
  774|  32.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  8.98k|    {
 1274|  8.98k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  8.98k|        st.set_wday(*this);
 1278|  8.98k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  57.5k|    {
 1296|  57.5k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  57.5k|        st.set_hour24(*this);
 1300|  57.5k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  57.5k|    {
 1310|  57.5k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  57.5k|        st.set_min(*this);
 1314|  57.5k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  57.5k|    {                                                                \
  769|  57.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  57.5k|        field##_set = 1;                                             \
  774|  57.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  19.6k|    {
 1317|  19.6k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  19.6k|        st.set_sec(*this);
 1321|  19.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  19.6k|    {                                                                \
  769|  19.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  19.6k|        field##_set = 1;                                             \
  774|  19.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  8.98k|    {
 1336|  8.98k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  8.98k|        st.set_tzoff(*this);
 1340|  8.98k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  8.98k|    {                                                                \
  769|  8.98k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  8.98k|        field##_set = 1;                                             \
  774|  8.98k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.6k|    {
 1369|  14.6k|        on_dec_month();
 1370|  14.6k|        on_day_of_month();
 1371|  14.6k|        on_short_year();
 1372|  14.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  9.16k|    {
 1375|  9.16k|        on_full_year();
 1376|  9.16k|        on_dec_month();
 1377|  9.16k|        on_day_of_month();
 1378|  9.16k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  37.9k|    {
 1387|  37.9k|        on_24_hour();
 1388|  37.9k|        on_minute();
 1389|  37.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  10.6k|    {
 1392|  10.6k|        on_24_hour();
 1393|  10.6k|        on_minute();
 1394|  10.6k|        on_second();
 1395|  10.6k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   101k|    {
 1419|   101k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   101k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   101k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   101k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   101k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   101k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   101k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   101k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   101k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   101k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   101k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   101k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   101k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   101k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   101k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   101k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   101k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   101k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   101k|        st.verify(*this);
 1463|   101k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   101k|    {
  800|   101k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 57.5k, False: 43.6k]
  |  Branch (800:27): [True: 0, False: 57.5k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   101k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 101k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   101k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 18.1k, False: 83.0k]
  |  Branch (818:31): [True: 0, False: 18.1k]
  |  Branch (818:46): [True: 0, False: 18.1k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   101k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 8.98k, False: 92.2k]
  |  Branch (824:26): [True: 0, False: 8.98k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   101k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 8.98k, False: 92.2k]
  |  Branch (829:26): [True: 32.8k, False: 59.4k]
  |  Branch (829:38): [True: 0, False: 59.4k]
  ------------------
  830|   101k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 41.8k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   101k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   256k|    {
 1467|   256k|        return err;
 1468|   256k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  55.7k|    {
 1530|  55.7k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  55.7k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  48.4k|    {
 1523|  48.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  48.4k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  48.4k|{
 1494|  48.4k|    auto it = pctx.begin();
 1495|  48.4k|    auto end = pctx.end();
 1496|  48.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 2.99k, False: 45.4k]
  |  Branch (1496:22): [True: 0, False: 45.4k]
  ------------------
 1497|  2.99k|        pctx.on_error(
 1498|  2.99k|            "Format string without specifiers is not valid for this type");
 1499|  2.99k|        return it;
 1500|  2.99k|    }
 1501|       |
 1502|  45.4k|    auto checker = detail::tm_format_checker<T>{};
 1503|  45.4k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  45.4k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 45.4k, False: 0]
  ------------------
 1505|  45.4k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  45.4k|    }
 1507|  45.4k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  45.4k|    return end;
 1512|  45.4k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  45.4k|{
  377|  45.4k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 45.4k]
  |  Branch (377:25): [True: 0, False: 45.4k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  45.4k|    auto p = begin;
  383|  45.4k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 45.4k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  45.4k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 45.4k]
  |  Branch (392:21): [True: 0, False: 45.4k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 45.4k, False: 111k]
  ------------------
  401|  45.4k|            break;
  402|  45.4k|        }
  403|   111k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 29.9k, False: 81.4k]
  ------------------
  404|  29.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 29.9k]
  |  Branch (404:32): [True: 29.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 29.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  29.9k|            const auto cp_len =
  412|  29.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  29.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 29.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  29.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 29.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  29.9k|            ++p;
  439|  29.9k|            continue;
  440|  29.9k|        }
  441|  81.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 29.9k, False: 51.4k]
  ------------------
  442|  29.9k|            handler.on_text(begin, p);
  443|  29.9k|        }
  444|  81.4k|        ++p;  // Consume '%'
  445|  81.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 81.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  81.4k|        ch = *p;
  451|  81.4k|        ++p;
  452|       |
  453|  81.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 81.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 81.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 81.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  5.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 5.99k, False: 75.4k]
  ------------------
  463|  5.99k|                handler.on_full_year();
  464|  5.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 81.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 81.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 81.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 81.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.99k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.99k, False: 75.4k]
  ------------------
  479|  5.99k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 81.4k]
  ------------------
  480|  5.99k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 81.4k]
  ------------------
  481|  5.99k|                handler.on_month_name();
  482|  5.99k|                break;
  483|  5.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 5.99k, False: 75.4k]
  ------------------
  484|  5.99k|                handler.on_dec_month();
  485|  5.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 81.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 81.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 81.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 81.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  5.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 5.99k, False: 75.4k]
  ------------------
  502|  5.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 81.4k]
  ------------------
  503|  5.99k|                handler.on_day_of_month();
  504|  5.99k|                break;
  505|       |            // Day of week
  506|  5.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.99k, False: 75.4k]
  ------------------
  507|  5.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 81.4k]
  ------------------
  508|  5.99k|                handler.on_weekday_name();
  509|  5.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 81.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 81.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  5.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 5.99k, False: 75.4k]
  ------------------
  518|  5.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 81.4k]
  ------------------
  519|  5.99k|                handler.on_24_hour();
  520|  5.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 81.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 81.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  5.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 5.99k, False: 75.4k]
  ------------------
  527|  5.99k|                handler.on_minute();
  528|  5.99k|                break;
  529|       |            // Second
  530|  5.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 5.99k, False: 75.4k]
  ------------------
  531|  5.99k|                handler.on_second();
  532|  5.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 81.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  5.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 5.99k, False: 75.4k]
  ------------------
  563|  5.99k|                handler.on_tz_offset();
  564|  5.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 81.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 81.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 81.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 81.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.00k, False: 75.4k]
  ------------------
  579|  6.00k|                handler.on_us_date();
  580|  6.00k|                break;
  581|  5.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 5.99k, False: 75.4k]
  ------------------
  582|  5.99k|                handler.on_iso_date();
  583|  5.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 81.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.46k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.46k, False: 71.9k]
  ------------------
  588|  9.46k|                handler.on_24_hour_time();
  589|  9.46k|                break;
  590|  6.02k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.02k, False: 75.3k]
  ------------------
  591|  6.02k|                handler.on_iso_time();
  592|  6.02k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 81.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 81.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 81.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 81.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 81.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 81.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 81.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 81.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  81.4k|        }
  704|  81.4k|        begin = p;
  705|       |
  706|  81.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 81.4k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  81.4k|    }
  710|  45.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 45.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  45.4k|    handler.verify();
  714|  45.4k|    return p;
  715|  45.4k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  29.9k|    {
 1177|  29.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  45.4k|    {
 1530|  45.4k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  45.4k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  48.4k|    {
 1523|  48.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  48.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  48.4k|{
 1494|  48.4k|    auto it = pctx.begin();
 1495|  48.4k|    auto end = pctx.end();
 1496|  48.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 2.99k, False: 45.4k]
  |  Branch (1496:22): [True: 0, False: 45.4k]
  ------------------
 1497|  2.99k|        pctx.on_error(
 1498|  2.99k|            "Format string without specifiers is not valid for this type");
 1499|  2.99k|        return it;
 1500|  2.99k|    }
 1501|       |
 1502|  45.4k|    auto checker = detail::tm_format_checker<T>{};
 1503|  45.4k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  45.4k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 45.4k, False: 0]
  ------------------
 1505|  45.4k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  45.4k|    }
 1507|  45.4k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  45.4k|    return end;
 1512|  45.4k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  45.4k|{
  377|  45.4k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 45.4k]
  |  Branch (377:25): [True: 0, False: 45.4k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  45.4k|    auto p = begin;
  383|  45.4k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 45.4k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  45.4k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 45.4k]
  |  Branch (392:21): [True: 0, False: 45.4k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 45.4k, False: 111k]
  ------------------
  401|  45.4k|            break;
  402|  45.4k|        }
  403|   111k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 29.9k, False: 81.4k]
  ------------------
  404|  29.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 29.9k]
  |  Branch (404:32): [True: 29.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 29.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  29.9k|            const auto cp_len =
  412|  29.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  29.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 29.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  29.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 29.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  29.9k|            ++p;
  439|  29.9k|            continue;
  440|  29.9k|        }
  441|  81.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 29.9k, False: 51.4k]
  ------------------
  442|  29.9k|            handler.on_text(begin, p);
  443|  29.9k|        }
  444|  81.4k|        ++p;  // Consume '%'
  445|  81.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 81.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  81.4k|        ch = *p;
  451|  81.4k|        ++p;
  452|       |
  453|  81.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 81.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 81.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 81.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  5.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 5.99k, False: 75.4k]
  ------------------
  463|  5.99k|                handler.on_full_year();
  464|  5.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 81.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 81.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 81.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 81.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.99k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.99k, False: 75.4k]
  ------------------
  479|  5.99k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 81.4k]
  ------------------
  480|  5.99k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 81.4k]
  ------------------
  481|  5.99k|                handler.on_month_name();
  482|  5.99k|                break;
  483|  5.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 5.99k, False: 75.4k]
  ------------------
  484|  5.99k|                handler.on_dec_month();
  485|  5.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 81.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 81.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 81.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 81.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  5.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 5.99k, False: 75.4k]
  ------------------
  502|  5.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 81.4k]
  ------------------
  503|  5.99k|                handler.on_day_of_month();
  504|  5.99k|                break;
  505|       |            // Day of week
  506|  5.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.99k, False: 75.4k]
  ------------------
  507|  5.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 81.4k]
  ------------------
  508|  5.99k|                handler.on_weekday_name();
  509|  5.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 81.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 81.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  5.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 5.99k, False: 75.4k]
  ------------------
  518|  5.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 81.4k]
  ------------------
  519|  5.99k|                handler.on_24_hour();
  520|  5.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 81.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 81.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  5.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 5.99k, False: 75.4k]
  ------------------
  527|  5.99k|                handler.on_minute();
  528|  5.99k|                break;
  529|       |            // Second
  530|  5.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 5.99k, False: 75.4k]
  ------------------
  531|  5.99k|                handler.on_second();
  532|  5.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 81.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  5.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 5.99k, False: 75.4k]
  ------------------
  563|  5.99k|                handler.on_tz_offset();
  564|  5.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 81.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 81.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 81.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 81.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.00k, False: 75.4k]
  ------------------
  579|  6.00k|                handler.on_us_date();
  580|  6.00k|                break;
  581|  5.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 5.99k, False: 75.4k]
  ------------------
  582|  5.99k|                handler.on_iso_date();
  583|  5.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 81.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.46k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.46k, False: 71.9k]
  ------------------
  588|  9.46k|                handler.on_24_hour_time();
  589|  9.46k|                break;
  590|  6.02k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.02k, False: 75.3k]
  ------------------
  591|  6.02k|                handler.on_iso_time();
  592|  6.02k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 81.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 81.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 81.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 81.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 81.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 81.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 81.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 81.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  81.4k|        }
  704|  81.4k|        begin = p;
  705|       |
  706|  81.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 81.4k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  81.4k|    }
  710|  45.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 45.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  45.4k|    handler.verify();
  714|  45.4k|    return p;
  715|  45.4k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  29.9k|    {
 1177|  29.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  45.4k|    {
 1530|  45.4k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  45.4k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  48.4k|    {
 1523|  48.4k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  48.4k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  48.4k|{
 1494|  48.4k|    auto it = pctx.begin();
 1495|  48.4k|    auto end = pctx.end();
 1496|  48.4k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 2.99k, False: 45.4k]
  |  Branch (1496:22): [True: 0, False: 45.4k]
  ------------------
 1497|  2.99k|        pctx.on_error(
 1498|  2.99k|            "Format string without specifiers is not valid for this type");
 1499|  2.99k|        return it;
 1500|  2.99k|    }
 1501|       |
 1502|  45.4k|    auto checker = detail::tm_format_checker<T>{};
 1503|  45.4k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  45.4k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 45.4k, False: 0]
  ------------------
 1505|  45.4k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  45.4k|    }
 1507|  45.4k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  45.4k|    return end;
 1512|  45.4k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  45.4k|{
  377|  45.4k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 45.4k]
  |  Branch (377:25): [True: 0, False: 45.4k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  45.4k|    auto p = begin;
  383|  45.4k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 45.4k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  45.4k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 45.4k]
  |  Branch (392:21): [True: 0, False: 45.4k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   156k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 156k, False: 0]
  ------------------
  399|   156k|        auto ch = *p;
  400|   156k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 45.4k, False: 111k]
  ------------------
  401|  45.4k|            break;
  402|  45.4k|        }
  403|   111k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 29.9k, False: 81.4k]
  ------------------
  404|  29.9k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 29.9k]
  |  Branch (404:32): [True: 29.9k, False: 0]
  |  Branch (404:46): [True: 0, False: 29.9k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  29.9k|            const auto cp_len =
  412|  29.9k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  29.9k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 29.9k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  29.9k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 29.9k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  29.9k|            ++p;
  439|  29.9k|            continue;
  440|  29.9k|        }
  441|  81.4k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 29.9k, False: 51.4k]
  ------------------
  442|  29.9k|            handler.on_text(begin, p);
  443|  29.9k|        }
  444|  81.4k|        ++p;  // Consume '%'
  445|  81.4k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 81.4k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  81.4k|        ch = *p;
  451|  81.4k|        ++p;
  452|       |
  453|  81.4k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 81.4k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 81.4k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 81.4k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  5.99k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 5.99k, False: 75.4k]
  ------------------
  463|  5.99k|                handler.on_full_year();
  464|  5.99k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 81.4k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 81.4k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 81.4k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 81.4k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  5.99k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 5.99k, False: 75.4k]
  ------------------
  479|  5.99k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 81.4k]
  ------------------
  480|  5.99k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 81.4k]
  ------------------
  481|  5.99k|                handler.on_month_name();
  482|  5.99k|                break;
  483|  5.99k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 5.99k, False: 75.4k]
  ------------------
  484|  5.99k|                handler.on_dec_month();
  485|  5.99k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 81.4k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 81.4k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 81.4k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 81.4k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  5.99k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 5.99k, False: 75.4k]
  ------------------
  502|  5.99k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 81.4k]
  ------------------
  503|  5.99k|                handler.on_day_of_month();
  504|  5.99k|                break;
  505|       |            // Day of week
  506|  5.99k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 5.99k, False: 75.4k]
  ------------------
  507|  5.99k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 81.4k]
  ------------------
  508|  5.99k|                handler.on_weekday_name();
  509|  5.99k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 81.4k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 81.4k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  5.99k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 5.99k, False: 75.4k]
  ------------------
  518|  5.99k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 81.4k]
  ------------------
  519|  5.99k|                handler.on_24_hour();
  520|  5.99k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 81.4k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 81.4k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  5.99k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 5.99k, False: 75.4k]
  ------------------
  527|  5.99k|                handler.on_minute();
  528|  5.99k|                break;
  529|       |            // Second
  530|  5.99k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 5.99k, False: 75.4k]
  ------------------
  531|  5.99k|                handler.on_second();
  532|  5.99k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 81.4k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  5.99k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 5.99k, False: 75.4k]
  ------------------
  563|  5.99k|                handler.on_tz_offset();
  564|  5.99k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 81.4k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 81.4k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 81.4k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 81.4k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.00k, False: 75.4k]
  ------------------
  579|  6.00k|                handler.on_us_date();
  580|  6.00k|                break;
  581|  5.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 5.99k, False: 75.4k]
  ------------------
  582|  5.99k|                handler.on_iso_date();
  583|  5.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 81.4k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.46k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.46k, False: 71.9k]
  ------------------
  588|  9.46k|                handler.on_24_hour_time();
  589|  9.46k|                break;
  590|  6.02k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 6.02k, False: 75.3k]
  ------------------
  591|  6.02k|                handler.on_iso_time();
  592|  6.02k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 81.4k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 81.4k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 81.4k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 81.4k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 81.4k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 81.4k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 81.4k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 81.4k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  81.4k|        }
  704|  81.4k|        begin = p;
  705|       |
  706|  81.4k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 81.4k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  81.4k|    }
  710|  45.4k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 45.4k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  45.4k|    handler.verify();
  714|  45.4k|    return p;
  715|  45.4k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  29.9k|    {
 1177|  29.9k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  45.4k|    {
 1530|  45.4k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  45.4k|    }
_ZN3scn2v45monthC2Ej:
  119|  9.34k|        : m_value(static_cast<unsigned char>(d))
  120|  9.34k|    {
  121|  9.34k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.8k, False: 21.5k]
  ------------------
  399|  31.8k|        auto ch = *p;
  400|  31.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 144, False: 31.7k]
  ------------------
  404|    144|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 144]
  |  Branch (404:32): [True: 144, False: 0]
  |  Branch (404:46): [True: 0, False: 144]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    144|            const auto cp_len =
  412|    144|                detail::code_point_length_by_starting_code_unit(ch);
  413|    144|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 144]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    144|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 144]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    144|            ++p;
  439|    144|            continue;
  440|    144|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 144, False: 31.5k]
  ------------------
  442|    144|            handler.on_text(begin, p);
  443|    144|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.44k, False: 30.2k]
  ------------------
  463|  1.44k|                handler.on_full_year();
  464|  1.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.36k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.36k, False: 29.3k]
  ------------------
  479|  2.36k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  2.36k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  2.36k|                handler.on_month_name();
  482|  2.36k|                break;
  483|     64|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 64, False: 31.6k]
  ------------------
  484|     64|                handler.on_dec_month();
  485|     64|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 31.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.44k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.44k, False: 30.2k]
  ------------------
  507|  1.44k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  1.44k|                handler.on_weekday_name();
  509|  1.44k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 31.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.00k, False: 24.7k]
  ------------------
  579|  7.00k|                handler.on_us_date();
  580|  7.00k|                break;
  581|  1.52k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.52k, False: 30.1k]
  ------------------
  582|  1.52k|                handler.on_iso_date();
  583|  1.52k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  15.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 15.5k, False: 16.1k]
  ------------------
  588|  15.5k|                handler.on_24_hour_time();
  589|  15.5k|                break;
  590|  2.26k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.26k, False: 29.4k]
  ------------------
  591|  2.26k|                handler.on_iso_time();
  592|  2.26k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.0k, False: 21.6k]
  ------------------
  707|  10.0k|            return p;
  708|  10.0k|        }
  709|  31.7k|    }
  710|  21.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.5k|    handler.verify();
  714|  21.5k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  2.97k|    {                                                                \
  769|  2.97k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.97k|        field##_set = 1;                                             \
  774|  2.97k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.57k|    {                                                                \
  769|  5.57k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.57k|        field##_set = 1;                                             \
  774|  5.57k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.16k|    {                                                                \
  769|  7.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.16k|        field##_set = 1;                                             \
  774|  7.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.8k|    {                                                                \
  769|  15.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.8k|        field##_set = 1;                                             \
  774|  15.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.4k|    {                                                                \
  769|  15.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.4k|        field##_set = 1;                                             \
  774|  15.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.5k|    {
  800|  21.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 14.9k, False: 6.58k]
  |  Branch (800:27): [True: 0, False: 14.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 21.4k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 21.5k]
  |  Branch (829:26): [True: 5.65k, False: 15.8k]
  |  Branch (829:38): [True: 0, False: 15.8k]
  ------------------
  830|  21.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.5k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  17.0k|    {
  867|  17.0k|        assert(!full_year_set);
  868|  17.0k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 17.0k, False: 0]
  |  Branch (868:31): [True: 0, False: 17.0k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  17.0k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 17.0k, False: 0]
  ------------------
  872|  17.0k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 48, False: 16.9k]
  ------------------
  873|     48|                year = 1900 + short_year_value - offset;
  874|     48|            }
  875|  16.9k|            else {
  876|  16.9k|                year = 2000 + short_year_value - offset;
  877|  16.9k|            }
  878|  17.0k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  17.0k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.5k|{
  377|  23.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.5k]
  |  Branch (377:25): [True: 0, False: 23.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.5k|    auto p = begin;
  383|  23.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.5k]
  |  Branch (392:21): [True: 0, False: 23.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 23.8k, False: 13.2k]
  ------------------
  399|  23.8k|        auto ch = *p;
  400|  23.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 23.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  23.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 140, False: 23.6k]
  ------------------
  404|    140|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 140]
  |  Branch (404:32): [True: 140, False: 0]
  |  Branch (404:46): [True: 0, False: 140]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    140|            const auto cp_len =
  412|    140|                detail::code_point_length_by_starting_code_unit(ch);
  413|    140|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 140]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    140|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 140]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    140|            ++p;
  439|    140|            continue;
  440|    140|        }
  441|  23.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 140, False: 23.5k]
  ------------------
  442|    140|            handler.on_text(begin, p);
  443|    140|        }
  444|  23.6k|        ++p;  // Consume '%'
  445|  23.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.6k|        ch = *p;
  451|  23.6k|        ++p;
  452|       |
  453|  23.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.47k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.47k, False: 22.2k]
  ------------------
  463|  1.47k|                handler.on_full_year();
  464|  1.47k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.40k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.40k, False: 21.2k]
  ------------------
  479|  2.40k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.6k]
  ------------------
  480|  2.40k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.6k]
  ------------------
  481|  2.40k|                handler.on_month_name();
  482|  2.40k|                break;
  483|     60|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 60, False: 23.6k]
  ------------------
  484|     60|                handler.on_dec_month();
  485|     60|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 23.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.6k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 22.2k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.6k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 23.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.6k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.6k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.6k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.6k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.57k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.57k, False: 22.1k]
  ------------------
  579|  1.57k|                handler.on_us_date();
  580|  1.57k|                break;
  581|  1.55k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.55k, False: 22.1k]
  ------------------
  582|  1.55k|                handler.on_iso_date();
  583|  1.55k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.7k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.7k, False: 10.9k]
  ------------------
  588|  12.7k|                handler.on_24_hour_time();
  589|  12.7k|                break;
  590|  2.29k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.29k, False: 21.3k]
  ------------------
  591|  2.29k|                handler.on_iso_time();
  592|  2.29k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.6k|        }
  704|  23.6k|        begin = p;
  705|       |
  706|  23.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.2k, False: 13.3k]
  ------------------
  707|  10.2k|            return p;
  708|  10.2k|        }
  709|  23.6k|    }
  710|  13.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.2k|    handler.verify();
  714|  13.2k|    return p;
  715|  23.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.03k|    {                                                                \
  769|  3.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.03k|        field##_set = 1;                                             \
  774|  3.03k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    106|    {                                                                \
  769|    106|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    106|        field##_set = 1;                                             \
  774|    106|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.65k|    {                                                                \
  769|  1.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.65k|        field##_set = 1;                                             \
  774|  1.65k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    258|    {                                                                \
  769|    258|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    258|        field##_set = 1;                                             \
  774|    258|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.2k|    {
  800|  13.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.1k, False: 1.12k]
  |  Branch (800:27): [True: 0, False: 12.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 13.1k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 13.2k]
  |  Branch (829:26): [True: 184, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 184]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.8k, False: 21.5k]
  ------------------
  399|  31.8k|        auto ch = *p;
  400|  31.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 144, False: 31.7k]
  ------------------
  404|    144|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 144]
  |  Branch (404:32): [True: 144, False: 0]
  |  Branch (404:46): [True: 0, False: 144]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    144|            const auto cp_len =
  412|    144|                detail::code_point_length_by_starting_code_unit(ch);
  413|    144|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 144]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    144|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 144]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    144|            ++p;
  439|    144|            continue;
  440|    144|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 144, False: 31.5k]
  ------------------
  442|    144|            handler.on_text(begin, p);
  443|    144|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.44k, False: 30.2k]
  ------------------
  463|  1.44k|                handler.on_full_year();
  464|  1.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.36k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.36k, False: 29.3k]
  ------------------
  479|  2.36k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  2.36k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  2.36k|                handler.on_month_name();
  482|  2.36k|                break;
  483|     64|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 64, False: 31.6k]
  ------------------
  484|     64|                handler.on_dec_month();
  485|     64|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 31.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.44k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.44k, False: 30.2k]
  ------------------
  507|  1.44k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  1.44k|                handler.on_weekday_name();
  509|  1.44k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 31.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.00k, False: 24.7k]
  ------------------
  579|  7.00k|                handler.on_us_date();
  580|  7.00k|                break;
  581|  1.52k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.52k, False: 30.1k]
  ------------------
  582|  1.52k|                handler.on_iso_date();
  583|  1.52k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  15.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 15.5k, False: 16.1k]
  ------------------
  588|  15.5k|                handler.on_24_hour_time();
  589|  15.5k|                break;
  590|  2.26k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.26k, False: 29.4k]
  ------------------
  591|  2.26k|                handler.on_iso_time();
  592|  2.26k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.0k, False: 21.6k]
  ------------------
  707|  10.0k|            return p;
  708|  10.0k|        }
  709|  31.7k|    }
  710|  21.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.5k|    handler.verify();
  714|  21.5k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  2.97k|    {                                                                \
  769|  2.97k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.97k|        field##_set = 1;                                             \
  774|  2.97k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.57k|    {                                                                \
  769|  5.57k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.57k|        field##_set = 1;                                             \
  774|  5.57k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.16k|    {                                                                \
  769|  7.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.16k|        field##_set = 1;                                             \
  774|  7.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.8k|    {                                                                \
  769|  15.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.8k|        field##_set = 1;                                             \
  774|  15.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.4k|    {                                                                \
  769|  15.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.4k|        field##_set = 1;                                             \
  774|  15.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.5k|    {
  800|  21.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 14.9k, False: 6.58k]
  |  Branch (800:27): [True: 0, False: 14.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 21.4k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 21.5k]
  |  Branch (829:26): [True: 5.65k, False: 15.8k]
  |  Branch (829:38): [True: 0, False: 15.8k]
  ------------------
  830|  21.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.5k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.5k|{
  377|  23.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.5k]
  |  Branch (377:25): [True: 0, False: 23.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.5k|    auto p = begin;
  383|  23.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.5k]
  |  Branch (392:21): [True: 0, False: 23.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 23.8k, False: 13.2k]
  ------------------
  399|  23.8k|        auto ch = *p;
  400|  23.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 23.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  23.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 140, False: 23.6k]
  ------------------
  404|    140|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 140]
  |  Branch (404:32): [True: 140, False: 0]
  |  Branch (404:46): [True: 0, False: 140]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    140|            const auto cp_len =
  412|    140|                detail::code_point_length_by_starting_code_unit(ch);
  413|    140|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 140]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    140|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 140]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    140|            ++p;
  439|    140|            continue;
  440|    140|        }
  441|  23.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 140, False: 23.5k]
  ------------------
  442|    140|            handler.on_text(begin, p);
  443|    140|        }
  444|  23.6k|        ++p;  // Consume '%'
  445|  23.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.6k|        ch = *p;
  451|  23.6k|        ++p;
  452|       |
  453|  23.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.47k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.47k, False: 22.2k]
  ------------------
  463|  1.47k|                handler.on_full_year();
  464|  1.47k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.40k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.40k, False: 21.2k]
  ------------------
  479|  2.40k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.6k]
  ------------------
  480|  2.40k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.6k]
  ------------------
  481|  2.40k|                handler.on_month_name();
  482|  2.40k|                break;
  483|     60|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 60, False: 23.6k]
  ------------------
  484|     60|                handler.on_dec_month();
  485|     60|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 23.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.6k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 22.2k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.6k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 23.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.6k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.6k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.6k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.6k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.57k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.57k, False: 22.1k]
  ------------------
  579|  1.57k|                handler.on_us_date();
  580|  1.57k|                break;
  581|  1.55k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.55k, False: 22.1k]
  ------------------
  582|  1.55k|                handler.on_iso_date();
  583|  1.55k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.7k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.7k, False: 10.9k]
  ------------------
  588|  12.7k|                handler.on_24_hour_time();
  589|  12.7k|                break;
  590|  2.29k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.29k, False: 21.3k]
  ------------------
  591|  2.29k|                handler.on_iso_time();
  592|  2.29k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.6k|        }
  704|  23.6k|        begin = p;
  705|       |
  706|  23.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.2k, False: 13.3k]
  ------------------
  707|  10.2k|            return p;
  708|  10.2k|        }
  709|  23.6k|    }
  710|  13.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.2k|    handler.verify();
  714|  13.2k|    return p;
  715|  23.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.03k|    {                                                                \
  769|  3.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.03k|        field##_set = 1;                                             \
  774|  3.03k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    106|    {                                                                \
  769|    106|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    106|        field##_set = 1;                                             \
  774|    106|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.65k|    {                                                                \
  769|  1.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.65k|        field##_set = 1;                                             \
  774|  1.65k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    258|    {                                                                \
  769|    258|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    258|        field##_set = 1;                                             \
  774|    258|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.2k|    {
  800|  13.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.1k, False: 1.12k]
  |  Branch (800:27): [True: 0, False: 12.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 13.1k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 13.2k]
  |  Branch (829:26): [True: 184, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 184]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  31.5k|{
  377|  31.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 31.5k]
  |  Branch (377:25): [True: 0, False: 31.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  31.5k|    auto p = begin;
  383|  31.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 31.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  31.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 31.5k]
  |  Branch (392:21): [True: 0, False: 31.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  53.4k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.8k, False: 21.5k]
  ------------------
  399|  31.8k|        auto ch = *p;
  400|  31.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 144, False: 31.7k]
  ------------------
  404|    144|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 144]
  |  Branch (404:32): [True: 144, False: 0]
  |  Branch (404:46): [True: 0, False: 144]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    144|            const auto cp_len =
  412|    144|                detail::code_point_length_by_starting_code_unit(ch);
  413|    144|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 144]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    144|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 144]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    144|            ++p;
  439|    144|            continue;
  440|    144|        }
  441|  31.7k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 144, False: 31.5k]
  ------------------
  442|    144|            handler.on_text(begin, p);
  443|    144|        }
  444|  31.7k|        ++p;  // Consume '%'
  445|  31.7k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 31.7k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  31.7k|        ch = *p;
  451|  31.7k|        ++p;
  452|       |
  453|  31.7k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 31.7k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 31.7k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 31.7k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.44k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.44k, False: 30.2k]
  ------------------
  463|  1.44k|                handler.on_full_year();
  464|  1.44k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 31.7k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 31.7k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 31.7k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 31.7k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.36k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.36k, False: 29.3k]
  ------------------
  479|  2.36k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 31.7k]
  ------------------
  480|  2.36k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 31.7k]
  ------------------
  481|  2.36k|                handler.on_month_name();
  482|  2.36k|                break;
  483|     64|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 64, False: 31.6k]
  ------------------
  484|     64|                handler.on_dec_month();
  485|     64|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 31.7k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 31.7k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 31.7k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 31.7k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 31.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 31.7k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.44k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.44k, False: 30.2k]
  ------------------
  507|  1.44k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 31.7k]
  ------------------
  508|  1.44k|                handler.on_weekday_name();
  509|  1.44k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 31.7k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 31.7k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 31.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 31.7k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 31.7k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 31.7k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 31.7k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 31.7k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 31.7k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 31.7k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 31.7k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 31.7k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 31.7k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 31.7k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.00k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.00k, False: 24.7k]
  ------------------
  579|  7.00k|                handler.on_us_date();
  580|  7.00k|                break;
  581|  1.52k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.52k, False: 30.1k]
  ------------------
  582|  1.52k|                handler.on_iso_date();
  583|  1.52k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 31.7k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  15.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 15.5k, False: 16.1k]
  ------------------
  588|  15.5k|                handler.on_24_hour_time();
  589|  15.5k|                break;
  590|  2.26k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.26k, False: 29.4k]
  ------------------
  591|  2.26k|                handler.on_iso_time();
  592|  2.26k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 31.7k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 31.7k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 31.7k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 31.7k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 31.7k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 31.7k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 31.7k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 31.7k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  31.7k|        }
  704|  31.7k|        begin = p;
  705|       |
  706|  31.7k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.0k, False: 21.6k]
  ------------------
  707|  10.0k|            return p;
  708|  10.0k|        }
  709|  31.7k|    }
  710|  21.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 21.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  21.5k|    handler.verify();
  714|  21.5k|    return p;
  715|  31.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  2.97k|    {                                                                \
  769|  2.97k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.97k|        field##_set = 1;                                             \
  774|  2.97k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.00k|    {                                                                \
  769|  7.00k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.00k|        field##_set = 1;                                             \
  774|  7.00k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.16k|    {                                                                \
  769|  7.16k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.16k|        field##_set = 1;                                             \
  774|  7.16k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.74k|    {                                                                \
  769|  5.74k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.74k|        field##_set = 1;                                             \
  774|  5.74k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.8k|    {                                                                \
  769|  15.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.8k|        field##_set = 1;                                             \
  774|  15.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  15.4k|    {                                                                \
  769|  15.4k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  15.4k|        field##_set = 1;                                             \
  774|  15.4k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  21.5k|    {
  800|  21.5k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 14.9k, False: 6.58k]
  |  Branch (800:27): [True: 0, False: 14.9k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  21.5k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 21.5k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  21.5k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 21.4k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  21.5k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 21.5k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  21.5k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 21.5k]
  |  Branch (829:26): [True: 5.65k, False: 15.8k]
  |  Branch (829:38): [True: 0, False: 15.8k]
  ------------------
  830|  21.5k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 5.65k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  21.5k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  23.5k|{
  377|  23.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 23.5k]
  |  Branch (377:25): [True: 0, False: 23.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  23.5k|    auto p = begin;
  383|  23.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 23.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  23.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 23.5k]
  |  Branch (392:21): [True: 0, False: 23.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  37.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 23.8k, False: 13.2k]
  ------------------
  399|  23.8k|        auto ch = *p;
  400|  23.8k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 23.8k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  23.8k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 140, False: 23.6k]
  ------------------
  404|    140|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 140]
  |  Branch (404:32): [True: 140, False: 0]
  |  Branch (404:46): [True: 0, False: 140]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    140|            const auto cp_len =
  412|    140|                detail::code_point_length_by_starting_code_unit(ch);
  413|    140|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 140]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    140|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 140]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    140|            ++p;
  439|    140|            continue;
  440|    140|        }
  441|  23.6k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 140, False: 23.5k]
  ------------------
  442|    140|            handler.on_text(begin, p);
  443|    140|        }
  444|  23.6k|        ++p;  // Consume '%'
  445|  23.6k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 23.6k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  23.6k|        ch = *p;
  451|  23.6k|        ++p;
  452|       |
  453|  23.6k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 23.6k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 23.6k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 23.6k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.47k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.47k, False: 22.2k]
  ------------------
  463|  1.47k|                handler.on_full_year();
  464|  1.47k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 23.6k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 23.6k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 23.6k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 23.6k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.40k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.40k, False: 21.2k]
  ------------------
  479|  2.40k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 23.6k]
  ------------------
  480|  2.40k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 23.6k]
  ------------------
  481|  2.40k|                handler.on_month_name();
  482|  2.40k|                break;
  483|     60|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 60, False: 23.6k]
  ------------------
  484|     60|                handler.on_dec_month();
  485|     60|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 23.6k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 23.6k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 23.6k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 23.6k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     44|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 44, False: 23.6k]
  ------------------
  502|     44|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 23.6k]
  ------------------
  503|     44|                handler.on_day_of_month();
  504|     44|                break;
  505|       |            // Day of week
  506|  1.47k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 1.47k, False: 22.2k]
  ------------------
  507|  1.47k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 23.6k]
  ------------------
  508|  1.47k|                handler.on_weekday_name();
  509|  1.47k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 23.6k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 23.6k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     36|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 36, False: 23.6k]
  ------------------
  518|     36|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 23.6k]
  ------------------
  519|     36|                handler.on_24_hour();
  520|     36|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 23.6k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 23.6k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 23.6k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 23.6k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 23.6k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 23.6k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 23.6k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 23.6k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 23.6k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 23.6k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.57k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.57k, False: 22.1k]
  ------------------
  579|  1.57k|                handler.on_us_date();
  580|  1.57k|                break;
  581|  1.55k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.55k, False: 22.1k]
  ------------------
  582|  1.55k|                handler.on_iso_date();
  583|  1.55k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 23.6k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  12.7k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 12.7k, False: 10.9k]
  ------------------
  588|  12.7k|                handler.on_24_hour_time();
  589|  12.7k|                break;
  590|  2.29k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.29k, False: 21.3k]
  ------------------
  591|  2.29k|                handler.on_iso_time();
  592|  2.29k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 23.6k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 23.6k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 23.6k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 23.6k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 23.6k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 23.6k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 23.6k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 23.6k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  23.6k|        }
  704|  23.6k|        begin = p;
  705|       |
  706|  23.6k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 10.2k, False: 13.3k]
  ------------------
  707|  10.2k|            return p;
  708|  10.2k|        }
  709|  23.6k|    }
  710|  13.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 13.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  13.2k|    handler.verify();
  714|  13.2k|    return p;
  715|  23.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.03k|    {                                                                \
  769|  3.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.03k|        field##_set = 1;                                             \
  774|  3.03k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.57k|    {                                                                \
  769|  1.57k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.57k|        field##_set = 1;                                             \
  774|  1.57k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.65k|    {                                                                \
  769|  1.65k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.65k|        field##_set = 1;                                             \
  774|  1.65k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    258|    {                                                                \
  769|    258|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    258|        field##_set = 1;                                             \
  774|    258|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.8k|    {                                                                \
  769|  12.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.8k|        field##_set = 1;                                             \
  774|  12.8k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  12.6k|    {                                                                \
  769|  12.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  12.6k|        field##_set = 1;                                             \
  774|  12.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    842|    {                                                                \
  769|    842|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    842|        field##_set = 1;                                             \
  774|    842|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  13.2k|    {
  800|  13.2k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 12.1k, False: 1.12k]
  |  Branch (800:27): [True: 0, False: 12.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  13.2k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 13.2k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  13.2k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 86, False: 13.1k]
  |  Branch (818:31): [True: 0, False: 86]
  |  Branch (818:46): [True: 0, False: 86]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  13.2k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 13.2k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  13.2k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 13.2k]
  |  Branch (829:26): [True: 184, False: 13.0k]
  |  Branch (829:38): [True: 0, False: 13.0k]
  ------------------
  830|  13.2k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 184]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  13.2k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     16|    {                                                                \
  769|     16|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     16|        field##_set = 1;                                             \
  774|     16|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.97k|    {                                                                \
  769|  2.97k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.97k|        field##_set = 1;                                             \
  774|  2.97k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  22.5k|{
  377|  22.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 22.5k]
  |  Branch (377:25): [True: 0, False: 22.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  22.5k|    auto p = begin;
  383|  22.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 22.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  22.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 22.5k]
  |  Branch (392:21): [True: 0, False: 22.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  24.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 22.5k, False: 1.76k]
  ------------------
  399|  22.5k|        auto ch = *p;
  400|  22.5k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 22.5k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  22.5k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 16, False: 22.5k]
  ------------------
  404|     16|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 16]
  |  Branch (404:32): [True: 16, False: 0]
  |  Branch (404:46): [True: 0, False: 16]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     16|            const auto cp_len =
  412|     16|                detail::code_point_length_by_starting_code_unit(ch);
  413|     16|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 16]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     16|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 16]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     16|            ++p;
  439|     16|            continue;
  440|     16|        }
  441|  22.5k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 16, False: 22.5k]
  ------------------
  442|     16|            handler.on_text(begin, p);
  443|     16|        }
  444|  22.5k|        ++p;  // Consume '%'
  445|  22.5k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 22.5k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  22.5k|        ch = *p;
  451|  22.5k|        ++p;
  452|       |
  453|  22.5k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 22.5k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 22.5k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 22.5k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  2.96k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 2.96k, False: 19.5k]
  ------------------
  463|  2.96k|                handler.on_full_year();
  464|  2.96k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 22.5k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 22.5k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 22.5k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 22.5k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  2.96k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 2.96k, False: 19.5k]
  ------------------
  479|  2.96k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 22.5k]
  ------------------
  480|  2.96k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 22.5k]
  ------------------
  481|  2.96k|                handler.on_month_name();
  482|  2.96k|                break;
  483|     16|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 16, False: 22.5k]
  ------------------
  484|     16|                handler.on_dec_month();
  485|     16|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 22.5k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 22.5k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 22.5k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 22.5k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|      0|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 0, False: 22.5k]
  ------------------
  502|      0|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 22.5k]
  ------------------
  503|      0|                handler.on_day_of_month();
  504|      0|                break;
  505|       |            // Day of week
  506|  2.96k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 2.96k, False: 19.5k]
  ------------------
  507|  2.96k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 22.5k]
  ------------------
  508|  2.96k|                handler.on_weekday_name();
  509|  2.96k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 22.5k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 22.5k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|      0|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 0, False: 22.5k]
  ------------------
  518|      0|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 22.5k]
  ------------------
  519|      0|                handler.on_24_hour();
  520|      0|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 22.5k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 22.5k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 22.5k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 22.5k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 22.5k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 22.5k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 22.5k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 22.5k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 22.5k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 22.5k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  2.97k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 2.97k, False: 19.5k]
  ------------------
  579|  2.97k|                handler.on_us_date();
  580|  2.97k|                break;
  581|  2.96k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.96k, False: 19.5k]
  ------------------
  582|  2.96k|                handler.on_iso_date();
  583|  2.96k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 22.5k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  4.68k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 4.68k, False: 17.8k]
  ------------------
  588|  4.68k|                handler.on_24_hour_time();
  589|  4.68k|                break;
  590|  2.98k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.98k, False: 19.5k]
  ------------------
  591|  2.98k|                handler.on_iso_time();
  592|  2.98k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 22.5k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 22.5k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 22.5k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 22.5k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 22.5k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 22.5k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 22.5k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 22.5k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  22.5k|        }
  704|  22.5k|        begin = p;
  705|       |
  706|  22.5k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 20.7k, False: 1.77k]
  ------------------
  707|  20.7k|            return p;
  708|  20.7k|        }
  709|  22.5k|    }
  710|  1.76k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 1.76k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  1.76k|    handler.verify();
  714|  1.76k|    return p;
  715|  22.5k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  5.93k|    {                                                                \
  769|  5.93k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.93k|        field##_set = 1;                                             \
  774|  5.93k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.97k|    {                                                                \
  769|  2.97k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.97k|        field##_set = 1;                                             \
  774|  2.97k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    264|    {                                                                \
  769|    264|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    264|        field##_set = 1;                                             \
  774|    264|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     36|    {                                                                \
  769|     36|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     36|        field##_set = 1;                                             \
  774|     36|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.09k|    {                                                                \
  769|  2.09k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.09k|        field##_set = 1;                                             \
  774|  2.09k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  2.01k|    {                                                                \
  769|  2.01k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  2.01k|        field##_set = 1;                                             \
  774|  2.01k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     40|    {                                                                \
  769|     40|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     40|        field##_set = 1;                                             \
  774|     40|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  1.76k|    {
  800|  1.76k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 1.75k, False: 10]
  |  Branch (800:27): [True: 0, False: 1.75k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  1.76k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 1.76k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  1.76k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 0, False: 1.76k]
  |  Branch (818:31): [True: 0, False: 0]
  |  Branch (818:46): [True: 0, False: 0]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  1.76k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 1.76k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  1.76k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 1.76k]
  |  Branch (829:26): [True: 8, False: 1.75k]
  |  Branch (829:38): [True: 0, False: 1.75k]
  ------------------
  830|  1.76k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 8]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  1.76k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   903k|{
 4068|   903k|    if constexpr (sizeof(U) == 1) {
 4069|   903k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   903k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   903k|{
 4032|   903k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   903k|    SCN_GCC_COMPAT_PUSH
 4035|   903k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   903k|    constexpr char lengths[] =
 4037|   903k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   903k|        "\1\1\1\1\1\1\1\1"
 4039|   903k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   903k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   903k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   903k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   903k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   903k|    SCN_GCC_COMPAT_POP
 4046|   903k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   370k|{
 4274|   370k|    if constexpr (sizeof(CharT) == 1) {
 4275|   370k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   370k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   370k|{
 4087|   370k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   370k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   370k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   370k|    };
 4092|       |
 4093|   370k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 365k, False: 5.15k]
  ------------------
 4094|   365k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 234, False: 365k]
  ------------------
 4095|    234|            SCN_UNLIKELY_ATTR
 4096|    234|            return invalid_code_point;
 4097|    234|        }
 4098|   365k|        return static_cast<char32_t>(input[0]);
 4099|   365k|    }
 4100|       |
 4101|  5.15k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 3.01k, False: 2.13k]
  ------------------
 4102|  3.01k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 54, False: 2.96k]
  ------------------
 4103|     54|            SCN_UNLIKELY_ATTR
 4104|     54|            return invalid_code_point;
 4105|     54|        }
 4106|  2.96k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 2.08k, False: 872]
  ------------------
 4107|  2.08k|            SCN_UNLIKELY_ATTR
 4108|  2.08k|            return invalid_code_point;
 4109|  2.08k|        }
 4110|       |
 4111|    872|        char32_t cp{};
 4112|    872|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|    872|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|    872|        return cp;
 4115|  2.96k|    }
 4116|       |
 4117|  2.13k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 981, False: 1.15k]
  ------------------
 4118|    981|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 48, False: 933]
  ------------------
 4119|     48|            SCN_UNLIKELY_ATTR
 4120|     48|            return invalid_code_point;
 4121|     48|        }
 4122|    933|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 648, False: 285]
  ------------------
 4123|    933|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 150, False: 135]
  ------------------
 4124|    798|            SCN_UNLIKELY_ATTR
 4125|    798|            return invalid_code_point;
 4126|    798|        }
 4127|       |
 4128|    135|        char32_t cp{};
 4129|    135|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    135|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    135|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    135|        return cp;
 4133|    933|    }
 4134|       |
 4135|  1.15k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.15k, False: 0]
  ------------------
 4136|  1.15k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.15k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.15k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 312, False: 843]
  ------------------
 4141|    312|            SCN_UNLIKELY_ATTR
 4142|    312|            return invalid_code_point;
 4143|    312|        }
 4144|    843|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 305, False: 538]
  ------------------
 4145|    843|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 242, False: 296]
  ------------------
 4146|    843|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 129, False: 167]
  ------------------
 4147|    676|            SCN_UNLIKELY_ATTR
 4148|    676|            return invalid_code_point;
 4149|    676|        }
 4150|       |
 4151|    167|        char32_t cp{};
 4152|    167|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    167|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    167|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    167|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    167|        return cp;
 4157|    843|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  5.85k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  5.85k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  5.85k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   226k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   226k|    else {
 3966|   226k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   226k|                                       to_address(first), to_address(last)))};
 3968|   226k|    }
 3969|   226k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   684k|{
  316|   684k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   684k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   974k|{
  294|   974k|    return p;
  295|   974k|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|   359k|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|   359k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|   359k|        SCN_UNUSED(sv);
  ------------------
  |  |  915|   359k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|   359k|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|   359k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  34.4k|    {
 2869|  34.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  34.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  34.4k|    {
 2850|  34.4k|        return decay_copy(t.begin());
 2851|  34.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|   875k|{
 2094|   875k|    return SCN_FWD(t);
  ------------------
  |  |  936|   875k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   875k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   147k|    {
 2926|   147k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   147k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   147k|    {
 2908|   147k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   147k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  11.8k|{
 9681|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  11.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  11.8k|                                   make_scan_args(result->values())));
 9684|  11.8k|    return result;
 9685|  11.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9636|  24.4k|{
 9637|  24.4k|    return scan_result_type<Source, Args...>();
 9638|  24.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  24.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  24.4k|        : m_value(T{}), m_has_value(true)
  427|  24.4k|    {
  428|  24.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6570|  24.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  73.4k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  73.4k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6344|   105k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.4k|{
 9622|  24.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  13.2k|    else {
 9626|  13.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.2k|    static_cast<    \
  |  |  935|  13.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.2k|    }
 9628|  24.4k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  73.4k|    {
 1740|  73.4k|        return has_value();
 1741|  73.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   146k|    {
  490|   146k|        return m_has_value;
  491|   146k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  33.7k|    {
 1746|  33.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  33.7k|        return this->get_unexpected().error();
 1748|  33.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  33.7k|    {
  473|  33.7k|        return m_unexpected;
  474|  33.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  3.15M|    {
  365|  3.15M|        return m_unexpected;
  366|  3.15M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.65M|        : m_unexpected(std::forward<Err>(e))
  350|  1.65M|    {
  351|  1.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.65M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  11.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.2k|          m_has_value(false)
  451|  11.2k|    {
  452|  11.2k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.67M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.67M|    {
  360|  1.67M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.67M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.67M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  97.9k|    {
  490|  97.9k|        return m_has_value;
  491|  97.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  50.9k|    {
  456|  50.9k|        return m_value;
  457|  50.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  11.2k|    {
  504|  11.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.2k|                                  std::forward<Args>(args)...);
  506|  11.2k|        m_has_value = false;
  507|  11.2k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   202k|{
  396|   202k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   202k|        T(std::forward<Args>(args)...);
  398|   202k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.2k|    {
  473|  11.2k|        return m_unexpected;
  474|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.2k|    {
  481|  11.2k|        return std::move(m_unexpected);
  482|  11.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|  39.7k|    {
 6445|  39.7k|        m_range = std::forward<Other>(r);
 6446|  39.7k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  39.7k|    {
 1795|  39.7k|        return value();
 1796|  39.7k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  39.7k|    {
 1769|  39.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  39.7k|        return this->get_value();
 1771|  39.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  39.7k|    {
  456|  39.7k|        return m_value;
  457|  39.7k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|  35.6k|{
 9461|  35.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  35.6k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  35.6k|{
 9398|  35.6k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  35.6k|    auto result = vscan_impl(buffer, format, args);
 9401|  35.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.7k, False: 19.8k]
  |  |  ------------------
  ------------------
 9402|  15.7k|        return unexpected(result.error());
 9403|  15.7k|    }
 9404|  19.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  35.6k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  73.4k|{
 5381|  73.4k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  73.4k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  73.4k|                  "\n"
 5385|  73.4k|                  "Unsupported range type given as input to a scanning "
 5386|  73.4k|                  "function.\n"
 5387|  73.4k|                  "A range needs to have a character type (value type) "
 5388|  73.4k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  73.4k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  73.4k|                  "to be included.\n"
 5391|  73.4k|                  "See the scnlib documentation for more details.");
 5392|  73.4k|    static_assert(
 5393|  73.4k|        !std::is_same_v<T, custom_char_traits>,
 5394|  73.4k|        "\n"
 5395|  73.4k|        "Unsupported range type given as input to a scanning "
 5396|  73.4k|        "function.\n"
 5397|  73.4k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  73.4k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  73.4k|        "not supported.");
 5400|  73.4k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  73.4k|                  "\n"
 5402|  73.4k|                  "Unsupported range type given as input to a scanning "
 5403|  73.4k|                  "function.\n"
 5404|  73.4k|                  "file_marker_found cannot be used as an "
 5405|  73.4k|                  "source range type to scn::scan.\n"
 5406|  73.4k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  73.4k|                  "and do not provide an explicit source range, "
 5408|  73.4k|                  "or use scn::scan with a FILE* directly.");
 5409|  73.4k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  73.4k|                  "\n"
 5411|  73.4k|                  "Unsupported range type given as input to a scanning "
 5412|  73.4k|                  "function.\n"
 5413|  73.4k|                  "In order to be scannable, a range needs to satisfy "
 5414|  73.4k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  73.4k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  73.4k|                  "\n"
 5417|  73.4k|                  "Unsupported range type given as input to a scanning "
 5418|  73.4k|                  "function.\n"
 5419|  73.4k|                  "A range needs to model forward_range and have a valid "
 5420|  73.4k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  73.4k|                  "Examples of scannable ranges are std::string, "
 5422|  73.4k|                  "std::string_view, "
 5423|  73.4k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  73.4k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  73.4k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  73.4k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  73.4k|{
 5320|  73.4k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  73.4k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  73.4k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  73.4k|    {
 3000|  73.4k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  73.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  73.4k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  73.4k|    {
 2981|  73.4k|        return t.data();
 2982|  73.4k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  73.4k|    {
 3383|  73.4k|        return detail::to_address(ranges::begin(derived()));
 3384|  73.4k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   289k|{
  316|   289k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   289k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   113k|    {
 2869|   113k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   113k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   113k|    {
 2850|   113k|        return decay_copy(t.begin());
 2851|   113k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|   977k|    {
 3480|   977k|        return m_iterator;
 3481|   977k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  73.4k|    {
 3339|  73.4k|        return static_cast<const D&>(*this);
 3340|  73.4k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  73.4k|    {
 3075|  73.4k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  73.4k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  73.4k|    {
 3041|  73.4k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  73.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  73.4k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|   564k|{
 2094|   564k|    return SCN_FWD(t);
  ------------------
  |  |  936|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   564k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   329k|    {
 3496|   329k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   329k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|   488k|    {
 1740|   488k|        return has_value();
 1741|   488k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|   875k|    {
  490|   875k|        return m_has_value;
  491|   875k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   202k|    {
 1746|   202k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   202k|        return this->get_unexpected().error();
 1748|   202k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   202k|    {
  473|   202k|        return m_unexpected;
  474|   202k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  33.7k|        : base(unexpect, std::move(e.error())),
 1616|  33.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.7k|    {
 1618|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  33.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  33.7k|          m_has_value(false)
  451|  33.7k|    {
  452|  33.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  73.4k|    {
 1316|  73.4k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  39.7k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  39.7k|                      ranges::iterator_t<SourceRange>>) {
 6677|  39.7k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  39.7k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   326k|    {
 2869|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   326k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   326k|    {
 2850|   326k|        return decay_copy(t.begin());
 2851|   326k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|  39.7k|{
 6662|  39.7k|    return ranges::end(source);
 6663|  39.7k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   111k|    {
 2926|   111k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   111k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   111k|    {
 2908|   111k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   111k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   723k|    {
 3484|   723k|        return m_sentinel;
 3485|   723k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|   184k|    {
 1795|   184k|        return value();
 1796|   184k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|   184k|    {
 1769|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   184k|        return this->get_value();
 1771|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|   184k|    {
  456|   184k|        return m_value;
  457|   184k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  39.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  39.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  39.7k|    {
 1572|  39.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  39.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  39.7k|    {
  442|  39.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  23.7k|    {
 8768|  23.7k|        return m_str;
 8769|  23.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.7k|{
 6110|  55.7k|    detail::check_scan_arg_types<Args...>();
 6111|  55.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5824|   105k|{
 5825|   105k|    constexpr bool default_constructible_constraint =
 5826|   105k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   105k|    static_assert(default_constructible_constraint,
 5828|   105k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   105k|    constexpr bool destructible_constraint =
 5831|   105k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   105k|    static_assert(destructible_constraint,
 5833|   105k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   105k|    constexpr bool non_reference_constraint =
 5836|   105k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   105k|    static_assert(non_reference_constraint,
 5838|   105k|                  "Scan argument types must not be references");
 5839|       |
 5840|   105k|    constexpr bool movable_constraint =
 5841|   105k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   105k|    static_assert(movable_constraint,
 5843|   105k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   105k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   105k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   105k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.7k|    {
 6087|  55.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.7k|    {
 6095|  55.7k|        return {detail::make_arg<
 6096|  55.7k|            kind, Context,
 6097|  55.7k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.7k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  55.7k|{
 5884|  55.7k|    return make_value<Context>(value);
 5885|  55.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5809|  57.2k|{
 5810|  57.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  57.2k|    else {
 5817|  57.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  57.2k|            value, context_tag<Context>{}));
 5819|  57.2k|    }
 5820|  57.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  57.2k|    {
 5715|  57.2k|        return {};
 5716|  57.2k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  57.2k|{
 5779|  57.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  57.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  57.2k|    constexpr bool scannable_char =
 5783|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  57.2k|    static_assert(scannable_char,
 5785|  57.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  57.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  57.2k|    constexpr bool scannable_const =
 5789|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  57.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  57.2k|    constexpr bool scannable_disabled =
 5793|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  57.2k|    static_assert(scannable_disabled,
 5795|  57.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  57.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  57.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  57.2k|    static_assert(
 5800|  57.2k|        scannable,
 5801|  57.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  57.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  57.2k|    return arg_value{arg};
 5805|  57.2k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  57.2k|        : custom_value{static_cast<void*>(&val.val),
 5569|  57.2k|                       scan_custom_arg<T, Context>}
 5570|  57.2k|    {
 5571|  57.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  57.2k|    {
 5587|  57.2k|        static_assert(!is_type_disabled<T>,
 5588|  57.2k|                      "Scanning of custom types is disabled by "
 5589|  57.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  57.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  57.2k|        using context_type = Context;
 5593|  57.2k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  57.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  57.2k|        auto s = scanner_type{};
 5597|       |
 5598|  57.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  57.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  57.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  57.2k|#if SCN_HAS_EXCEPTIONS
 5603|  57.2k|        auto fmt_it = pctx_ref.begin();
 5604|  57.2k|        try {
 5605|  57.2k|            fmt_it = s.parse(pctx_ref);
 5606|  57.2k|        }
 5607|  57.2k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  57.2k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.49k, False: 55.7k]
  |  |  ------------------
  ------------------
 5628|  1.49k|            return e;
 5629|  1.49k|        }
 5630|  55.7k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  55.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  34.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.7k|    static_cast<    \
  |  |  935|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  34.7k|        return {};
 5636|  55.7k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|   845k|    {
 6270|   845k|        return m_format.data();
 6271|   845k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6274|   171k|    {
 6275|   171k|        return m_format.data() + m_format.size();
 6276|   171k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6315|  4.49k|    {
 6316|  4.49k|        m_error = unexpected(detail::handle_error(
 6317|  4.49k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  4.49k|        return m_error.error();
 6319|  4.49k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   786k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   786k|    {
 3742|   786k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   786k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   786k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  13.4k|        : m_unexpected(std::forward<Err>(e))
  350|  13.4k|    {
  351|  13.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  13.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  4.27M|    {
  572|  4.27M|        return m_has_value;
  573|  4.27M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   462k|{
 4308|       |    // Pattern_White_Space property
 4309|   462k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 391k, False: 71.3k]
  |  Branch (4309:27): [True: 14.2k, False: 376k]
  ------------------
 4310|   462k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 204k, False: 243k]
  ------------------
 4311|   462k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 1.62k, False: 241k]
  ------------------
 4312|   462k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 660, False: 241k]
  ------------------
 4313|   462k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 120, False: 241k]
  ------------------
 4314|   462k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 108, False: 241k]
  ------------------
 4315|   462k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 241k]
  ------------------
 4316|   462k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   309k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   309k|    else {
 3981|   309k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   309k|    }
 3983|   309k|}
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   589k|    {
 1746|   589k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   589k|        return this->get_unexpected().error();
 1748|   589k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   589k|    {
  555|   589k|        return m_unexpected;
  556|   589k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   576k|        : base(unexpect, std::move(e.error())),
 1616|   576k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   576k|    {
 1618|   576k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   576k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   576k|          m_has_value(false)
  550|   576k|    {
  551|   576k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   576k|    {
 1316|   576k|    }
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6322|   171k|    {
 6323|   171k|        return m_error;
 6324|   171k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  2.91M|    {
 1740|  2.91M|        return has_value();
 1741|  2.91M|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   334k|    {
 6281|   334k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   334k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   432k|    {
 1740|   432k|        return has_value();
 1741|   432k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   865k|    {
  490|   865k|        return m_has_value;
  491|   865k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   129k|    {
 1746|   129k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   129k|        return this->get_unexpected().error();
 1748|   129k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   129k|    {
  473|   129k|        return m_unexpected;
  474|   129k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   199k|    {
 1805|   199k|        return std::move(value());
 1806|   199k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   303k|    {
 1769|   303k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   303k|        return this->get_value();
 1771|   303k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   303k|    {
  456|   303k|        return m_value;
  457|   303k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   263k|    {
 8971|   263k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   263k|    static_cast<    \
  |  |  935|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   263k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  1.33M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  1.33M|        : m_deferred_init(), m_has_value(true)
  529|  1.33M|    {
  530|  1.33M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  57.2k|    {
 5723|  57.2k|        return {val};
 5724|  57.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6353|   101k|    {
 6354|   101k|        return m_values;
 6355|   101k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.7k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.7k|    {
 6137|  55.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6192|   167k|        : m_desc(desc), m_values(data)
 6193|   167k|    {
 6194|   167k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   542k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   542k|    static_cast<    \
  |  |  935|   542k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   542k|    static_cast<    \
  |  |  935|   542k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   542k|    {
 3466|   542k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   167k|{
 8441|   167k|    return s;
 8442|   167k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   167k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  23.7k|        : m_str(r.str)
 8763|  23.7k|    {
 8764|  23.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  24.4k|    {
 1740|  24.4k|        return has_value();
 1741|  24.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  50.9k|    {
 1815|  50.9k|        return &value();
 1816|  50.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  50.9k|    {
 1769|  50.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  50.9k|        return this->get_value();
 1771|  50.9k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|  39.7k|    {
 6434|  39.7k|        return ranges::begin(m_range);
 6435|  39.7k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  11.8k|{
 9750|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  11.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  11.8k|                                   make_scan_args(result->values())));
 9753|  11.8k|    return result;
 9754|  11.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|  35.6k|{
 9479|  35.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  35.6k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  35.6k|{
 9414|  35.6k|#if !SCN_DISABLE_LOCALE
 9415|  35.6k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  35.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  35.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  35.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  35.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.7k, False: 19.8k]
  |  |  ------------------
  ------------------
 9422|  15.7k|        return unexpected(result.error());
 9423|  15.7k|    }
 9424|  19.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  35.6k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  2.24k|{
 9492|  2.24k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.24k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.24k|{
 9438|  2.24k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.24k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.24k|        return unexpected(result.error());
 9443|  2.24k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.24k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.49k|{
 5860|  1.49k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.49k|    basic_scan_arg<Context> arg;
 5863|  1.49k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.49k|    arg.m_value = make_value<Context>(value);
 5865|  1.49k|    return arg;
 5866|  1.49k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   171k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|   317k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.49k|    {
 6376|  4.49k|        return std::get<0>(m_values);
 6377|  4.49k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  11.8k|{
 9681|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  11.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  11.8k|                                   make_scan_args(result->values())));
 9684|  11.8k|    return result;
 9685|  11.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  24.4k|{
 9637|  24.4k|    return scan_result_type<Source, Args...>();
 9638|  24.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  24.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.4k|    {
  613|  24.4k|        construct();
  614|  24.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.4k|    {
  694|  24.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.4k|        m_has_value = true;
  696|  24.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  24.4k|{
  396|  24.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.4k|        T(std::forward<Args>(args)...);
  398|  24.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  24.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6344|   105k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  99.9k|    {
  718|  99.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  99.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  99.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.4k|{
 9622|  24.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  13.2k|    else {
 9626|  13.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.2k|    static_cast<    \
  |  |  935|  13.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.2k|    }
 9628|  24.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.2k|        : m_has_value(false)
  637|  11.2k|    {
  638|  11.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   134k|{
  396|   134k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   134k|        T(std::forward<Args>(args)...);
  398|   134k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  56.1k|    {
  730|  56.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  56.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  56.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  56.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   133k|    {
  687|   133k|        return m_has_value;
  688|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  50.9k|    {
  653|  50.9k|        return *value_ptr();
  654|  50.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.4k|    {
  708|  24.4k|        scn::detail::destroy_at(value_ptr());
  709|  24.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  24.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.4k|    else {
  408|  24.4k|        p->~T();
  409|  24.4k|    }
  410|  24.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  24.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.2k|    {
  678|  11.2k|        return std::move(*unexpected_ptr());
  679|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.4k|    {
  712|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.4k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   269k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   269k|    else {
  408|   269k|        p->~T();
  409|   269k|    }
  410|   269k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  23.7k|    {
 8768|  23.7k|        return m_str;
 8769|  23.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.7k|{
 6110|  55.7k|    detail::check_scan_arg_types<Args...>();
 6111|  55.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5824|   105k|{
 5825|   105k|    constexpr bool default_constructible_constraint =
 5826|   105k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   105k|    static_assert(default_constructible_constraint,
 5828|   105k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   105k|    constexpr bool destructible_constraint =
 5831|   105k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   105k|    static_assert(destructible_constraint,
 5833|   105k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   105k|    constexpr bool non_reference_constraint =
 5836|   105k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   105k|    static_assert(non_reference_constraint,
 5838|   105k|                  "Scan argument types must not be references");
 5839|       |
 5840|   105k|    constexpr bool movable_constraint =
 5841|   105k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   105k|    static_assert(movable_constraint,
 5843|   105k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   105k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   105k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   105k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.7k|    {
 6087|  55.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.7k|    {
 6095|  55.7k|        return {detail::make_arg<
 6096|  55.7k|            kind, Context,
 6097|  55.7k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.7k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  55.7k|{
 5884|  55.7k|    return make_value<Context>(value);
 5885|  55.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5809|  57.2k|{
 5810|  57.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  57.2k|    else {
 5817|  57.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  57.2k|            value, context_tag<Context>{}));
 5819|  57.2k|    }
 5820|  57.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  57.2k|    {
 5715|  57.2k|        return {};
 5716|  57.2k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  57.2k|{
 5779|  57.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  57.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  57.2k|    constexpr bool scannable_char =
 5783|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  57.2k|    static_assert(scannable_char,
 5785|  57.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  57.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  57.2k|    constexpr bool scannable_const =
 5789|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  57.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  57.2k|    constexpr bool scannable_disabled =
 5793|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  57.2k|    static_assert(scannable_disabled,
 5795|  57.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  57.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  57.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  57.2k|    static_assert(
 5800|  57.2k|        scannable,
 5801|  57.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  57.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  57.2k|    return arg_value{arg};
 5805|  57.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  57.2k|        : custom_value{static_cast<void*>(&val.val),
 5569|  57.2k|                       scan_custom_arg<T, Context>}
 5570|  57.2k|    {
 5571|  57.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  57.2k|    {
 5587|  57.2k|        static_assert(!is_type_disabled<T>,
 5588|  57.2k|                      "Scanning of custom types is disabled by "
 5589|  57.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  57.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  57.2k|        using context_type = Context;
 5593|  57.2k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  57.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  57.2k|        auto s = scanner_type{};
 5597|       |
 5598|  57.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  57.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  57.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  57.2k|#if SCN_HAS_EXCEPTIONS
 5603|  57.2k|        auto fmt_it = pctx_ref.begin();
 5604|  57.2k|        try {
 5605|  57.2k|            fmt_it = s.parse(pctx_ref);
 5606|  57.2k|        }
 5607|  57.2k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  57.2k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.49k, False: 55.7k]
  |  |  ------------------
  ------------------
 5628|  1.49k|            return e;
 5629|  1.49k|        }
 5630|  55.7k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  55.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  34.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.7k|    static_cast<    \
  |  |  935|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  34.7k|        return {};
 5636|  55.7k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  57.2k|    {
 5723|  57.2k|        return {val};
 5724|  57.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6353|   101k|    {
 6354|   101k|        return m_values;
 6355|   101k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.7k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.7k|    {
 6137|  55.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  23.7k|        : m_str(r.str)
 8763|  23.7k|    {
 8764|  23.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  24.4k|    {
 1740|  24.4k|        return has_value();
 1741|  24.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  50.9k|    {
 1815|  50.9k|        return &value();
 1816|  50.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  50.9k|    {
 1769|  50.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  50.9k|        return this->get_value();
 1771|  50.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  35.7k|    {
  643|  35.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.2k, False: 22.4k]
  ------------------
  644|  13.2k|            destroy_value();
  645|  13.2k|        }
  646|  22.4k|        else {
  647|  22.4k|            destroy_unexpected();
  648|  22.4k|        }
  649|  35.7k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  11.8k|{
 9750|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  11.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  11.8k|                                   make_scan_args(result->values())));
 9753|  11.8k|    return result;
 9754|  11.8k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.49k|{
 5860|  1.49k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.49k|    basic_scan_arg<Context> arg;
 5863|  1.49k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.49k|    arg.m_value = make_value<Context>(value);
 5865|  1.49k|    return arg;
 5866|  1.49k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.49k|    {
 6376|  4.49k|        return std::get<0>(m_values);
 6377|  4.49k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9680|  11.8k|{
 9681|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9682|  11.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  11.8k|                                   make_scan_args(result->values())));
 9684|  11.8k|    return result;
 9685|  11.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  24.4k|{
 9637|  24.4k|    return scan_result_type<Source, Args...>();
 9638|  24.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  24.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.4k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.4k|    {
  613|  24.4k|        construct();
  614|  24.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.4k|    {
  694|  24.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.4k|        m_has_value = true;
  696|  24.4k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  24.4k|{
  396|  24.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.4k|        T(std::forward<Args>(args)...);
  398|  24.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  24.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6344|   105k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  99.9k|    {
  718|  99.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  99.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  99.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.4k|{
 9622|  24.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  13.2k|    else {
 9626|  13.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  13.2k|    static_cast<    \
  |  |  935|  13.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  13.2k|    }
 9628|  24.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  11.2k|        : m_has_value(false)
  637|  11.2k|    {
  638|  11.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  56.1k|    {
  730|  56.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  56.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  56.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  56.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   133k|    {
  687|   133k|        return m_has_value;
  688|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  50.9k|    {
  653|  50.9k|        return *value_ptr();
  654|  50.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.4k|    {
  708|  24.4k|        scn::detail::destroy_at(value_ptr());
  709|  24.4k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  24.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.4k|    else {
  408|  24.4k|        p->~T();
  409|  24.4k|    }
  410|  24.4k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  24.4k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.2k|    {
  678|  11.2k|        return std::move(*unexpected_ptr());
  679|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.4k|    {
  712|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8767|  23.7k|    {
 8768|  23.7k|        return m_str;
 8769|  23.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  55.7k|{
 6110|  55.7k|    detail::check_scan_arg_types<Args...>();
 6111|  55.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  55.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5824|   105k|{
 5825|   105k|    constexpr bool default_constructible_constraint =
 5826|   105k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   105k|    static_assert(default_constructible_constraint,
 5828|   105k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   105k|    constexpr bool destructible_constraint =
 5831|   105k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   105k|    static_assert(destructible_constraint,
 5833|   105k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   105k|    constexpr bool non_reference_constraint =
 5836|   105k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   105k|    static_assert(non_reference_constraint,
 5838|   105k|                  "Scan argument types must not be references");
 5839|       |
 5840|   105k|    constexpr bool movable_constraint =
 5841|   105k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   105k|    static_assert(movable_constraint,
 5843|   105k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   105k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   105k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   105k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  55.7k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  55.7k|    {
 6087|  55.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  55.7k|    {
 6095|  55.7k|        return {detail::make_arg<
 6096|  55.7k|            kind, Context,
 6097|  55.7k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  55.7k|                                 typename Context::char_type>::value>(args)...};
 6099|  55.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  55.7k|{
 5884|  55.7k|    return make_value<Context>(value);
 5885|  55.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5809|  57.2k|{
 5810|  57.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  57.2k|    else {
 5817|  57.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  57.2k|            value, context_tag<Context>{}));
 5819|  57.2k|    }
 5820|  57.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  57.2k|    {
 5715|  57.2k|        return {};
 5716|  57.2k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5778|  57.2k|{
 5779|  57.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  57.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  57.2k|    constexpr bool scannable_char =
 5783|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  57.2k|    static_assert(scannable_char,
 5785|  57.2k|                  "Cannot scan an argument of an unsupported character "
 5786|  57.2k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  57.2k|    constexpr bool scannable_const =
 5789|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  57.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  57.2k|    constexpr bool scannable_disabled =
 5793|  57.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  57.2k|    static_assert(scannable_disabled,
 5795|  57.2k|                  "Cannot scan an argument that has been disabled by "
 5796|  57.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  57.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  57.2k|    static_assert(
 5800|  57.2k|        scannable,
 5801|  57.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  57.2k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  57.2k|    return arg_value{arg};
 5805|  57.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  57.2k|        : custom_value{static_cast<void*>(&val.val),
 5569|  57.2k|                       scan_custom_arg<T, Context>}
 5570|  57.2k|    {
 5571|  57.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  57.2k|    {
 5587|  57.2k|        static_assert(!is_type_disabled<T>,
 5588|  57.2k|                      "Scanning of custom types is disabled by "
 5589|  57.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  57.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  57.2k|        using context_type = Context;
 5593|  57.2k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  57.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  57.2k|        auto s = scanner_type{};
 5597|       |
 5598|  57.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  57.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  57.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  57.2k|#if SCN_HAS_EXCEPTIONS
 5603|  57.2k|        auto fmt_it = pctx_ref.begin();
 5604|  57.2k|        try {
 5605|  57.2k|            fmt_it = s.parse(pctx_ref);
 5606|  57.2k|        }
 5607|  57.2k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  57.2k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.49k, False: 55.7k]
  |  |  ------------------
  ------------------
 5628|  1.49k|            return e;
 5629|  1.49k|        }
 5630|  55.7k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  55.7k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  55.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  55.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  34.7k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  34.7k|    static_cast<    \
  |  |  935|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  34.7k|        return {};
 5636|  55.7k|    }
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  57.2k|    {
 5723|  57.2k|        return {val};
 5724|  57.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6353|   101k|    {
 6354|   101k|        return m_values;
 6355|   101k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  55.7k|        : basic_scan_args(store.desc, store.args.data())
 6136|  55.7k|    {
 6137|  55.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  23.7k|        : m_str(r.str)
 8763|  23.7k|    {
 8764|  23.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  24.4k|    {
 1740|  24.4k|        return has_value();
 1741|  24.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  50.9k|    {
 1815|  50.9k|        return &value();
 1816|  50.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  50.9k|    {
 1769|  50.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  50.9k|        return this->get_value();
 1771|  50.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  35.7k|    {
  643|  35.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 13.2k, False: 22.4k]
  ------------------
  644|  13.2k|            destroy_value();
  645|  13.2k|        }
  646|  22.4k|        else {
  647|  22.4k|            destroy_unexpected();
  648|  22.4k|        }
  649|  35.7k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9749|  11.8k|{
 9750|  11.8k|    auto result = make_scan_result<Source, Args...>();
 9751|  11.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  11.8k|                                   make_scan_args(result->values())));
 9753|  11.8k|    return result;
 9754|  11.8k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  1.49k|{
 5860|  1.49k|    check_scan_arg_types<T>();
 5861|       |
 5862|  1.49k|    basic_scan_arg<Context> arg;
 5863|  1.49k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  1.49k|    arg.m_value = make_value<Context>(value);
 5865|  1.49k|    return arg;
 5866|  1.49k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  4.49k|    {
 6376|  4.49k|        return std::get<0>(m_values);
 6377|  4.49k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  33.7k|    {
 2869|  33.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  33.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  33.7k|    {
 2850|  33.7k|        return decay_copy(t.begin());
 2851|  33.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  3.03M|{
 2094|  3.03M|    return SCN_FWD(t);
  ------------------
  |  |  936|  3.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  3.03M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   196k|    {
 2926|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   196k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   196k|    {
 2908|   196k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   196k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  16.0k|{
 9681|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  16.0k|                                   make_scan_args(result->values())));
 9684|  16.0k|    return result;
 9685|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9636|  32.7k|{
 9637|  32.7k|    return scan_result_type<Source, Args...>();
 9638|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  32.7k|        : m_value(T{}), m_has_value(true)
  427|  32.7k|    {
  428|  32.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6570|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|  98.3k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  98.3k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  32.7k|{
 9622|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  21.5k|    else {
 9626|  21.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  21.5k|    static_cast<    \
  |  |  935|  21.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  21.5k|    }
 9628|  32.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  98.3k|    {
 1740|  98.3k|        return has_value();
 1741|  98.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   196k|    {
  490|   196k|        return m_has_value;
  491|   196k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  33.7k|    {
 1746|  33.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  33.7k|        return this->get_unexpected().error();
 1748|  33.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  33.7k|    {
  473|  33.7k|        return m_unexpected;
  474|  33.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  11.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.2k|          m_has_value(false)
  451|  11.2k|    {
  452|  11.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   131k|    {
  490|   131k|        return m_has_value;
  491|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  75.8k|    {
  456|  75.8k|        return m_value;
  457|  75.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  11.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  11.2k|    {
  504|  11.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  11.2k|                                  std::forward<Args>(args)...);
  506|  11.2k|        m_has_value = false;
  507|  11.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.2k|    {
  473|  11.2k|        return m_unexpected;
  474|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  11.2k|    {
  481|  11.2k|        return std::move(m_unexpected);
  482|  11.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  64.6k|    {
 6445|  64.6k|        m_range = std::forward<Other>(r);
 6446|  64.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  64.6k|    {
 1795|  64.6k|        return value();
 1796|  64.6k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  64.6k|    {
 1769|  64.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  64.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  64.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  64.6k|        return this->get_value();
 1771|  64.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  64.6k|    {
  456|  64.6k|        return m_value;
  457|  64.6k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|  48.0k|{
 9461|  48.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  48.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  48.0k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  48.0k|{
 9398|  48.0k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  48.0k|    auto result = vscan_impl(buffer, format, args);
 9401|  48.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.7k, False: 32.3k]
  |  |  ------------------
  ------------------
 9402|  15.7k|        return unexpected(result.error());
 9403|  15.7k|    }
 9404|  32.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  48.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  98.3k|{
 5381|  98.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  98.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  98.3k|                  "\n"
 5385|  98.3k|                  "Unsupported range type given as input to a scanning "
 5386|  98.3k|                  "function.\n"
 5387|  98.3k|                  "A range needs to have a character type (value type) "
 5388|  98.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  98.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  98.3k|                  "to be included.\n"
 5391|  98.3k|                  "See the scnlib documentation for more details.");
 5392|  98.3k|    static_assert(
 5393|  98.3k|        !std::is_same_v<T, custom_char_traits>,
 5394|  98.3k|        "\n"
 5395|  98.3k|        "Unsupported range type given as input to a scanning "
 5396|  98.3k|        "function.\n"
 5397|  98.3k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  98.3k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  98.3k|        "not supported.");
 5400|  98.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  98.3k|                  "\n"
 5402|  98.3k|                  "Unsupported range type given as input to a scanning "
 5403|  98.3k|                  "function.\n"
 5404|  98.3k|                  "file_marker_found cannot be used as an "
 5405|  98.3k|                  "source range type to scn::scan.\n"
 5406|  98.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  98.3k|                  "and do not provide an explicit source range, "
 5408|  98.3k|                  "or use scn::scan with a FILE* directly.");
 5409|  98.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  98.3k|                  "\n"
 5411|  98.3k|                  "Unsupported range type given as input to a scanning "
 5412|  98.3k|                  "function.\n"
 5413|  98.3k|                  "In order to be scannable, a range needs to satisfy "
 5414|  98.3k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  98.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  98.3k|                  "\n"
 5417|  98.3k|                  "Unsupported range type given as input to a scanning "
 5418|  98.3k|                  "function.\n"
 5419|  98.3k|                  "A range needs to model forward_range and have a valid "
 5420|  98.3k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  98.3k|                  "Examples of scannable ranges are std::string, "
 5422|  98.3k|                  "std::string_view, "
 5423|  98.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  98.3k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  98.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  98.3k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  98.3k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  98.3k|    else {
 5366|  98.3k|        return make_forward_scan_buffer(r);
 5367|  98.3k|    }
 5368|  98.3k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  98.3k|{
 5185|  98.3k|    return basic_scan_forward_buffer_impl(range);
 5186|  98.3k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  98.3k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  98.3k|          m_cursor(ranges::begin(*m_range))
 4766|  98.3k|    {
 4767|  98.3k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  98.3k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  98.3k|    {
 4738|  98.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  98.3k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  98.3k|    {
 4429|  98.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   169k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   162k|    {
 2869|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   162k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   162k|    {
 2850|   162k|        return decay_copy(t.begin());
 2851|   162k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   227k|    {
 3480|   227k|        return m_iterator;
 3481|   227k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|   845k|    {
 4771|   845k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 12.4k, False: 832k]
  ------------------
 4772|  12.4k|            return false;
 4773|  12.4k|        }
 4774|   832k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   832k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   832k|        }
 4777|   832k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 736k, False: 95.9k]
  ------------------
 4778|   736k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   736k|                                          this->m_current_view.begin(),
 4780|   736k|                                          this->m_current_view.end());
 4781|   736k|        }
 4782|   832k|        m_latest = *m_cursor;
 4783|   832k|        ++m_cursor;
 4784|   832k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   832k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   832k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   832k|        }
 4788|   832k|        return true;
 4789|   845k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.51M|    {
 2926|  2.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.51M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.51M|    {
 2908|  2.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.51M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  2.57M|    {
 3484|  2.57M|        return m_sentinel;
 3485|  2.57M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  98.3k|    {
 4346|  98.3k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  98.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  98.3k|        return true;
 4348|  98.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  33.7k|        : base(unexpect, std::move(e.error())),
 1616|  33.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.7k|    {
 1618|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  33.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  33.7k|          m_has_value(false)
  451|  33.7k|    {
  452|  33.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  98.3k|    {
 1316|  98.3k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  64.6k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  64.6k|                      ranges::iterator_t<SourceRange>>) {
 6677|  64.6k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  64.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  64.6k|    {
 2869|  64.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  64.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  64.6k|    {
 2850|  64.6k|        return decay_copy(t.begin());
 2851|  64.6k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|  64.6k|{
 6662|  64.6k|    return ranges::end(source);
 6663|  64.6k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  64.6k|    {
 2926|  64.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  64.6k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  64.6k|    {
 2908|  64.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  64.6k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  64.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  64.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  64.6k|    {
 1572|  64.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  64.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  64.6k|    {
  442|  64.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  32.0k|    {
 8768|  32.0k|        return m_str;
 8769|  32.0k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   162k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   162k|    static_cast<    \
  |  |  935|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   162k|    static_cast<    \
  |  |  935|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   162k|    {
 3466|   162k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  32.0k|        : m_str(r.str)
 8763|  32.0k|    {
 8764|  32.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  32.7k|    {
 1740|  32.7k|        return has_value();
 1741|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  75.8k|    {
 1815|  75.8k|        return &value();
 1816|  75.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  75.8k|    {
 1769|  75.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  75.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  75.8k|        return this->get_value();
 1771|  75.8k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|  64.6k|    {
 6434|  64.6k|        return ranges::begin(m_range);
 6435|  64.6k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  16.0k|{
 9750|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  16.0k|                                   make_scan_args(result->values())));
 9753|  16.0k|    return result;
 9754|  16.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|  48.0k|{
 9479|  48.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  48.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  48.0k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  48.0k|{
 9414|  48.0k|#if !SCN_DISABLE_LOCALE
 9415|  48.0k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  48.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  48.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  48.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  48.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.7k, False: 32.3k]
  |  |  ------------------
  ------------------
 9422|  15.7k|        return unexpected(result.error());
 9423|  15.7k|    }
 9424|  32.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  48.0k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  2.24k|{
 9492|  2.24k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  2.24k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  2.24k|{
 9438|  2.24k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  2.24k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  2.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  ------------------
  ------------------
 9442|  2.24k|        return unexpected(result.error());
 9443|  2.24k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  2.24k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  16.0k|{
 9681|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  16.0k|                                   make_scan_args(result->values())));
 9684|  16.0k|    return result;
 9685|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  32.7k|{
 9637|  32.7k|    return scan_result_type<Source, Args...>();
 9638|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.7k|    {
  613|  32.7k|        construct();
  614|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.7k|    {
  694|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.7k|        m_has_value = true;
  696|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  32.7k|{
  396|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.7k|        T(std::forward<Args>(args)...);
  398|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   141k|    {
  718|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  32.7k|{
 9622|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  21.5k|    else {
 9626|  21.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  21.5k|    static_cast<    \
  |  |  935|  21.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  21.5k|    }
 9628|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.2k|        : m_has_value(false)
  637|  11.2k|    {
  638|  11.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  56.1k|    {
  730|  56.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  56.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  56.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  56.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   175k|    {
  687|   175k|        return m_has_value;
  688|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  75.8k|    {
  653|  75.8k|        return *value_ptr();
  654|  75.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.7k|    {
  708|  32.7k|        scn::detail::destroy_at(value_ptr());
  709|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  32.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.7k|    else {
  408|  32.7k|        p->~T();
  409|  32.7k|    }
  410|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.2k|    {
  678|  11.2k|        return std::move(*unexpected_ptr());
  679|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.4k|    {
  712|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  32.0k|    {
 8768|  32.0k|        return m_str;
 8769|  32.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  32.0k|        : m_str(r.str)
 8763|  32.0k|    {
 8764|  32.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  32.7k|    {
 1740|  32.7k|        return has_value();
 1741|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  75.8k|    {
 1815|  75.8k|        return &value();
 1816|  75.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  75.8k|    {
 1769|  75.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  75.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  75.8k|        return this->get_value();
 1771|  75.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  44.0k|    {
  643|  44.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 21.5k, False: 22.4k]
  ------------------
  644|  21.5k|            destroy_value();
  645|  21.5k|        }
  646|  22.4k|        else {
  647|  22.4k|            destroy_unexpected();
  648|  22.4k|        }
  649|  44.0k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  16.0k|{
 9750|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  16.0k|                                   make_scan_args(result->values())));
 9753|  16.0k|    return result;
 9754|  16.0k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  16.0k|{
 9681|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  16.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  16.0k|                                   make_scan_args(result->values())));
 9684|  16.0k|    return result;
 9685|  16.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  32.7k|{
 9637|  32.7k|    return scan_result_type<Source, Args...>();
 9638|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  32.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  32.7k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  32.7k|    {
  613|  32.7k|        construct();
  614|  32.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  32.7k|    {
  694|  32.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  32.7k|        m_has_value = true;
  696|  32.7k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  32.7k|{
  396|  32.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  32.7k|        T(std::forward<Args>(args)...);
  398|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  32.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   141k|    {
  718|   141k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   141k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   141k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  32.7k|{
 9622|  32.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 21.5k]
  |  |  ------------------
  ------------------
 9623|  11.2k|        out = unexpected(in.error());
 9624|  11.2k|    }
 9625|  21.5k|    else {
 9626|  21.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  21.5k|    static_cast<    \
  |  |  935|  21.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  21.5k|    }
 9628|  32.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  11.2k|        : base(unexpect, std::move(e.error())),
 1616|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.2k|    {
 1618|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  11.2k|        : m_has_value(false)
  637|  11.2k|    {
  638|  11.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  56.1k|    {
  730|  56.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  56.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  56.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  56.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.2k|    {
 1316|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  11.2k|    {
  903|  11.2k|        assign_common(std::move(other));
  904|  11.2k|        return *this;
  905|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  11.2k|    {
  950|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 11.2k, False: 0]
  ------------------
  951|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 11.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  11.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   175k|    {
  687|   175k|        return m_has_value;
  688|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  75.8k|    {
  653|  75.8k|        return *value_ptr();
  654|  75.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  11.2k|    {
 1046|  11.2k|        this->destroy_value();
 1047|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  32.7k|    {
  708|  32.7k|        scn::detail::destroy_at(value_ptr());
  709|  32.7k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  32.7k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  32.7k|    else {
  408|  32.7k|        p->~T();
  409|  32.7k|    }
  410|  32.7k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  32.7k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  11.2k|    {
  701|  11.2k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.2k|                                  std::forward<Args>(args)...);
  703|  11.2k|        m_has_value = false;
  704|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  11.2k|    {
  678|  11.2k|        return std::move(*unexpected_ptr());
  679|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  22.4k|    {
  712|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  22.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  32.0k|    {
 8768|  32.0k|        return m_str;
 8769|  32.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  32.0k|        : m_str(r.str)
 8763|  32.0k|    {
 8764|  32.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  32.7k|    {
 1740|  32.7k|        return has_value();
 1741|  32.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  75.8k|    {
 1815|  75.8k|        return &value();
 1816|  75.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  75.8k|    {
 1769|  75.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  75.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  75.8k|        return this->get_value();
 1771|  75.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  44.0k|    {
  643|  44.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 21.5k, False: 22.4k]
  ------------------
  644|  21.5k|            destroy_value();
  645|  21.5k|        }
  646|  22.4k|        else {
  647|  22.4k|            destroy_unexpected();
  648|  22.4k|        }
  649|  44.0k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  16.0k|{
 9750|  16.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  16.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  16.0k|                                   make_scan_args(result->values())));
 9753|  16.0k|    return result;
 9754|  16.0k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|    749|{
 9791|    749|    auto result = make_scan_result<Source, T>();
 9792|    749|    fill_scan_result(
 9793|    749|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|    749|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|    749|                            detail::make_arg<scan_context>(result->value())));
 9795|    749|    return result;
 9796|    749|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  68.9k|    {
 2869|  68.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  68.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  68.9k|    {
 2850|  68.9k|        return decay_copy(t.begin());
 2851|  68.9k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|   716k|{
 2094|   716k|    return SCN_FWD(t);
  ------------------
  |  |  936|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   716k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   146k|    {
 2926|   146k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   146k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   146k|    {
 2908|   146k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   146k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  24.2k|        : m_value(T{}), m_has_value(true)
  427|  24.2k|    {
  428|  24.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  72.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  72.6k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  72.6k|    {
 1740|  72.6k|        return has_value();
 1741|  72.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   145k|    {
  490|   145k|        return m_has_value;
  491|   145k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  67.4k|    {
 1746|  67.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  67.4k|        return this->get_unexpected().error();
 1748|  67.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  67.4k|    {
  473|  67.4k|        return m_unexpected;
  474|  67.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  449|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.4k|          m_has_value(false)
  451|  22.4k|    {
  452|  22.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  96.9k|    {
  490|  96.9k|        return m_has_value;
  491|  96.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  27.7k|    {
  456|  27.7k|        return m_value;
  457|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  22.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  503|  22.4k|    {
  504|  22.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  22.4k|                                  std::forward<Args>(args)...);
  506|  22.4k|        m_has_value = false;
  507|  22.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  22.4k|    {
  473|  22.4k|        return m_unexpected;
  474|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  22.4k|    {
  481|  22.4k|        return std::move(m_unexpected);
  482|  22.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  5.28k|    {
 6445|  5.28k|        m_range = std::forward<Other>(r);
 6446|  5.28k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  5.28k|    {
 1795|  5.28k|        return value();
 1796|  5.28k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  5.28k|    {
 1769|  5.28k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.28k|        return this->get_value();
 1771|  5.28k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.28k|    {
  456|  5.28k|        return m_value;
  457|  5.28k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  34.0k|{
 9398|  34.0k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  34.0k|    auto result = vscan_impl(buffer, format, args);
 9401|  34.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 2.64k]
  |  |  ------------------
  ------------------
 9402|  31.4k|        return unexpected(result.error());
 9403|  31.4k|    }
 9404|  2.64k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  34.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  72.6k|{
 5381|  72.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  72.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  72.6k|                  "\n"
 5385|  72.6k|                  "Unsupported range type given as input to a scanning "
 5386|  72.6k|                  "function.\n"
 5387|  72.6k|                  "A range needs to have a character type (value type) "
 5388|  72.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  72.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  72.6k|                  "to be included.\n"
 5391|  72.6k|                  "See the scnlib documentation for more details.");
 5392|  72.6k|    static_assert(
 5393|  72.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  72.6k|        "\n"
 5395|  72.6k|        "Unsupported range type given as input to a scanning "
 5396|  72.6k|        "function.\n"
 5397|  72.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  72.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  72.6k|        "not supported.");
 5400|  72.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  72.6k|                  "\n"
 5402|  72.6k|                  "Unsupported range type given as input to a scanning "
 5403|  72.6k|                  "function.\n"
 5404|  72.6k|                  "file_marker_found cannot be used as an "
 5405|  72.6k|                  "source range type to scn::scan.\n"
 5406|  72.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  72.6k|                  "and do not provide an explicit source range, "
 5408|  72.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  72.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  72.6k|                  "\n"
 5411|  72.6k|                  "Unsupported range type given as input to a scanning "
 5412|  72.6k|                  "function.\n"
 5413|  72.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  72.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  72.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  72.6k|                  "\n"
 5417|  72.6k|                  "Unsupported range type given as input to a scanning "
 5418|  72.6k|                  "function.\n"
 5419|  72.6k|                  "A range needs to model forward_range and have a valid "
 5420|  72.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  72.6k|                  "Examples of scannable ranges are std::string, "
 5422|  72.6k|                  "std::string_view, "
 5423|  72.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  72.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  72.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  72.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  72.6k|{
 5320|  72.6k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  72.6k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  72.6k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  72.6k|    {
 3000|  72.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  72.6k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  72.6k|    {
 2981|  72.6k|        return t.data();
 2982|  72.6k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  72.6k|    {
 3383|  72.6k|        return detail::to_address(ranges::begin(derived()));
 3384|  72.6k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   213k|{
  316|   213k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   213k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   213k|{
  294|   213k|    return p;
  295|   213k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  77.9k|    {
 2869|  77.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  77.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  77.9k|    {
 2850|  77.9k|        return decay_copy(t.begin());
 2851|  77.9k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  1.16M|    {
 3480|  1.16M|        return m_iterator;
 3481|  1.16M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  72.6k|    {
 3339|  72.6k|        return static_cast<const D&>(*this);
 3340|  72.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  72.6k|    {
 3075|  72.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  72.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  72.6k|    {
 3041|  72.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  72.6k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   218k|    {
 3496|   218k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   218k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  67.4k|        : base(unexpect, std::move(e.error())),
 1616|  67.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.4k|    {
 1618|  67.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  67.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  67.4k|          m_has_value(false)
  451|  67.4k|    {
  452|  67.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  72.6k|    {
 1316|  72.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  5.28k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  5.28k|                      ranges::iterator_t<SourceRange>>) {
 6677|  5.28k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  5.28k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   213k|    {
 2869|   213k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   213k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   213k|    {
 2850|   213k|        return decay_copy(t.begin());
 2851|   213k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  5.28k|{
 6662|  5.28k|    return ranges::end(source);
 6663|  5.28k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  72.8k|    {
 2926|  72.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  72.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  72.8k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  72.8k|    {
 2908|  72.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  72.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  72.8k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   904k|    {
 3484|   904k|        return m_sentinel;
 3485|   904k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  5.28k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.28k|    {
 1572|  5.28k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  5.28k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.28k|    {
  442|  5.28k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  45.4k|{
 6110|  45.4k|    detail::check_scan_arg_types<Args...>();
 6111|  45.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  45.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  45.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  45.4k|    {
 6087|  45.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  45.4k|    {
 6095|  45.4k|        return {detail::make_arg<
 6096|  45.4k|            kind, Context,
 6097|  45.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  45.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  45.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25E2tmvEENS1_9arg_valueERT2_:
 5883|  45.4k|{
 5884|  45.4k|    return make_value<Context>(value);
 5885|  45.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5809|  48.4k|{
 5810|  48.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  48.4k|    else {
 5817|  48.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  48.4k|            value, context_tag<Context>{}));
 5819|  48.4k|    }
 5820|  48.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  48.4k|    {
 5715|  48.4k|        return {};
 5716|  48.4k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  48.4k|{
 5779|  48.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  48.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  48.4k|    constexpr bool scannable_char =
 5783|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  48.4k|    static_assert(scannable_char,
 5785|  48.4k|                  "Cannot scan an argument of an unsupported character "
 5786|  48.4k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  48.4k|    constexpr bool scannable_const =
 5789|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  48.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  48.4k|    constexpr bool scannable_disabled =
 5793|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  48.4k|    static_assert(scannable_disabled,
 5795|  48.4k|                  "Cannot scan an argument that has been disabled by "
 5796|  48.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  48.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  48.4k|    static_assert(
 5800|  48.4k|        scannable,
 5801|  48.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  48.4k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  48.4k|    return arg_value{arg};
 5805|  48.4k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  48.4k|        : custom_value{static_cast<void*>(&val.val),
 5569|  48.4k|                       scan_custom_arg<T, Context>}
 5570|  48.4k|    {
 5571|  48.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  48.4k|    {
 5587|  48.4k|        static_assert(!is_type_disabled<T>,
 5588|  48.4k|                      "Scanning of custom types is disabled by "
 5589|  48.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  48.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  48.4k|        using context_type = Context;
 5593|  48.4k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  48.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  48.4k|        auto s = scanner_type{};
 5597|       |
 5598|  48.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  48.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  48.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  48.4k|#if SCN_HAS_EXCEPTIONS
 5603|  48.4k|        auto fmt_it = pctx_ref.begin();
 5604|  48.4k|        try {
 5605|  48.4k|            fmt_it = s.parse(pctx_ref);
 5606|  48.4k|        }
 5607|  48.4k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  48.4k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 45.4k]
  |  |  ------------------
  ------------------
 5628|  2.99k|            return e;
 5629|  2.99k|        }
 5630|  45.4k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  45.4k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.9k, False: 3.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.9k|    }                                                  \
  |  |  |  | 3939|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  3.52k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  3.52k|    static_cast<    \
  |  |  935|  3.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  3.52k|        return {};
 5636|  45.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   699k|    {
 6270|   699k|        return m_format.data();
 6271|   699k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6274|   145k|    {
 6275|   145k|        return m_format.data() + m_format.size();
 6276|   145k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6315|  8.98k|    {
 6316|  8.98k|        m_error = unexpected(detail::handle_error(
 6317|  8.98k|            scan_error{scan_error::invalid_format_string, msg}));
 6318|  8.98k|        return m_error.error();
 6319|  8.98k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   304k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   304k|    else {
 4075|       |        // utf-32
 4076|   304k|        static_assert(sizeof(U) == 4);
 4077|   304k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   304k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   304k|        return 1;
 4079|   304k|    }
 4080|   304k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   214k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   214k|    else {
 4281|   214k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   214k|        auto cp = static_cast<char32_t>(input.front());
 4283|   214k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.6k, False: 172k]
  |  |  ------------------
  ------------------
 4284|  42.6k|            return invalid_code_point;
 4285|  42.6k|        }
 4286|   172k|        return cp;
 4287|   214k|    }
 4288|   214k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   272k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   272k|    else {
 3981|   272k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   272k|    }
 3983|   272k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6322|   145k|    {
 6323|   145k|        return m_error;
 6324|   145k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   272k|    {
 6281|   272k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   272k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   345k|    {
 1740|   345k|        return has_value();
 1741|   345k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   690k|    {
  490|   690k|        return m_has_value;
  491|   690k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   256k|    {
 1746|   256k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   256k|        return this->get_unexpected().error();
 1748|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   256k|    {
  473|   256k|        return m_unexpected;
  474|   256k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  78.0k|    {
 1805|  78.0k|        return std::move(value());
 1806|  78.0k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  88.6k|    {
 1769|  88.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  88.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  88.6k|        return this->get_value();
 1771|  88.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  88.6k|    {
  456|  88.6k|        return m_value;
  457|  88.6k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|  83.3k|    {
 8971|  83.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  83.3k|    static_cast<    \
  |  |  935|  83.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  83.3k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  48.4k|    {
 5723|  48.4k|        return {val};
 5724|  48.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  45.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  45.4k|    {
 6137|  45.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6192|   136k|        : m_desc(desc), m_values(data)
 6193|   136k|    {
 6194|   136k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   598k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   598k|    static_cast<    \
  |  |  935|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   598k|    static_cast<    \
  |  |  935|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   598k|    {
 3466|   598k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   136k|{
 8446|   136k|    return s;
 8447|   136k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   136k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  5.28k|    {
 6434|  5.28k|        return ranges::begin(m_range);
 6435|  5.28k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  34.0k|{
 9414|  34.0k|#if !SCN_DISABLE_LOCALE
 9415|  34.0k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  34.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  34.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  34.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  34.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 2.64k]
  |  |  ------------------
  ------------------
 9422|  31.4k|        return unexpected(result.error());
 9423|  31.4k|    }
 9424|  2.64k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  34.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.49k|{
 9438|  4.49k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.49k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.49k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.49k|        return unexpected(result.error());
 9443|  4.49k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.49k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.99k|{
 5860|  2.99k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.99k|    basic_scan_arg<Context> arg;
 5863|  2.99k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.99k|    arg.m_value = make_value<Context>(value);
 5865|  2.99k|    return arg;
 5866|  2.99k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   145k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.2k|    {
  613|  24.2k|        construct();
  614|  24.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.2k|    {
  694|  24.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.2k|        m_has_value = true;
  696|  24.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  395|  24.2k|{
  396|  24.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.2k|        T(std::forward<Args>(args)...);
  398|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  76.2k|    {
  718|  76.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  76.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  76.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  22.4k|        : m_has_value(false)
  637|  22.4k|    {
  638|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   112k|    {
  730|   112k|        return reinterpret_cast<unexpected<E>*>(
  731|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   112k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  27.7k|    {
  653|  27.7k|        return *value_ptr();
  654|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.2k|    {
  708|  24.2k|        scn::detail::destroy_at(value_ptr());
  709|  24.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  24.2k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.2k|    else {
  408|  24.2k|        p->~T();
  409|  24.2k|    }
  410|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  24.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.4k|    {
  678|  22.4k|        return std::move(*unexpected_ptr());
  679|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  44.9k|    {
  712|  44.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  44.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  45.4k|{
 6110|  45.4k|    detail::check_scan_arg_types<Args...>();
 6111|  45.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  45.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  45.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  45.4k|    {
 6087|  45.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  45.4k|    {
 6095|  45.4k|        return {detail::make_arg<
 6096|  45.4k|            kind, Context,
 6097|  45.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  45.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  45.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5883|  45.4k|{
 5884|  45.4k|    return make_value<Context>(value);
 5885|  45.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5809|  48.4k|{
 5810|  48.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  48.4k|    else {
 5817|  48.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  48.4k|            value, context_tag<Context>{}));
 5819|  48.4k|    }
 5820|  48.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  48.4k|    {
 5715|  48.4k|        return {};
 5716|  48.4k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  48.4k|{
 5779|  48.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  48.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  48.4k|    constexpr bool scannable_char =
 5783|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  48.4k|    static_assert(scannable_char,
 5785|  48.4k|                  "Cannot scan an argument of an unsupported character "
 5786|  48.4k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  48.4k|    constexpr bool scannable_const =
 5789|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  48.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  48.4k|    constexpr bool scannable_disabled =
 5793|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  48.4k|    static_assert(scannable_disabled,
 5795|  48.4k|                  "Cannot scan an argument that has been disabled by "
 5796|  48.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  48.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  48.4k|    static_assert(
 5800|  48.4k|        scannable,
 5801|  48.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  48.4k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  48.4k|    return arg_value{arg};
 5805|  48.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  48.4k|        : custom_value{static_cast<void*>(&val.val),
 5569|  48.4k|                       scan_custom_arg<T, Context>}
 5570|  48.4k|    {
 5571|  48.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  48.4k|    {
 5587|  48.4k|        static_assert(!is_type_disabled<T>,
 5588|  48.4k|                      "Scanning of custom types is disabled by "
 5589|  48.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  48.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  48.4k|        using context_type = Context;
 5593|  48.4k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  48.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  48.4k|        auto s = scanner_type{};
 5597|       |
 5598|  48.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  48.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  48.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  48.4k|#if SCN_HAS_EXCEPTIONS
 5603|  48.4k|        auto fmt_it = pctx_ref.begin();
 5604|  48.4k|        try {
 5605|  48.4k|            fmt_it = s.parse(pctx_ref);
 5606|  48.4k|        }
 5607|  48.4k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  48.4k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 45.4k]
  |  |  ------------------
  ------------------
 5628|  2.99k|            return e;
 5629|  2.99k|        }
 5630|  45.4k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  45.4k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.9k, False: 3.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.9k|    }                                                  \
  |  |  |  | 3939|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  3.52k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  3.52k|    static_cast<    \
  |  |  935|  3.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  3.52k|        return {};
 5636|  45.4k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  48.4k|    {
 5723|  48.4k|        return {val};
 5724|  48.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  45.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  45.4k|    {
 6137|  45.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  46.7k|    {
  643|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 1.76k, False: 44.9k]
  ------------------
  644|  1.76k|            destroy_value();
  645|  1.76k|        }
  646|  44.9k|        else {
  647|  44.9k|            destroy_unexpected();
  648|  44.9k|        }
  649|  46.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.99k|{
 5860|  2.99k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.99k|    basic_scan_arg<Context> arg;
 5863|  2.99k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.99k|    arg.m_value = make_value<Context>(value);
 5865|  2.99k|    return arg;
 5866|  2.99k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.2k|    {
  613|  24.2k|        construct();
  614|  24.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.2k|    {
  694|  24.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.2k|        m_has_value = true;
  696|  24.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  395|  24.2k|{
  396|  24.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.2k|        T(std::forward<Args>(args)...);
  398|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  76.2k|    {
  718|  76.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  76.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  76.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  636|  22.4k|        : m_has_value(false)
  637|  22.4k|    {
  638|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   112k|    {
  730|   112k|        return reinterpret_cast<unexpected<E>*>(
  731|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   112k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  27.7k|    {
  653|  27.7k|        return *value_ptr();
  654|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.2k|    {
  708|  24.2k|        scn::detail::destroy_at(value_ptr());
  709|  24.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  24.2k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.2k|    else {
  408|  24.2k|        p->~T();
  409|  24.2k|    }
  410|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  24.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.4k|    {
  678|  22.4k|        return std::move(*unexpected_ptr());
  679|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  44.9k|    {
  712|  44.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  44.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  45.4k|{
 6110|  45.4k|    detail::check_scan_arg_types<Args...>();
 6111|  45.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  45.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6085|  45.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  45.4k|    {
 6087|  45.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6094|  45.4k|    {
 6095|  45.4k|        return {detail::make_arg<
 6096|  45.4k|            kind, Context,
 6097|  45.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  45.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  45.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE25ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5883|  45.4k|{
 5884|  45.4k|    return make_value<Context>(value);
 5885|  45.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5809|  48.4k|{
 5810|  48.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|       |                                  needs_context_tag>) {
 5814|       |        return make_value_impl<T>(SCN_FWD(arg));
 5815|       |    }
 5816|  48.4k|    else {
 5817|  48.4k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|  48.4k|            value, context_tag<Context>{}));
 5819|  48.4k|    }
 5820|  48.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5714|  48.4k|    {
 5715|  48.4k|        return {};
 5716|  48.4k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5778|  48.4k|{
 5779|  48.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  48.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  48.4k|    constexpr bool scannable_char =
 5783|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  48.4k|    static_assert(scannable_char,
 5785|  48.4k|                  "Cannot scan an argument of an unsupported character "
 5786|  48.4k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  48.4k|    constexpr bool scannable_const =
 5789|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  48.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  48.4k|    constexpr bool scannable_disabled =
 5793|  48.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  48.4k|    static_assert(scannable_disabled,
 5795|  48.4k|                  "Cannot scan an argument that has been disabled by "
 5796|  48.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  48.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  48.4k|    static_assert(
 5800|  48.4k|        scannable,
 5801|  48.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  48.4k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  48.4k|    return arg_value{arg};
 5805|  48.4k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5568|  48.4k|        : custom_value{static_cast<void*>(&val.val),
 5569|  48.4k|                       scan_custom_arg<T, Context>}
 5570|  48.4k|    {
 5571|  48.4k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5586|  48.4k|    {
 5587|  48.4k|        static_assert(!is_type_disabled<T>,
 5588|  48.4k|                      "Scanning of custom types is disabled by "
 5589|  48.4k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5590|  48.4k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  |  930|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5591|       |
 5592|  48.4k|        using context_type = Context;
 5593|  48.4k|        using parse_context_type = typename context_type::parse_context_type;
 5594|  48.4k|        using scanner_type = typename context_type::template scanner_type<T>;
 5595|       |
 5596|  48.4k|        auto s = scanner_type{};
 5597|       |
 5598|  48.4k|        auto& arg_ref = *static_cast<T*>(arg);
 5599|  48.4k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5600|  48.4k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5601|       |
 5602|  48.4k|#if SCN_HAS_EXCEPTIONS
 5603|  48.4k|        auto fmt_it = pctx_ref.begin();
 5604|  48.4k|        try {
 5605|  48.4k|            fmt_it = s.parse(pctx_ref);
 5606|  48.4k|        }
 5607|  48.4k|        catch (const detail::scan_format_string_error_base& ex) {
 5608|       |            // scan_error takes a const char*.
 5609|       |            // scan_format_string_error (or, actually, std::runtime_error)
 5610|       |            // stores a reference-counted string,
 5611|       |            // that will go out of scope here.
 5612|       |            // We need to provide a const char* that will stay in scope.
 5613|       |            // If scan_format_string_error was thrown with a string literal,
 5614|       |            // use that, otherwise refer to a thread_local std::string
 5615|      0|            if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5615:29): [True: 0, False: 0]
  ------------------
 5616|      0|                return unexpected_scan_error(scan_error::invalid_format_string,
 5617|      0|                                             m);
 5618|      0|            }
 5619|      0|            thread_local std::string err_msg{};
 5620|      0|            err_msg = ex.what();
 5621|      0|            return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                         err_msg.c_str());
 5623|      0|        }
 5624|       |#else
 5625|       |        auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  48.4k|        if (auto e = pctx_ref.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.99k, False: 45.4k]
  |  |  ------------------
  ------------------
 5628|  2.99k|            return e;
 5629|  2.99k|        }
 5630|  45.4k|        pctx_ref.advance_to(fmt_it);
 5631|       |
 5632|  45.4k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3940|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.9k, False: 3.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.9k|    }                                                  \
  |  |  |  | 3939|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5633|  3.52k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  3.52k|    static_cast<    \
  |  |  935|  3.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5634|       |
 5635|  3.52k|        return {};
 5636|  45.4k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5722|  48.4k|    {
 5723|  48.4k|        return {val};
 5724|  48.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  45.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  45.4k|    {
 6137|  45.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  46.7k|    {
  643|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 1.76k, False: 44.9k]
  ------------------
  644|  1.76k|            destroy_value();
  645|  1.76k|        }
  646|  44.9k|        else {
  647|  44.9k|            destroy_unexpected();
  648|  44.9k|        }
  649|  46.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.99k|{
 5860|  2.99k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.99k|    basic_scan_arg<Context> arg;
 5863|  2.99k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.99k|    arg.m_value = make_value<Context>(value);
 5865|  2.99k|    return arg;
 5866|  2.99k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  67.4k|    {
 2869|  67.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  67.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  67.4k|    {
 2850|  67.4k|        return decay_copy(t.begin());
 2851|  67.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   865k|{
 2094|   865k|    return SCN_FWD(t);
  ------------------
  |  |  936|   865k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   865k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   145k|    {
 2926|   145k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   145k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   145k|    {
 2908|   145k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   145k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  426|  24.2k|        : m_value(T{}), m_has_value(true)
  427|  24.2k|    {
  428|  24.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|  72.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  72.6k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  72.6k|    {
 1740|  72.6k|        return has_value();
 1741|  72.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   145k|    {
  490|   145k|        return m_has_value;
  491|   145k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  67.4k|    {
 1746|  67.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  67.4k|        return this->get_unexpected().error();
 1748|  67.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  67.4k|    {
  473|  67.4k|        return m_unexpected;
  474|  67.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  449|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.4k|          m_has_value(false)
  451|  22.4k|    {
  452|  22.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  96.9k|    {
  490|  96.9k|        return m_has_value;
  491|  96.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  27.7k|    {
  456|  27.7k|        return m_value;
  457|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  22.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  503|  22.4k|    {
  504|  22.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  22.4k|                                  std::forward<Args>(args)...);
  506|  22.4k|        m_has_value = false;
  507|  22.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  22.4k|    {
  473|  22.4k|        return m_unexpected;
  474|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  22.4k|    {
  481|  22.4k|        return std::move(m_unexpected);
  482|  22.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  5.28k|    {
 6445|  5.28k|        m_range = std::forward<Other>(r);
 6446|  5.28k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  5.28k|    {
 1795|  5.28k|        return value();
 1796|  5.28k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  5.28k|    {
 1769|  5.28k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.28k|        return this->get_value();
 1771|  5.28k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  5.28k|    {
  456|  5.28k|        return m_value;
  457|  5.28k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  34.0k|{
 9398|  34.0k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  34.0k|    auto result = vscan_impl(buffer, format, args);
 9401|  34.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 2.64k]
  |  |  ------------------
  ------------------
 9402|  31.4k|        return unexpected(result.error());
 9403|  31.4k|    }
 9404|  2.64k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  34.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|  72.6k|{
 5381|  72.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  72.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  72.6k|                  "\n"
 5385|  72.6k|                  "Unsupported range type given as input to a scanning "
 5386|  72.6k|                  "function.\n"
 5387|  72.6k|                  "A range needs to have a character type (value type) "
 5388|  72.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  72.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  72.6k|                  "to be included.\n"
 5391|  72.6k|                  "See the scnlib documentation for more details.");
 5392|  72.6k|    static_assert(
 5393|  72.6k|        !std::is_same_v<T, custom_char_traits>,
 5394|  72.6k|        "\n"
 5395|  72.6k|        "Unsupported range type given as input to a scanning "
 5396|  72.6k|        "function.\n"
 5397|  72.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  72.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  72.6k|        "not supported.");
 5400|  72.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  72.6k|                  "\n"
 5402|  72.6k|                  "Unsupported range type given as input to a scanning "
 5403|  72.6k|                  "function.\n"
 5404|  72.6k|                  "file_marker_found cannot be used as an "
 5405|  72.6k|                  "source range type to scn::scan.\n"
 5406|  72.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  72.6k|                  "and do not provide an explicit source range, "
 5408|  72.6k|                  "or use scn::scan with a FILE* directly.");
 5409|  72.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  72.6k|                  "\n"
 5411|  72.6k|                  "Unsupported range type given as input to a scanning "
 5412|  72.6k|                  "function.\n"
 5413|  72.6k|                  "In order to be scannable, a range needs to satisfy "
 5414|  72.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  72.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  72.6k|                  "\n"
 5417|  72.6k|                  "Unsupported range type given as input to a scanning "
 5418|  72.6k|                  "function.\n"
 5419|  72.6k|                  "A range needs to model forward_range and have a valid "
 5420|  72.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  72.6k|                  "Examples of scannable ranges are std::string, "
 5422|  72.6k|                  "std::string_view, "
 5423|  72.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  72.6k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  72.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  72.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  72.6k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  72.6k|    else {
 5366|  72.6k|        return make_forward_scan_buffer(r);
 5367|  72.6k|    }
 5368|  72.6k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|  72.6k|{
 5185|  72.6k|    return basic_scan_forward_buffer_impl(range);
 5186|  72.6k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  72.6k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  72.6k|          m_cursor(ranges::begin(*m_range))
 4766|  72.6k|    {
 4767|  72.6k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|  72.6k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  72.6k|    {
 4738|  72.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|  72.6k|        : m_current_view(sv), m_is_contiguous(false)
 4428|  72.6k|    {
 4429|  72.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   140k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  77.9k|    {
 2869|  77.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  77.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  77.9k|    {
 2850|  77.9k|        return decay_copy(t.begin());
 2851|  77.9k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  83.2k|    {
 3480|  83.2k|        return m_iterator;
 3481|  83.2k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|   198k|    {
 4771|   198k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 15.4k, False: 182k]
  ------------------
 4772|  15.4k|            return false;
 4773|  15.4k|        }
 4774|   182k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|   182k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|   182k|        }
 4777|   182k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 114k, False: 68.1k]
  ------------------
 4778|   114k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   114k|                                          this->m_current_view.begin(),
 4780|   114k|                                          this->m_current_view.end());
 4781|   114k|        }
 4782|   182k|        m_latest = *m_cursor;
 4783|   182k|        ++m_cursor;
 4784|   182k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|   182k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|   182k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|   182k|        }
 4788|   182k|        return true;
 4789|   198k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   564k|    {
 2926|   564k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   564k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   564k|    {
 2908|   564k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   564k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   569k|    {
 3484|   569k|        return m_sentinel;
 3485|   569k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  72.6k|    {
 4346|  72.6k|        SCN_UNUSED(position);
  ------------------
  |  |  915|  72.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  72.6k|        return true;
 4348|  72.6k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  67.4k|        : base(unexpect, std::move(e.error())),
 1616|  67.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.4k|    {
 1618|  67.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  67.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  67.4k|          m_has_value(false)
  451|  67.4k|    {
  452|  67.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  72.6k|    {
 1316|  72.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  5.28k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  5.28k|                      ranges::iterator_t<SourceRange>>) {
 6677|  5.28k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  5.28k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  5.28k|    {
 2869|  5.28k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  5.28k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  5.28k|    {
 2850|  5.28k|        return decay_copy(t.begin());
 2851|  5.28k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  5.28k|{
 6662|  5.28k|    return ranges::end(source);
 6663|  5.28k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  5.28k|    {
 2926|  5.28k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  5.28k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  5.28k|    {
 2908|  5.28k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  5.28k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  5.28k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.28k|    {
 1572|  5.28k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  5.28k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.28k|    {
  442|  5.28k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  77.9k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  77.9k|    static_cast<    \
  |  |  935|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  77.9k|    static_cast<    \
  |  |  935|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  77.9k|    {
 3466|  77.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  5.28k|    {
 6434|  5.28k|        return ranges::begin(m_range);
 6435|  5.28k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  34.0k|{
 9414|  34.0k|#if !SCN_DISABLE_LOCALE
 9415|  34.0k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  34.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  34.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  34.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  34.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 2.64k]
  |  |  ------------------
  ------------------
 9422|  31.4k|        return unexpected(result.error());
 9423|  31.4k|    }
 9424|  2.64k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  34.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  4.49k|{
 9438|  4.49k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  4.49k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  4.49k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  ------------------
  ------------------
 9442|  4.49k|        return unexpected(result.error());
 9443|  4.49k|    }
 9444|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  4.49k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.2k|    {
  613|  24.2k|        construct();
  614|  24.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.2k|    {
  694|  24.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.2k|        m_has_value = true;
  696|  24.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  395|  24.2k|{
  396|  24.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.2k|        T(std::forward<Args>(args)...);
  398|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  76.2k|    {
  718|  76.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  76.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  76.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  22.4k|        : m_has_value(false)
  637|  22.4k|    {
  638|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   112k|    {
  730|   112k|        return reinterpret_cast<unexpected<E>*>(
  731|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   112k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  27.7k|    {
  653|  27.7k|        return *value_ptr();
  654|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.2k|    {
  708|  24.2k|        scn::detail::destroy_at(value_ptr());
  709|  24.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  401|  24.2k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.2k|    else {
  408|  24.2k|        p->~T();
  409|  24.2k|    }
  410|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6577|  24.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.4k|    {
  678|  22.4k|        return std::move(*unexpected_ptr());
  679|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  44.9k|    {
  712|  44.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  44.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  642|  46.7k|    {
  643|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 1.76k, False: 44.9k]
  ------------------
  644|  1.76k|            destroy_value();
  645|  1.76k|        }
  646|  44.9k|        else {
  647|  44.9k|            destroy_unexpected();
  648|  44.9k|        }
  649|  46.7k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9636|  24.2k|{
 9637|  24.2k|    return scan_result_type<Source, Args...>();
 9638|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1551|  24.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  611|  24.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  24.2k|    {
  613|  24.2k|        construct();
  614|  24.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  24.2k|    {
  694|  24.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  24.2k|        m_has_value = true;
  696|  24.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  395|  24.2k|{
  396|  24.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  24.2k|        T(std::forward<Args>(args)...);
  398|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6570|  24.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  76.2k|    {
  718|  76.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  76.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  76.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|  24.2k|{
 9622|  24.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  24.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 1.76k]
  |  |  ------------------
  ------------------
 9623|  22.4k|        out = unexpected(in.error());
 9624|  22.4k|    }
 9625|  1.76k|    else {
 9626|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  1.76k|    static_cast<    \
  |  |  935|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  1.76k|    }
 9628|  24.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  22.4k|        : m_has_value(false)
  637|  22.4k|    {
  638|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   112k|    {
  730|   112k|        return reinterpret_cast<unexpected<E>*>(
  731|   112k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   112k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  22.4k|    {
 1316|  22.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  22.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  902|  22.4k|    {
  903|  22.4k|        assign_common(std::move(other));
  904|  22.4k|        return *this;
  905|  22.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  22.4k|    {
  950|  22.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 22.4k, False: 0]
  ------------------
  951|  22.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 22.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  22.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  22.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   143k|    {
  687|   143k|        return m_has_value;
  688|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  27.7k|    {
  653|  27.7k|        return *value_ptr();
  654|  27.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  22.4k|    {
 1046|  22.4k|        this->destroy_value();
 1047|  22.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  24.2k|    {
  708|  24.2k|        scn::detail::destroy_at(value_ptr());
  709|  24.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  401|  24.2k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  24.2k|    else {
  408|  24.2k|        p->~T();
  409|  24.2k|    }
  410|  24.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6577|  24.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  22.4k|    {
  701|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  22.4k|                                  std::forward<Args>(args)...);
  703|  22.4k|        m_has_value = false;
  704|  22.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  22.4k|    {
  678|  22.4k|        return std::move(*unexpected_ptr());
  679|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  44.9k|    {
  712|  44.9k|        scn::detail::destroy_at(unexpected_ptr());
  713|  44.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  22.7k|    {
 8768|  22.7k|        return m_str;
 8769|  22.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  22.7k|        : m_str(r.str)
 8763|  22.7k|    {
 8764|  22.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1739|  24.2k|    {
 1740|  24.2k|        return has_value();
 1741|  24.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1814|  27.7k|    {
 1815|  27.7k|        return &value();
 1816|  27.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  27.7k|    {
 1769|  27.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  27.7k|        return this->get_value();
 1771|  27.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  642|  46.7k|    {
  643|  46.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 1.76k, False: 44.9k]
  ------------------
  644|  1.76k|            destroy_value();
  645|  1.76k|        }
  646|  44.9k|        else {
  647|  44.9k|            destroy_unexpected();
  648|  44.9k|        }
  649|  46.7k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  1.41M|    {
 3480|  1.41M|        return m_iterator;
 3481|  1.41M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   735k|    {
 3480|   735k|        return m_iterator;
 3481|   735k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  13.7M|    {
 4473|  13.7M|        assert(m_begin);
 4474|  13.7M|        return m_end == nullptr;
 4475|  13.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   167k|    {
 4490|   167k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 71.2k, False: 96.0k]
  ------------------
 4491|  71.2k|            return make_string_view_from_pointers(
 4492|  71.2k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  71.2k|                static_cast<const CharT*>(m_end));
 4494|  71.2k|        }
 4495|  96.0k|        return parent()->get_segment_starting_at(position());
 4496|   167k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  8.03M|    {
 4484|  8.03M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  8.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  8.03M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  8.03M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  96.0k|    {
 4377|  96.0k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 4378|  96.0k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|      0|        }
 4381|  96.0k|        const auto start = pos - m_putback_buffer.size();
 4382|  96.0k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  96.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  96.0k|        return m_current_view.substr(start);
 4384|  96.0k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   246k|    {
 4468|   246k|        return m_position;
 4469|   246k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   366k|    {
 4399|   366k|        return m_is_contiguous;
 4400|   366k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  4.03M|    {
 4473|  4.03M|        assert(m_begin);
 4474|  4.03M|        return m_end == nullptr;
 4475|  4.03M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  68.1k|    {
 4490|  68.1k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 68.1k, False: 0]
  ------------------
 4491|  68.1k|            return make_string_view_from_pointers(
 4492|  68.1k|                static_cast<const CharT*>(m_begin) + position(),
 4493|  68.1k|                static_cast<const CharT*>(m_end));
 4494|  68.1k|        }
 4495|      0|        return parent()->get_segment_starting_at(position());
 4496|  68.1k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  2.20M|    {
 4484|  2.20M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  2.20M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  2.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  78.7k|    {
 4468|  78.7k|        return m_position;
 4469|  78.7k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   286k|    {
 4399|   286k|        return m_is_contiguous;
 4400|   286k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   215k|    {
 3334|   215k|        return static_cast<D&>(*this);
 3335|   215k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   215k|    {
 3375|   215k|        return detail::to_address(ranges::begin(derived()));
 3376|   215k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   140k|    {
 3334|   140k|        return static_cast<D&>(*this);
 3335|   140k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   140k|    {
 3375|   140k|        return detail::to_address(ranges::begin(derived()));
 3376|   140k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   190k|    {
 8965|   190k|        return ranges::subrange{begin(), end()};
 8966|   190k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   190k|    {
 8957|   190k|        return ranges::default_sentinel;
 8958|   190k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   733k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   733k|    static_cast<    \
  |  |  935|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   733k|    static_cast<    \
  |  |  935|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   733k|    {
 3466|   733k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   165k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  96.0k|    {
 1979|  96.0k|        return detail::transform_error_impl(std::move(*this),
 1980|  96.0k|                                            std::forward<F>(f));
 1981|  96.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  96.0k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  96.0k|    else {
 1472|  96.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  96.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  96.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 94.7k, False: 1.35k]
  |  |  ------------------
  ------------------
 1474|  96.0k|                   ? result(*std::forward<Exp>(exp))
 1475|  96.0k|                   : result(unexpect,
 1476|  1.35k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.35k|                                           std::forward<Exp>(exp).error()));
 1478|  96.0k|    }
 1479|  96.0k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   192k|    {
  490|   192k|        return m_has_value;
  491|   192k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  94.7k|    {
 1805|  94.7k|        return std::move(value());
 1806|  94.7k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  94.7k|    {
 1769|  94.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  94.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  94.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  94.7k|        return this->get_value();
 1771|  94.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  94.7k|    {
  456|  94.7k|        return m_value;
  457|  94.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   263k|        : base(std::in_place, std::forward<U>(val)),
 1570|   263k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   263k|    {
 1572|   263k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   263k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   263k|    {
  442|   263k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   432k|    {
 1316|   432k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  3.29k|{
 1350|  3.29k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.29k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  1.35k|    {
 1756|  1.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.35k|        return std::move(this->get_unexpected().error());
 1758|  1.35k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  1.35k|    {
  473|  1.35k|        return m_unexpected;
  474|  1.35k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  6.58k|    {
  365|  6.58k|        return m_unexpected;
  366|  6.58k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.35k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.35k|    {
 1628|  1.35k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   129k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   129k|          m_has_value(false)
  451|   129k|    {
  452|   129k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   135k|    {
 8965|   135k|        return ranges::subrange{begin(), end()};
 8966|   135k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   135k|    {
 8957|   135k|        return ranges::default_sentinel;
 8958|   135k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   452k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   452k|    static_cast<    \
  |  |  935|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   452k|    {
 3466|   452k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  68.1k|    {
 1979|  68.1k|        return detail::transform_error_impl(std::move(*this),
 1980|  68.1k|                                            std::forward<F>(f));
 1981|  68.1k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  68.1k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  68.1k|    else {
 1472|  68.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  68.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  68.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 67.5k, False: 678]
  |  |  ------------------
  ------------------
 1474|  68.1k|                   ? result(*std::forward<Exp>(exp))
 1475|  68.1k|                   : result(unexpect,
 1476|    678|                            trivial_invoke(std::forward<F>(f),
 1477|    678|                                           std::forward<Exp>(exp).error()));
 1478|  68.1k|    }
 1479|  68.1k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   136k|    {
  490|   136k|        return m_has_value;
  491|   136k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  67.5k|    {
 1805|  67.5k|        return std::move(value());
 1806|  67.5k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  67.5k|    {
 1769|  67.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  67.5k|        return this->get_value();
 1771|  67.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  67.5k|    {
  456|  67.5k|        return m_value;
  457|  67.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  83.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  83.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  83.3k|    {
 1572|  83.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  83.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  83.3k|    {
  442|  83.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   345k|    {
 1316|   345k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|    678|    {
 1756|    678|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    678|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    678|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    678|        return std::move(this->get_unexpected().error());
 1758|    678|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    678|    {
  473|    678|        return m_unexpected;
  474|    678|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|    678|        : base(unexpect, std::forward<Args>(args)...),
 1626|    678|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    678|    {
 1628|    678|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   256k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   256k|          m_has_value(false)
  451|   256k|    {
  452|   256k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   202k|        : base(unexpect, std::move(e.error())),
 1616|   202k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   202k|    {
 1618|   202k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   202k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   202k|          m_has_value(false)
  451|   202k|    {
  452|   202k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   317k|    {
 1316|   317k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  33.7k|        : base(unexpect, std::move(e.error())),
 1616|  33.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.7k|    {
 1618|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  34.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  34.2k|          m_has_value(false)
  451|  34.2k|    {
  452|  34.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   144k|    {
 1316|   144k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   110k|        : base(std::in_place, std::forward<U>(val)),
 1570|   110k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   110k|    {
 1572|   110k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   110k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   110k|    {
  442|   110k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   144k|    {
 1740|   144k|        return has_value();
 1741|   144k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   289k|    {
  490|   289k|        return m_has_value;
  491|   289k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  34.2k|    {
 1746|  34.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  34.2k|        return this->get_unexpected().error();
 1748|  34.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  34.2k|    {
  473|  34.2k|        return m_unexpected;
  474|  34.2k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   110k|    {
 1805|   110k|        return std::move(value());
 1806|   110k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   110k|    {
 1769|   110k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   110k|        return this->get_value();
 1771|   110k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   110k|    {
  456|   110k|        return m_value;
  457|   110k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  67.4k|        : base(unexpect, std::move(e.error())),
 1616|  67.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.4k|    {
 1618|  67.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  68.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  68.0k|          m_has_value(false)
  451|  68.0k|    {
  452|  68.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   140k|    {
 1316|   140k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  72.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  72.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  72.7k|    {
 1572|  72.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  72.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  72.7k|    {
  442|  72.7k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   140k|    {
 1740|   140k|        return has_value();
 1741|   140k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  68.0k|    {
 1746|  68.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  68.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  68.0k|        return this->get_unexpected().error();
 1748|  68.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  68.0k|    {
  473|  68.0k|        return m_unexpected;
  474|  68.0k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  72.7k|    {
 1805|  72.7k|        return std::move(value());
 1806|  72.7k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  72.7k|    {
 1769|  72.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  72.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  72.7k|        return this->get_value();
 1771|  72.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  72.7k|    {
  456|  72.7k|        return m_value;
  457|  72.7k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  71.2k|    {
 1979|  71.2k|        return detail::transform_error_impl(std::move(*this),
 1980|  71.2k|                                            std::forward<F>(f));
 1981|  71.2k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  71.2k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  71.2k|    else {
 1472|  71.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  71.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  71.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 70.6k, False: 582]
  |  |  ------------------
  ------------------
 1474|  71.2k|                   ? result(*std::forward<Exp>(exp))
 1475|  71.2k|                   : result(unexpect,
 1476|    582|                            trivial_invoke(std::forward<F>(f),
 1477|    582|                                           std::forward<Exp>(exp).error()));
 1478|  71.2k|    }
 1479|  71.2k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   142k|    {
  490|   142k|        return m_has_value;
  491|   142k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  70.6k|    {
 1805|  70.6k|        return std::move(value());
 1806|  70.6k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  70.6k|    {
 1769|  70.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  70.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  70.6k|        return this->get_value();
 1771|  70.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  70.6k|    {
  456|  70.6k|        return m_value;
  457|  70.6k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|    582|    {
 1756|    582|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    582|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    582|        return std::move(this->get_unexpected().error());
 1758|    582|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    582|    {
  473|    582|        return m_unexpected;
  474|    582|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    582|        : base(unexpect, std::forward<Args>(args)...),
 1626|    582|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    582|    {
 1628|    582|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   734k|    {
 8949|   734k|        return m_current;
 8950|   734k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8836|   142k|    {
 8837|   142k|        return m_args;
 8838|   142k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   307k|    {
 8842|   307k|        return m_locale;
 8843|   307k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   314k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   314k|    static_cast<    \
  |  |  935|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   314k|    static_cast<    \
  |  |  935|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   314k|    {
 8849|   314k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   142k|    {
 3000|   142k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   142k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   142k|    {
 2981|   142k|        return t.data();
 2982|   142k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  71.2k|    {
 3075|  71.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  71.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  71.2k|    {
 3041|  71.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  71.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   128k|        : base(unexpect, std::move(e.error())),
 1616|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   128k|    {
 1618|   128k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  39.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  39.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  39.7k|    {
 1572|  39.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  39.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  39.7k|    {
  442|  39.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   429k|    {
 8949|   429k|        return m_current;
 8950|   429k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8836|   136k|    {
 8837|   136k|        return m_args;
 8838|   136k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   271k|    {
 8842|   271k|        return m_locale;
 8843|   271k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   281k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   281k|    static_cast<    \
  |  |  935|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   281k|    static_cast<    \
  |  |  935|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   281k|    {
 8849|   281k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   136k|    {
 3000|   136k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   136k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   136k|    {
 2981|   136k|        return t.data();
 2982|   136k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  68.1k|    {
 3075|  68.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  68.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  68.1k|    {
 3041|  68.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  68.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   256k|        : base(unexpect, std::move(e.error())),
 1616|   256k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   256k|    {
 1618|   256k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  5.28k|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.28k|    {
 1572|  5.28k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  5.28k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.28k|    {
  442|  5.28k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   500k|    {
 4559|   500k|        return x.is_at_end();
 4560|   500k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  1.41M|    {
 4603|  1.41M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.41M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  1.41M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 1.41M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  1.41M|        return !read_at_position();
 4610|  1.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  4.12M|    {
 4583|  4.12M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  4.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  4.12M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 4.12M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  4.12M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  4.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.27M, False: 845k]
  |  |  ------------------
  ------------------
 4590|  3.27M|            return true;
 4591|  3.27M|        }
 4592|       |
 4593|  1.67M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 845k, False: 832k]
  ------------------
 4594|   845k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 12.4k, False: 832k]
  ------------------
 4595|  12.4k|                return false;
 4596|  12.4k|            }
 4597|   845k|        }
 4598|   832k|        return true;
 4599|   845k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.28M|    {
 4518|  1.28M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.28M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.28M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.28M|        auto res = read_at_position();
 4527|  1.28M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.28M|        return parent()->get_character_at(m_position);
 4529|  1.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.28M|    {
 4388|  1.28M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 371k, False: 915k]
  |  |  ------------------
  ------------------
 4389|  1.28M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   371k|            return m_putback_buffer[pos];
 4391|   371k|        }
 4392|   915k|        const auto start = pos - m_putback_buffer.size();
 4393|   915k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   915k|        return m_current_view[start];
 4395|   915k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  94.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  94.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  94.7k|    {
 1572|  94.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  94.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  94.7k|    {
  442|  94.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  96.0k|    {
 1316|  96.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.35k|        : base(unexpect, std::move(e.error())),
 1616|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.35k|    {
 1618|  1.35k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.35k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.35k|          m_has_value(false)
  451|  1.35k|    {
  452|  1.35k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.29k|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.29k|    {
  360|  3.29k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.29k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.42M|    {
 4504|  1.42M|        ++m_position;
 4505|  1.42M|        (void)read_at_position();
 4506|  1.42M|        return *this;
 4507|  1.42M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   652k|    {
 4553|   652k|        return !(lhs == rhs);
 4554|   652k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   652k|    {
 4548|   652k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 652k, False: 0]
  |  Branch (4548:46): [True: 68.5k, False: 583k]
  ------------------
 4549|   652k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  3.29k|        : m_unexpected(std::forward<Err>(e))
  350|  3.29k|    {
  351|  3.29k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.29k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.29k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  1.78M|    {
 3484|  1.78M|        return m_sentinel;
 3485|  1.78M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   911k|    {
 4570|   911k|        return !x.is_at_end();
 4571|   911k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    582|        : base(unexpect, std::move(e.error())),
 1616|    582|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    582|    {
 1618|    582|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    582|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    582|          m_has_value(false)
  451|    582|    {
  452|    582|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  71.2k|    {
 1316|  71.2k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  70.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  70.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  70.6k|    {
 1572|  70.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  70.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  70.6k|    {
  442|  70.6k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   213k|    {
 3000|   213k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   213k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   213k|    {
 2981|   213k|        return t.data();
 2982|   213k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   114k|        : base(std::in_place, std::forward<U>(val)),
 1570|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   114k|    {
 1572|   114k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   114k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   114k|    {
  442|   114k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   104k|    {
 1795|   104k|        return value();
 1796|   104k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  94.7k|    {
 2869|  94.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  94.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  94.7k|    {
 2850|  94.7k|        return decay_copy(t.begin());
 2851|  94.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  94.7k|{
 2094|  94.7k|    return SCN_FWD(t);
  ------------------
  |  |  936|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  94.7k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  71.2k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  71.2k|    {
 3912|  71.2k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  96.0k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  96.0k|    {
 3912|  96.0k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   279k|    {
 4559|   279k|        return x.is_at_end();
 4560|   279k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|   520k|    {
 4603|   520k|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 520k]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|   520k|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 520k]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|   520k|        return !read_at_position();
 4610|   520k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  1.17M|    {
 4583|  1.17M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  1.17M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 1.17M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  1.17M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  1.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 974k, False: 198k]
  |  |  ------------------
  ------------------
 4590|   974k|            return true;
 4591|   974k|        }
 4592|       |
 4593|   381k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 198k, False: 182k]
  ------------------
 4594|   198k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 15.4k, False: 182k]
  ------------------
 4595|  15.4k|                return false;
 4596|  15.4k|            }
 4597|   198k|        }
 4598|   182k|        return true;
 4599|   198k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  1.55M|    {
 4357|  1.55M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  1.55M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|   450k|    {
 4518|   450k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|   450k|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 450k]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|   450k|        auto res = read_at_position();
 4527|   450k|        SCN_EXPECT(res);
  ------------------
  |  |  930|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|   450k|        return parent()->get_character_at(m_position);
 4529|   450k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|   450k|    {
 4388|   450k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 273k, False: 176k]
  |  |  ------------------
  ------------------
 4389|   450k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   273k|            return m_putback_buffer[pos];
 4391|   273k|        }
 4392|   176k|        const auto start = pos - m_putback_buffer.size();
 4393|   176k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   176k|        return m_current_view[start];
 4395|   176k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  67.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  67.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  67.5k|    {
 1572|  67.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  67.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  67.5k|    {
  442|  67.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  68.1k|    {
 1316|  68.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|    678|        : base(unexpect, std::move(e.error())),
 1616|    678|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    678|    {
 1618|    678|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|    678|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    678|          m_has_value(false)
  451|    678|    {
  452|    678|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|   202k|    {
 4504|   202k|        ++m_position;
 4505|   202k|        (void)read_at_position();
 4506|   202k|        return *this;
 4507|   202k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  39.2k|    {
 4553|  39.2k|        return !(lhs == rhs);
 4554|  39.2k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  39.2k|    {
 4548|  39.2k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 39.2k, False: 0]
  |  Branch (4548:46): [True: 5.28k, False: 33.9k]
  ------------------
 4549|  39.2k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   696k|    {
 3484|   696k|        return m_sentinel;
 3485|   696k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|   241k|    {
 4570|   241k|        return !x.is_at_end();
 4571|   241k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|    678|        : base(unexpect, std::move(e.error())),
 1616|    678|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    678|    {
 1618|    678|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|    678|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    678|          m_has_value(false)
  451|    678|    {
  452|    678|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  68.1k|    {
 1316|  68.1k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  67.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  67.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  67.5k|    {
 1572|  67.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  67.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  67.5k|    {
  442|  67.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   136k|    {
  490|   136k|        return m_has_value;
  491|   136k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  67.5k|    {
 1769|  67.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  67.5k|        return this->get_value();
 1771|  67.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  67.5k|    {
  456|  67.5k|        return m_value;
  457|  67.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  68.1k|    {
 1979|  68.1k|        return detail::transform_error_impl(std::move(*this),
 1980|  68.1k|                                            std::forward<F>(f));
 1981|  68.1k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  68.1k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  68.1k|    else {
 1472|  68.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  68.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  68.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 67.5k, False: 678]
  |  |  ------------------
  ------------------
 1474|  68.1k|                   ? result(*std::forward<Exp>(exp))
 1475|  68.1k|                   : result(unexpect,
 1476|    678|                            trivial_invoke(std::forward<F>(f),
 1477|    678|                                           std::forward<Exp>(exp).error()));
 1478|  68.1k|    }
 1479|  68.1k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  67.5k|    {
 1805|  67.5k|        return std::move(value());
 1806|  67.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|    678|    {
 1756|    678|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    678|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    678|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|    678|        return std::move(this->get_unexpected().error());
 1758|    678|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|    678|    {
  473|    678|        return m_unexpected;
  474|    678|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|    678|        : base(unexpect, std::forward<Args>(args)...),
 1626|    678|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|    678|    {
 1628|    678|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   136k|    {
 3000|   136k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   136k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   136k|    {
 2981|   136k|        return t.data();
 2982|   136k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  10.5k|    {
 1795|  10.5k|        return value();
 1796|  10.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  67.5k|    {
 2869|  67.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  67.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  67.5k|    {
 2850|  67.5k|        return decay_copy(t.begin());
 2851|  67.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  67.5k|{
 2094|  67.5k|    return SCN_FWD(t);
  ------------------
  |  |  936|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  67.5k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  68.1k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  68.1k|    {
 3912|  68.1k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  68.1k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  68.1k|    {
 3912|  68.1k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  5.80M|    {
 4357|  5.80M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  5.80M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   167k|    {
 6177|   167k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   167k|        return static_cast<std::size_t>(m_desc &
 6182|   167k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   167k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   334k|    {
 6203|   334k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   334k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   167k|    {
 6145|   167k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   167k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   167k|        const auto t = type(id);
 6157|   167k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   167k|        basic_scan_arg<Context> arg;
 6162|   167k|        arg.m_type = t;
 6163|   167k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 167k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   167k|        else {
 6167|   167k|            arg.m_value = m_values[id];
 6168|   167k|        }
 6169|   167k|        return arg;
 6170|   167k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   167k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   167k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   167k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   167k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   167k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   167k|    {
 6207|   167k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   167k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|   339k|    {
 5961|   339k|        return m_type != detail::arg_type::none_type;
 5962|   339k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  2.24k|{
 9300|  2.24k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.24k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.24k|{
 9201|  2.24k|#define SCN_VISIT(Type)                                                \
 9202|  2.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.24k|    }                                                                  \
 9205|  2.24k|    else {                                                             \
 9206|  2.24k|        return vis(monostate_val);                                     \
 9207|  2.24k|    }
 9208|       |
 9209|  2.24k|    monostate monostate_val{};
 9210|       |
 9211|  2.24k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.24k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.24k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.24k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.24k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.24k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.24k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.24k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.24k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.24k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.24k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.24k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.24k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.24k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.24k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.24k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.24k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.24k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.24k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.24k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.24k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.24k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.24k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.24k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.24k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.24k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.24k, False: 0]
  ------------------
 9262|  2.24k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.24k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.24k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.24k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.24k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.24k|            SCN_CLANG_POP
 9279|  2.24k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   339k|{
 6006|   339k|    return arg.m_type;
 6007|   339k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   171k|{
 6018|   171k|    return arg.m_value;
 6019|   171k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   171k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   171k|    {
 6258|   171k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4460|  73.4k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  73.4k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  73.4k|          m_position(pos)
 4463|  73.4k|    {
 4464|  73.4k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   171k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   171k|    static_cast<    \
  |  |  935|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   171k|    {
 8934|   171k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 5938|   171k|        {
 5939|   171k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   171k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 5943|   171k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   169k|{
 4691|   169k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 71.2k, False: 98.3k]
  ------------------
 4692|  71.2k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  71.2k|                                ranges::default_sentinel};
 4694|  71.2k|    }
 4695|  98.3k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  98.3k|                            ranges::default_sentinel};
 4697|   169k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  98.3k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  98.3k|    {
 4455|  98.3k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  98.3k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  98.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  2.24k|{
 9300|  2.24k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  2.24k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  2.24k|{
 9201|  2.24k|#define SCN_VISIT(Type)                                                \
 9202|  2.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  2.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  2.24k|    }                                                                  \
 9205|  2.24k|    else {                                                             \
 9206|  2.24k|        return vis(monostate_val);                                     \
 9207|  2.24k|    }
 9208|       |
 9209|  2.24k|    monostate monostate_val{};
 9210|       |
 9211|  2.24k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 2.24k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 2.24k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 2.24k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 2.24k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 2.24k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 2.24k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 2.24k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 2.24k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 2.24k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 2.24k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 2.24k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 2.24k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 2.24k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 2.24k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 2.24k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 2.24k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 2.24k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 2.24k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 2.24k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 2.24k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 2.24k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 2.24k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 2.24k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 2.24k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  2.24k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 2.24k, False: 0]
  ------------------
 9262|  2.24k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  2.24k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  2.24k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 2.24k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 2.24k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  2.24k|            SCN_CLANG_POP
 9279|  2.24k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  71.2k|    {
 3075|  71.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  71.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  71.2k|    {
 3041|  71.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  71.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  71.2k|{
 7793|  71.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  71.2k|    handler.check_args_exhausted();
 7795|  71.2k|    return handler.get_error();
 7796|  71.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  71.2k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  71.2k|    auto begin = format.data();
 7761|  71.2k|    auto it = begin;
 7762|  71.2k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   110k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 71.2k, False: 39.7k]
  ------------------
 7765|  71.2k|        const auto ch = *it++;
 7766|  71.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 71.2k, False: 0]
  ------------------
 7767|  71.2k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  71.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  71.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 31.4k, False: 39.7k]
  ------------------
 7771|  31.4k|                return;
 7772|  31.4k|            }
 7773|  71.2k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  71.2k|    }
 7784|       |
 7785|  39.7k|    handler.on_literal_text(begin, end);
 7786|  39.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  71.2k|{
 7690|  71.2k|    struct id_adapter {
 7691|  71.2k|        constexpr void operator()()
 7692|  71.2k|        {
 7693|  71.2k|            arg_id = handler.on_arg_id();
 7694|  71.2k|        }
 7695|  71.2k|        constexpr void operator()(std::size_t id)
 7696|  71.2k|        {
 7697|  71.2k|            arg_id = handler.on_arg_id(id);
 7698|  71.2k|        }
 7699|       |
 7700|  71.2k|        constexpr void on_error(const char* msg)
 7701|  71.2k|        {
 7702|  71.2k|            SCN_UNLIKELY_ATTR
 7703|  71.2k|            handler.on_error(msg);
 7704|  71.2k|        }
 7705|       |
 7706|  71.2k|        Handler& handler;
 7707|  71.2k|        std::size_t arg_id;
 7708|  71.2k|    };
 7709|       |
 7710|  71.2k|    ++begin;
 7711|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  71.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 71.2k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  71.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 71.2k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  71.2k|    else {
 7723|  71.2k|        auto adapter = id_adapter{handler, 0};
 7724|  71.2k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  71.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  71.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 71.2k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  71.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 71.2k, False: 0]
  ------------------
 7735|  71.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  71.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  71.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 71.2k]
  |  |  |  Branch (865:45): [True: 0, False: 71.2k]
  |  |  |  Branch (865:45): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  71.2k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  71.2k|    }
 7751|  71.2k|    return begin + 1;
 7752|  71.2k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   167k|    {
 8832|   167k|        return m_args.get(id);
 8833|   167k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   167k|    {
 6286|   167k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   167k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   167k|        do_check_arg_id(id);
 6294|   167k|        return id;
 6295|   167k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   167k|{
 6806|   167k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   167k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   167k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  71.2k|{
 7191|  71.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  71.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  71.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 71.2k, False: 0]
  |  Branch (7192:26): [True: 0, False: 71.2k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  71.2k|    handler();
 7197|  71.2k|    return begin;
 7198|  71.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  71.2k|        {
 7693|  71.2k|            arg_id = handler.on_arg_id();
 7694|  71.2k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   167k|{
 9300|   167k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   167k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   167k|{
 9201|   167k|#define SCN_VISIT(Type)                                                \
 9202|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   167k|    }                                                                  \
 9205|   167k|    else {                                                             \
 9206|   167k|        return vis(monostate_val);                                     \
 9207|   167k|    }
 9208|       |
 9209|   167k|    monostate monostate_val{};
 9210|       |
 9211|   167k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 167k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 167k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 167k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 167k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 167k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 167k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 167k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 167k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 167k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 167k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 167k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 167k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 167k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 167k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 167k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 167k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 167k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 167k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 167k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 167k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 167k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 167k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 167k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 167k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   167k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 167k, False: 0]
  ------------------
 9262|   167k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   167k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   167k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 167k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 167k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   167k|            SCN_CLANG_POP
 9279|   167k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4716|  71.2k|        : base(typename base::contiguous_tag{}, sv)
 4717|  71.2k|    {
 4718|  71.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4421|  71.2k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  71.2k|    {
 4423|  71.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   142k|    {
 3000|   142k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   142k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   142k|    {
 2991|   142k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   142k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   142k|    {
 2869|   142k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   142k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   142k|    {
 2850|   142k|        return decay_copy(t.begin());
 2851|   142k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  71.2k|    {
 3075|  71.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  71.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  71.2k|    {
 3041|  71.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  71.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4539|  71.2k|    {
 4540|  71.2k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  71.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  71.2k|        m_position = i;
 4542|  71.2k|        return *this;
 4543|  71.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  96.0k|{
 7793|  96.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  96.0k|    handler.check_args_exhausted();
 7795|  96.0k|    return handler.get_error();
 7796|  96.0k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  96.0k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  96.0k|    auto begin = format.data();
 7761|  96.0k|    auto it = begin;
 7762|  96.0k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   160k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 96.0k, False: 64.6k]
  ------------------
 7765|  96.0k|        const auto ch = *it++;
 7766|  96.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 96.0k, False: 0]
  ------------------
 7767|  96.0k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  96.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  96.0k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 31.4k, False: 64.6k]
  ------------------
 7771|  31.4k|                return;
 7772|  31.4k|            }
 7773|  96.0k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  96.0k|    }
 7784|       |
 7785|  64.6k|    handler.on_literal_text(begin, end);
 7786|  64.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|  96.0k|{
 7690|  96.0k|    struct id_adapter {
 7691|  96.0k|        constexpr void operator()()
 7692|  96.0k|        {
 7693|  96.0k|            arg_id = handler.on_arg_id();
 7694|  96.0k|        }
 7695|  96.0k|        constexpr void operator()(std::size_t id)
 7696|  96.0k|        {
 7697|  96.0k|            arg_id = handler.on_arg_id(id);
 7698|  96.0k|        }
 7699|       |
 7700|  96.0k|        constexpr void on_error(const char* msg)
 7701|  96.0k|        {
 7702|  96.0k|            SCN_UNLIKELY_ATTR
 7703|  96.0k|            handler.on_error(msg);
 7704|  96.0k|        }
 7705|       |
 7706|  96.0k|        Handler& handler;
 7707|  96.0k|        std::size_t arg_id;
 7708|  96.0k|    };
 7709|       |
 7710|  96.0k|    ++begin;
 7711|  96.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  96.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 96.0k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  96.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 96.0k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  96.0k|    else {
 7723|  96.0k|        auto adapter = id_adapter{handler, 0};
 7724|  96.0k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  96.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  96.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 96.0k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  96.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 96.0k, False: 0]
  ------------------
 7735|  96.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  96.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  96.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  |  Branch (865:45): [True: 0, False: 96.0k]
  |  |  |  Branch (865:45): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  96.0k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  96.0k|    }
 7751|  96.0k|    return begin + 1;
 7752|  96.0k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  96.0k|{
 7191|  96.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  96.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  96.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  96.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 96.0k, False: 0]
  |  Branch (7192:26): [True: 0, False: 96.0k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  96.0k|    handler();
 7197|  96.0k|    return begin;
 7198|  96.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  96.0k|        {
 7693|  96.0k|            arg_id = handler.on_arg_id();
 7694|  96.0k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  33.7k|    {
 4352|  33.7k|        return sync(0);
 4353|  33.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   136k|    {
 6177|   136k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   136k|        return static_cast<std::size_t>(m_desc &
 6182|   136k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   136k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   272k|    {
 6203|   272k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   272k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   136k|    {
 6145|   136k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   136k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   136k|        const auto t = type(id);
 6157|   136k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   136k|        basic_scan_arg<Context> arg;
 6162|   136k|        arg.m_type = t;
 6163|   136k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 0, False: 136k]
  ------------------
 6164|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6165|      0|        }
 6166|   136k|        else {
 6167|   136k|            arg.m_value = m_values[id];
 6168|   136k|        }
 6169|   136k|        return arg;
 6170|   136k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   136k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   136k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   136k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   136k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   136k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   136k|    {
 6207|   136k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   136k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   281k|    {
 5961|   281k|        return m_type != detail::arg_type::none_type;
 5962|   281k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  4.49k|{
 9300|  4.49k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.49k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.49k|{
 9201|  4.49k|#define SCN_VISIT(Type)                                                \
 9202|  4.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.49k|    }                                                                  \
 9205|  4.49k|    else {                                                             \
 9206|  4.49k|        return vis(monostate_val);                                     \
 9207|  4.49k|    }
 9208|       |
 9209|  4.49k|    monostate monostate_val{};
 9210|       |
 9211|  4.49k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.49k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.49k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.49k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.49k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.49k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.49k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.49k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.49k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.49k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.49k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.49k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.49k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.49k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.49k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.49k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.49k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.49k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.49k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.49k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.49k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.49k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.49k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.49k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.49k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.49k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.49k, False: 0]
  ------------------
 9262|  4.49k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.49k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.49k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.49k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.49k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.49k|            SCN_CLANG_POP
 9279|  4.49k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   281k|{
 6006|   281k|    return arg.m_type;
 6007|   281k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   145k|{
 6018|   145k|    return arg.m_value;
 6019|   145k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   145k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   145k|    {
 6258|   145k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4460|  72.6k|        : m_begin(const_cast<CharT*>(view.data())),
 4461|  72.6k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4462|  72.6k|          m_position(pos)
 4463|  72.6k|    {
 4464|  72.6k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   145k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   145k|    static_cast<    \
  |  |  935|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   145k|    {
 8934|   145k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 5938|   145k|        {
 5939|   145k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 5940|   145k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 5943|   145k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  68.1k|    {
 3075|  68.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  68.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  68.1k|    {
 3041|  68.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  68.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  68.1k|{
 7793|  68.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  68.1k|    handler.check_args_exhausted();
 7795|  68.1k|    return handler.get_error();
 7796|  68.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  68.1k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  68.1k|    auto begin = format.data();
 7761|  68.1k|    auto it = begin;
 7762|  68.1k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  73.4k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 68.1k, False: 5.28k]
  ------------------
 7765|  68.1k|        const auto ch = *it++;
 7766|  68.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 68.1k, False: 0]
  ------------------
 7767|  68.1k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  68.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  68.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 62.9k, False: 5.28k]
  ------------------
 7771|  62.9k|                return;
 7772|  62.9k|            }
 7773|  68.1k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  68.1k|    }
 7784|       |
 7785|  5.28k|    handler.on_literal_text(begin, end);
 7786|  5.28k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|  68.1k|{
 7690|  68.1k|    struct id_adapter {
 7691|  68.1k|        constexpr void operator()()
 7692|  68.1k|        {
 7693|  68.1k|            arg_id = handler.on_arg_id();
 7694|  68.1k|        }
 7695|  68.1k|        constexpr void operator()(std::size_t id)
 7696|  68.1k|        {
 7697|  68.1k|            arg_id = handler.on_arg_id(id);
 7698|  68.1k|        }
 7699|       |
 7700|  68.1k|        constexpr void on_error(const char* msg)
 7701|  68.1k|        {
 7702|  68.1k|            SCN_UNLIKELY_ATTR
 7703|  68.1k|            handler.on_error(msg);
 7704|  68.1k|        }
 7705|       |
 7706|  68.1k|        Handler& handler;
 7707|  68.1k|        std::size_t arg_id;
 7708|  68.1k|    };
 7709|       |
 7710|  68.1k|    ++begin;
 7711|  68.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  68.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 68.1k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  68.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 68.1k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  68.1k|    else {
 7723|  68.1k|        auto adapter = id_adapter{handler, 0};
 7724|  68.1k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  68.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  68.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 68.1k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  68.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 68.1k, False: 0]
  ------------------
 7735|  68.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  68.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  68.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  |  Branch (865:45): [True: 0, False: 68.1k]
  |  |  |  Branch (865:45): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  68.1k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  68.1k|    }
 7751|  68.1k|    return begin + 1;
 7752|  68.1k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   136k|    {
 8832|   136k|        return m_args.get(id);
 8833|   136k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   136k|    {
 6286|   136k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   136k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   136k|        do_check_arg_id(id);
 6294|   136k|        return id;
 6295|   136k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   136k|{
 6806|   136k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   136k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   136k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  68.1k|{
 7191|  68.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  68.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 68.1k, False: 0]
  |  Branch (7192:26): [True: 0, False: 68.1k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  68.1k|    handler();
 7197|  68.1k|    return begin;
 7198|  68.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  68.1k|        {
 7693|  68.1k|            arg_id = handler.on_arg_id();
 7694|  68.1k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9299|   136k|{
 9300|   136k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   136k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   136k|{
 9201|   136k|#define SCN_VISIT(Type)                                                \
 9202|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   136k|    }                                                                  \
 9205|   136k|    else {                                                             \
 9206|   136k|        return vis(monostate_val);                                     \
 9207|   136k|    }
 9208|       |
 9209|   136k|    monostate monostate_val{};
 9210|       |
 9211|   136k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 136k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 136k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 136k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 136k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 136k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 136k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 136k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 136k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 136k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 136k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 136k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 136k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 136k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 136k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 136k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 136k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 136k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 136k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 136k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 136k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 136k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 136k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 136k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 136k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|   136k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 136k, False: 0]
  ------------------
 9262|   136k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   136k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   136k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 136k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 136k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   136k|            SCN_CLANG_POP
 9279|   136k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4716|  68.1k|        : base(typename base::contiguous_tag{}, sv)
 4717|  68.1k|    {
 4718|  68.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4421|  68.1k|        : m_current_view(sv), m_is_contiguous(true)
 4422|  68.1k|    {
 4423|  68.1k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   136k|    {
 3000|   136k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   136k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 2990|   136k|    {
 2991|   136k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2992|   136k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   136k|    {
 2869|   136k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   136k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   136k|    {
 2850|   136k|        return decay_copy(t.begin());
 2851|   136k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3074|  68.1k|    {
 3075|  68.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  68.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3040|  68.1k|    {
 3041|  68.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  68.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   140k|{
 4691|   140k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 68.1k, False: 72.6k]
  ------------------
 4692|  68.1k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|  68.1k|                                ranges::default_sentinel};
 4694|  68.1k|    }
 4695|  72.6k|    return ranges::subrange{forward_iterator{this, 0},
 4696|  72.6k|                            ranges::default_sentinel};
 4697|   140k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|  72.6k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  72.6k|    {
 4455|  72.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  72.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  72.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  72.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  72.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  72.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4539|  68.1k|    {
 4540|  68.1k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  |  930|  68.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|  68.1k|        m_position = i;
 4542|  68.1k|        return *this;
 4543|  68.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  4.49k|{
 9300|  4.49k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  4.49k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  4.49k|{
 9201|  4.49k|#define SCN_VISIT(Type)                                                \
 9202|  4.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  4.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  4.49k|    }                                                                  \
 9205|  4.49k|    else {                                                             \
 9206|  4.49k|        return vis(monostate_val);                                     \
 9207|  4.49k|    }
 9208|       |
 9209|  4.49k|    monostate monostate_val{};
 9210|       |
 9211|  4.49k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 4.49k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 4.49k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 4.49k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 4.49k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 4.49k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 4.49k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 4.49k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 4.49k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 4.49k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 4.49k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 4.49k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 4.49k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 4.49k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 4.49k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 4.49k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 4.49k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 4.49k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 4.49k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 4.49k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 4.49k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 4.49k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 4.49k]
  ------------------
 9255|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 4.49k]
  ------------------
 9257|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 4.49k]
  ------------------
 9259|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9260|       |
 9261|  4.49k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 4.49k, False: 0]
  ------------------
 9262|  4.49k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  4.49k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  4.49k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 4.49k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 4.49k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  4.49k|            SCN_CLANG_POP
 9279|  4.49k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  68.1k|{
 7793|  68.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  68.1k|    handler.check_args_exhausted();
 7795|  68.1k|    return handler.get_error();
 7796|  68.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  68.1k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  68.1k|    auto begin = format.data();
 7761|  68.1k|    auto it = begin;
 7762|  68.1k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  73.4k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 68.1k, False: 5.28k]
  ------------------
 7765|  68.1k|        const auto ch = *it++;
 7766|  68.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 68.1k, False: 0]
  ------------------
 7767|  68.1k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  68.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  68.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 62.9k, False: 5.28k]
  ------------------
 7771|  62.9k|                return;
 7772|  62.9k|            }
 7773|  68.1k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  68.1k|    }
 7784|       |
 7785|  5.28k|    handler.on_literal_text(begin, end);
 7786|  5.28k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|  68.1k|{
 7690|  68.1k|    struct id_adapter {
 7691|  68.1k|        constexpr void operator()()
 7692|  68.1k|        {
 7693|  68.1k|            arg_id = handler.on_arg_id();
 7694|  68.1k|        }
 7695|  68.1k|        constexpr void operator()(std::size_t id)
 7696|  68.1k|        {
 7697|  68.1k|            arg_id = handler.on_arg_id(id);
 7698|  68.1k|        }
 7699|       |
 7700|  68.1k|        constexpr void on_error(const char* msg)
 7701|  68.1k|        {
 7702|  68.1k|            SCN_UNLIKELY_ATTR
 7703|  68.1k|            handler.on_error(msg);
 7704|  68.1k|        }
 7705|       |
 7706|  68.1k|        Handler& handler;
 7707|  68.1k|        std::size_t arg_id;
 7708|  68.1k|    };
 7709|       |
 7710|  68.1k|    ++begin;
 7711|  68.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  68.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 68.1k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  68.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 68.1k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  68.1k|    else {
 7723|  68.1k|        auto adapter = id_adapter{handler, 0};
 7724|  68.1k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  68.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  68.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 68.1k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  68.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 68.1k, False: 0]
  ------------------
 7735|  68.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  68.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  68.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  |  Branch (865:45): [True: 0, False: 68.1k]
  |  |  |  Branch (865:45): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|  68.1k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  68.1k|    }
 7751|  68.1k|    return begin + 1;
 7752|  68.1k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  68.1k|{
 7191|  68.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  68.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 68.1k, False: 0]
  |  Branch (7192:26): [True: 0, False: 68.1k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  68.1k|    handler();
 7197|  68.1k|    return begin;
 7198|  68.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  68.1k|        {
 7693|  68.1k|            arg_id = handler.on_arg_id();
 7694|  68.1k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  67.4k|    {
 4352|  67.4k|        return sync(0);
 4353|  67.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  4.49k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  8.98k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|   111k|    {
 2926|   111k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   111k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|   111k|    {
 2908|   111k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   111k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2093|   179k|{
 2094|   179k|    return SCN_FWD(t);
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   179k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4532|  39.7k|    {
 4533|  39.7k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  39.7k|        m_position += n;
 4535|  39.7k|        return *this;
 4536|  39.7k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2925|  67.6k|    {
 2926|  67.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  67.6k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2907|  67.6k|    {
 2908|  67.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  67.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4532|  5.28k|    {
 4533|  5.28k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  930|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4534|  5.28k|        m_position += n;
 4535|  5.28k|        return *this;
 4536|  5.28k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  34.0k|{
   44|  34.0k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  34.0k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  34.0k|{
   60|  34.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  34.0k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  4.49k|{
   72|  4.49k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.49k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  34.0k|{
   44|  34.0k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  34.0k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  34.0k|{
   60|  34.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  34.0k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  4.49k|{
   72|  4.49k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.49k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  11.3k|{
   89|  11.3k|    auto result = make_scan_result<Source, Args...>();
   90|  11.3k|    fill_scan_result(result,
   91|  11.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  11.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  11.3k|    return result;
   94|  11.3k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  11.3k|{
  131|  11.3k|    auto result = make_scan_result<Source, Args...>();
  132|  11.3k|    fill_scan_result(result,
  133|  11.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  11.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  11.3k|    return result;
  136|  11.3k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.49k|{
  171|  1.49k|    auto result = make_scan_result<Source, T>();
  172|  1.49k|    fill_scan_result(
  173|  1.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.49k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.49k|    return result;
  176|  1.49k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  96.0k|{
  250|  96.0k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  96.0k|        .transform_error(impl::make_eof_scan_error);
  252|  96.0k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  68.1k|{
  250|  68.1k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  68.1k|        .transform_error(impl::make_eof_scan_error);
  252|  68.1k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   151k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   151k|{
  309|   151k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   151k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  35.6k|{
 1903|  35.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  35.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  48.0k|{
 1911|  48.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  48.0k|    return sync_after_vscan(source, n);
 1913|  48.0k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  34.0k|{
 1921|  34.0k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  34.0k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  34.0k|{
 1929|  34.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  34.0k|    return sync_after_vscan(source, n);
 1931|  34.0k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.7k|{
 3582|  55.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 32.0k, False: 23.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  32.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  32.0k|    }
 3586|       |
 3587|  23.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  23.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  23.7k|    auto begin = contiguous_ctx.begin();
 3590|  23.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.4k, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.4k|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  23.7k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.7k|{
 3582|  55.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 32.0k, False: 23.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  32.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  32.0k|    }
 3586|       |
 3587|  23.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  23.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  23.7k|    auto begin = contiguous_ctx.begin();
 3590|  23.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.4k, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.4k|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  23.7k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  55.7k|{
 3582|  55.7k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 32.0k, False: 23.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  32.0k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  32.0k|    }
 3586|       |
 3587|  23.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  23.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  23.7k|    auto begin = contiguous_ctx.begin();
 3590|  23.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10.4k, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  10.4k|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  13.2k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  23.7k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  45.4k|{
 3582|  45.4k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 22.7k, False: 22.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  22.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  22.7k|    }
 3586|       |
 3587|  22.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  22.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  22.7k|    auto begin = contiguous_ctx.begin();
 3590|  22.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  1.76k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  22.7k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  45.4k|{
 3582|  45.4k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 22.7k, False: 22.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  22.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  22.7k|    }
 3586|       |
 3587|  22.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  22.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  22.7k|    auto begin = contiguous_ctx.begin();
 3590|  22.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  1.76k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  22.7k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3581|  45.4k|{
 3582|  45.4k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (3582:9): [True: 22.7k, False: 22.7k]
  ------------------
 3583|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 3584|  22.7k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 3585|  22.7k|    }
 3586|       |
 3587|  22.7k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 3588|  22.7k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 3589|  22.7k|    auto begin = contiguous_ctx.begin();
 3590|  22.7k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.9k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.9k|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  1.76k|    return ctx.begin().batch_advance(std::distance(begin, it));
 3592|  22.7k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   167k|{
  215|   167k|    return find_classic_impl(
  216|   167k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   167k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   167k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  13.4k|{
  329|  13.4k|    SCN_UNLIKELY_ATTR
  330|  13.4k|    return e;
  331|  13.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  35.6k|{
 1872|  35.6k|    return vscan_internal(source, format, args);
 1873|  35.6k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  48.0k|{
 1878|  48.0k|    auto n = vscan_internal(source, format, args);
 1879|  48.0k|    return sync_after_vscan(source, n);
 1880|  48.0k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  34.0k|{
 1886|  34.0k|    return vscan_internal(source, format, args);
 1887|  34.0k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  34.0k|{
 1892|  34.0k|    auto n = vscan_internal(source, format, args);
 1893|  34.0k|    return sync_after_vscan(source, n);
 1894|  34.0k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  2.24k|{
 1958|  2.24k|    return vscan_value_internal(source, arg);
 1959|  2.24k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  2.24k|{
 1963|  2.24k|    auto n = vscan_value_internal(source, arg);
 1964|  2.24k|    return sync_after_vscan(source, n);
 1965|  2.24k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  4.49k|{
 1971|  4.49k|    return vscan_value_internal(source, arg);
 1972|  4.49k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  4.49k|{
 1977|  4.49k|    auto n = vscan_value_internal(source, arg);
 1978|  4.49k|    return sync_after_vscan(source, n);
 1979|  4.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  76.9k|{
  118|  76.9k|    static_assert(sizeof(*source.data()) == 1);
  119|  76.9k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  76.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  76.9k|    uint64_t word{};
  121|  76.9k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  76.9k|    return has_byte_greater(word, 127) != 0;
  124|  76.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   167k|{
  131|   167k|    auto it = source.begin();
  132|       |
  133|   173k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 76.9k, False: 96.6k]
  ------------------
  134|  76.9k|        auto sv =
  135|  76.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  76.9k|                .substr(0, 8);
  137|       |
  138|  76.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 64.9k, False: 12.0k]
  ------------------
  139|  64.9k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  64.9k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  64.9k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 59.3k, False: 5.55k]
  ------------------
  142|  59.3k|                break;
  143|  59.3k|            }
  144|  5.55k|            continue;
  145|  64.9k|        }
  146|       |
  147|  16.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 15.4k, False: 714]
  ------------------
  148|  15.4k|            auto tmp =
  149|  15.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  15.4k|            auto res = get_next_code_point(tmp);
  151|  15.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 11.2k, False: 4.14k]
  ------------------
  152|  11.2k|                return it;
  153|  11.2k|            }
  154|  4.14k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  4.14k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  4.14k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  4.14k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  4.14k|        }
  158|  12.0k|    }
  159|       |
  160|   156k|    return detail::make_string_view_iterator(source, it);
  161|   167k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   170k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  15.4k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  96.0k|{
 1769|  96.0k|    const auto argcount = args.size();
 1770|  96.0k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 96.0k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  96.0k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 96.0k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  96.0k|    SCN_UNLIKELY_ATTR
 1783|  96.0k|    {
 1784|  96.0k|        auto handler = format_handler<false, CharT>{
 1785|  96.0k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  96.0k|        return vscan_parse_format_string(format, handler);
 1787|  96.0k|    }
 1788|  96.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   167k|{
 1317|   167k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 167k, False: 0]
  ------------------
 1318|   167k|        return false;
 1319|   167k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   167k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  2.24k|{
 1350|  2.24k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  2.24k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  2.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  2.24k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  2.24k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.24k|    static_cast<    \
  |  |  935|  2.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  2.24k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.24k|    }                                                  \
  |  |  |  | 3939|  2.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  2.24k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  71.2k|        : format_handler_base{argcount},
 1593|  71.2k|          parse_ctx{format},
 1594|  71.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  71.2k|    {
 1596|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   303k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   303k|    {
 1412|   303k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   303k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  71.2k|        : contiguous_ctx(source, args, loc)
 1544|  71.2k|    {
 1545|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  71.2k|{
 1734|  71.2k|    const auto beg = handler.get_ctx().begin();
 1735|  71.2k|    detail::parse_format_string<false>(format, handler);
 1736|  71.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 39.7k]
  |  |  ------------------
  ------------------
 1737|  31.4k|        return unexpected(err.error());
 1738|  31.4k|    }
 1739|  39.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  71.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   221k|    {
 1718|   221k|        return ctx.get();
 1719|   221k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   221k|    {
 1549|   221k|        return contiguous_ctx;
 1550|   221k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   110k|    {
 1600|   110k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 110k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   110k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   188k|    {
 1460|   188k|        error = unexpected(err);
 1461|   188k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  71.2k|{
 1372|  71.2k|    auto arg = ctx.arg(id);
 1373|  71.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  71.2k|    return arg;
 1377|  71.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   303k|    {
 1486|   303k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   303k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   303k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 303k, False: 0]
  |  |  ------------------
  ------------------
 1498|   303k|            visited_args_lower64 |= (1ull << id);
 1499|   303k|            return;
 1500|   303k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   303k|    {
 1470|   303k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   303k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 303k, False: 0]
  |  |  ------------------
  ------------------
 1477|   303k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   303k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   303k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  71.2k|    {
 1640|  71.2k|        return parse_ctx.next_arg_id();
 1641|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  71.2k|    {
 1680|  71.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  71.2k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  71.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 71.2k, False: 0]
  ------------------
 1684|  71.2k|            parse_ctx.advance_to(begin);
 1685|  71.2k|            on_visit_scan_arg(
 1686|  71.2k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  71.2k|                    parse_ctx, get_custom_ctx()},
 1688|  71.2k|                arg);
 1689|  71.2k|            return parse_ctx.begin();
 1690|  71.2k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  71.2k|    {
 1651|  71.2k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 71.2k]
  |  Branch (1651:13): [True: 0, False: 71.2k]
  |  Branch (1651:29): [True: 0, False: 71.2k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  71.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  71.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 39.7k]
  |  |  ------------------
  ------------------
 1658|  31.4k|            on_error(r.error());
 1659|  31.4k|        }
 1660|  39.7k|        else {
 1661|  39.7k|            get_ctx().advance_to(*r);
 1662|  39.7k|        }
 1663|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 1721|  71.2k|    {
 1722|  71.2k|        return ctx.get_custom();
 1723|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 1552|  71.2k|    {
 1553|  71.2k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 71.2k, False: 0]
  ------------------
 1554|  71.2k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  71.2k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  71.2k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  71.2k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  71.2k|        }
 1559|  71.2k|        auto it = buffer->get().begin();
 1560|  71.2k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  71.2k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  71.2k|        return *custom_ctx;
 1563|  71.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   303k|    {
 1419|   303k|        {
 1420|   303k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 303k]
  ------------------
 1421|   303k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 303k]
  ------------------
 1422|   303k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   303k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   303k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 303k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   303k|        }
 1430|       |
 1431|   303k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 303k, False: 0]
  ------------------
 1432|   303k|            return;
 1433|   303k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  1.21M|    {
 1465|  1.21M|        return error;
 1466|  1.21M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  96.0k|        : format_handler_base{argcount},
 1593|  96.0k|          parse_ctx{format},
 1594|  96.0k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  96.0k|    {
 1596|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  96.0k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  96.0k|    static_cast<    \
  |  |  935|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  96.0k|    {
 1521|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  96.0k|{
 1734|  96.0k|    const auto beg = handler.get_ctx().begin();
 1735|  96.0k|    detail::parse_format_string<false>(format, handler);
 1736|  96.0k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 64.6k]
  |  |  ------------------
  ------------------
 1737|  31.4k|        return unexpected(err.error());
 1738|  31.4k|    }
 1739|  64.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  96.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   321k|    {
 1718|   321k|        return ctx.get();
 1719|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   321k|    {
 1525|   321k|        return ctx;
 1526|   321k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   160k|    {
 1600|   160k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 160k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   160k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  96.0k|{
 1372|  96.0k|    auto arg = ctx.arg(id);
 1373|  96.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  96.0k|    return arg;
 1377|  96.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  96.0k|    {
 1640|  96.0k|        return parse_ctx.next_arg_id();
 1641|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  96.0k|    {
 1680|  96.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  96.0k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  96.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 96.0k, False: 0]
  ------------------
 1684|  96.0k|            parse_ctx.advance_to(begin);
 1685|  96.0k|            on_visit_scan_arg(
 1686|  96.0k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  96.0k|                    parse_ctx, get_custom_ctx()},
 1688|  96.0k|                arg);
 1689|  96.0k|            return parse_ctx.begin();
 1690|  96.0k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  96.0k|    {
 1651|  96.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 96.0k]
  |  Branch (1651:13): [True: 0, False: 96.0k]
  |  Branch (1651:29): [True: 0, False: 96.0k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  96.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  96.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 64.6k]
  |  |  ------------------
  ------------------
 1658|  31.4k|            on_error(r.error());
 1659|  31.4k|        }
 1660|  64.6k|        else {
 1661|  64.6k|            get_ctx().advance_to(*r);
 1662|  64.6k|        }
 1663|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 1721|  96.0k|    {
 1722|  96.0k|        return ctx.get_custom();
 1723|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 1528|  96.0k|    {
 1529|  96.0k|        return ctx;
 1530|  96.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  71.2k|{
 1749|  71.2k|    const auto argcount = args.size();
 1750|  71.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 71.2k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  71.2k|    auto handler = format_handler<true, CharT>{
 1756|  71.2k|        ranges::subrange<const CharT*>{source.data(),
 1757|  71.2k|                                       source.data() + source.size()},
 1758|  71.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  71.2k|    return vscan_parse_format_string(format, handler);
 1760|  71.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  2.24k|{
 1330|  2.24k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.24k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  2.24k|    auto reader =
 1336|  2.24k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  2.24k|            ranges::subrange<const CharT*>{source.data(),
 1338|  2.24k|                                           source.data() + source.size()},
 1339|  2.24k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  2.24k|    static_cast<    \
  |  |  935|  2.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  2.24k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  2.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.24k|    }                                                  \
  |  |  |  | 3939|  2.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  2.24k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  98.3k|{
 1849|  98.3k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  98.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 64.6k, False: 33.7k]
  |  |  ------------------
  ------------------
 1850|  64.6k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  64.6k|    }
 1856|  33.7k|    else {
 1857|  33.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  33.7k|    }
 1863|  98.3k|    return result;
 1864|  98.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  68.1k|{
 1749|  68.1k|    const auto argcount = args.size();
 1750|  68.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 0, False: 68.1k]
  |  Branch (1750:60): [True: 0, False: 0]
  ------------------
 1751|      0|        auto arg = args.get(0);
 1752|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|      0|    }
 1754|       |
 1755|  68.1k|    auto handler = format_handler<true, CharT>{
 1756|  68.1k|        ranges::subrange<const CharT*>{source.data(),
 1757|  68.1k|                                       source.data() + source.size()},
 1758|  68.1k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  68.1k|    return vscan_parse_format_string(format, handler);
 1760|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   136k|{
 1317|   136k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 136k, False: 0]
  ------------------
 1318|   136k|        return false;
 1319|   136k|    }
 1320|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 0, False: 0]
  |  Branch (1320:39): [True: 0, False: 0]
  ------------------
 1321|   136k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  4.49k|{
 1330|  4.49k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.49k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  4.49k|    auto reader =
 1336|  4.49k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  4.49k|            ranges::subrange<const CharT*>{source.data(),
 1338|  4.49k|                                           source.data() + source.size()},
 1339|  4.49k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.49k|    static_cast<    \
  |  |  935|  4.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  4.49k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.49k|    }                                                  \
  |  |  |  | 3939|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|      0|    return ranges::distance(source.data(), it);
 1342|  4.49k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|  68.1k|        : format_handler_base{argcount},
 1593|  68.1k|          parse_ctx{format},
 1594|  68.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  68.1k|    {
 1596|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|  68.1k|        : contiguous_ctx(source, args, loc)
 1544|  68.1k|    {
 1545|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  68.1k|{
 1734|  68.1k|    const auto beg = handler.get_ctx().begin();
 1735|  68.1k|    detail::parse_format_string<false>(format, handler);
 1736|  68.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.9k, False: 5.28k]
  |  |  ------------------
  ------------------
 1737|  62.9k|        return unexpected(err.error());
 1738|  62.9k|    }
 1739|  5.28k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   146k|    {
 1718|   146k|        return ctx.get();
 1719|   146k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   146k|    {
 1549|   146k|        return contiguous_ctx;
 1550|   146k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  73.4k|    {
 1600|  73.4k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 73.4k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  73.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|  68.1k|{
 1372|  68.1k|    auto arg = ctx.arg(id);
 1373|  68.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  68.1k|    return arg;
 1377|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|  68.1k|    {
 1640|  68.1k|        return parse_ctx.next_arg_id();
 1641|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|  68.1k|    {
 1680|  68.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  68.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  68.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 68.1k, False: 0]
  ------------------
 1684|  68.1k|            parse_ctx.advance_to(begin);
 1685|  68.1k|            on_visit_scan_arg(
 1686|  68.1k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  68.1k|                    parse_ctx, get_custom_ctx()},
 1688|  68.1k|                arg);
 1689|  68.1k|            return parse_ctx.begin();
 1690|  68.1k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  68.1k|    {
 1651|  68.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 68.1k]
  |  Branch (1651:13): [True: 0, False: 68.1k]
  |  Branch (1651:29): [True: 0, False: 68.1k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  68.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  68.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.9k, False: 5.28k]
  |  |  ------------------
  ------------------
 1658|  62.9k|            on_error(r.error());
 1659|  62.9k|        }
 1660|  5.28k|        else {
 1661|  5.28k|            get_ctx().advance_to(*r);
 1662|  5.28k|        }
 1663|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 1721|  68.1k|    {
 1722|  68.1k|        return ctx.get_custom();
 1723|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 1552|  68.1k|    {
 1553|  68.1k|        if (!buffer) {
  ------------------
  |  Branch (1553:13): [True: 68.1k, False: 0]
  ------------------
 1554|  68.1k|            buffer.emplace(detail::make_string_view_from_pointers(
 1555|  68.1k|                ranges::data(contiguous_ctx.underlying_range()),
 1556|  68.1k|                ranges::data(contiguous_ctx.underlying_range()) +
 1557|  68.1k|                    ranges::size(contiguous_ctx.underlying_range())));
 1558|  68.1k|        }
 1559|  68.1k|        auto it = buffer->get().begin();
 1560|  68.1k|        it.batch_advance_to(contiguous_ctx.begin_position());
 1561|  68.1k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 1562|  68.1k|        return *custom_ctx;
 1563|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  68.1k|{
 1769|  68.1k|    const auto argcount = args.size();
 1770|  68.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 68.1k]
  |  Branch (1770:60): [True: 0, False: 0]
  ------------------
 1771|      0|        auto arg = args.get(0);
 1772|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|      0|    }
 1774|       |
 1775|  68.1k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 68.1k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  68.1k|    SCN_UNLIKELY_ATTR
 1783|  68.1k|    {
 1784|  68.1k|        auto handler = format_handler<false, CharT>{
 1785|  68.1k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  68.1k|        return vscan_parse_format_string(format, handler);
 1787|  68.1k|    }
 1788|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  4.49k|{
 1350|  4.49k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.49k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  4.49k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  4.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 4.49k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  4.49k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  4.49k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  4.49k|    static_cast<    \
  |  |  935|  4.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  4.49k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.49k|    }                                                  \
  |  |  |  | 3939|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|      0|    return it.position();
 1367|  4.49k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|  68.1k|        : format_handler_base{argcount},
 1593|  68.1k|          parse_ctx{format},
 1594|  68.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  68.1k|    {
 1596|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|  68.1k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  68.1k|    {
 1521|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  68.1k|{
 1734|  68.1k|    const auto beg = handler.get_ctx().begin();
 1735|  68.1k|    detail::parse_format_string<false>(format, handler);
 1736|  68.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.9k, False: 5.28k]
  |  |  ------------------
  ------------------
 1737|  62.9k|        return unexpected(err.error());
 1738|  62.9k|    }
 1739|  5.28k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   146k|    {
 1718|   146k|        return ctx.get();
 1719|   146k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   146k|    {
 1525|   146k|        return ctx;
 1526|   146k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|  73.4k|    {
 1600|  73.4k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 73.4k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  73.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|  68.1k|{
 1372|  68.1k|    auto arg = ctx.arg(id);
 1373|  68.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.1k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  68.1k|    return arg;
 1377|  68.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|  68.1k|    {
 1640|  68.1k|        return parse_ctx.next_arg_id();
 1641|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|  68.1k|    {
 1680|  68.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  68.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  68.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 68.1k, False: 0]
  ------------------
 1684|  68.1k|            parse_ctx.advance_to(begin);
 1685|  68.1k|            on_visit_scan_arg(
 1686|  68.1k|                impl::custom_reader<detail::default_context<char_type>>{
 1687|  68.1k|                    parse_ctx, get_custom_ctx()},
 1688|  68.1k|                arg);
 1689|  68.1k|            return parse_ctx.begin();
 1690|  68.1k|        }
 1691|       |
 1692|      0|        auto specs = detail::format_specs{};
 1693|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|      0|            detail::get_arg_type(arg)};
 1696|       |
 1697|      0|        begin = detail::parse_format_specs(begin, end, handler);
 1698|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 0]
  |  Branch (1698:29): [True: 0, False: 0]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|      0|        parse_ctx.advance_to(begin);
 1708|       |
 1709|      0|        on_visit_scan_arg(
 1710|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|      0|                                           get_ctx().locale()},
 1712|      0|            arg);
 1713|      0|        return parse_ctx.begin();
 1714|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  68.1k|    {
 1651|  68.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 68.1k]
  |  Branch (1651:13): [True: 0, False: 68.1k]
  |  Branch (1651:29): [True: 0, False: 68.1k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  68.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  68.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.9k, False: 5.28k]
  |  |  ------------------
  ------------------
 1658|  62.9k|            on_error(r.error());
 1659|  62.9k|        }
 1660|  5.28k|        else {
 1661|  5.28k|            get_ctx().advance_to(*r);
 1662|  5.28k|        }
 1663|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 1721|  68.1k|    {
 1722|  68.1k|        return ctx.get_custom();
 1723|  68.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 1528|  68.1k|    {
 1529|  68.1k|        return ctx;
 1530|  68.1k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  72.6k|{
 1849|  72.6k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  72.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 5.28k, False: 67.4k]
  |  |  ------------------
  ------------------
 1850|  5.28k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  5.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.28k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  5.28k|    }
 1856|  67.4k|    else {
 1857|  67.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 67.4k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  67.4k|    }
 1863|  72.6k|    return result;
 1864|  72.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  2.24k|{
 1795|  2.24k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.24k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  2.24k|{
 1795|  2.24k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  2.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  2.24k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  4.49k|{
 1795|  4.49k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.49k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  4.49k|{
 1795|  4.49k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  4.49k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  32.0k|{
 3563|  32.0k|    {
 3564|  32.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  32.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 452, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    452|    }                                                  \
  |  |  |  | 3939|  32.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.5k|        ctx.range(), t, ctx.locale());
 3571|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 21.5k]
  |  |  ------------------
  ------------------
 3573|  10.0k|        return unexpected(e.error());
 3574|  10.0k|    }
 3575|  21.5k|    return r.get_iterator();
 3576|  31.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.5k|          m_begin(ranges::begin(m_range)),
 2708|  31.5k|          m_tm(t),
 2709|  31.5k|          m_loc(loc)
 2710|  31.5k|    {
 2711|  31.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.24k|    {
 3358|  9.24k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.24k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  39.1k|    {
 3363|  39.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.0k, False: 29.1k]
  ------------------
 3364|  10.0k|            m_error = unexpected(e);
 3365|  10.0k|        }
 3366|  39.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  37.2k|    {
 2715|  65.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 37.2k, False: 27.8k]
  ------------------
 2716|  37.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 168, False: 37.0k]
  ------------------
 2717|    168|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    168|            }
 2719|  37.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.24k, False: 27.8k]
  ------------------
 2720|  9.24k|                return on_error("Invalid literal character");
 2721|  9.24k|            }
 2722|  27.8k|            ++beg;
 2723|  27.8k|            ++m_begin;
 2724|  27.8k|        }
 2725|  37.2k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  2.97k|    {
 2745|  2.97k|#if !SCN_DISABLE_LOCALE
 2746|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 2.97k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  2.97k|#endif
 2753|       |
 2754|  2.97k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  2.97k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  2.97k|    {
 2218|  2.97k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.97k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  2.97k|        t.tm_year = y - 1900;
 2223|  2.97k|        st.set_full_year(h);
 2224|  2.97k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  65.0k|    {
 3381|  65.0k|        int digits_read = 0;
 3382|  65.0k|        int accumulator = 0;
 3383|   117k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 116k, False: 336]
  ------------------
 3384|   116k|            const auto ch = *m_begin;
 3385|   116k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 34.9k, False: 81.9k]
  |  Branch (3385:36): [True: 19.7k, False: 62.2k]
  ------------------
 3386|  54.6k|                break;
 3387|  54.6k|            }
 3388|  62.2k|            ++m_begin;
 3389|  62.2k|            ++digits_read;
 3390|  62.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  62.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 10.0k, False: 52.1k]
  ------------------
 3392|  10.0k|                break;
 3393|  10.0k|            }
 3394|  62.2k|        }
 3395|  65.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 14.6k, False: 50.4k]
  ------------------
 3396|  14.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  14.6k|                                 "Too few integer digits"});
 3398|  14.6k|            return -1;
 3399|  14.6k|        }
 3400|  50.4k|        return accumulator;
 3401|  65.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.00k|    {
 2759|  7.00k|#if !SCN_DISABLE_LOCALE
 2760|  7.00k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.00k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.00k|#endif
 2768|       |
 2769|  7.00k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.00k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  7.00k|    {
 2235|  7.00k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 5.57k]
  |  |  |  Branch (865:45): [True: 1.42k, False: 5.57k]
  |  |  |  Branch (865:45): [True: 0, False: 5.57k]
  |  |  ------------------
  ------------------
 2236|  1.42k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.42k|                                "Invalid value for tm_year"});
 2238|  1.42k|        }
 2239|  5.57k|        st.short_year_value = y;
 2240|  5.57k|        st.set_short_year(h);
 2241|  5.57k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.36k|    {
 2802|  2.36k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.36k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.36k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.36k|#endif
 2810|       |
 2811|  2.36k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.36k|            {"January", 1},
 2813|  2.36k|            {"February", 2},
 2814|  2.36k|            {"March", 3},
 2815|  2.36k|            {"April", 4},
 2816|  2.36k|            {"May", 5},
 2817|  2.36k|            {"June", 6},
 2818|  2.36k|            {"July", 7},
 2819|  2.36k|            {"August", 8},
 2820|  2.36k|            {"September", 9},
 2821|  2.36k|            {"October", 10},
 2822|  2.36k|            {"November", 11},
 2823|  2.36k|            {"December", 12},
 2824|  2.36k|        }};
 2825|  2.36k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.34k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.34k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.34k|            {"Jan", 1},
 2830|  2.34k|            {"Feb", 2},
 2831|  2.34k|            {"Mar", 3},
 2832|  2.34k|            {"Apr", 4},
 2833|  2.34k|            {"Jun", 6},
 2834|  2.34k|            {"Jul", 7},
 2835|  2.34k|            {"Aug", 8},
 2836|  2.34k|            {"Sep", 9},
 2837|  2.34k|            {"Oct", 10},
 2838|  2.34k|            {"Nov", 11},
 2839|  2.34k|            {"Dec", 12},
 2840|  2.34k|        }};
 2841|  2.34k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.42k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.42k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  9.52k|    {
 2208|  9.52k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.36k, False: 7.16k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 7.26k]
  |  |  |  Branch (865:45): [True: 100, False: 7.16k]
  |  |  ------------------
  ------------------
 2209|  2.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.36k|                                "Invalid value for tm_mon"});
 2211|  2.36k|        }
 2212|  7.16k|        t.tm_mon = m - 1;
 2213|  7.16k|        st.set_mon(h);
 2214|  7.16k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.36k|    {
 3419|  2.36k|        auto start_it = m_begin;
 3420|  2.36k|        std::size_t options_available = N;
 3421|  2.36k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.30k, False: 2.31k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.28k, False: 16]
  ------------------
 3424|  5.28k|            std::size_t i = 0;
 3425|  5.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 5.24k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  5.24k|            const auto ch = *m_begin;
 3430|  5.24k|            ++m_begin;
 3431|  38.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.2k, False: 5.24k]
  ------------------
 3432|  33.2k|                const auto cmp = static_cast<unsigned>(
 3433|  33.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.2k]
  ------------------
 3435|  33.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.2k, False: 3.91k]
  |  Branch (3435:34): [True: 28.2k, False: 998]
  ------------------
 3436|  28.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.2k|                                options.end());
 3438|  28.2k|                    --options_available;
 3439|  28.2k|                    continue;
 3440|  28.2k|                }
 3441|  4.91k|                ++i;
 3442|  4.91k|            }
 3443|  5.24k|            ++chars_consumed;
 3444|  5.24k|        }
 3445|  2.36k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.34k, False: 16]
  ------------------
 3446|  2.34k|            m_begin = start_it;
 3447|  2.34k|            return std::nullopt;
 3448|  2.34k|        }
 3449|     16|        return options.front().second;
 3450|  2.36k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.34k|    {
 3419|  2.34k|        auto start_it = m_begin;
 3420|  2.34k|        std::size_t options_available = N;
 3421|  2.34k|        std::size_t chars_consumed = 0;
 3422|  6.63k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.23k, False: 1.39k]
  ------------------
 3423|  6.63k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.31k, False: 920]
  ------------------
 3424|  4.31k|            std::size_t i = 0;
 3425|  4.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.28k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.28k|            const auto ch = *m_begin;
 3430|  4.28k|            ++m_begin;
 3431|  32.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 27.7k, False: 4.28k]
  ------------------
 3432|  27.7k|                const auto cmp = static_cast<unsigned>(
 3433|  27.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  27.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 27.7k]
  ------------------
 3435|  27.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 25.8k, False: 1.95k]
  |  Branch (3435:34): [True: 24.8k, False: 974]
  ------------------
 3436|  24.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  24.8k|                                options.end());
 3438|  24.8k|                    --options_available;
 3439|  24.8k|                    continue;
 3440|  24.8k|                }
 3441|  2.92k|                ++i;
 3442|  2.92k|            }
 3443|  4.28k|            ++chars_consumed;
 3444|  4.28k|        }
 3445|  2.34k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.42k, False: 920]
  ------------------
 3446|  1.42k|            m_begin = start_it;
 3447|  1.42k|            return std::nullopt;
 3448|  1.42k|        }
 3449|    920|        return options.front().second;
 3450|  2.34k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.59k|    {
 2848|  8.59k|#if !SCN_DISABLE_LOCALE
 2849|  8.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.59k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.59k|#endif
 2856|       |
 2857|  8.59k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.59k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.59k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.57k|    {
 2880|  8.57k|#if !SCN_DISABLE_LOCALE
 2881|  8.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.57k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.57k|#endif
 2888|       |
 2889|  8.57k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.57k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  8.57k|    {
 2198|  8.57k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.82k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.75k, False: 5.81k]
  |  |  |  Branch (865:45): [True: 68, False: 5.74k]
  |  |  ------------------
  ------------------
 2199|  2.82k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.82k|                                "Invalid value for tm_mday"});
 2201|  2.82k|        }
 2202|  5.74k|        t.tm_mday = d;
 2203|  5.74k|        st.set_mday(h);
 2204|  5.74k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.44k|    {
 2895|  1.44k|#if !SCN_DISABLE_LOCALE
 2896|  1.44k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.44k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.44k|#endif
 2903|       |
 2904|  1.44k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.44k|            {"Sunday", 0},
 2906|  1.44k|            {"Monday", 1},
 2907|  1.44k|            {"Tuesday", 2},
 2908|  1.44k|            {"Wednesday", 3},
 2909|  1.44k|            {"Thursday", 4},
 2910|  1.44k|            {"Friday", 5},
 2911|  1.44k|            {"Saturday", 6},
 2912|  1.44k|        }};
 2913|  1.44k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.44k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.44k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.44k|            {"Sun", 0},
 2918|  1.44k|            {"Mon", 1},
 2919|  1.44k|            {"Tue", 2},
 2920|  1.44k|            {"Wed", 3},
 2921|  1.44k|            {"Thu", 4},
 2922|  1.44k|            {"Fri", 5},
 2923|  1.44k|            {"Sat", 6},
 2924|  1.44k|        }};
 2925|  1.44k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.44k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.44k|        return set_error(
 2929|  1.44k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.44k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.89k|    {
 3419|  2.89k|        auto start_it = m_begin;
 3420|  2.89k|        std::size_t options_available = N;
 3421|  2.89k|        std::size_t chars_consumed = 0;
 3422|  6.00k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.13k, False: 2.86k]
  ------------------
 3423|  6.00k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.13k, False: 0]
  ------------------
 3424|  3.13k|            std::size_t i = 0;
 3425|  3.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.10k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.10k|            const auto ch = *m_begin;
 3430|  3.10k|            ++m_begin;
 3431|  23.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.4k, False: 3.10k]
  ------------------
 3432|  20.4k|                const auto cmp = static_cast<unsigned>(
 3433|  20.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.4k]
  ------------------
 3435|  20.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.2k, False: 232]
  |  Branch (3435:34): [True: 20.2k, False: 52]
  ------------------
 3436|  20.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.2k|                                options.end());
 3438|  20.2k|                    --options_available;
 3439|  20.2k|                    continue;
 3440|  20.2k|                }
 3441|    284|                ++i;
 3442|    284|            }
 3443|  3.10k|            ++chars_consumed;
 3444|  3.10k|        }
 3445|  2.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.89k, False: 0]
  ------------------
 3446|  2.89k|            m_begin = start_it;
 3447|  2.89k|            return std::nullopt;
 3448|  2.89k|        }
 3449|      0|        return options.front().second;
 3450|  2.89k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  17.8k|    {
 2969|  17.8k|#if !SCN_DISABLE_LOCALE
 2970|  17.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 17.8k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  17.8k|#endif
 2977|       |
 2978|  17.8k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  17.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  17.8k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  17.8k|    {
 2178|  17.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93k, False: 15.8k]
  |  |  |  Branch (865:45): [True: 1.75k, False: 16.0k]
  |  |  |  Branch (865:45): [True: 180, False: 15.8k]
  |  |  ------------------
  ------------------
 2179|  1.93k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  1.93k|                                  "Invalid value for tm_hour"});
 2181|  1.93k|        }
 2182|  15.8k|        t.tm_hour = h;
 2183|  15.8k|        st.set_hour24(hdl);
 2184|  15.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  17.7k|    {
 2997|  17.7k|#if !SCN_DISABLE_LOCALE
 2998|  17.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 17.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  17.7k|#endif
 3005|       |
 3006|  17.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  17.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  17.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  17.7k|    {
 2168|  17.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.29k, False: 15.4k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 15.5k]
  |  |  |  Branch (865:45): [True: 28, False: 15.4k]
  |  |  ------------------
  ------------------
 2169|  2.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.29k|                                "Invalid value for tm_min"});
 2171|  2.29k|        }
 2172|  15.4k|        t.tm_min = m;
 2173|  15.4k|        st.set_min(h);
 2174|  15.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.26k|    {
 3011|  2.26k|#if !SCN_DISABLE_LOCALE
 3012|  2.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.26k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.26k|#endif
 3019|       |
 3020|  2.26k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.26k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.26k|    {
 2158|  2.26k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 842]
  |  |  |  Branch (865:45): [True: 1.41k, False: 848]
  |  |  |  Branch (865:45): [True: 6, False: 842]
  |  |  ------------------
  ------------------
 2159|  1.42k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.42k|                                "Invalid value for tm_sec"});
 2161|  1.42k|        }
 2162|    842|        t.tm_sec = s;
 2163|    842|        st.set_sec(h);
 2164|    842|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.00k|    {
 3253|       |        // %m/%d/%y
 3254|  7.00k|        constexpr CharT slash = '/';
 3255|  7.00k|        on_dec_month();
 3256|  7.00k|        on_text(&slash, &slash + 1);
 3257|  7.00k|        on_day_of_month();
 3258|  7.00k|        on_text(&slash, &slash + 1);
 3259|  7.00k|        on_short_year();
 3260|  7.00k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.52k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.52k|        constexpr CharT dash = '-';
 3265|  1.52k|        on_full_year();
 3266|  1.52k|        on_text(&dash, &dash + 1);
 3267|  1.52k|        on_dec_month();
 3268|  1.52k|        on_text(&dash, &dash + 1);
 3269|  1.52k|        on_day_of_month();
 3270|  1.52k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  15.5k|    {
 3295|       |        // %H:%M
 3296|  15.5k|        constexpr CharT colon = ':';
 3297|  15.5k|        on_24_hour();
 3298|  15.5k|        on_text(&colon, &colon + 1);
 3299|  15.5k|        on_minute();
 3300|  15.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.26k|    {
 3303|       |        // %H:%M:%S
 3304|  2.26k|        constexpr CharT colon = ':';
 3305|  2.26k|        on_24_hour();
 3306|  2.26k|        on_text(&colon, &colon + 1);
 3307|  2.26k|        on_minute();
 3308|  2.26k|        on_text(&colon, &colon + 1);
 3309|  2.26k|        on_second();
 3310|  2.26k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  21.5k|    {
 3342|  21.5k|        m_st.verify(*this);
 3343|  21.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 21.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  21.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 21.4k, False: 86]
  |  Branch (3346:37): [True: 5.56k, False: 15.8k]
  |  Branch (3346:60): [True: 0, False: 15.8k]
  ------------------
 3347|  5.56k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.56k|        }
 3349|  21.5k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2295|  11.3k|    {
 2296|  11.3k|        st.handle_short_year_and_century(t.tm_year, 1900);
 2297|  11.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  63.2k|    {
 3353|  63.2k|        return m_error;
 3354|  63.2k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  21.5k|    {
 3370|  21.5k|        return m_begin;
 3371|  21.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  23.7k|{
 3563|  23.7k|    {
 3564|  23.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 194, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    194|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.5k|        ctx.range(), t, ctx.locale());
 3571|  23.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 3573|  10.2k|        return unexpected(e.error());
 3574|  10.2k|    }
 3575|  13.2k|    return r.get_iterator();
 3576|  23.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  71.2k|{
  250|  71.2k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  71.2k|        .transform_error(impl::make_eof_scan_error);
  252|  71.2k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.5k|          m_begin(ranges::begin(m_range)),
 2708|  23.5k|          m_tm(t),
 2709|  23.5k|          m_loc(loc)
 2710|  23.5k|    {
 2711|  23.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.61k|    {
 3358|  9.61k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.61k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  41.0k|    {
 3363|  41.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.2k, False: 30.7k]
  ------------------
 3364|  10.2k|            m_error = unexpected(e);
 3365|  10.2k|        }
 3366|  41.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.7k|    {
 2715|  37.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.7k, False: 14.0k]
  ------------------
 2716|  23.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 130, False: 23.6k]
  ------------------
 2717|    130|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    130|            }
 2719|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.61k, False: 14.0k]
  ------------------
 2720|  9.61k|                return on_error("Invalid literal character");
 2721|  9.61k|            }
 2722|  14.0k|            ++beg;
 2723|  14.0k|            ++m_begin;
 2724|  14.0k|        }
 2725|  23.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.03k|    {
 2745|  3.03k|#if !SCN_DISABLE_LOCALE
 2746|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.03k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.03k|#endif
 2753|       |
 2754|  3.03k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.03k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.03k|    {
 2218|  3.03k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.03k|        t.tm_year = y - 1900;
 2223|  3.03k|        st.set_full_year(h);
 2224|  3.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.4k|    {
 3381|  43.4k|        int digits_read = 0;
 3382|  43.4k|        int accumulator = 0;
 3383|  72.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 72.6k, False: 270]
  ------------------
 3384|  72.6k|            const auto ch = *m_begin;
 3385|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.6k, False: 50.0k]
  |  Branch (3385:36): [True: 16.6k, False: 33.3k]
  ------------------
 3386|  39.2k|                break;
 3387|  39.2k|            }
 3388|  33.3k|            ++m_begin;
 3389|  33.3k|            ++digits_read;
 3390|  33.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.87k, False: 29.4k]
  ------------------
 3392|  3.87k|                break;
 3393|  3.87k|            }
 3394|  33.3k|        }
 3395|  43.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.4k, False: 27.9k]
  ------------------
 3396|  15.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.4k|                                 "Too few integer digits"});
 3398|  15.4k|            return -1;
 3399|  15.4k|        }
 3400|  27.9k|        return accumulator;
 3401|  43.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.57k|    {
 2759|  1.57k|#if !SCN_DISABLE_LOCALE
 2760|  1.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.57k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.57k|#endif
 2768|       |
 2769|  1.57k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.57k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.57k|    {
 2235|  1.57k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 106]
  |  |  |  Branch (865:45): [True: 1.46k, False: 106]
  |  |  |  Branch (865:45): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 2236|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.46k|                                "Invalid value for tm_year"});
 2238|  1.46k|        }
 2239|    106|        st.short_year_value = y;
 2240|    106|        st.set_short_year(h);
 2241|    106|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.40k|    {
 2802|  2.40k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.40k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.40k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.40k|#endif
 2810|       |
 2811|  2.40k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.40k|            {"January", 1},
 2813|  2.40k|            {"February", 2},
 2814|  2.40k|            {"March", 3},
 2815|  2.40k|            {"April", 4},
 2816|  2.40k|            {"May", 5},
 2817|  2.40k|            {"June", 6},
 2818|  2.40k|            {"July", 7},
 2819|  2.40k|            {"August", 8},
 2820|  2.40k|            {"September", 9},
 2821|  2.40k|            {"October", 10},
 2822|  2.40k|            {"November", 11},
 2823|  2.40k|            {"December", 12},
 2824|  2.40k|        }};
 2825|  2.40k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.38k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.38k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.38k|            {"Jan", 1},
 2830|  2.38k|            {"Feb", 2},
 2831|  2.38k|            {"Mar", 3},
 2832|  2.38k|            {"Apr", 4},
 2833|  2.38k|            {"Jun", 6},
 2834|  2.38k|            {"Jul", 7},
 2835|  2.38k|            {"Aug", 8},
 2836|  2.38k|            {"Sep", 9},
 2837|  2.38k|            {"Oct", 10},
 2838|  2.38k|            {"Nov", 11},
 2839|  2.38k|            {"Dec", 12},
 2840|  2.38k|        }};
 2841|  2.38k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.46k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.46k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.12k|    {
 2208|  4.12k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 1.65k]
  |  |  |  Branch (865:45): [True: 2.39k, False: 1.73k]
  |  |  |  Branch (865:45): [True: 84, False: 1.65k]
  |  |  ------------------
  ------------------
 2209|  2.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.47k|                                "Invalid value for tm_mon"});
 2211|  2.47k|        }
 2212|  1.65k|        t.tm_mon = m - 1;
 2213|  1.65k|        st.set_mon(h);
 2214|  1.65k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.40k|    {
 3419|  2.40k|        auto start_it = m_begin;
 3420|  2.40k|        std::size_t options_available = N;
 3421|  2.40k|        std::size_t chars_consumed = 0;
 3422|  7.66k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.31k, False: 2.35k]
  ------------------
 3423|  7.66k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.29k, False: 16]
  ------------------
 3424|  5.29k|            std::size_t i = 0;
 3425|  5.29k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.26k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.26k|            const auto ch = *m_begin;
 3430|  5.26k|            ++m_begin;
 3431|  38.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.26k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.7k, False: 3.89k]
  |  Branch (3435:34): [True: 28.7k, False: 968]
  ------------------
 3436|  28.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.7k|                                options.end());
 3438|  28.7k|                    --options_available;
 3439|  28.7k|                    continue;
 3440|  28.7k|                }
 3441|  4.86k|                ++i;
 3442|  4.86k|            }
 3443|  5.26k|            ++chars_consumed;
 3444|  5.26k|        }
 3445|  2.40k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.38k, False: 16]
  ------------------
 3446|  2.38k|            m_begin = start_it;
 3447|  2.38k|            return std::nullopt;
 3448|  2.38k|        }
 3449|     16|        return options.front().second;
 3450|  2.40k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.38k|    {
 3419|  2.38k|        auto start_it = m_begin;
 3420|  2.38k|        std::size_t options_available = N;
 3421|  2.38k|        std::size_t chars_consumed = 0;
 3422|  6.68k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.25k, False: 1.43k]
  ------------------
 3423|  6.68k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.33k, False: 920]
  ------------------
 3424|  4.33k|            std::size_t i = 0;
 3425|  4.33k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 34, False: 4.29k]
  ------------------
 3426|     34|                options_available = 0;
 3427|     34|                break;
 3428|     34|            }
 3429|  4.29k|            const auto ch = *m_begin;
 3430|  4.29k|            ++m_begin;
 3431|  32.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 28.1k, False: 4.29k]
  ------------------
 3432|  28.1k|                const auto cmp = static_cast<unsigned>(
 3433|  28.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  28.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 28.1k]
  ------------------
 3435|  28.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 26.2k, False: 1.93k]
  |  Branch (3435:34): [True: 25.3k, False: 950]
  ------------------
 3436|  25.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  25.3k|                                options.end());
 3438|  25.3k|                    --options_available;
 3439|  25.3k|                    continue;
 3440|  25.3k|                }
 3441|  2.88k|                ++i;
 3442|  2.88k|            }
 3443|  4.29k|            ++chars_consumed;
 3444|  4.29k|        }
 3445|  2.38k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.46k, False: 920]
  ------------------
 3446|  1.46k|            m_begin = start_it;
 3447|  1.46k|            return std::nullopt;
 3448|  1.46k|        }
 3449|    920|        return options.front().second;
 3450|  2.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.18k|    {
 2848|  3.18k|#if !SCN_DISABLE_LOCALE
 2849|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.18k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.18k|#endif
 2856|       |
 2857|  3.18k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.18k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.18k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.17k|    {
 2880|  3.17k|#if !SCN_DISABLE_LOCALE
 2881|  3.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.17k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.17k|#endif
 2888|       |
 2889|  3.17k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.17k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.17k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.17k|    {
 2198|  3.17k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.91k, False: 258]
  |  |  |  Branch (865:45): [True: 2.85k, False: 320]
  |  |  |  Branch (865:45): [True: 62, False: 258]
  |  |  ------------------
  ------------------
 2199|  2.91k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.91k|                                "Invalid value for tm_mday"});
 2201|  2.91k|        }
 2202|    258|        t.tm_mday = d;
 2203|    258|        st.set_mday(h);
 2204|    258|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.47k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.47k|        return set_error(
 2929|  1.47k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.95k|    {
 3419|  2.95k|        auto start_it = m_begin;
 3420|  2.95k|        std::size_t options_available = N;
 3421|  2.95k|        std::size_t chars_consumed = 0;
 3422|  6.10k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.16k, False: 2.93k]
  ------------------
 3423|  6.10k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 0]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.14k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.14k|            const auto ch = *m_begin;
 3430|  3.14k|            ++m_begin;
 3431|  24.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.9k, False: 3.14k]
  ------------------
 3432|  20.9k|                const auto cmp = static_cast<unsigned>(
 3433|  20.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.9k]
  ------------------
 3435|  20.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.6k, False: 228]
  |  Branch (3435:34): [True: 20.6k, False: 20]
  ------------------
 3436|  20.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.6k|                                options.end());
 3438|  20.6k|                    --options_available;
 3439|  20.6k|                    continue;
 3440|  20.6k|                }
 3441|    248|                ++i;
 3442|    248|            }
 3443|  3.14k|            ++chars_consumed;
 3444|  3.14k|        }
 3445|  2.95k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.95k, False: 0]
  ------------------
 3446|  2.95k|            m_begin = start_it;
 3447|  2.95k|            return std::nullopt;
 3448|  2.95k|        }
 3449|      0|        return options.front().second;
 3450|  2.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.0k|    {
 2969|  15.0k|#if !SCN_DISABLE_LOCALE
 2970|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.0k|#endif
 2977|       |
 2978|  15.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.0k|    {
 2178|  15.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 12.8k]
  |  |  |  Branch (865:45): [True: 2.08k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 164, False: 12.8k]
  |  |  ------------------
  ------------------
 2179|  2.24k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.24k|                                  "Invalid value for tm_hour"});
 2181|  2.24k|        }
 2182|  12.8k|        t.tm_hour = h;
 2183|  12.8k|        st.set_hour24(hdl);
 2184|  12.8k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.0k|    {
 2997|  15.0k|#if !SCN_DISABLE_LOCALE
 2998|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.0k|#endif
 3005|       |
 3006|  15.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.0k|    {
 2168|  15.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.40k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 2.38k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 20, False: 12.6k]
  |  |  ------------------
  ------------------
 2169|  2.40k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.40k|                                "Invalid value for tm_min"});
 2171|  2.40k|        }
 2172|  12.6k|        t.tm_min = m;
 2173|  12.6k|        st.set_min(h);
 2174|  12.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.29k|    {
 3011|  2.29k|#if !SCN_DISABLE_LOCALE
 3012|  2.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.29k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.29k|#endif
 3019|       |
 3020|  2.29k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.29k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.29k|    {
 2158|  2.29k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.45k, False: 842]
  |  |  |  Branch (865:45): [True: 1.45k, False: 846]
  |  |  |  Branch (865:45): [True: 4, False: 842]
  |  |  ------------------
  ------------------
 2159|  1.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.45k|                                "Invalid value for tm_sec"});
 2161|  1.45k|        }
 2162|    842|        t.tm_sec = s;
 2163|    842|        st.set_sec(h);
 2164|    842|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.57k|    {
 3253|       |        // %m/%d/%y
 3254|  1.57k|        constexpr CharT slash = '/';
 3255|  1.57k|        on_dec_month();
 3256|  1.57k|        on_text(&slash, &slash + 1);
 3257|  1.57k|        on_day_of_month();
 3258|  1.57k|        on_text(&slash, &slash + 1);
 3259|  1.57k|        on_short_year();
 3260|  1.57k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.55k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.55k|        constexpr CharT dash = '-';
 3265|  1.55k|        on_full_year();
 3266|  1.55k|        on_text(&dash, &dash + 1);
 3267|  1.55k|        on_dec_month();
 3268|  1.55k|        on_text(&dash, &dash + 1);
 3269|  1.55k|        on_day_of_month();
 3270|  1.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.7k|    {
 3295|       |        // %H:%M
 3296|  12.7k|        constexpr CharT colon = ':';
 3297|  12.7k|        on_24_hour();
 3298|  12.7k|        on_text(&colon, &colon + 1);
 3299|  12.7k|        on_minute();
 3300|  12.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.29k|    {
 3303|       |        // %H:%M:%S
 3304|  2.29k|        constexpr CharT colon = ':';
 3305|  2.29k|        on_24_hour();
 3306|  2.29k|        on_text(&colon, &colon + 1);
 3307|  2.29k|        on_minute();
 3308|  2.29k|        on_text(&colon, &colon + 1);
 3309|  2.29k|        on_second();
 3310|  2.29k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.2k|    {
 3342|  13.2k|        m_st.verify(*this);
 3343|  13.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.2k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.1k, False: 86]
  |  Branch (3346:37): [True: 98, False: 13.0k]
  |  Branch (3346:60): [True: 0, False: 13.0k]
  ------------------
 3347|     98|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     98|        }
 3349|  13.2k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.2k|    {
 3353|  47.2k|        return m_error;
 3354|  47.2k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.2k|    {
 3370|  13.2k|        return m_begin;
 3371|  13.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  32.0k|{
 3563|  32.0k|    {
 3564|  32.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  32.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 452, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    452|    }                                                  \
  |  |  |  | 3939|  32.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.5k|        ctx.range(), t, ctx.locale());
 3571|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 21.5k]
  |  |  ------------------
  ------------------
 3573|  10.0k|        return unexpected(e.error());
 3574|  10.0k|    }
 3575|  21.5k|    return r.get_iterator();
 3576|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.5k|          m_begin(ranges::begin(m_range)),
 2708|  31.5k|          m_tm(t),
 2709|  31.5k|          m_loc(loc)
 2710|  31.5k|    {
 2711|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.24k|    {
 3358|  9.24k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.24k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  39.1k|    {
 3363|  39.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.0k, False: 29.1k]
  ------------------
 3364|  10.0k|            m_error = unexpected(e);
 3365|  10.0k|        }
 3366|  39.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  37.2k|    {
 2715|  65.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 37.2k, False: 27.8k]
  ------------------
 2716|  37.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 168, False: 37.0k]
  ------------------
 2717|    168|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    168|            }
 2719|  37.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.24k, False: 27.8k]
  ------------------
 2720|  9.24k|                return on_error("Invalid literal character");
 2721|  9.24k|            }
 2722|  27.8k|            ++beg;
 2723|  27.8k|            ++m_begin;
 2724|  27.8k|        }
 2725|  37.2k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  2.97k|    {
 2745|  2.97k|#if !SCN_DISABLE_LOCALE
 2746|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 2.97k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  2.97k|#endif
 2753|       |
 2754|  2.97k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  2.97k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  2.97k|    {
 2218|  2.97k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.97k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  2.97k|        t.tm_year = y - 1900;
 2223|  2.97k|        st.set_full_year(h);
 2224|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  65.0k|    {
 3381|  65.0k|        int digits_read = 0;
 3382|  65.0k|        int accumulator = 0;
 3383|   117k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 116k, False: 336]
  ------------------
 3384|   116k|            const auto ch = *m_begin;
 3385|   116k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 34.9k, False: 81.9k]
  |  Branch (3385:36): [True: 19.7k, False: 62.2k]
  ------------------
 3386|  54.6k|                break;
 3387|  54.6k|            }
 3388|  62.2k|            ++m_begin;
 3389|  62.2k|            ++digits_read;
 3390|  62.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  62.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 10.0k, False: 52.1k]
  ------------------
 3392|  10.0k|                break;
 3393|  10.0k|            }
 3394|  62.2k|        }
 3395|  65.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 14.6k, False: 50.4k]
  ------------------
 3396|  14.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  14.6k|                                 "Too few integer digits"});
 3398|  14.6k|            return -1;
 3399|  14.6k|        }
 3400|  50.4k|        return accumulator;
 3401|  65.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.00k|    {
 2759|  7.00k|#if !SCN_DISABLE_LOCALE
 2760|  7.00k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.00k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.00k|#endif
 2768|       |
 2769|  7.00k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.00k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.00k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  7.00k|    {
 2235|  7.00k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 5.57k]
  |  |  |  Branch (865:45): [True: 1.42k, False: 5.57k]
  |  |  |  Branch (865:45): [True: 0, False: 5.57k]
  |  |  ------------------
  ------------------
 2236|  1.42k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.42k|                                "Invalid value for tm_year"});
 2238|  1.42k|        }
 2239|  5.57k|        st.short_year_value = y;
 2240|  5.57k|        st.set_short_year(h);
 2241|  5.57k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.36k|    {
 2802|  2.36k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.36k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.36k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.36k|#endif
 2810|       |
 2811|  2.36k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.36k|            {"January", 1},
 2813|  2.36k|            {"February", 2},
 2814|  2.36k|            {"March", 3},
 2815|  2.36k|            {"April", 4},
 2816|  2.36k|            {"May", 5},
 2817|  2.36k|            {"June", 6},
 2818|  2.36k|            {"July", 7},
 2819|  2.36k|            {"August", 8},
 2820|  2.36k|            {"September", 9},
 2821|  2.36k|            {"October", 10},
 2822|  2.36k|            {"November", 11},
 2823|  2.36k|            {"December", 12},
 2824|  2.36k|        }};
 2825|  2.36k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.34k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.34k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.34k|            {"Jan", 1},
 2830|  2.34k|            {"Feb", 2},
 2831|  2.34k|            {"Mar", 3},
 2832|  2.34k|            {"Apr", 4},
 2833|  2.34k|            {"Jun", 6},
 2834|  2.34k|            {"Jul", 7},
 2835|  2.34k|            {"Aug", 8},
 2836|  2.34k|            {"Sep", 9},
 2837|  2.34k|            {"Oct", 10},
 2838|  2.34k|            {"Nov", 11},
 2839|  2.34k|            {"Dec", 12},
 2840|  2.34k|        }};
 2841|  2.34k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.42k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.42k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  9.52k|    {
 2208|  9.52k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.36k, False: 7.16k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 7.26k]
  |  |  |  Branch (865:45): [True: 100, False: 7.16k]
  |  |  ------------------
  ------------------
 2209|  2.36k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.36k|                                "Invalid value for tm_mon"});
 2211|  2.36k|        }
 2212|  7.16k|        t.tm_mon = m - 1;
 2213|  7.16k|        st.set_mon(h);
 2214|  7.16k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.36k|    {
 3419|  2.36k|        auto start_it = m_begin;
 3420|  2.36k|        std::size_t options_available = N;
 3421|  2.36k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.30k, False: 2.31k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.28k, False: 16]
  ------------------
 3424|  5.28k|            std::size_t i = 0;
 3425|  5.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 5.24k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  5.24k|            const auto ch = *m_begin;
 3430|  5.24k|            ++m_begin;
 3431|  38.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.2k, False: 5.24k]
  ------------------
 3432|  33.2k|                const auto cmp = static_cast<unsigned>(
 3433|  33.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.2k]
  ------------------
 3435|  33.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.2k, False: 3.91k]
  |  Branch (3435:34): [True: 28.2k, False: 998]
  ------------------
 3436|  28.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.2k|                                options.end());
 3438|  28.2k|                    --options_available;
 3439|  28.2k|                    continue;
 3440|  28.2k|                }
 3441|  4.91k|                ++i;
 3442|  4.91k|            }
 3443|  5.24k|            ++chars_consumed;
 3444|  5.24k|        }
 3445|  2.36k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.34k, False: 16]
  ------------------
 3446|  2.34k|            m_begin = start_it;
 3447|  2.34k|            return std::nullopt;
 3448|  2.34k|        }
 3449|     16|        return options.front().second;
 3450|  2.36k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.34k|    {
 3419|  2.34k|        auto start_it = m_begin;
 3420|  2.34k|        std::size_t options_available = N;
 3421|  2.34k|        std::size_t chars_consumed = 0;
 3422|  6.63k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.23k, False: 1.39k]
  ------------------
 3423|  6.63k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.31k, False: 920]
  ------------------
 3424|  4.31k|            std::size_t i = 0;
 3425|  4.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.28k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.28k|            const auto ch = *m_begin;
 3430|  4.28k|            ++m_begin;
 3431|  32.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 27.7k, False: 4.28k]
  ------------------
 3432|  27.7k|                const auto cmp = static_cast<unsigned>(
 3433|  27.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  27.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 27.7k]
  ------------------
 3435|  27.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 25.8k, False: 1.95k]
  |  Branch (3435:34): [True: 24.8k, False: 974]
  ------------------
 3436|  24.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  24.8k|                                options.end());
 3438|  24.8k|                    --options_available;
 3439|  24.8k|                    continue;
 3440|  24.8k|                }
 3441|  2.92k|                ++i;
 3442|  2.92k|            }
 3443|  4.28k|            ++chars_consumed;
 3444|  4.28k|        }
 3445|  2.34k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.42k, False: 920]
  ------------------
 3446|  1.42k|            m_begin = start_it;
 3447|  1.42k|            return std::nullopt;
 3448|  1.42k|        }
 3449|    920|        return options.front().second;
 3450|  2.34k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.59k|    {
 2848|  8.59k|#if !SCN_DISABLE_LOCALE
 2849|  8.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.59k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.59k|#endif
 2856|       |
 2857|  8.59k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.59k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.59k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.57k|    {
 2880|  8.57k|#if !SCN_DISABLE_LOCALE
 2881|  8.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.57k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.57k|#endif
 2888|       |
 2889|  8.57k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.57k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  8.57k|    {
 2198|  8.57k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.82k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.75k, False: 5.81k]
  |  |  |  Branch (865:45): [True: 68, False: 5.74k]
  |  |  ------------------
  ------------------
 2199|  2.82k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.82k|                                "Invalid value for tm_mday"});
 2201|  2.82k|        }
 2202|  5.74k|        t.tm_mday = d;
 2203|  5.74k|        st.set_mday(h);
 2204|  5.74k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.44k|    {
 2895|  1.44k|#if !SCN_DISABLE_LOCALE
 2896|  1.44k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.44k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.44k|#endif
 2903|       |
 2904|  1.44k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.44k|            {"Sunday", 0},
 2906|  1.44k|            {"Monday", 1},
 2907|  1.44k|            {"Tuesday", 2},
 2908|  1.44k|            {"Wednesday", 3},
 2909|  1.44k|            {"Thursday", 4},
 2910|  1.44k|            {"Friday", 5},
 2911|  1.44k|            {"Saturday", 6},
 2912|  1.44k|        }};
 2913|  1.44k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.44k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.44k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.44k|            {"Sun", 0},
 2918|  1.44k|            {"Mon", 1},
 2919|  1.44k|            {"Tue", 2},
 2920|  1.44k|            {"Wed", 3},
 2921|  1.44k|            {"Thu", 4},
 2922|  1.44k|            {"Fri", 5},
 2923|  1.44k|            {"Sat", 6},
 2924|  1.44k|        }};
 2925|  1.44k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.44k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.44k|        return set_error(
 2929|  1.44k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.44k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.89k|    {
 3419|  2.89k|        auto start_it = m_begin;
 3420|  2.89k|        std::size_t options_available = N;
 3421|  2.89k|        std::size_t chars_consumed = 0;
 3422|  6.00k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.13k, False: 2.86k]
  ------------------
 3423|  6.00k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.13k, False: 0]
  ------------------
 3424|  3.13k|            std::size_t i = 0;
 3425|  3.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.10k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.10k|            const auto ch = *m_begin;
 3430|  3.10k|            ++m_begin;
 3431|  23.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.4k, False: 3.10k]
  ------------------
 3432|  20.4k|                const auto cmp = static_cast<unsigned>(
 3433|  20.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.4k]
  ------------------
 3435|  20.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.2k, False: 232]
  |  Branch (3435:34): [True: 20.2k, False: 52]
  ------------------
 3436|  20.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.2k|                                options.end());
 3438|  20.2k|                    --options_available;
 3439|  20.2k|                    continue;
 3440|  20.2k|                }
 3441|    284|                ++i;
 3442|    284|            }
 3443|  3.10k|            ++chars_consumed;
 3444|  3.10k|        }
 3445|  2.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.89k, False: 0]
  ------------------
 3446|  2.89k|            m_begin = start_it;
 3447|  2.89k|            return std::nullopt;
 3448|  2.89k|        }
 3449|      0|        return options.front().second;
 3450|  2.89k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  17.8k|    {
 2969|  17.8k|#if !SCN_DISABLE_LOCALE
 2970|  17.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 17.8k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  17.8k|#endif
 2977|       |
 2978|  17.8k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  17.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  17.8k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  17.8k|    {
 2178|  17.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93k, False: 15.8k]
  |  |  |  Branch (865:45): [True: 1.75k, False: 16.0k]
  |  |  |  Branch (865:45): [True: 180, False: 15.8k]
  |  |  ------------------
  ------------------
 2179|  1.93k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  1.93k|                                  "Invalid value for tm_hour"});
 2181|  1.93k|        }
 2182|  15.8k|        t.tm_hour = h;
 2183|  15.8k|        st.set_hour24(hdl);
 2184|  15.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  17.7k|    {
 2997|  17.7k|#if !SCN_DISABLE_LOCALE
 2998|  17.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 17.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  17.7k|#endif
 3005|       |
 3006|  17.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  17.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  17.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  17.7k|    {
 2168|  17.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.29k, False: 15.4k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 15.5k]
  |  |  |  Branch (865:45): [True: 28, False: 15.4k]
  |  |  ------------------
  ------------------
 2169|  2.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.29k|                                "Invalid value for tm_min"});
 2171|  2.29k|        }
 2172|  15.4k|        t.tm_min = m;
 2173|  15.4k|        st.set_min(h);
 2174|  15.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.26k|    {
 3011|  2.26k|#if !SCN_DISABLE_LOCALE
 3012|  2.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.26k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.26k|#endif
 3019|       |
 3020|  2.26k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.26k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.26k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.26k|    {
 2158|  2.26k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 842]
  |  |  |  Branch (865:45): [True: 1.41k, False: 848]
  |  |  |  Branch (865:45): [True: 6, False: 842]
  |  |  ------------------
  ------------------
 2159|  1.42k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.42k|                                "Invalid value for tm_sec"});
 2161|  1.42k|        }
 2162|    842|        t.tm_sec = s;
 2163|    842|        st.set_sec(h);
 2164|    842|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.00k|    {
 3253|       |        // %m/%d/%y
 3254|  7.00k|        constexpr CharT slash = '/';
 3255|  7.00k|        on_dec_month();
 3256|  7.00k|        on_text(&slash, &slash + 1);
 3257|  7.00k|        on_day_of_month();
 3258|  7.00k|        on_text(&slash, &slash + 1);
 3259|  7.00k|        on_short_year();
 3260|  7.00k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.52k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.52k|        constexpr CharT dash = '-';
 3265|  1.52k|        on_full_year();
 3266|  1.52k|        on_text(&dash, &dash + 1);
 3267|  1.52k|        on_dec_month();
 3268|  1.52k|        on_text(&dash, &dash + 1);
 3269|  1.52k|        on_day_of_month();
 3270|  1.52k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  15.5k|    {
 3295|       |        // %H:%M
 3296|  15.5k|        constexpr CharT colon = ':';
 3297|  15.5k|        on_24_hour();
 3298|  15.5k|        on_text(&colon, &colon + 1);
 3299|  15.5k|        on_minute();
 3300|  15.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.26k|    {
 3303|       |        // %H:%M:%S
 3304|  2.26k|        constexpr CharT colon = ':';
 3305|  2.26k|        on_24_hour();
 3306|  2.26k|        on_text(&colon, &colon + 1);
 3307|  2.26k|        on_minute();
 3308|  2.26k|        on_text(&colon, &colon + 1);
 3309|  2.26k|        on_second();
 3310|  2.26k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  21.5k|    {
 3342|  21.5k|        m_st.verify(*this);
 3343|  21.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 21.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  21.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 21.4k, False: 86]
  |  Branch (3346:37): [True: 5.56k, False: 15.8k]
  |  Branch (3346:60): [True: 0, False: 15.8k]
  ------------------
 3347|  5.56k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.56k|        }
 3349|  21.5k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  63.2k|    {
 3353|  63.2k|        return m_error;
 3354|  63.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  21.5k|    {
 3370|  21.5k|        return m_begin;
 3371|  21.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  23.7k|{
 3563|  23.7k|    {
 3564|  23.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 194, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    194|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.5k|        ctx.range(), t, ctx.locale());
 3571|  23.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 3573|  10.2k|        return unexpected(e.error());
 3574|  10.2k|    }
 3575|  13.2k|    return r.get_iterator();
 3576|  23.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.5k|          m_begin(ranges::begin(m_range)),
 2708|  23.5k|          m_tm(t),
 2709|  23.5k|          m_loc(loc)
 2710|  23.5k|    {
 2711|  23.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.61k|    {
 3358|  9.61k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.61k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  41.0k|    {
 3363|  41.0k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.2k, False: 30.7k]
  ------------------
 3364|  10.2k|            m_error = unexpected(e);
 3365|  10.2k|        }
 3366|  41.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.7k|    {
 2715|  37.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.7k, False: 14.0k]
  ------------------
 2716|  23.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 130, False: 23.6k]
  ------------------
 2717|    130|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    130|            }
 2719|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.61k, False: 14.0k]
  ------------------
 2720|  9.61k|                return on_error("Invalid literal character");
 2721|  9.61k|            }
 2722|  14.0k|            ++beg;
 2723|  14.0k|            ++m_begin;
 2724|  14.0k|        }
 2725|  23.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.03k|    {
 2745|  3.03k|#if !SCN_DISABLE_LOCALE
 2746|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.03k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.03k|#endif
 2753|       |
 2754|  3.03k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.03k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.03k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  3.03k|    {
 2218|  3.03k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.03k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  3.03k|        t.tm_year = y - 1900;
 2223|  3.03k|        st.set_full_year(h);
 2224|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.4k|    {
 3381|  43.4k|        int digits_read = 0;
 3382|  43.4k|        int accumulator = 0;
 3383|  72.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 72.6k, False: 270]
  ------------------
 3384|  72.6k|            const auto ch = *m_begin;
 3385|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.6k, False: 50.0k]
  |  Branch (3385:36): [True: 16.6k, False: 33.3k]
  ------------------
 3386|  39.2k|                break;
 3387|  39.2k|            }
 3388|  33.3k|            ++m_begin;
 3389|  33.3k|            ++digits_read;
 3390|  33.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.87k, False: 29.4k]
  ------------------
 3392|  3.87k|                break;
 3393|  3.87k|            }
 3394|  33.3k|        }
 3395|  43.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.4k, False: 27.9k]
  ------------------
 3396|  15.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.4k|                                 "Too few integer digits"});
 3398|  15.4k|            return -1;
 3399|  15.4k|        }
 3400|  27.9k|        return accumulator;
 3401|  43.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.57k|    {
 2759|  1.57k|#if !SCN_DISABLE_LOCALE
 2760|  1.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.57k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.57k|#endif
 2768|       |
 2769|  1.57k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.57k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.57k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  1.57k|    {
 2235|  1.57k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.46k, False: 106]
  |  |  |  Branch (865:45): [True: 1.46k, False: 106]
  |  |  |  Branch (865:45): [True: 0, False: 106]
  |  |  ------------------
  ------------------
 2236|  1.46k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  1.46k|                                "Invalid value for tm_year"});
 2238|  1.46k|        }
 2239|    106|        st.short_year_value = y;
 2240|    106|        st.set_short_year(h);
 2241|    106|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.40k|    {
 2802|  2.40k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.40k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.40k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.40k|#endif
 2810|       |
 2811|  2.40k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.40k|            {"January", 1},
 2813|  2.40k|            {"February", 2},
 2814|  2.40k|            {"March", 3},
 2815|  2.40k|            {"April", 4},
 2816|  2.40k|            {"May", 5},
 2817|  2.40k|            {"June", 6},
 2818|  2.40k|            {"July", 7},
 2819|  2.40k|            {"August", 8},
 2820|  2.40k|            {"September", 9},
 2821|  2.40k|            {"October", 10},
 2822|  2.40k|            {"November", 11},
 2823|  2.40k|            {"December", 12},
 2824|  2.40k|        }};
 2825|  2.40k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.38k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.38k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.38k|            {"Jan", 1},
 2830|  2.38k|            {"Feb", 2},
 2831|  2.38k|            {"Mar", 3},
 2832|  2.38k|            {"Apr", 4},
 2833|  2.38k|            {"Jun", 6},
 2834|  2.38k|            {"Jul", 7},
 2835|  2.38k|            {"Aug", 8},
 2836|  2.38k|            {"Sep", 9},
 2837|  2.38k|            {"Oct", 10},
 2838|  2.38k|            {"Nov", 11},
 2839|  2.38k|            {"Dec", 12},
 2840|  2.38k|        }};
 2841|  2.38k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.46k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.46k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.46k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  4.12k|    {
 2208|  4.12k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 1.65k]
  |  |  |  Branch (865:45): [True: 2.39k, False: 1.73k]
  |  |  |  Branch (865:45): [True: 84, False: 1.65k]
  |  |  ------------------
  ------------------
 2209|  2.47k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  2.47k|                                "Invalid value for tm_mon"});
 2211|  2.47k|        }
 2212|  1.65k|        t.tm_mon = m - 1;
 2213|  1.65k|        st.set_mon(h);
 2214|  1.65k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.40k|    {
 3419|  2.40k|        auto start_it = m_begin;
 3420|  2.40k|        std::size_t options_available = N;
 3421|  2.40k|        std::size_t chars_consumed = 0;
 3422|  7.66k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.31k, False: 2.35k]
  ------------------
 3423|  7.66k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.29k, False: 16]
  ------------------
 3424|  5.29k|            std::size_t i = 0;
 3425|  5.29k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.26k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.26k|            const auto ch = *m_begin;
 3430|  5.26k|            ++m_begin;
 3431|  38.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.26k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.7k, False: 3.89k]
  |  Branch (3435:34): [True: 28.7k, False: 968]
  ------------------
 3436|  28.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.7k|                                options.end());
 3438|  28.7k|                    --options_available;
 3439|  28.7k|                    continue;
 3440|  28.7k|                }
 3441|  4.86k|                ++i;
 3442|  4.86k|            }
 3443|  5.26k|            ++chars_consumed;
 3444|  5.26k|        }
 3445|  2.40k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.38k, False: 16]
  ------------------
 3446|  2.38k|            m_begin = start_it;
 3447|  2.38k|            return std::nullopt;
 3448|  2.38k|        }
 3449|     16|        return options.front().second;
 3450|  2.40k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.38k|    {
 3419|  2.38k|        auto start_it = m_begin;
 3420|  2.38k|        std::size_t options_available = N;
 3421|  2.38k|        std::size_t chars_consumed = 0;
 3422|  6.68k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.25k, False: 1.43k]
  ------------------
 3423|  6.68k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.33k, False: 920]
  ------------------
 3424|  4.33k|            std::size_t i = 0;
 3425|  4.33k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 34, False: 4.29k]
  ------------------
 3426|     34|                options_available = 0;
 3427|     34|                break;
 3428|     34|            }
 3429|  4.29k|            const auto ch = *m_begin;
 3430|  4.29k|            ++m_begin;
 3431|  32.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 28.1k, False: 4.29k]
  ------------------
 3432|  28.1k|                const auto cmp = static_cast<unsigned>(
 3433|  28.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  28.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 28.1k]
  ------------------
 3435|  28.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 26.2k, False: 1.93k]
  |  Branch (3435:34): [True: 25.3k, False: 950]
  ------------------
 3436|  25.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  25.3k|                                options.end());
 3438|  25.3k|                    --options_available;
 3439|  25.3k|                    continue;
 3440|  25.3k|                }
 3441|  2.88k|                ++i;
 3442|  2.88k|            }
 3443|  4.29k|            ++chars_consumed;
 3444|  4.29k|        }
 3445|  2.38k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.46k, False: 920]
  ------------------
 3446|  1.46k|            m_begin = start_it;
 3447|  1.46k|            return std::nullopt;
 3448|  1.46k|        }
 3449|    920|        return options.front().second;
 3450|  2.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.18k|    {
 2848|  3.18k|#if !SCN_DISABLE_LOCALE
 2849|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.18k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.18k|#endif
 2856|       |
 2857|  3.18k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.18k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.18k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.17k|    {
 2880|  3.17k|#if !SCN_DISABLE_LOCALE
 2881|  3.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.17k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.17k|#endif
 2888|       |
 2889|  3.17k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.17k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.17k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  3.17k|    {
 2198|  3.17k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.91k, False: 258]
  |  |  |  Branch (865:45): [True: 2.85k, False: 320]
  |  |  |  Branch (865:45): [True: 62, False: 258]
  |  |  ------------------
  ------------------
 2199|  2.91k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  2.91k|                                "Invalid value for tm_mday"});
 2201|  2.91k|        }
 2202|    258|        t.tm_mday = d;
 2203|    258|        st.set_mday(h);
 2204|    258|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.47k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.47k|        return set_error(
 2929|  1.47k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.95k|    {
 3419|  2.95k|        auto start_it = m_begin;
 3420|  2.95k|        std::size_t options_available = N;
 3421|  2.95k|        std::size_t chars_consumed = 0;
 3422|  6.10k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.16k, False: 2.93k]
  ------------------
 3423|  6.10k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 0]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.14k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.14k|            const auto ch = *m_begin;
 3430|  3.14k|            ++m_begin;
 3431|  24.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.9k, False: 3.14k]
  ------------------
 3432|  20.9k|                const auto cmp = static_cast<unsigned>(
 3433|  20.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.9k]
  ------------------
 3435|  20.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.6k, False: 228]
  |  Branch (3435:34): [True: 20.6k, False: 20]
  ------------------
 3436|  20.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.6k|                                options.end());
 3438|  20.6k|                    --options_available;
 3439|  20.6k|                    continue;
 3440|  20.6k|                }
 3441|    248|                ++i;
 3442|    248|            }
 3443|  3.14k|            ++chars_consumed;
 3444|  3.14k|        }
 3445|  2.95k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.95k, False: 0]
  ------------------
 3446|  2.95k|            m_begin = start_it;
 3447|  2.95k|            return std::nullopt;
 3448|  2.95k|        }
 3449|      0|        return options.front().second;
 3450|  2.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.0k|    {
 2969|  15.0k|#if !SCN_DISABLE_LOCALE
 2970|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.0k|#endif
 2977|       |
 2978|  15.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  15.0k|    {
 2178|  15.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 12.8k]
  |  |  |  Branch (865:45): [True: 2.08k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 164, False: 12.8k]
  |  |  ------------------
  ------------------
 2179|  2.24k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  2.24k|                                  "Invalid value for tm_hour"});
 2181|  2.24k|        }
 2182|  12.8k|        t.tm_hour = h;
 2183|  12.8k|        st.set_hour24(hdl);
 2184|  12.8k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.0k|    {
 2997|  15.0k|#if !SCN_DISABLE_LOCALE
 2998|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.0k|#endif
 3005|       |
 3006|  15.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.0k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  15.0k|    {
 2168|  15.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.40k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 2.38k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 20, False: 12.6k]
  |  |  ------------------
  ------------------
 2169|  2.40k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  2.40k|                                "Invalid value for tm_min"});
 2171|  2.40k|        }
 2172|  12.6k|        t.tm_min = m;
 2173|  12.6k|        st.set_min(h);
 2174|  12.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.29k|    {
 3011|  2.29k|#if !SCN_DISABLE_LOCALE
 3012|  2.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.29k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.29k|#endif
 3019|       |
 3020|  2.29k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.29k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.29k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.29k|    {
 2158|  2.29k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.45k, False: 842]
  |  |  |  Branch (865:45): [True: 1.45k, False: 846]
  |  |  |  Branch (865:45): [True: 4, False: 842]
  |  |  ------------------
  ------------------
 2159|  1.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  1.45k|                                "Invalid value for tm_sec"});
 2161|  1.45k|        }
 2162|    842|        t.tm_sec = s;
 2163|    842|        st.set_sec(h);
 2164|    842|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.57k|    {
 3253|       |        // %m/%d/%y
 3254|  1.57k|        constexpr CharT slash = '/';
 3255|  1.57k|        on_dec_month();
 3256|  1.57k|        on_text(&slash, &slash + 1);
 3257|  1.57k|        on_day_of_month();
 3258|  1.57k|        on_text(&slash, &slash + 1);
 3259|  1.57k|        on_short_year();
 3260|  1.57k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.55k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.55k|        constexpr CharT dash = '-';
 3265|  1.55k|        on_full_year();
 3266|  1.55k|        on_text(&dash, &dash + 1);
 3267|  1.55k|        on_dec_month();
 3268|  1.55k|        on_text(&dash, &dash + 1);
 3269|  1.55k|        on_day_of_month();
 3270|  1.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.7k|    {
 3295|       |        // %H:%M
 3296|  12.7k|        constexpr CharT colon = ':';
 3297|  12.7k|        on_24_hour();
 3298|  12.7k|        on_text(&colon, &colon + 1);
 3299|  12.7k|        on_minute();
 3300|  12.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.29k|    {
 3303|       |        // %H:%M:%S
 3304|  2.29k|        constexpr CharT colon = ':';
 3305|  2.29k|        on_24_hour();
 3306|  2.29k|        on_text(&colon, &colon + 1);
 3307|  2.29k|        on_minute();
 3308|  2.29k|        on_text(&colon, &colon + 1);
 3309|  2.29k|        on_second();
 3310|  2.29k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.2k|    {
 3342|  13.2k|        m_st.verify(*this);
 3343|  13.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.2k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.1k, False: 86]
  |  Branch (3346:37): [True: 98, False: 13.0k]
  |  Branch (3346:60): [True: 0, False: 13.0k]
  ------------------
 3347|     98|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     98|        }
 3349|  13.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.2k|    {
 3353|  47.2k|        return m_error;
 3354|  47.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.2k|    {
 3370|  13.2k|        return m_begin;
 3371|  13.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  32.0k|{
 3563|  32.0k|    {
 3564|  32.0k|        SCN_TRY(it,
  ------------------
  |  | 3940|  32.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 452, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    452|    }                                                  \
  |  |  |  | 3939|  32.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  31.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  31.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  31.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  31.5k|        ctx.range(), t, ctx.locale());
 3571|  31.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  31.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 21.5k]
  |  |  ------------------
  ------------------
 3573|  10.0k|        return unexpected(e.error());
 3574|  10.0k|    }
 3575|  21.5k|    return r.get_iterator();
 3576|  31.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 2706|  31.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  31.5k|    static_cast<    \
  |  |  935|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  31.5k|          m_begin(ranges::begin(m_range)),
 2708|  31.5k|          m_tm(t),
 2709|  31.5k|          m_loc(loc)
 2710|  31.5k|    {
 2711|  31.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 3357|  9.24k|    {
 3358|  9.24k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.24k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 3362|  37.7k|    {
 3363|  37.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.0k, False: 27.6k]
  ------------------
 3364|  10.0k|            m_error = unexpected(e);
 3365|  10.0k|        }
 3366|  37.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 2714|  37.2k|    {
 2715|  65.1k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 37.2k, False: 27.8k]
  ------------------
 2716|  37.2k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 168, False: 37.0k]
  ------------------
 2717|    168|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    168|            }
 2719|  37.0k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.24k, False: 27.8k]
  ------------------
 2720|  9.24k|                return on_error("Invalid literal character");
 2721|  9.24k|            }
 2722|  27.8k|            ++beg;
 2723|  27.8k|            ++m_begin;
 2724|  27.8k|        }
 2725|  37.2k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 2744|  2.97k|    {
 2745|  2.97k|#if !SCN_DISABLE_LOCALE
 2746|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 2.97k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  2.97k|#endif
 2753|       |
 2754|  2.97k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  2.97k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  2.97k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  2.97k|    {
 2396|  2.97k|        t.year = y;
 2397|  2.97k|        st.set_full_year(h);
 2398|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 3380|  65.0k|    {
 3381|  65.0k|        int digits_read = 0;
 3382|  65.0k|        int accumulator = 0;
 3383|   117k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 116k, False: 336]
  ------------------
 3384|   116k|            const auto ch = *m_begin;
 3385|   116k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 34.9k, False: 81.9k]
  |  Branch (3385:36): [True: 19.7k, False: 62.2k]
  ------------------
 3386|  54.6k|                break;
 3387|  54.6k|            }
 3388|  62.2k|            ++m_begin;
 3389|  62.2k|            ++digits_read;
 3390|  62.2k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  62.2k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 10.0k, False: 52.1k]
  ------------------
 3392|  10.0k|                break;
 3393|  10.0k|            }
 3394|  62.2k|        }
 3395|  65.0k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 14.6k, False: 50.4k]
  ------------------
 3396|  14.6k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  14.6k|                                 "Too few integer digits"});
 3398|  14.6k|            return -1;
 3399|  14.6k|        }
 3400|  50.4k|        return accumulator;
 3401|  65.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 2758|  7.00k|    {
 2759|  7.00k|#if !SCN_DISABLE_LOCALE
 2760|  7.00k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 7.00k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  7.00k|#endif
 2768|       |
 2769|  7.00k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  7.00k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  7.00k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  7.00k|    {
 2419|  7.00k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 7.00k, False: 0]
  ------------------
 2420|  7.00k|            t.year = y;
 2421|  7.00k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  7.00k|        st.set_short_year(h);
 2426|  7.00k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 2801|  2.36k|    {
 2802|  2.36k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.36k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.36k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.36k|#endif
 2810|       |
 2811|  2.36k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.36k|            {"January", 1},
 2813|  2.36k|            {"February", 2},
 2814|  2.36k|            {"March", 3},
 2815|  2.36k|            {"April", 4},
 2816|  2.36k|            {"May", 5},
 2817|  2.36k|            {"June", 6},
 2818|  2.36k|            {"July", 7},
 2819|  2.36k|            {"August", 8},
 2820|  2.36k|            {"September", 9},
 2821|  2.36k|            {"October", 10},
 2822|  2.36k|            {"November", 11},
 2823|  2.36k|            {"December", 12},
 2824|  2.36k|        }};
 2825|  2.36k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.34k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.34k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.34k|            {"Jan", 1},
 2830|  2.34k|            {"Feb", 2},
 2831|  2.34k|            {"Mar", 3},
 2832|  2.34k|            {"Apr", 4},
 2833|  2.34k|            {"Jun", 6},
 2834|  2.34k|            {"Jul", 7},
 2835|  2.34k|            {"Aug", 8},
 2836|  2.34k|            {"Sep", 9},
 2837|  2.34k|            {"Oct", 10},
 2838|  2.34k|            {"Nov", 11},
 2839|  2.34k|            {"Dec", 12},
 2840|  2.34k|        }};
 2841|  2.34k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.42k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.42k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.42k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  9.52k|    {
 2383|  9.52k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.36k, False: 7.16k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 7.26k]
  |  |  |  Branch (865:45): [True: 100, False: 7.16k]
  |  |  ------------------
  ------------------
 2384|  2.36k|            return h.set_error(
 2385|  2.36k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.36k|        }
 2387|  7.16k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  7.16k|        st.set_mon(h);
 2389|  7.16k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.36k|    {
 3419|  2.36k|        auto start_it = m_begin;
 3420|  2.36k|        std::size_t options_available = N;
 3421|  2.36k|        std::size_t chars_consumed = 0;
 3422|  7.61k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.30k, False: 2.31k]
  ------------------
 3423|  7.61k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.28k, False: 16]
  ------------------
 3424|  5.28k|            std::size_t i = 0;
 3425|  5.28k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 38, False: 5.24k]
  ------------------
 3426|     38|                options_available = 0;
 3427|     38|                break;
 3428|     38|            }
 3429|  5.24k|            const auto ch = *m_begin;
 3430|  5.24k|            ++m_begin;
 3431|  38.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.2k, False: 5.24k]
  ------------------
 3432|  33.2k|                const auto cmp = static_cast<unsigned>(
 3433|  33.2k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.2k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.2k]
  ------------------
 3435|  33.2k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.2k, False: 3.91k]
  |  Branch (3435:34): [True: 28.2k, False: 998]
  ------------------
 3436|  28.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.2k|                                options.end());
 3438|  28.2k|                    --options_available;
 3439|  28.2k|                    continue;
 3440|  28.2k|                }
 3441|  4.91k|                ++i;
 3442|  4.91k|            }
 3443|  5.24k|            ++chars_consumed;
 3444|  5.24k|        }
 3445|  2.36k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.34k, False: 16]
  ------------------
 3446|  2.34k|            m_begin = start_it;
 3447|  2.34k|            return std::nullopt;
 3448|  2.34k|        }
 3449|     16|        return options.front().second;
 3450|  2.36k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.34k|    {
 3419|  2.34k|        auto start_it = m_begin;
 3420|  2.34k|        std::size_t options_available = N;
 3421|  2.34k|        std::size_t chars_consumed = 0;
 3422|  6.63k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.23k, False: 1.39k]
  ------------------
 3423|  6.63k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.31k, False: 920]
  ------------------
 3424|  4.31k|            std::size_t i = 0;
 3425|  4.31k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 4.28k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  4.28k|            const auto ch = *m_begin;
 3430|  4.28k|            ++m_begin;
 3431|  32.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 27.7k, False: 4.28k]
  ------------------
 3432|  27.7k|                const auto cmp = static_cast<unsigned>(
 3433|  27.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  27.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 27.7k]
  ------------------
 3435|  27.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 25.8k, False: 1.95k]
  |  Branch (3435:34): [True: 24.8k, False: 974]
  ------------------
 3436|  24.8k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  24.8k|                                options.end());
 3438|  24.8k|                    --options_available;
 3439|  24.8k|                    continue;
 3440|  24.8k|                }
 3441|  2.92k|                ++i;
 3442|  2.92k|            }
 3443|  4.28k|            ++chars_consumed;
 3444|  4.28k|        }
 3445|  2.34k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.42k, False: 920]
  ------------------
 3446|  1.42k|            m_begin = start_it;
 3447|  1.42k|            return std::nullopt;
 3448|  1.42k|        }
 3449|    920|        return options.front().second;
 3450|  2.34k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  8.59k|    {
 2848|  8.59k|#if !SCN_DISABLE_LOCALE
 2849|  8.59k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 8.59k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  8.59k|#endif
 2856|       |
 2857|  8.59k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  8.59k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  8.59k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  8.57k|    {
 2880|  8.57k|#if !SCN_DISABLE_LOCALE
 2881|  8.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 8.57k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  8.57k|#endif
 2888|       |
 2889|  8.57k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  8.57k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  8.57k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  8.57k|    {
 2370|  8.57k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.82k, False: 5.74k]
  |  |  |  Branch (865:45): [True: 2.75k, False: 5.81k]
  |  |  |  Branch (865:45): [True: 68, False: 5.74k]
  |  |  ------------------
  ------------------
 2371|  2.82k|            return h.set_error(
 2372|  2.82k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.82k|        }
 2374|  5.74k|        t.mday = d;
 2375|  5.74k|        st.set_mday(h);
 2376|  5.74k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 2894|  1.44k|    {
 2895|  1.44k|#if !SCN_DISABLE_LOCALE
 2896|  1.44k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.44k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.44k|#endif
 2903|       |
 2904|  1.44k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.44k|            {"Sunday", 0},
 2906|  1.44k|            {"Monday", 1},
 2907|  1.44k|            {"Tuesday", 2},
 2908|  1.44k|            {"Wednesday", 3},
 2909|  1.44k|            {"Thursday", 4},
 2910|  1.44k|            {"Friday", 5},
 2911|  1.44k|            {"Saturday", 6},
 2912|  1.44k|        }};
 2913|  1.44k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.44k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.44k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.44k|            {"Sun", 0},
 2918|  1.44k|            {"Mon", 1},
 2919|  1.44k|            {"Tue", 2},
 2920|  1.44k|            {"Wed", 3},
 2921|  1.44k|            {"Thu", 4},
 2922|  1.44k|            {"Fri", 5},
 2923|  1.44k|            {"Sat", 6},
 2924|  1.44k|        }};
 2925|  1.44k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.44k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.44k|        return set_error(
 2929|  1.44k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.44k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.89k|    {
 3419|  2.89k|        auto start_it = m_begin;
 3420|  2.89k|        std::size_t options_available = N;
 3421|  2.89k|        std::size_t chars_consumed = 0;
 3422|  6.00k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.13k, False: 2.86k]
  ------------------
 3423|  6.00k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.13k, False: 0]
  ------------------
 3424|  3.13k|            std::size_t i = 0;
 3425|  3.13k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 3.10k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  3.10k|            const auto ch = *m_begin;
 3430|  3.10k|            ++m_begin;
 3431|  23.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.4k, False: 3.10k]
  ------------------
 3432|  20.4k|                const auto cmp = static_cast<unsigned>(
 3433|  20.4k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.4k]
  ------------------
 3435|  20.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.2k, False: 232]
  |  Branch (3435:34): [True: 20.2k, False: 52]
  ------------------
 3436|  20.2k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.2k|                                options.end());
 3438|  20.2k|                    --options_available;
 3439|  20.2k|                    continue;
 3440|  20.2k|                }
 3441|    284|                ++i;
 3442|    284|            }
 3443|  3.10k|            ++chars_consumed;
 3444|  3.10k|        }
 3445|  2.89k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.89k, False: 0]
  ------------------
 3446|  2.89k|            m_begin = start_it;
 3447|  2.89k|            return std::nullopt;
 3448|  2.89k|        }
 3449|      0|        return options.front().second;
 3450|  2.89k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 2968|  17.8k|    {
 2969|  17.8k|#if !SCN_DISABLE_LOCALE
 2970|  17.8k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 17.8k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  17.8k|#endif
 2977|       |
 2978|  17.8k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  17.8k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  17.8k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  17.8k|    {
 2344|  17.8k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93k, False: 15.8k]
  |  |  |  Branch (865:45): [True: 1.75k, False: 16.0k]
  |  |  |  Branch (865:45): [True: 180, False: 15.8k]
  |  |  ------------------
  ------------------
 2345|  1.93k|            return hdl.set_error(
 2346|  1.93k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  1.93k|        }
 2348|  15.8k|        t.hour = h;
 2349|  15.8k|        st.set_hour24(hdl);
 2350|  15.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 2996|  17.7k|    {
 2997|  17.7k|#if !SCN_DISABLE_LOCALE
 2998|  17.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 17.7k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  17.7k|#endif
 3005|       |
 3006|  17.7k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  17.7k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  17.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  17.7k|    {
 2331|  17.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.29k, False: 15.4k]
  |  |  |  Branch (865:45): [True: 2.26k, False: 15.5k]
  |  |  |  Branch (865:45): [True: 28, False: 15.4k]
  |  |  ------------------
  ------------------
 2332|  2.29k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.29k|                                "Invalid value for minutes"});
 2334|  2.29k|        }
 2335|  15.4k|        t.min = m;
 2336|  15.4k|        st.set_min(h);
 2337|  15.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 3010|  2.26k|    {
 3011|  2.26k|#if !SCN_DISABLE_LOCALE
 3012|  2.26k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.26k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.26k|#endif
 3019|       |
 3020|  2.26k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.26k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.26k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.26k|    {
 2318|  2.26k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 842]
  |  |  |  Branch (865:45): [True: 1.41k, False: 848]
  |  |  |  Branch (865:45): [True: 6, False: 842]
  |  |  ------------------
  ------------------
 2319|  1.42k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.42k|                                "Invalid value for seconds"});
 2321|  1.42k|        }
 2322|    842|        t.sec = s;
 2323|    842|        st.set_sec(h);
 2324|    842|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 3252|  7.00k|    {
 3253|       |        // %m/%d/%y
 3254|  7.00k|        constexpr CharT slash = '/';
 3255|  7.00k|        on_dec_month();
 3256|  7.00k|        on_text(&slash, &slash + 1);
 3257|  7.00k|        on_day_of_month();
 3258|  7.00k|        on_text(&slash, &slash + 1);
 3259|  7.00k|        on_short_year();
 3260|  7.00k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 3262|  1.52k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.52k|        constexpr CharT dash = '-';
 3265|  1.52k|        on_full_year();
 3266|  1.52k|        on_text(&dash, &dash + 1);
 3267|  1.52k|        on_dec_month();
 3268|  1.52k|        on_text(&dash, &dash + 1);
 3269|  1.52k|        on_day_of_month();
 3270|  1.52k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 3294|  15.5k|    {
 3295|       |        // %H:%M
 3296|  15.5k|        constexpr CharT colon = ':';
 3297|  15.5k|        on_24_hour();
 3298|  15.5k|        on_text(&colon, &colon + 1);
 3299|  15.5k|        on_minute();
 3300|  15.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 3302|  2.26k|    {
 3303|       |        // %H:%M:%S
 3304|  2.26k|        constexpr CharT colon = ':';
 3305|  2.26k|        on_24_hour();
 3306|  2.26k|        on_text(&colon, &colon + 1);
 3307|  2.26k|        on_minute();
 3308|  2.26k|        on_text(&colon, &colon + 1);
 3309|  2.26k|        on_second();
 3310|  2.26k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 3341|  21.5k|    {
 3342|  21.5k|        m_st.verify(*this);
 3343|  21.5k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 21.5k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  21.5k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 21.4k, False: 86]
  |  Branch (3346:37): [True: 5.56k, False: 15.8k]
  |  Branch (3346:60): [True: 0, False: 15.8k]
  ------------------
 3347|  5.56k|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|  5.56k|        }
 3349|  21.5k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 2482|  5.67k|    {
 2483|  5.67k|        assert(t.year);
 2484|  5.67k|        st.handle_short_year_and_century(*t.year, 0);
 2485|  5.67k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 3352|  63.2k|    {
 3353|  63.2k|        return m_error;
 3354|  63.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 3369|  21.5k|    {
 3370|  21.5k|        return m_begin;
 3371|  21.5k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  23.7k|{
 3563|  23.7k|    {
 3564|  23.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  23.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  23.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  23.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 194, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    194|    }                                                  \
  |  |  |  | 3939|  23.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  23.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  23.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  23.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  23.5k|        ctx.range(), t, ctx.locale());
 3571|  23.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  23.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.2k, False: 13.2k]
  |  |  ------------------
  ------------------
 3573|  10.2k|        return unexpected(e.error());
 3574|  10.2k|    }
 3575|  13.2k|    return r.get_iterator();
 3576|  23.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 2706|  23.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  23.5k|    static_cast<    \
  |  |  935|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  23.5k|          m_begin(ranges::begin(m_range)),
 2708|  23.5k|          m_tm(t),
 2709|  23.5k|          m_loc(loc)
 2710|  23.5k|    {
 2711|  23.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 3357|  9.61k|    {
 3358|  9.61k|        set_error({scan_error::invalid_format_string, msg});
 3359|  9.61k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 3362|  39.6k|    {
 3363|  39.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 10.2k, False: 29.3k]
  ------------------
 3364|  10.2k|            m_error = unexpected(e);
 3365|  10.2k|        }
 3366|  39.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 2714|  23.7k|    {
 2715|  37.7k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 23.7k, False: 14.0k]
  ------------------
 2716|  23.7k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 130, False: 23.6k]
  ------------------
 2717|    130|                return set_error({scan_error::end_of_input, "EOF"});
 2718|    130|            }
 2719|  23.6k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 9.61k, False: 14.0k]
  ------------------
 2720|  9.61k|                return on_error("Invalid literal character");
 2721|  9.61k|            }
 2722|  14.0k|            ++beg;
 2723|  14.0k|            ++m_begin;
 2724|  14.0k|        }
 2725|  23.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 2744|  3.03k|    {
 2745|  3.03k|#if !SCN_DISABLE_LOCALE
 2746|  3.03k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 3.03k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  3.03k|#endif
 2753|       |
 2754|  3.03k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  3.03k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  3.03k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  3.03k|    {
 2396|  3.03k|        t.year = y;
 2397|  3.03k|        st.set_full_year(h);
 2398|  3.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 3380|  43.4k|    {
 3381|  43.4k|        int digits_read = 0;
 3382|  43.4k|        int accumulator = 0;
 3383|  72.8k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 72.6k, False: 270]
  ------------------
 3384|  72.6k|            const auto ch = *m_begin;
 3385|  72.6k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 22.6k, False: 50.0k]
  |  Branch (3385:36): [True: 16.6k, False: 33.3k]
  ------------------
 3386|  39.2k|                break;
 3387|  39.2k|            }
 3388|  33.3k|            ++m_begin;
 3389|  33.3k|            ++digits_read;
 3390|  33.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  33.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 3.87k, False: 29.4k]
  ------------------
 3392|  3.87k|                break;
 3393|  3.87k|            }
 3394|  33.3k|        }
 3395|  43.4k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 15.4k, False: 27.9k]
  ------------------
 3396|  15.4k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  15.4k|                                 "Too few integer digits"});
 3398|  15.4k|            return -1;
 3399|  15.4k|        }
 3400|  27.9k|        return accumulator;
 3401|  43.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 2758|  1.57k|    {
 2759|  1.57k|#if !SCN_DISABLE_LOCALE
 2760|  1.57k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 1.57k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  1.57k|#endif
 2768|       |
 2769|  1.57k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  1.57k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  1.57k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  1.57k|    {
 2419|  1.57k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 1.57k, False: 0]
  ------------------
 2420|  1.57k|            t.year = y;
 2421|  1.57k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  1.57k|        st.set_short_year(h);
 2426|  1.57k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 2801|  2.40k|    {
 2802|  2.40k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.40k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.40k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.40k|#endif
 2810|       |
 2811|  2.40k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.40k|            {"January", 1},
 2813|  2.40k|            {"February", 2},
 2814|  2.40k|            {"March", 3},
 2815|  2.40k|            {"April", 4},
 2816|  2.40k|            {"May", 5},
 2817|  2.40k|            {"June", 6},
 2818|  2.40k|            {"July", 7},
 2819|  2.40k|            {"August", 8},
 2820|  2.40k|            {"September", 9},
 2821|  2.40k|            {"October", 10},
 2822|  2.40k|            {"November", 11},
 2823|  2.40k|            {"December", 12},
 2824|  2.40k|        }};
 2825|  2.40k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 16, False: 2.38k]
  ------------------
 2826|     16|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|     16|        }
 2828|  2.38k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.38k|            {"Jan", 1},
 2830|  2.38k|            {"Feb", 2},
 2831|  2.38k|            {"Mar", 3},
 2832|  2.38k|            {"Apr", 4},
 2833|  2.38k|            {"Jun", 6},
 2834|  2.38k|            {"Jul", 7},
 2835|  2.38k|            {"Aug", 8},
 2836|  2.38k|            {"Sep", 9},
 2837|  2.38k|            {"Oct", 10},
 2838|  2.38k|            {"Nov", 11},
 2839|  2.38k|            {"Dec", 12},
 2840|  2.38k|        }};
 2841|  2.38k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 920, False: 1.46k]
  ------------------
 2842|    920|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|    920|        }
 2844|  1.46k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  1.46k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  4.12k|    {
 2383|  4.12k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 1.65k]
  |  |  |  Branch (865:45): [True: 2.39k, False: 1.73k]
  |  |  |  Branch (865:45): [True: 84, False: 1.65k]
  |  |  ------------------
  ------------------
 2384|  2.47k|            return h.set_error(
 2385|  2.47k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  2.47k|        }
 2387|  1.65k|        t.mon = month{static_cast<unsigned>(m)};
 2388|  1.65k|        st.set_mon(h);
 2389|  1.65k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.40k|    {
 3419|  2.40k|        auto start_it = m_begin;
 3420|  2.40k|        std::size_t options_available = N;
 3421|  2.40k|        std::size_t chars_consumed = 0;
 3422|  7.66k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.31k, False: 2.35k]
  ------------------
 3423|  7.66k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 5.29k, False: 16]
  ------------------
 3424|  5.29k|            std::size_t i = 0;
 3425|  5.29k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 36, False: 5.26k]
  ------------------
 3426|     36|                options_available = 0;
 3427|     36|                break;
 3428|     36|            }
 3429|  5.26k|            const auto ch = *m_begin;
 3430|  5.26k|            ++m_begin;
 3431|  38.9k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 33.6k, False: 5.26k]
  ------------------
 3432|  33.6k|                const auto cmp = static_cast<unsigned>(
 3433|  33.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  33.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 33.6k]
  ------------------
 3435|  33.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 29.7k, False: 3.89k]
  |  Branch (3435:34): [True: 28.7k, False: 968]
  ------------------
 3436|  28.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  28.7k|                                options.end());
 3438|  28.7k|                    --options_available;
 3439|  28.7k|                    continue;
 3440|  28.7k|                }
 3441|  4.86k|                ++i;
 3442|  4.86k|            }
 3443|  5.26k|            ++chars_consumed;
 3444|  5.26k|        }
 3445|  2.40k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.38k, False: 16]
  ------------------
 3446|  2.38k|            m_begin = start_it;
 3447|  2.38k|            return std::nullopt;
 3448|  2.38k|        }
 3449|     16|        return options.front().second;
 3450|  2.40k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.38k|    {
 3419|  2.38k|        auto start_it = m_begin;
 3420|  2.38k|        std::size_t options_available = N;
 3421|  2.38k|        std::size_t chars_consumed = 0;
 3422|  6.68k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 5.25k, False: 1.43k]
  ------------------
 3423|  6.68k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 4.33k, False: 920]
  ------------------
 3424|  4.33k|            std::size_t i = 0;
 3425|  4.33k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 34, False: 4.29k]
  ------------------
 3426|     34|                options_available = 0;
 3427|     34|                break;
 3428|     34|            }
 3429|  4.29k|            const auto ch = *m_begin;
 3430|  4.29k|            ++m_begin;
 3431|  32.4k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 28.1k, False: 4.29k]
  ------------------
 3432|  28.1k|                const auto cmp = static_cast<unsigned>(
 3433|  28.1k|                    ch ^ options[i].first[chars_consumed]);
 3434|  28.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 28.1k]
  ------------------
 3435|  28.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 26.2k, False: 1.93k]
  |  Branch (3435:34): [True: 25.3k, False: 950]
  ------------------
 3436|  25.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  25.3k|                                options.end());
 3438|  25.3k|                    --options_available;
 3439|  25.3k|                    continue;
 3440|  25.3k|                }
 3441|  2.88k|                ++i;
 3442|  2.88k|            }
 3443|  4.29k|            ++chars_consumed;
 3444|  4.29k|        }
 3445|  2.38k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 1.46k, False: 920]
  ------------------
 3446|  1.46k|            m_begin = start_it;
 3447|  1.46k|            return std::nullopt;
 3448|  1.46k|        }
 3449|    920|        return options.front().second;
 3450|  2.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 2847|  3.18k|    {
 2848|  3.18k|#if !SCN_DISABLE_LOCALE
 2849|  3.18k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 3.18k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  3.18k|#endif
 2856|       |
 2857|  3.18k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  3.18k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  3.18k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 2879|  3.17k|    {
 2880|  3.17k|#if !SCN_DISABLE_LOCALE
 2881|  3.17k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 3.17k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  3.17k|#endif
 2888|       |
 2889|  3.17k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  3.17k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  3.17k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  3.17k|    {
 2370|  3.17k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  3.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.91k, False: 258]
  |  |  |  Branch (865:45): [True: 2.85k, False: 320]
  |  |  |  Branch (865:45): [True: 62, False: 258]
  |  |  ------------------
  ------------------
 2371|  2.91k|            return h.set_error(
 2372|  2.91k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  2.91k|        }
 2374|    258|        t.mday = d;
 2375|    258|        st.set_mday(h);
 2376|    258|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 2894|  1.47k|    {
 2895|  1.47k|#if !SCN_DISABLE_LOCALE
 2896|  1.47k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 1.47k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  1.47k|#endif
 2903|       |
 2904|  1.47k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  1.47k|            {"Sunday", 0},
 2906|  1.47k|            {"Monday", 1},
 2907|  1.47k|            {"Tuesday", 2},
 2908|  1.47k|            {"Wednesday", 3},
 2909|  1.47k|            {"Thursday", 4},
 2910|  1.47k|            {"Friday", 5},
 2911|  1.47k|            {"Saturday", 6},
 2912|  1.47k|        }};
 2913|  1.47k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 1.47k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  1.47k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  1.47k|            {"Sun", 0},
 2918|  1.47k|            {"Mon", 1},
 2919|  1.47k|            {"Tue", 2},
 2920|  1.47k|            {"Wed", 3},
 2921|  1.47k|            {"Thu", 4},
 2922|  1.47k|            {"Fri", 5},
 2923|  1.47k|            {"Sat", 6},
 2924|  1.47k|        }};
 2925|  1.47k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 1.47k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  1.47k|        return set_error(
 2929|  1.47k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  1.47k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.95k|    {
 3419|  2.95k|        auto start_it = m_begin;
 3420|  2.95k|        std::size_t options_available = N;
 3421|  2.95k|        std::size_t chars_consumed = 0;
 3422|  6.10k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.16k, False: 2.93k]
  ------------------
 3423|  6.10k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.16k, False: 0]
  ------------------
 3424|  3.16k|            std::size_t i = 0;
 3425|  3.16k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.14k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.14k|            const auto ch = *m_begin;
 3430|  3.14k|            ++m_begin;
 3431|  24.0k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 20.9k, False: 3.14k]
  ------------------
 3432|  20.9k|                const auto cmp = static_cast<unsigned>(
 3433|  20.9k|                    ch ^ options[i].first[chars_consumed]);
 3434|  20.9k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 20.9k]
  ------------------
 3435|  20.9k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 20.6k, False: 228]
  |  Branch (3435:34): [True: 20.6k, False: 20]
  ------------------
 3436|  20.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  20.6k|                                options.end());
 3438|  20.6k|                    --options_available;
 3439|  20.6k|                    continue;
 3440|  20.6k|                }
 3441|    248|                ++i;
 3442|    248|            }
 3443|  3.14k|            ++chars_consumed;
 3444|  3.14k|        }
 3445|  2.95k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.95k, False: 0]
  ------------------
 3446|  2.95k|            m_begin = start_it;
 3447|  2.95k|            return std::nullopt;
 3448|  2.95k|        }
 3449|      0|        return options.front().second;
 3450|  2.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 2968|  15.0k|    {
 2969|  15.0k|#if !SCN_DISABLE_LOCALE
 2970|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 15.0k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  15.0k|#endif
 2977|       |
 2978|  15.0k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  15.0k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  15.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  15.0k|    {
 2344|  15.0k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.24k, False: 12.8k]
  |  |  |  Branch (865:45): [True: 2.08k, False: 13.0k]
  |  |  |  Branch (865:45): [True: 164, False: 12.8k]
  |  |  ------------------
  ------------------
 2345|  2.24k|            return hdl.set_error(
 2346|  2.24k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  2.24k|        }
 2348|  12.8k|        t.hour = h;
 2349|  12.8k|        st.set_hour24(hdl);
 2350|  12.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 2996|  15.0k|    {
 2997|  15.0k|#if !SCN_DISABLE_LOCALE
 2998|  15.0k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 15.0k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  15.0k|#endif
 3005|       |
 3006|  15.0k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  15.0k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  15.0k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  15.0k|    {
 2331|  15.0k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.40k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 2.38k, False: 12.6k]
  |  |  |  Branch (865:45): [True: 20, False: 12.6k]
  |  |  ------------------
  ------------------
 2332|  2.40k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  2.40k|                                "Invalid value for minutes"});
 2334|  2.40k|        }
 2335|  12.6k|        t.min = m;
 2336|  12.6k|        st.set_min(h);
 2337|  12.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 3010|  2.29k|    {
 3011|  2.29k|#if !SCN_DISABLE_LOCALE
 3012|  2.29k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.29k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.29k|#endif
 3019|       |
 3020|  2.29k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.29k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.29k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.29k|    {
 2318|  2.29k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.45k, False: 842]
  |  |  |  Branch (865:45): [True: 1.45k, False: 846]
  |  |  |  Branch (865:45): [True: 4, False: 842]
  |  |  ------------------
  ------------------
 2319|  1.45k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  1.45k|                                "Invalid value for seconds"});
 2321|  1.45k|        }
 2322|    842|        t.sec = s;
 2323|    842|        st.set_sec(h);
 2324|    842|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 3252|  1.57k|    {
 3253|       |        // %m/%d/%y
 3254|  1.57k|        constexpr CharT slash = '/';
 3255|  1.57k|        on_dec_month();
 3256|  1.57k|        on_text(&slash, &slash + 1);
 3257|  1.57k|        on_day_of_month();
 3258|  1.57k|        on_text(&slash, &slash + 1);
 3259|  1.57k|        on_short_year();
 3260|  1.57k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 3262|  1.55k|    {
 3263|       |        // %Y-%m-%d
 3264|  1.55k|        constexpr CharT dash = '-';
 3265|  1.55k|        on_full_year();
 3266|  1.55k|        on_text(&dash, &dash + 1);
 3267|  1.55k|        on_dec_month();
 3268|  1.55k|        on_text(&dash, &dash + 1);
 3269|  1.55k|        on_day_of_month();
 3270|  1.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 3294|  12.7k|    {
 3295|       |        // %H:%M
 3296|  12.7k|        constexpr CharT colon = ':';
 3297|  12.7k|        on_24_hour();
 3298|  12.7k|        on_text(&colon, &colon + 1);
 3299|  12.7k|        on_minute();
 3300|  12.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 3302|  2.29k|    {
 3303|       |        // %H:%M:%S
 3304|  2.29k|        constexpr CharT colon = ':';
 3305|  2.29k|        on_24_hour();
 3306|  2.29k|        on_text(&colon, &colon + 1);
 3307|  2.29k|        on_minute();
 3308|  2.29k|        on_text(&colon, &colon + 1);
 3309|  2.29k|        on_second();
 3310|  2.29k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 3341|  13.2k|    {
 3342|  13.2k|        m_st.verify(*this);
 3343|  13.2k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 13.2k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  13.2k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 13.1k, False: 86]
  |  Branch (3346:37): [True: 98, False: 13.0k]
  |  Branch (3346:60): [True: 0, False: 13.0k]
  ------------------
 3347|     98|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|     98|        }
 3349|  13.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 3352|  47.2k|    {
 3353|  47.2k|        return m_error;
 3354|  47.2k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 3369|  13.2k|    {
 3370|  13.2k|        return m_begin;
 3371|  13.2k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  89.5k|    {
 3363|  89.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 68.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  89.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  5.93k|    {
 2218|  5.93k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  5.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.93k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  5.93k|        t.tm_year = y - 1900;
 2223|  5.93k|        st.set_full_year(h);
 2224|  5.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  2.97k|    {
 2235|  2.97k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  2.95k|                                "Invalid value for tm_year"});
 2238|  2.95k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.95k|    {
 2208|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2209|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.69k|                                "Invalid value for tm_mon"});
 2211|  5.69k|        }
 2212|    264|        t.tm_mon = m - 1;
 2213|    264|        st.set_mon(h);
 2214|    264|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  5.94k|    {
 2198|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2199|  5.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  5.90k|                                "Invalid value for tm_mday"});
 2201|  5.90k|        }
 2202|     36|        t.tm_mday = d;
 2203|     36|        st.set_mday(h);
 2204|     36|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  7.66k|    {
 2178|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  2.09k|        t.tm_hour = h;
 2183|  2.09k|        st.set_hour24(hdl);
 2184|  2.09k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  7.66k|    {
 2168|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2169|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.65k|                                "Invalid value for tm_min"});
 2171|  5.65k|        }
 2172|  2.01k|        t.tm_min = m;
 2173|  2.01k|        st.set_min(h);
 2174|  2.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.98k|    {
 2158|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2159|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.94k|                                "Invalid value for tm_sec"});
 2161|  2.94k|        }
 2162|     40|        t.tm_sec = s;
 2163|     40|        st.set_sec(h);
 2164|     40|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  68.1k|{
  250|  68.1k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  68.1k|        .transform_error(impl::make_eof_scan_error);
  252|  68.1k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  89.5k|    {
 3363|  89.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 68.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  89.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  5.93k|    {
 2218|  5.93k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  5.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.93k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  5.93k|        t.tm_year = y - 1900;
 2223|  5.93k|        st.set_full_year(h);
 2224|  5.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  2.97k|    {
 2235|  2.97k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  2.95k|                                "Invalid value for tm_year"});
 2238|  2.95k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.95k|    {
 2208|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2209|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.69k|                                "Invalid value for tm_mon"});
 2211|  5.69k|        }
 2212|    264|        t.tm_mon = m - 1;
 2213|    264|        st.set_mon(h);
 2214|    264|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  5.94k|    {
 2198|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2199|  5.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  5.90k|                                "Invalid value for tm_mday"});
 2201|  5.90k|        }
 2202|     36|        t.tm_mday = d;
 2203|     36|        st.set_mday(h);
 2204|     36|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  7.66k|    {
 2178|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  2.09k|        t.tm_hour = h;
 2183|  2.09k|        st.set_hour24(hdl);
 2184|  2.09k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  7.66k|    {
 2168|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2169|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.65k|                                "Invalid value for tm_min"});
 2171|  5.65k|        }
 2172|  2.01k|        t.tm_min = m;
 2173|  2.01k|        st.set_min(h);
 2174|  2.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.98k|    {
 2158|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2159|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.94k|                                "Invalid value for tm_sec"});
 2161|  2.94k|        }
 2162|     40|        t.tm_sec = s;
 2163|     40|        st.set_sec(h);
 2164|     40|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  89.5k|    {
 3363|  89.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 68.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  89.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  5.93k|    {
 2218|  5.93k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  5.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.93k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  5.93k|        t.tm_year = y - 1900;
 2223|  5.93k|        st.set_full_year(h);
 2224|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  2.97k|    {
 2235|  2.97k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  2.95k|                                "Invalid value for tm_year"});
 2238|  2.95k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.95k|    {
 2208|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2209|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.69k|                                "Invalid value for tm_mon"});
 2211|  5.69k|        }
 2212|    264|        t.tm_mon = m - 1;
 2213|    264|        st.set_mon(h);
 2214|    264|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  5.94k|    {
 2198|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2199|  5.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  5.90k|                                "Invalid value for tm_mday"});
 2201|  5.90k|        }
 2202|     36|        t.tm_mday = d;
 2203|     36|        st.set_mday(h);
 2204|     36|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  7.66k|    {
 2178|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  2.09k|        t.tm_hour = h;
 2183|  2.09k|        st.set_hour24(hdl);
 2184|  2.09k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  7.66k|    {
 2168|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2169|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.65k|                                "Invalid value for tm_min"});
 2171|  5.65k|        }
 2172|  2.01k|        t.tm_min = m;
 2173|  2.01k|        st.set_min(h);
 2174|  2.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.98k|    {
 2158|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2159|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.94k|                                "Invalid value for tm_sec"});
 2161|  2.94k|        }
 2162|     40|        t.tm_sec = s;
 2163|     40|        st.set_sec(h);
 2164|     40|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  89.5k|    {
 3363|  89.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 68.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  89.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2217|  5.93k|    {
 2218|  5.93k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  |  865|  5.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.93k]
  |  |  ------------------
  ------------------
 2219|      0|            return h.set_error({scan_error::invalid_scanned_value,
 2220|      0|                                "Invalid value for tm_year"});
 2221|      0|        }
 2222|  5.93k|        t.tm_year = y - 1900;
 2223|  5.93k|        st.set_full_year(h);
 2224|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2234|  2.97k|    {
 2235|  2.97k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  |  865|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 2.95k, False: 16]
  |  |  |  Branch (865:45): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 2236|  2.95k|            return h.set_error({scan_error::invalid_scanned_value,
 2237|  2.95k|                                "Invalid value for tm_year"});
 2238|  2.95k|        }
 2239|     16|        st.short_year_value = y;
 2240|     16|        st.set_short_year(h);
 2241|     16|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2207|  5.95k|    {
 2208|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2209|  5.69k|            return h.set_error({scan_error::invalid_scanned_value,
 2210|  5.69k|                                "Invalid value for tm_mon"});
 2211|  5.69k|        }
 2212|    264|        t.tm_mon = m - 1;
 2213|    264|        st.set_mon(h);
 2214|    264|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2197|  5.94k|    {
 2198|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2199|  5.90k|            return h.set_error({scan_error::invalid_scanned_value,
 2200|  5.90k|                                "Invalid value for tm_mday"});
 2201|  5.90k|        }
 2202|     36|        t.tm_mday = d;
 2203|     36|        st.set_mday(h);
 2204|     36|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2177|  7.66k|    {
 2178|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2179|  5.56k|            return hdl.set_error({scan_error::invalid_scanned_value,
 2180|  5.56k|                                  "Invalid value for tm_hour"});
 2181|  5.56k|        }
 2182|  2.09k|        t.tm_hour = h;
 2183|  2.09k|        st.set_hour24(hdl);
 2184|  2.09k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2167|  7.66k|    {
 2168|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2169|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2170|  5.65k|                                "Invalid value for tm_min"});
 2171|  5.65k|        }
 2172|  2.01k|        t.tm_min = m;
 2173|  2.01k|        st.set_min(h);
 2174|  2.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2157|  2.98k|    {
 2158|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2159|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2160|  2.94k|                                "Invalid value for tm_sec"});
 2161|  2.94k|        }
 2162|     40|        t.tm_sec = s;
 2163|     40|        st.set_sec(h);
 2164|     40|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 3362|  86.6k|    {
 3363|  86.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 65.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  86.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  5.93k|    {
 2396|  5.93k|        t.year = y;
 2397|  5.93k|        st.set_full_year(h);
 2398|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  2.97k|    {
 2419|  2.97k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 2.97k, False: 0]
  ------------------
 2420|  2.97k|            t.year = y;
 2421|  2.97k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  2.97k|        st.set_short_year(h);
 2426|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  5.95k|    {
 2383|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2384|  5.69k|            return h.set_error(
 2385|  5.69k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.69k|        }
 2387|    264|        t.mon = month{static_cast<unsigned>(m)};
 2388|    264|        st.set_mon(h);
 2389|    264|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  5.94k|    {
 2370|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2371|  5.90k|            return h.set_error(
 2372|  5.90k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  5.90k|        }
 2374|     36|        t.mday = d;
 2375|     36|        st.set_mday(h);
 2376|     36|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  7.66k|    {
 2344|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2345|  5.56k|            return hdl.set_error(
 2346|  5.56k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.56k|        }
 2348|  2.09k|        t.hour = h;
 2349|  2.09k|        st.set_hour24(hdl);
 2350|  2.09k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  7.66k|    {
 2331|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2332|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.65k|                                "Invalid value for minutes"});
 2334|  5.65k|        }
 2335|  2.01k|        t.min = m;
 2336|  2.01k|        st.set_min(h);
 2337|  2.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.98k|    {
 2318|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2319|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  2.94k|                                "Invalid value for seconds"});
 2321|  2.94k|        }
 2322|     40|        t.sec = s;
 2323|     40|        st.set_sec(h);
 2324|     40|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 3562|  22.7k|{
 3563|  22.7k|    {
 3564|  22.7k|        SCN_TRY(it,
  ------------------
  |  | 3940|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 226, False: 22.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    226|    }                                                  \
  |  |  |  | 3939|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3565|  22.5k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 3566|  22.5k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3567|  22.5k|    }
 3568|       |
 3569|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 3570|  22.5k|        ctx.range(), t, ctx.locale());
 3571|  22.5k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 3572|  22.5k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 1.76k]
  |  |  ------------------
  ------------------
 3573|  20.7k|        return unexpected(e.error());
 3574|  20.7k|    }
 3575|  1.76k|    return r.get_iterator();
 3576|  22.5k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 2706|  22.5k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  |  934|  22.5k|    static_cast<    \
  |  |  935|  22.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2707|  22.5k|          m_begin(ranges::begin(m_range)),
 2708|  22.5k|          m_tm(t),
 2709|  22.5k|          m_loc(loc)
 2710|  22.5k|    {
 2711|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 3357|  20.3k|    {
 3358|  20.3k|        set_error({scan_error::invalid_format_string, msg});
 3359|  20.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 3362|  86.6k|    {
 3363|  86.6k|        if (m_error.has_value()) {
  ------------------
  |  Branch (3363:13): [True: 20.7k, False: 65.8k]
  ------------------
 3364|  20.7k|            m_error = unexpected(e);
 3365|  20.7k|        }
 3366|  86.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 2714|  22.5k|    {
 2715|  24.6k|        while (beg != end) {
  ------------------
  |  Branch (2715:16): [True: 22.5k, False: 2.13k]
  ------------------
 2716|  22.5k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (2716:17): [True: 94, False: 22.4k]
  ------------------
 2717|     94|                return set_error({scan_error::end_of_input, "EOF"});
 2718|     94|            }
 2719|  22.4k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (2719:17): [True: 20.3k, False: 2.13k]
  ------------------
 2720|  20.3k|                return on_error("Invalid literal character");
 2721|  20.3k|            }
 2722|  2.13k|            ++beg;
 2723|  2.13k|            ++m_begin;
 2724|  2.13k|        }
 2725|  22.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 2744|  5.93k|    {
 2745|  5.93k|#if !SCN_DISABLE_LOCALE
 2746|  5.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2746:13): [True: 0, False: 5.93k]
  |  Branch (2746:31): [True: 0, False: 0]
  ------------------
 2747|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (2747:22): [True: 0, False: 0]
  ------------------
 2748|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 2749|      0|            }
 2750|      0|            return;
 2751|      0|        }
 2752|  5.93k|#endif
 2753|       |
 2754|  5.93k|        int yr = read_classic_unsigned_integer(4, 4);
 2755|  5.93k|        setter::set_full_year(*this, m_tm, m_st, yr);
 2756|  5.93k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2395|  5.93k|    {
 2396|  5.93k|        t.year = y;
 2397|  5.93k|        st.set_full_year(h);
 2398|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 3380|  39.1k|    {
 3381|  39.1k|        int digits_read = 0;
 3382|  39.1k|        int accumulator = 0;
 3383|  44.3k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (3383:16): [True: 44.1k, False: 194]
  ------------------
 3384|  44.1k|            const auto ch = *m_begin;
 3385|  44.1k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (3385:17): [True: 24.0k, False: 20.0k]
  |  Branch (3385:36): [True: 13.9k, False: 6.11k]
  ------------------
 3386|  38.0k|                break;
 3387|  38.0k|            }
 3388|  6.11k|            ++m_begin;
 3389|  6.11k|            ++digits_read;
 3390|  6.11k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 3391|  6.11k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (3391:17): [True: 904, False: 5.20k]
  ------------------
 3392|    904|                break;
 3393|    904|            }
 3394|  6.11k|        }
 3395|  39.1k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (3395:13): [True: 34.5k, False: 4.59k]
  ------------------
 3396|  34.5k|            set_error(scan_error{scan_error::invalid_scanned_value,
 3397|  34.5k|                                 "Too few integer digits"});
 3398|  34.5k|            return -1;
 3399|  34.5k|        }
 3400|  4.59k|        return accumulator;
 3401|  39.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 2758|  2.97k|    {
 2759|  2.97k|#if !SCN_DISABLE_LOCALE
 2760|  2.97k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2760:13): [True: 0, False: 2.97k]
  |  Branch (2760:31): [True: 0, False: 0]
  ------------------
 2761|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (2761:22): [True: 0, False: 0]
  ------------------
 2762|      0|                setter::set_short_year(*this, m_tm, m_st,
 2763|      0|                                       (t->tm_year + 1900) % 100);
 2764|      0|            }
 2765|      0|            return;
 2766|      0|        }
 2767|  2.97k|#endif
 2768|       |
 2769|  2.97k|        int yr = read_classic_unsigned_integer(2, 2);
 2770|  2.97k|        setter::set_short_year(*this, m_tm, m_st, yr);
 2771|  2.97k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2418|  2.97k|    {
 2419|  2.97k|        if (!t.year) {
  ------------------
  |  Branch (2419:13): [True: 2.97k, False: 0]
  ------------------
 2420|  2.97k|            t.year = y;
 2421|  2.97k|        }
 2422|      0|        else {
 2423|      0|            t.year = *t.year + y;
 2424|      0|        }
 2425|  2.97k|        st.set_short_year(h);
 2426|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 2801|  2.96k|    {
 2802|  2.96k|#if !SCN_DISABLE_FAST_FLOAT
 2803|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2803:13): [True: 0, False: 2.96k]
  ------------------
 2804|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (2804:22): [True: 0, False: 0]
  ------------------
 2805|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2806|      0|            }
 2807|      0|            return;
 2808|      0|        }
 2809|  2.96k|#endif
 2810|       |
 2811|  2.96k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 2812|  2.96k|            {"January", 1},
 2813|  2.96k|            {"February", 2},
 2814|  2.96k|            {"March", 3},
 2815|  2.96k|            {"April", 4},
 2816|  2.96k|            {"May", 5},
 2817|  2.96k|            {"June", 6},
 2818|  2.96k|            {"July", 7},
 2819|  2.96k|            {"August", 8},
 2820|  2.96k|            {"September", 9},
 2821|  2.96k|            {"October", 10},
 2822|  2.96k|            {"November", 11},
 2823|  2.96k|            {"December", 12},
 2824|  2.96k|        }};
 2825|  2.96k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2825:18): [True: 0, False: 2.96k]
  ------------------
 2826|      0|            return setter::set_mon(*this, m_tm, m_st, *m);
 2827|      0|        }
 2828|  2.96k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 2829|  2.96k|            {"Jan", 1},
 2830|  2.96k|            {"Feb", 2},
 2831|  2.96k|            {"Mar", 3},
 2832|  2.96k|            {"Apr", 4},
 2833|  2.96k|            {"Jun", 6},
 2834|  2.96k|            {"Jul", 7},
 2835|  2.96k|            {"Aug", 8},
 2836|  2.96k|            {"Sep", 9},
 2837|  2.96k|            {"Oct", 10},
 2838|  2.96k|            {"Nov", 11},
 2839|  2.96k|            {"Dec", 12},
 2840|  2.96k|        }};
 2841|  2.96k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2841:18): [True: 2, False: 2.96k]
  ------------------
 2842|      2|            return setter::set_mon(*this, m_tm, m_st, *m);
 2843|      2|        }
 2844|  2.96k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 2845|  2.96k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2382|  5.95k|    {
 2383|  5.95k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.69k, False: 264]
  |  |  |  Branch (865:45): [True: 5.66k, False: 294]
  |  |  |  Branch (865:45): [True: 30, False: 264]
  |  |  ------------------
  ------------------
 2384|  5.69k|            return h.set_error(
 2385|  5.69k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 2386|  5.69k|        }
 2387|    264|        t.mon = month{static_cast<unsigned>(m)};
 2388|    264|        st.set_mon(h);
 2389|    264|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 0]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 22, False: 3.00k]
  ------------------
 3426|     22|                options_available = 0;
 3427|     22|                break;
 3428|     22|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  38.6k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 35.6k, False: 3.00k]
  ------------------
 3432|  35.6k|                const auto cmp = static_cast<unsigned>(
 3433|  35.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  35.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 35.6k]
  ------------------
 3435|  35.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 35.6k, False: 52]
  |  Branch (3435:34): [True: 35.5k, False: 40]
  ------------------
 3436|  35.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  35.5k|                                options.end());
 3438|  35.5k|                    --options_available;
 3439|  35.5k|                    continue;
 3440|  35.5k|                }
 3441|     92|                ++i;
 3442|     92|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 0]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      0|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  2.96k|    {
 3419|  2.96k|        auto start_it = m_begin;
 3420|  2.96k|        std::size_t options_available = N;
 3421|  2.96k|        std::size_t chars_consumed = 0;
 3422|  5.97k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 3.02k, False: 2.94k]
  ------------------
 3423|  5.97k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 3.02k, False: 2]
  ------------------
 3424|  3.02k|            std::size_t i = 0;
 3425|  3.02k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 20, False: 3.00k]
  ------------------
 3426|     20|                options_available = 0;
 3427|     20|                break;
 3428|     20|            }
 3429|  3.00k|            const auto ch = *m_begin;
 3430|  3.00k|            ++m_begin;
 3431|  35.7k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 32.7k, False: 3.00k]
  ------------------
 3432|  32.7k|                const auto cmp = static_cast<unsigned>(
 3433|  32.7k|                    ch ^ options[i].first[chars_consumed]);
 3434|  32.7k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 32.7k]
  ------------------
 3435|  32.7k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 32.6k, False: 46]
  |  Branch (3435:34): [True: 32.6k, False: 38]
  ------------------
 3436|  32.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  32.6k|                                options.end());
 3438|  32.6k|                    --options_available;
 3439|  32.6k|                    continue;
 3440|  32.6k|                }
 3441|     84|                ++i;
 3442|     84|            }
 3443|  3.00k|            ++chars_consumed;
 3444|  3.00k|        }
 3445|  2.96k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 2.96k, False: 2]
  ------------------
 3446|  2.96k|            m_begin = start_it;
 3447|  2.96k|            return std::nullopt;
 3448|  2.96k|        }
 3449|      2|        return options.front().second;
 3450|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 2847|  5.95k|    {
 2848|  5.95k|#if !SCN_DISABLE_LOCALE
 2849|  5.95k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2849:13): [True: 0, False: 5.95k]
  |  Branch (2849:31): [True: 0, False: 0]
  ------------------
 2850|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (2850:22): [True: 0, False: 0]
  ------------------
 2851|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 2852|      0|            }
 2853|      0|            return;
 2854|      0|        }
 2855|  5.95k|#endif
 2856|       |
 2857|  5.95k|        int mon = read_classic_unsigned_integer(1, 2);
 2858|  5.95k|        setter::set_mon(*this, m_tm, m_st, mon);
 2859|  5.95k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 2879|  5.94k|    {
 2880|  5.94k|#if !SCN_DISABLE_LOCALE
 2881|  5.94k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2881:13): [True: 0, False: 5.94k]
  |  Branch (2881:31): [True: 0, False: 0]
  ------------------
 2882|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (2882:22): [True: 0, False: 0]
  ------------------
 2883|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 2884|      0|            }
 2885|      0|            return;
 2886|      0|        }
 2887|  5.94k|#endif
 2888|       |
 2889|  5.94k|        int mday = read_classic_unsigned_integer(1, 2);
 2890|  5.94k|        setter::set_mday(*this, m_tm, m_st, mday);
 2891|  5.94k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2369|  5.94k|    {
 2370|  5.94k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  |  865|  5.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.90k, False: 36]
  |  |  |  Branch (865:45): [True: 5.89k, False: 46]
  |  |  |  Branch (865:45): [True: 10, False: 36]
  |  |  ------------------
  ------------------
 2371|  5.90k|            return h.set_error(
 2372|  5.90k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 2373|  5.90k|        }
 2374|     36|        t.mday = d;
 2375|     36|        st.set_mday(h);
 2376|     36|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 2894|  2.96k|    {
 2895|  2.96k|#if !SCN_DISABLE_LOCALE
 2896|  2.96k|        if (m_st.localized) {
  ------------------
  |  Branch (2896:13): [True: 0, False: 2.96k]
  ------------------
 2897|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (2897:22): [True: 0, False: 0]
  ------------------
 2898|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 2899|      0|            }
 2900|      0|            return;
 2901|      0|        }
 2902|  2.96k|#endif
 2903|       |
 2904|  2.96k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 2905|  2.96k|            {"Sunday", 0},
 2906|  2.96k|            {"Monday", 1},
 2907|  2.96k|            {"Tuesday", 2},
 2908|  2.96k|            {"Wednesday", 3},
 2909|  2.96k|            {"Thursday", 4},
 2910|  2.96k|            {"Friday", 5},
 2911|  2.96k|            {"Saturday", 6},
 2912|  2.96k|        }};
 2913|  2.96k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (2913:18): [True: 0, False: 2.96k]
  ------------------
 2914|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2915|      0|        }
 2916|  2.96k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 2917|  2.96k|            {"Sun", 0},
 2918|  2.96k|            {"Mon", 1},
 2919|  2.96k|            {"Tue", 2},
 2920|  2.96k|            {"Wed", 3},
 2921|  2.96k|            {"Thu", 4},
 2922|  2.96k|            {"Fri", 5},
 2923|  2.96k|            {"Sat", 6},
 2924|  2.96k|        }};
 2925|  2.96k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (2925:18): [True: 0, False: 2.96k]
  ------------------
 2926|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 2927|      0|        }
 2928|  2.96k|        return set_error(
 2929|  2.96k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 2930|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 3418|  5.93k|    {
 3419|  5.93k|        auto start_it = m_begin;
 3420|  5.93k|        std::size_t options_available = N;
 3421|  5.93k|        std::size_t chars_consumed = 0;
 3422|  11.9k|        while (options_available >= 1 &&
  ------------------
  |  Branch (3422:16): [True: 6.00k, False: 5.90k]
  ------------------
 3423|  11.9k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (3423:16): [True: 6.00k, False: 0]
  ------------------
 3424|  6.00k|            std::size_t i = 0;
 3425|  6.00k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (3425:17): [True: 28, False: 5.97k]
  ------------------
 3426|     28|                options_available = 0;
 3427|     28|                break;
 3428|     28|            }
 3429|  5.97k|            const auto ch = *m_begin;
 3430|  5.97k|            ++m_begin;
 3431|  47.5k|            while (i < options_available) {
  ------------------
  |  Branch (3431:20): [True: 41.6k, False: 5.97k]
  ------------------
 3432|  41.6k|                const auto cmp = static_cast<unsigned>(
 3433|  41.6k|                    ch ^ options[i].first[chars_consumed]);
 3434|  41.6k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (3434:21): [True: 0, False: 41.6k]
  ------------------
 3435|  41.6k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (3435:22): [True: 41.5k, False: 88]
  |  Branch (3435:34): [True: 41.5k, False: 24]
  ------------------
 3436|  41.5k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 3437|  41.5k|                                options.end());
 3438|  41.5k|                    --options_available;
 3439|  41.5k|                    continue;
 3440|  41.5k|                }
 3441|    112|                ++i;
 3442|    112|            }
 3443|  5.97k|            ++chars_consumed;
 3444|  5.97k|        }
 3445|  5.93k|        if (options_available != 1) {
  ------------------
  |  Branch (3445:13): [True: 5.93k, False: 0]
  ------------------
 3446|  5.93k|            m_begin = start_it;
 3447|  5.93k|            return std::nullopt;
 3448|  5.93k|        }
 3449|      0|        return options.front().second;
 3450|  5.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 2968|  7.66k|    {
 2969|  7.66k|#if !SCN_DISABLE_LOCALE
 2970|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2970:13): [True: 0, False: 7.66k]
  |  Branch (2970:31): [True: 0, False: 0]
  ------------------
 2971|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (2971:22): [True: 0, False: 0]
  ------------------
 2972|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 2973|      0|            }
 2974|      0|            return;
 2975|      0|        }
 2976|  7.66k|#endif
 2977|       |
 2978|  7.66k|        int hr = read_classic_unsigned_integer(1, 2);
 2979|  7.66k|        setter::set_hour24(*this, m_tm, m_st, hr);
 2980|  7.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2343|  7.66k|    {
 2344|  7.66k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  |  865|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.56k, False: 2.09k]
  |  |  |  Branch (865:45): [True: 5.53k, False: 2.13k]
  |  |  |  Branch (865:45): [True: 38, False: 2.09k]
  |  |  ------------------
  ------------------
 2345|  5.56k|            return hdl.set_error(
 2346|  5.56k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 2347|  5.56k|        }
 2348|  2.09k|        t.hour = h;
 2349|  2.09k|        st.set_hour24(hdl);
 2350|  2.09k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 2996|  7.66k|    {
 2997|  7.66k|#if !SCN_DISABLE_LOCALE
 2998|  7.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (2998:13): [True: 0, False: 7.66k]
  |  Branch (2998:31): [True: 0, False: 0]
  ------------------
 2999|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (2999:22): [True: 0, False: 0]
  ------------------
 3000|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 3001|      0|            }
 3002|      0|            return;
 3003|      0|        }
 3004|  7.66k|#endif
 3005|       |
 3006|  7.66k|        int min = read_classic_unsigned_integer(1, 2);
 3007|  7.66k|        setter::set_min(*this, m_tm, m_st, min);
 3008|  7.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2330|  7.66k|    {
 2331|  7.66k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  |  865|  9.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.65k, False: 2.01k]
  |  |  |  Branch (865:45): [True: 5.64k, False: 2.02k]
  |  |  |  Branch (865:45): [True: 12, False: 2.01k]
  |  |  ------------------
  ------------------
 2332|  5.65k|            return h.set_error({scan_error::invalid_scanned_value,
 2333|  5.65k|                                "Invalid value for minutes"});
 2334|  5.65k|        }
 2335|  2.01k|        t.min = m;
 2336|  2.01k|        st.set_min(h);
 2337|  2.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 3010|  2.98k|    {
 3011|  2.98k|#if !SCN_DISABLE_LOCALE
 3012|  2.98k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3012:13): [True: 0, False: 2.98k]
  |  Branch (3012:31): [True: 0, False: 0]
  ------------------
 3013|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (3013:22): [True: 0, False: 0]
  ------------------
 3014|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 3015|      0|            }
 3016|      0|            return;
 3017|      0|        }
 3018|  2.98k|#endif
 3019|       |
 3020|  2.98k|        int sec = read_classic_unsigned_integer(1, 2);
 3021|  2.98k|        setter::set_sec(*this, m_tm, m_st, sec);
 3022|  2.98k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 2317|  2.98k|    {
 2318|  2.98k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.94k, False: 40]
  |  |  |  Branch (865:45): [True: 2.93k, False: 42]
  |  |  |  Branch (865:45): [True: 2, False: 40]
  |  |  ------------------
  ------------------
 2319|  2.94k|            return h.set_error({scan_error::invalid_scanned_value,
 2320|  2.94k|                                "Invalid value for seconds"});
 2321|  2.94k|        }
 2322|     40|        t.sec = s;
 2323|     40|        st.set_sec(h);
 2324|     40|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 3252|  2.97k|    {
 3253|       |        // %m/%d/%y
 3254|  2.97k|        constexpr CharT slash = '/';
 3255|  2.97k|        on_dec_month();
 3256|  2.97k|        on_text(&slash, &slash + 1);
 3257|  2.97k|        on_day_of_month();
 3258|  2.97k|        on_text(&slash, &slash + 1);
 3259|  2.97k|        on_short_year();
 3260|  2.97k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 3262|  2.96k|    {
 3263|       |        // %Y-%m-%d
 3264|  2.96k|        constexpr CharT dash = '-';
 3265|  2.96k|        on_full_year();
 3266|  2.96k|        on_text(&dash, &dash + 1);
 3267|  2.96k|        on_dec_month();
 3268|  2.96k|        on_text(&dash, &dash + 1);
 3269|  2.96k|        on_day_of_month();
 3270|  2.96k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 3294|  4.68k|    {
 3295|       |        // %H:%M
 3296|  4.68k|        constexpr CharT colon = ':';
 3297|  4.68k|        on_24_hour();
 3298|  4.68k|        on_text(&colon, &colon + 1);
 3299|  4.68k|        on_minute();
 3300|  4.68k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 3302|  2.98k|    {
 3303|       |        // %H:%M:%S
 3304|  2.98k|        constexpr CharT colon = ':';
 3305|  2.98k|        on_24_hour();
 3306|  2.98k|        on_text(&colon, &colon + 1);
 3307|  2.98k|        on_minute();
 3308|  2.98k|        on_text(&colon, &colon + 1);
 3309|  2.98k|        on_second();
 3310|  2.98k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 3341|  1.76k|    {
 3342|  1.76k|        m_st.verify(*this);
 3343|  1.76k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.76k]
  |  Branch (3343:31): [True: 0, False: 0]
  ------------------
 3344|      0|            setter::handle_am_pm(m_tm, m_st);
 3345|      0|        }
 3346|  1.76k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (3346:13): [True: 1.76k, False: 0]
  |  Branch (3346:37): [True: 8, False: 1.75k]
  |  Branch (3346:60): [True: 0, False: 1.75k]
  ------------------
 3347|      8|            setter::handle_short_year_and_century(m_tm, m_st);
 3348|      8|        }
 3349|  1.76k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 3352|  45.0k|    {
 3353|  45.0k|        return m_error;
 3354|  45.0k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 3369|  1.76k|    {
 3370|  1.76k|        return m_begin;
 3371|  1.76k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    749|{
 1462|    749|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    749|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    749|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    749|            return transcode_to_string_impl_to32(src, dest);
 1473|    749|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    749|    SCN_EXPECT(false);
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    749|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    749|{
 1355|    749|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    749|    auto it = src.begin();
 1358|   135k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 134k, False: 749]
  ------------------
 1359|   134k|        auto res = get_next_code_point(
 1360|   134k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   134k|                                                                 src.end()));
 1362|   134k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.81k, False: 126k]
  |  |  ------------------
  ------------------
 1363|  7.81k|            dest.push_back(DestCharT{0xfffd});
 1364|  7.81k|        }
 1365|   126k|        else {
 1366|   126k|            dest.push_back(res.value);
 1367|   126k|        }
 1368|   134k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   134k|    }
 1370|    749|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   149k|{
 1279|   149k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   149k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   149k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.2k, False: 138k]
  |  |  ------------------
  ------------------
 1283|  11.2k|        return {get_start_for_next_code_point(input),
 1284|  11.2k|                detail::invalid_code_point};
 1285|  11.2k|    }
 1286|   138k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 345, False: 138k]
  |  |  ------------------
  ------------------
 1287|    345|        return {input.end(), detail::invalid_code_point};
 1288|    345|    }
 1289|       |
 1290|   138k|    return {input.begin() + len,
 1291|   138k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   138k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  11.2k|{
 1265|  11.2k|    auto it = input.begin();
 1266|   155k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 155k, False: 565]
  ------------------
 1267|   155k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 10.7k, False: 144k]
  ------------------
 1268|  10.7k|            break;
 1269|  10.7k|        }
 1270|   155k|    }
 1271|  11.2k|    return it;
 1272|  11.2k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   170k|{
  458|   170k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   170k|        static_cast<unsigned char>(ch))];
  460|   170k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  76.9k|{
  539|  76.9k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  76.9k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   303k|{
  784|   303k|    return e != eof_error::good;
  785|   303k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  3.29k|{
  798|  3.29k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  3.29k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  3.29k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  71.2k|    {
  304|  71.2k|        ranges::advance(x, n);
  305|  71.2k|        return x;
  306|  71.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  71.2k|    {
  268|  71.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  71.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  71.2k|    {
  151|  71.2k|        i += n;
  152|  71.2k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   186k|    {
  108|   186k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   186k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   186k|    {
   87|   186k|        return s - i;
   88|   186k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  73.4k|    {
  108|  73.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  73.4k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  73.4k|    {
   87|  73.4k|        return s - i;
   88|  73.4k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 2985|  71.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  71.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  71.2k|          m_current(m_range.begin())
 2988|  71.2k|    {
 2989|  71.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   395k|    {
 2993|   395k|        return m_current;
 2994|   395k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 2985|  68.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  68.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  68.1k|          m_current(m_range.begin())
 2988|  68.1k|    {
 2989|  68.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   345k|    {
 2993|   345k|        return m_current;
 2994|   345k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   894k|    {
  763|   894k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   894k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   894k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   232k|        : m_fptr([](storage fn,
  743|   232k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   232k|              cvref<T> obj = *get<T>(fn);
  745|   232k|              if constexpr (std::is_void_v<R>) {
  746|   232k|                  obj(static_cast<decltype(args)>(args)...);
  747|   232k|              }
  748|   232k|              else {
  749|   232k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   232k|              }
  751|   232k|          }),
  752|   232k|          m_storage(std::addressof(f))
  753|   232k|    {
  754|   232k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   447k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   447k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   447k|              else {
  749|   447k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   447k|              }
  751|   447k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   447k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   447k|        else if constexpr (std::is_object_v<T>) {
  688|   447k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   447k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   232k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   232k|        {
  662|   232k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  64.6k|    {
  108|  64.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  64.6k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  64.6k|    {
   94|  64.6k|        iter_difference_t<I> counter{0};
   95|   638k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 574k, False: 64.6k]
  ------------------
   96|   574k|            ++i;
   97|   574k|            ++counter;
   98|   574k|        }
   99|  64.6k|        return counter;
  100|  64.6k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  96.0k|{
  951|  96.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.35k, False: 94.7k]
  |  |  ------------------
  ------------------
  952|  1.35k|        return eof_error::eof;
  953|  1.35k|    }
  954|  94.7k|    return eof_error::good;
  955|  96.0k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   350k|{
  945|   350k|    return is_range_eof(r.begin(), r.end());
  946|   350k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   350k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   350k|    {
  938|   350k|        return begin == end;
  939|   350k|    }
  940|   350k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  71.2k|{
  951|  71.2k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 582, False: 70.6k]
  |  |  ------------------
  ------------------
  952|    582|        return eof_error::eof;
  953|    582|    }
  954|  70.6k|    return eof_error::good;
  955|  71.2k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  71.2k|{
  945|  71.2k|    return is_range_eof(r.begin(), r.end());
  946|  71.2k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  71.2k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  71.2k|    {
  938|  71.2k|        return begin == end;
  939|  71.2k|    }
  940|  71.2k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   142k|    {
 1602|   142k|        return sv;
 1603|   142k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  71.2k|{
 3066|  71.2k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 71.2k, False: 0]
  ------------------
 3067|  71.2k|        auto it = read_while_classic_space(range);
 3068|  71.2k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  71.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 582, False: 70.6k]
  |  |  ------------------
  ------------------
 3070|    582|            return unexpected(e);
 3071|    582|        }
 3072|       |
 3073|  70.6k|        return it;
 3074|  71.2k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  71.2k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  71.2k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  71.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  71.2k|        auto buf = make_contiguous_buffer(range);
 2220|  71.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  71.2k|        return ranges::next(range.begin(),
 2222|  71.2k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  71.2k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  71.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  71.2k|                  ranges::sized_range<Range>) {
 1785|  71.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  71.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  71.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  71.2k|    {
 1589|  71.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  96.0k|    {
  268|  96.0k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  96.0k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  96.0k|    {
  181|  96.0k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 96.0k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  96.0k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  96.0k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  96.0k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  96.0k|        else {
 1055|  96.0k|            return r.begin().contiguous_segment();
 1056|  96.0k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  96.0k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  96.0k|{
 2160|  96.0k|    auto it = range.begin();
 2161|   256k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 254k, False: 1.35k]
  ------------------
 2162|   254k|        const auto val =
 2163|   254k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   254k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   254k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 232k, False: 22.4k]
  |  |  ------------------
  ------------------
 2165|   232k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   232k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   232k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 94.7k, False: 137k]
  ------------------
 2168|  94.7k|                return it;
 2169|  94.7k|            }
 2170|   232k|        }
 2171|   159k|        it = val.iterator;
 2172|   159k|    }
 2173|       |
 2174|  1.35k|    return it;
 2175|  96.0k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   254k|{
 1998|   254k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   254k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   254k|    auto it = range.begin();
 2002|   254k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   254k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 232k]
  |  |  ------------------
  ------------------
 2005|  22.4k|        ++it;
 2006|  22.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  22.4k|        return {it, {}};
 2008|  22.4k|    }
 2009|       |
 2010|   232k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 230k, False: 1.98k]
  ------------------
 2011|   230k|        ++it;
 2012|   230k|        return {it, string_type(1, *range.begin())};
 2013|   230k|    }
 2014|       |
 2015|  1.98k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  1.98k|    return {it, string_type{range.begin(), it}};
 2017|   232k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  22.4k|{
 1265|  22.4k|    auto it = input.begin();
 1266|   298k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 297k, False: 540]
  ------------------
 1267|   297k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 21.8k, False: 275k]
  ------------------
 1268|  21.8k|            break;
 1269|  21.8k|        }
 1270|   297k|    }
 1271|  22.4k|    return it;
 1272|  22.4k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  1.98k|    {
  283|  1.98k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  1.98k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  1.98k|    {
  252|  1.98k|        constexpr iter_difference_t<I> zero{0};
  253|  1.98k|        iter_difference_t<I> counter{0};
  254|       |
  255|  6.73k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 5.08k, False: 1.65k]
  |  Branch (255:30): [True: 4.75k, False: 336]
  ------------------
  256|  4.75k|            ++i;
  257|  4.75k|            ++counter;
  258|  4.75k|        }
  259|       |
  260|  1.98k|        return counter;
  261|  1.98k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   254k|    {
 1989|   254k|        return !codepoint.empty();
 1990|   254k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  96.0k|{
 2181|  96.0k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  96.0k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  96.0k|{
 3066|  96.0k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 96.0k, False: 0]
  ------------------
 3067|  96.0k|        auto it = read_while_classic_space(range);
 3068|  96.0k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  96.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.35k, False: 94.7k]
  |  |  ------------------
  ------------------
 3070|  1.35k|            return unexpected(e);
 3071|  1.35k|        }
 3072|       |
 3073|  94.7k|        return it;
 3074|  96.0k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  96.0k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  96.0k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  96.0k|    else {
 2225|  96.0k|        auto it = range.begin();
 2226|       |
 2227|  96.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  96.0k|            auto seg = get_contiguous_beginning(range);
 2229|  96.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  96.0k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 0, False: 96.0k]
  ------------------
 2231|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|      0|            }
 2233|  96.0k|            ranges::advance(it, seg.size());
 2234|  96.0k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  96.0k|            return detail::is_cp_space(cp);
 2238|  96.0k|        });
 2239|  96.0k|    }
 2240|  96.0k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  96.0k|        : m_fptr([](storage fn,
  743|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.0k|              cvref<T> obj = *get<T>(fn);
  745|  96.0k|              if constexpr (std::is_void_v<R>) {
  746|  96.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.0k|              }
  748|  96.0k|              else {
  749|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.0k|              }
  751|  96.0k|          }),
  752|  96.0k|          m_storage(std::addressof(f))
  753|  96.0k|    {
  754|  96.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   232k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   232k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   232k|              else {
  749|   232k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   232k|              }
  751|   232k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   232k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   232k|        else if constexpr (std::is_object_v<T>) {
  688|   232k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   232k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   232k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   232k|            return detail::is_cp_space(cp);
 2238|   232k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.0k|        {
  662|  96.0k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  5.28k|    {
  108|  5.28k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.28k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  5.28k|    {
   94|  5.28k|        iter_difference_t<I> counter{0};
   95|  39.2k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 33.9k, False: 5.28k]
  ------------------
   96|  33.9k|            ++i;
   97|  33.9k|            ++counter;
   98|  33.9k|        }
   99|  5.28k|        return counter;
  100|  5.28k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  68.1k|{
  951|  68.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 678, False: 67.5k]
  |  |  ------------------
  ------------------
  952|    678|        return eof_error::eof;
  953|    678|    }
  954|  67.5k|    return eof_error::good;
  955|  68.1k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   175k|{
  945|   175k|    return is_range_eof(r.begin(), r.end());
  946|   175k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   175k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   175k|    {
  938|   175k|        return begin == end;
  939|   175k|    }
  940|   175k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   107k|{
 1998|   107k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   107k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   107k|    auto it = range.begin();
 2002|   107k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   107k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   107k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 107k, False: 0]
  ------------------
 2011|   107k|        ++it;
 2012|   107k|        return {it, string_type(1, *range.begin())};
 2013|   107k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   107k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   175k|{
  945|   175k|    return is_range_eof(r.begin(), r.end());
  946|   175k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   175k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   175k|    {
  938|   175k|        return begin == end;
  939|   175k|    }
  940|   175k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   107k|    {
 1989|   107k|        return !codepoint.empty();
 1990|   107k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  68.1k|{
  951|  68.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 678, False: 67.5k]
  |  |  ------------------
  ------------------
  952|    678|        return eof_error::eof;
  953|    678|    }
  954|  67.5k|    return eof_error::good;
  955|  68.1k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  68.1k|{
 3066|  68.1k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 68.1k, False: 0]
  ------------------
 3067|  68.1k|        auto it = read_while_classic_space(range);
 3068|  68.1k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  68.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 678, False: 67.5k]
  |  |  ------------------
  ------------------
 3070|    678|            return unexpected(e);
 3071|    678|        }
 3072|       |
 3073|  67.5k|        return it;
 3074|  68.1k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  68.1k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  68.1k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  68.1k|    else {
 2225|  68.1k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  68.1k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  68.1k|            return detail::is_cp_space(cp);
 2238|  68.1k|        });
 2239|  68.1k|    }
 2240|  68.1k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  68.1k|{
 2181|  68.1k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  68.1k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  68.1k|{
 2160|  68.1k|    auto it = range.begin();
 2161|   108k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 107k, False: 678]
  ------------------
 2162|   107k|        const auto val =
 2163|   107k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   107k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 107k, False: 0]
  |  |  ------------------
  ------------------
 2165|   107k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   107k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   107k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 67.5k, False: 39.9k]
  ------------------
 2168|  67.5k|                return it;
 2169|  67.5k|            }
 2170|   107k|        }
 2171|  39.9k|        it = val.iterator;
 2172|  39.9k|    }
 2173|       |
 2174|    678|    return it;
 2175|  68.1k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  68.1k|        : m_fptr([](storage fn,
  743|  68.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.1k|              cvref<T> obj = *get<T>(fn);
  745|  68.1k|              if constexpr (std::is_void_v<R>) {
  746|  68.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.1k|              }
  748|  68.1k|              else {
  749|  68.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.1k|              }
  751|  68.1k|          }),
  752|  68.1k|          m_storage(std::addressof(f))
  753|  68.1k|    {
  754|  68.1k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   107k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   107k|            return detail::is_cp_space(cp);
 2238|   107k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  68.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  68.1k|        {
  662|  68.1k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  68.1k|{
 2160|  68.1k|    auto it = range.begin();
 2161|   108k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 107k, False: 678]
  ------------------
 2162|   107k|        const auto val =
 2163|   107k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   107k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 107k, False: 0]
  |  |  ------------------
  ------------------
 2165|   107k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   107k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   107k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 67.5k, False: 39.9k]
  ------------------
 2168|  67.5k|                return it;
 2169|  67.5k|            }
 2170|   107k|        }
 2171|  39.9k|        it = val.iterator;
 2172|  39.9k|    }
 2173|       |
 2174|    678|    return it;
 2175|  68.1k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   107k|{
 1998|   107k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   107k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   107k|    auto it = range.begin();
 2002|   107k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   107k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   107k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 107k, False: 0]
  ------------------
 2011|   107k|        ++it;
 2012|   107k|        return {it, string_type(1, *range.begin())};
 2013|   107k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   107k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   107k|    {
 1989|   107k|        return !codepoint.empty();
 1990|   107k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  68.1k|{
 2181|  68.1k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  68.1k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  68.1k|{
 3066|  68.1k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 68.1k, False: 0]
  ------------------
 3067|  68.1k|        auto it = read_while_classic_space(range);
 3068|  68.1k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  68.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 678, False: 67.5k]
  |  |  ------------------
  ------------------
 3070|    678|            return unexpected(e);
 3071|    678|        }
 3072|       |
 3073|  67.5k|        return it;
 3074|  68.1k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  68.1k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  68.1k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  68.1k|    else {
 2225|  68.1k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  68.1k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  68.1k|            return detail::is_cp_space(cp);
 2238|  68.1k|        });
 2239|  68.1k|    }
 2240|  68.1k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  68.1k|        : m_fptr([](storage fn,
  743|  68.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.1k|              cvref<T> obj = *get<T>(fn);
  745|  68.1k|              if constexpr (std::is_void_v<R>) {
  746|  68.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.1k|              }
  748|  68.1k|              else {
  749|  68.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.1k|              }
  751|  68.1k|          }),
  752|  68.1k|          m_storage(std::addressof(f))
  753|  68.1k|    {
  754|  68.1k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   107k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   107k|            return detail::is_cp_space(cp);
 2238|   107k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  68.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  68.1k|        {
  662|  68.1k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 5953|  2.24k|    {
 5954|  2.24k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.24k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.24k|            auto ctx = make_custom_ctx();
 5957|  2.24k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.24k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.24k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 5935|  2.24k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  2.24k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  2.24k|            auto it =
 5940|  2.24k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  2.24k|                    std::basic_string_view<char_type>(range.data(),
 5942|  2.24k|                                                      range.size()),
 5943|  2.24k|                    0};
 5944|  2.24k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  2.24k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  2.24k|    {
 5954|  2.24k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  2.24k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  2.24k|            auto ctx = make_custom_ctx();
 5957|  2.24k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  2.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.24k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.24k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  2.24k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 5935|  2.24k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  2.24k|        else {
 5947|  2.24k|            return {range.begin(), args, loc};
 5948|  2.24k|        }
 5949|  2.24k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  71.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  71.2k|    static_cast<    \
  |  |  935|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  71.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  71.2k|          m_current(m_range.begin())
 2988|  71.2k|    {
 2989|  71.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   212k|    {
 2998|   212k|        return m_range.end();
 2999|   212k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  70.6k|    {
 3013|  70.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  70.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  70.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  70.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 70.6k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  70.6k|        }
 3019|  70.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  70.6k|    static_cast<    \
  |  |  935|  70.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  70.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   141k|    {
 3003|   141k|        return ranges::subrange{begin(), end()};
 3004|   141k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   167k|    {
 6285|   167k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   167k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 62.9k, False: 104k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  62.9k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  62.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  62.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  62.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  62.9k|    }
  ------------------
 6286|   104k|        return {ctx.begin()};
 6287|   167k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3023|  39.7k|    {
 3024|  39.7k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  39.7k|        m_current = m_range.begin() + it.position();
 3026|  39.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3007|   213k|    {
 3008|   213k|        return m_range;
 3009|   213k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3029|  71.2k|    {
 3030|  71.2k|        return ranges::distance(m_range.begin(), begin());
 3031|  71.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 5953|  4.49k|    {
 5954|  4.49k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.49k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.49k|            auto ctx = make_custom_ctx();
 5957|  4.49k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.49k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|      0|                              basic_contiguous_scan_context<char_type>>) {
 5962|      0|                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|       |            else {
 5965|       |                return ctx.begin();
 5966|       |            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.49k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 5935|  4.49k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|  4.49k|                          basic_contiguous_scan_context<char_type>>) {
 5939|  4.49k|            auto it =
 5940|  4.49k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|  4.49k|                    std::basic_string_view<char_type>(range.data(),
 5942|  4.49k|                                                      range.size()),
 5943|  4.49k|                    0};
 5944|  4.49k|            return {it, args, loc};
 5945|       |        }
 5946|       |        else {
 5947|       |            return {range.begin(), args, loc};
 5948|       |        }
 5949|  4.49k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|  68.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  68.1k|    static_cast<    \
  |  |  935|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  68.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  68.1k|          m_current(m_range.begin())
 2988|  68.1k|    {
 2989|  68.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   203k|    {
 2998|   203k|        return m_range.end();
 2999|   203k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  67.5k|    {
 3013|  67.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  67.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  67.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  67.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 67.5k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  67.5k|        }
 3019|  67.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  67.5k|    static_cast<    \
  |  |  935|  67.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  67.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   135k|    {
 3003|   135k|        return ranges::subrange{begin(), end()};
 3004|   135k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6284|   136k|    {
 6285|   136k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|   136k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 125k, False: 10.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|   125k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|   125k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   125k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   125k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|   125k|    }
  ------------------
 6286|  10.5k|        return {ctx.begin()};
 6287|   136k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3023|  5.28k|    {
 3024|  5.28k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  |  930|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3025|  5.28k|        m_current = m_range.begin() + it.position();
 3026|  5.28k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3007|   204k|    {
 3008|   204k|        return m_range;
 3009|   204k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3029|  68.1k|    {
 3030|  68.1k|        return ranges::distance(m_range.begin(), begin());
 3031|  68.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 5953|  4.49k|    {
 5954|  4.49k|        if constexpr (!detail::is_type_disabled<void>) {
 5955|  4.49k|            basic_scan_parse_context<char_type> parse_ctx{{}};
 5956|  4.49k|            auto ctx = make_custom_ctx();
 5957|  4.49k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3930|  4.49k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.49k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.49k|    }
  ------------------
 5958|       |
 5959|       |            if constexpr (std::is_same_v<
 5960|       |                              context_type,
 5961|       |                              basic_contiguous_scan_context<char_type>>) {
 5962|       |                return range.begin() + ctx.begin().position();
 5963|       |            }
 5964|      0|            else {
 5965|      0|                return ctx.begin();
 5966|      0|            }
 5967|       |        }
 5968|       |        else {
 5969|       |            SCN_EXPECT(false);
 5970|       |            SCN_UNREACHABLE;
 5971|       |        }
 5972|  4.49k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 5935|  4.49k|    {
 5936|       |        if constexpr (std::is_same_v<
 5937|       |                          context_type,
 5938|       |                          basic_contiguous_scan_context<char_type>>) {
 5939|       |            auto it =
 5940|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 5941|       |                    std::basic_string_view<char_type>(range.data(),
 5942|       |                                                      range.size()),
 5943|       |                    0};
 5944|       |            return {it, args, loc};
 5945|       |        }
 5946|  4.49k|        else {
 5947|  4.49k|            return {range.begin(), args, loc};
 5948|  4.49k|        }
 5949|  4.49k|    }

LLVMFuzzerTestOneInput:
   58|    749|{
   59|    749|    scn::fuzz::run(data, size);
   60|    749|    return 0;
   61|    749|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    749|{
   35|    749|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 749]
  |  Branch (35:35): [True: 0, False: 749]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    749|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    749|    const auto& f =
   42|    749|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    749|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    749|    do_basic_run(sv, f);
   45|       |
   46|    749|    const auto& wf = get_format_strings<wchar_t>(
   47|    749|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    749|        L"{:%a}", L"{:%b}");
   49|    749|    do_basic_run(wsv_reinterpret, wf);
   50|    749|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 749, False: 0]
  ------------------
   51|    749|        do_basic_run(wsv_transcode, wf);
   52|    749|    }
   53|    749|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    749|{
   27|    749|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    749|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    749|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    749|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    749|{
   27|    749|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    749|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    749|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    749|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.49k|{
   27|  1.49k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.49k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.49k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.49k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.49k|{
   27|  1.49k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.49k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.49k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.49k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    749|{
   53|    749|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    749|    string_buffer.resize(size);
   57|    749|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    749|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    749|    const auto wsv_reinterpret_size =
   62|    749|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 74, False: 675]
  ------------------
   63|    749|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    749|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    749|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    749|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    749|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    749|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    749|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    749|{
  123|    749|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    749|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    749|    buf.resize(sizeof...(Args));
  126|    749|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    749|    return buf;
  128|    749|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    749|{
  109|    749|    if constexpr (std::is_same_v<CharT, char>) {
  110|    749|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    749|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    749|{
  186|    749|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    749|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    749|                                   format_strings);
  189|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  11.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.8k|            auto result = scn::scan<T>(
  140|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.8k|                scn::runtime_format(f));
  142|  11.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 6.62k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  6.62k|            it = result->begin();
  146|  6.62k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  11.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.8k|            auto result = scn::scan<T>(
  155|  11.8k|                global_locale,
  156|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.8k|                scn::runtime_format(f));
  158|  11.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 6.62k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  6.62k|            it = result->begin();
  162|  6.62k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  11.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.8k|            auto result = scn::scan<T>(
  140|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.8k|                scn::runtime_format(f));
  142|  11.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 6.62k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  6.62k|            it = result->begin();
  146|  6.62k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  11.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.8k|            auto result = scn::scan<T>(
  155|  11.8k|                global_locale,
  156|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.8k|                scn::runtime_format(f));
  158|  11.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 6.62k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  6.62k|            it = result->begin();
  162|  6.62k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  11.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.8k|            auto result = scn::scan<T>(
  140|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.8k|                scn::runtime_format(f));
  142|  11.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 6.62k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  6.62k|            it = result->begin();
  146|  6.62k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  11.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.8k|            auto result = scn::scan<T>(
  155|  11.8k|                global_locale,
  156|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.8k|                scn::runtime_format(f));
  158|  11.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 6.62k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  6.62k|            it = result->begin();
  162|  6.62k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 10.7k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  10.7k|            it = result->begin();
  146|  10.7k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 10.7k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  10.7k|            it = result->begin();
  162|  10.7k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 10.7k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  10.7k|            it = result->begin();
  146|  10.7k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 10.7k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  10.7k|            it = result->begin();
  162|  10.7k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    749|{
  134|       |    // Regular scan
  135|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.24k, False: 749]
  ------------------
  136|  5.24k|        auto it = scn::ranges::begin(source);
  137|  16.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  16.0k|            auto result = scn::scan<T>(
  140|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  16.0k|                scn::runtime_format(f));
  142|  16.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.24k, False: 10.7k]
  ------------------
  143|  5.24k|                break;
  144|  5.24k|            }
  145|  10.7k|            it = result->begin();
  146|  10.7k|        }
  147|  5.24k|    }
  148|       |
  149|       |    // scan localized
  150|  5.24k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.24k, False: 749]
  ------------------
  151|  5.24k|        auto it = scn::ranges::begin(source);
  152|  16.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  16.0k|            auto result = scn::scan<T>(
  155|  16.0k|                global_locale,
  156|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  16.0k|                scn::runtime_format(f));
  158|  16.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.24k, False: 10.7k]
  ------------------
  159|  5.24k|                break;
  160|  5.24k|            }
  161|  10.7k|            it = result->begin();
  162|  10.7k|        }
  163|  5.24k|    }
  164|       |
  165|       |    // scan_value
  166|    749|    {
  167|    749|        auto it = scn::ranges::begin(source);
  168|    749|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    749|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|    749|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    749|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    749|            auto result = scn::scan_value<T>(
  171|    749|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    749|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 749, False: 0]
  ------------------
  173|    749|                break;
  174|    749|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    749|    }
  178|    749|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    749|{
   91|    749|    using char_type = ranges::range_value_t<Source>;
   92|    749|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    749|    deque.clear();
   94|    749|    std::copy(ranges::begin(source), ranges::end(source),
   95|    749|              std::back_inserter(deque));
   96|    749|    return deque;
   97|    749|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    749|{
   80|    749|    if constexpr (std::is_same_v<CharT, char>) {
   81|    749|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    749|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    749|{
  123|    749|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    749|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    749|    buf.resize(sizeof...(Args));
  126|    749|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    749|    return buf;
  128|    749|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    749|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    749|    else {
  113|    749|        return wformat_string_view_buffer;
  114|    749|    }
  115|    749|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.49k|{
  186|  1.49k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.49k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.49k|                                   format_strings);
  189|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.49k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.49k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  11.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.3k|            auto result = scn::scan<T>(
  140|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  11.3k|                scn::runtime_format(f));
  142|  11.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 880]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|    880|            it = result->begin();
  146|    880|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.49k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  11.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  11.3k|            auto result = scn::scan<T>(
  155|  11.3k|                global_locale,
  156|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  11.3k|                scn::runtime_format(f));
  158|  11.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 880]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|    880|            it = result->begin();
  162|    880|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.49k|    {
  167|  1.49k|        auto it = scn::ranges::begin(source);
  168|  1.49k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.49k|            auto result = scn::scan_value<T>(
  171|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.49k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.49k, False: 0]
  ------------------
  173|  1.49k|                break;
  174|  1.49k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.49k|    }
  178|  1.49k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.49k|{
   91|  1.49k|    using char_type = ranges::range_value_t<Source>;
   92|  1.49k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.49k|    deque.clear();
   94|  1.49k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.49k|              std::back_inserter(deque));
   96|  1.49k|    return deque;
   97|  1.49k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.49k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.49k|    else {
   84|  1.49k|        return wnoncontiguous_buffer;
   85|  1.49k|    }
   86|  1.49k|}

